
test_3_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f8  0800a0f8  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a100  0800a100  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a100  0800a100  0001a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800a108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001c8  0800a2d0  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800a2d0  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033afd  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de2  00000000  00000000  00053cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00057ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002318  00000000  00000000  00059f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a7b  00000000  00000000  0005c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c26e  00000000  00000000  00084ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b13  00000000  00000000  000a0f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199a6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a098  00000000  00000000  00199ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fd8 	.word	0x08009fd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08009fd8 	.word	0x08009fd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fe17 	bl	80061b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f921 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9d1 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f99f 	bl	80008cc <MX_USART2_UART_Init>
  MX_UART4_Init();
 800058e:	f000 f96d 	bl	800086c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_GYRO)==HAL_OK){
 8000592:	2101      	movs	r1, #1
 8000594:	2000      	movs	r0, #0
 8000596:	f005 fa85 	bl	8005aa4 <IKS01A2_MOTION_SENSOR_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <main+0x30>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_GYRO);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2000      	movs	r0, #0
 80005a4:	f005 fb7a 	bl	8005c9c <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO)==HAL_OK){
 80005a8:	2102      	movs	r1, #2
 80005aa:	2001      	movs	r0, #1
 80005ac:	f005 fa7a 	bl	8005aa4 <IKS01A2_MOTION_SENSOR_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <main+0x46>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80005b6:	2102      	movs	r1, #2
 80005b8:	2001      	movs	r0, #1
 80005ba:	f005 fb6f 	bl	8005c9c <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_TEMPERATURE)==HAL_OK){
 80005be:	2101      	movs	r1, #1
 80005c0:	2000      	movs	r0, #0
 80005c2:	f004 ffb3 	bl	800552c <IKS01A2_ENV_SENSOR_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d103      	bne.n	80005d4 <main+0x5c>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_TEMPERATURE);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f005 f86c 	bl	80056ac <IKS01A2_ENV_SENSOR_Enable>
  }
  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_HUMIDITY)==HAL_OK){
 80005d4:	2104      	movs	r1, #4
 80005d6:	2000      	movs	r0, #0
 80005d8:	f004 ffa8 	bl	800552c <IKS01A2_ENV_SENSOR_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d103      	bne.n	80005ea <main+0x72>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_HUMIDITY);
 80005e2:	2104      	movs	r1, #4
 80005e4:	2000      	movs	r0, #0
 80005e6:	f005 f861 	bl	80056ac <IKS01A2_ENV_SENSOR_Enable>
  while (1)
  {



	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 80005ea:	4a69      	ldr	r2, [pc, #420]	; (8000790 <main+0x218>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	2000      	movs	r0, #0
 80005f0:	f005 f89e 	bl	8005730 <IKS01A2_ENV_SENSOR_GetValue>
	  sprintf((char*)buf,"Température : %u\r\n",(unsigned int)data);
 80005f4:	4b66      	ldr	r3, [pc, #408]	; (8000790 <main+0x218>)
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fe:	463b      	mov	r3, r7
 8000600:	ee17 2a90 	vmov	r2, s15
 8000604:	4963      	ldr	r1, [pc, #396]	; (8000794 <main+0x21c>)
 8000606:	4618      	mov	r0, r3
 8000608:	f009 f8b8 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fdde 	bl	80001d0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	4639      	mov	r1, r7
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	485e      	ldr	r0, [pc, #376]	; (8000798 <main+0x220>)
 8000620:	f008 fbac 	bl	8008d7c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f005 fe37 	bl	8006298 <HAL_Delay>


	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_HUMIDITY, &data_humidity);
 800062a:	4a5c      	ldr	r2, [pc, #368]	; (800079c <main+0x224>)
 800062c:	2104      	movs	r1, #4
 800062e:	2000      	movs	r0, #0
 8000630:	f005 f87e 	bl	8005730 <IKS01A2_ENV_SENSOR_GetValue>
	  sprintf((char*)buf,"Humidité : %u\r\n",(unsigned int)data_humidity);
 8000634:	4b59      	ldr	r3, [pc, #356]	; (800079c <main+0x224>)
 8000636:	edd3 7a00 	vldr	s15, [r3]
 800063a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063e:	463b      	mov	r3, r7
 8000640:	ee17 2a90 	vmov	r2, s15
 8000644:	4956      	ldr	r1, [pc, #344]	; (80007a0 <main+0x228>)
 8000646:	4618      	mov	r0, r3
 8000648:	f009 f898 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbe 	bl	80001d0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	4639      	mov	r1, r7
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	484e      	ldr	r0, [pc, #312]	; (8000798 <main+0x220>)
 8000660:	f008 fb8c 	bl	8008d7c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	; 0x64
 8000666:	f005 fe17 	bl	8006298 <HAL_Delay>


	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO, &data_axe_acc);
 800066a:	4a4e      	ldr	r2, [pc, #312]	; (80007a4 <main+0x22c>)
 800066c:	2102      	movs	r1, #2
 800066e:	2001      	movs	r0, #1
 8000670:	f005 fb56 	bl	8005d20 <IKS01A2_MOTION_SENSOR_GetAxes>
	  sprintf((char*)buf,"Accelero : \t x : %u\r\n ",(unsigned int)data_axe_acc.x);
 8000674:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <main+0x22c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	463b      	mov	r3, r7
 800067c:	494a      	ldr	r1, [pc, #296]	; (80007a8 <main+0x230>)
 800067e:	4618      	mov	r0, r3
 8000680:	f009 f87c 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000684:	463b      	mov	r3, r7
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fda2 	bl	80001d0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	4639      	mov	r1, r7
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	4840      	ldr	r0, [pc, #256]	; (8000798 <main+0x220>)
 8000698:	f008 fb70 	bl	8008d7c <HAL_UART_Transmit>

	  sprintf((char*)buf," \t\t y : %u \r\n",(unsigned int)data_axe_acc.y);
 800069c:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <main+0x22c>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	461a      	mov	r2, r3
 80006a2:	463b      	mov	r3, r7
 80006a4:	4941      	ldr	r1, [pc, #260]	; (80007ac <main+0x234>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f009 f868 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80006ac:	463b      	mov	r3, r7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd8e 	bl	80001d0 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4639      	mov	r1, r7
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	4836      	ldr	r0, [pc, #216]	; (8000798 <main+0x220>)
 80006c0:	f008 fb5c 	bl	8008d7c <HAL_UART_Transmit>

	  sprintf((char*)buf,"\t\t z : %u \r\n",(unsigned int)data_axe_acc.z);
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <main+0x22c>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	461a      	mov	r2, r3
 80006ca:	463b      	mov	r3, r7
 80006cc:	4938      	ldr	r1, [pc, #224]	; (80007b0 <main+0x238>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f009 f854 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80006d4:	463b      	mov	r3, r7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd7a 	bl	80001d0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4639      	mov	r1, r7
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	482c      	ldr	r0, [pc, #176]	; (8000798 <main+0x220>)
 80006e8:	f008 fb48 	bl	8008d7c <HAL_UART_Transmit>
	  HAL_Delay(100);
 80006ec:	2064      	movs	r0, #100	; 0x64
 80006ee:	f005 fdd3 	bl	8006298 <HAL_Delay>



	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0,MOTION_GYRO, &data_axe_gyro);
 80006f2:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <main+0x23c>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	2000      	movs	r0, #0
 80006f8:	f005 fb12 	bl	8005d20 <IKS01A2_MOTION_SENSOR_GetAxes>
	  val = 0xFFFFFFFF - data_axe_gyro.x + 1; //Complement à 2
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <main+0x23c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	425b      	negs	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <main+0x240>)
 8000706:	601a      	str	r2, [r3, #0]
	  sprintf((char*)buf,"gyro \t x : %u\r\n",(unsigned int)val);
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <main+0x240>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	463b      	mov	r3, r7
 8000710:	492a      	ldr	r1, [pc, #168]	; (80007bc <main+0x244>)
 8000712:	4618      	mov	r0, r3
 8000714:	f009 f832 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000718:	463b      	mov	r3, r7
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd58 	bl	80001d0 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	4639      	mov	r1, r7
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	481b      	ldr	r0, [pc, #108]	; (8000798 <main+0x220>)
 800072c:	f008 fb26 	bl	8008d7c <HAL_UART_Transmit>

	  sprintf((char*)buf," \t y : %u\r\n",(unsigned int)data_axe_gyro.y);
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <main+0x23c>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	461a      	mov	r2, r3
 8000736:	463b      	mov	r3, r7
 8000738:	4921      	ldr	r1, [pc, #132]	; (80007c0 <main+0x248>)
 800073a:	4618      	mov	r0, r3
 800073c:	f009 f81e 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000740:	463b      	mov	r3, r7
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd44 	bl	80001d0 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	4639      	mov	r1, r7
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <main+0x220>)
 8000754:	f008 fb12 	bl	8008d7c <HAL_UART_Transmit>

	  sprintf((char*)buf," \t z : %u\r\n\n",(unsigned int)data_axe_gyro.z);
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <main+0x23c>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	461a      	mov	r2, r3
 800075e:	463b      	mov	r3, r7
 8000760:	4918      	ldr	r1, [pc, #96]	; (80007c4 <main+0x24c>)
 8000762:	4618      	mov	r0, r3
 8000764:	f009 f80a 	bl	800977c <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000768:	463b      	mov	r3, r7
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fd30 	bl	80001d0 <strlen>
 8000770:	4603      	mov	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	4639      	mov	r1, r7
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <main+0x220>)
 800077c:	f008 fafe 	bl	8008d7c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000780:	2064      	movs	r0, #100	; 0x64
 8000782:	f005 fd89 	bl	8006298 <HAL_Delay>


	  HAL_Delay(1000);
 8000786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078a:	f005 fd85 	bl	8006298 <HAL_Delay>
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 800078e:	e72c      	b.n	80005ea <main+0x72>
 8000790:	2000034c 	.word	0x2000034c
 8000794:	08009ff0 	.word	0x08009ff0
 8000798:	200003e4 	.word	0x200003e4
 800079c:	20000338 	.word	0x20000338
 80007a0:	0800a004 	.word	0x0800a004
 80007a4:	200003d8 	.word	0x200003d8
 80007a8:	0800a018 	.word	0x0800a018
 80007ac:	0800a030 	.word	0x0800a030
 80007b0:	0800a040 	.word	0x0800a040
 80007b4:	20000340 	.word	0x20000340
 80007b8:	2000033c 	.word	0x2000033c
 80007bc:	0800a050 	.word	0x0800a050
 80007c0:	0800a060 	.word	0x0800a060
 80007c4:	0800a06c 	.word	0x0800a06c

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b096      	sub	sp, #88	; 0x58
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2244      	movs	r2, #68	; 0x44
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f008 ffc8 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ee:	f006 ff79 	bl	80076e4 <HAL_PWREx_ControlVoltageScaling>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f8:	f000 f8f2 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000804:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000816:	230a      	movs	r3, #10
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800081a:	2307      	movs	r3, #7
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4618      	mov	r0, r3
 800082c:	f006 ffb0 	bl	8007790 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000836:	f000 f8d3 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	2104      	movs	r1, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f007 fb82 	bl	8007f5c <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800085e:	f000 f8bf 	bl	80009e0 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3758      	adds	r7, #88	; 0x58
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_UART4_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_UART4_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_UART4_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_UART4_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_UART4_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_UART4_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_UART4_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_UART4_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_UART4_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_UART4_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_UART4_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_UART4_Init+0x58>)
 80008b0:	f008 fa16 	bl	8008ce0 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 f891 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000350 	.word	0x20000350
 80008c8:	40004c00 	.word	0x40004c00

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART2_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000910:	f008 f9e6 	bl	8008ce0 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 f861 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200003e4 	.word	0x200003e4
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_GPIO_Init+0xac>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f006 f829 	bl	80069e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <MX_GPIO_Init+0xb0>)
 80009ae:	f005 fd7d 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f005 fd6e 	bl	80064ac <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000800 	.word	0x48000800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_MspInit+0x44>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_MspInit+0x44>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6613      	str	r3, [r2, #96]	; 0x60
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_MspInit+0x44>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x44>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x44>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6593      	str	r3, [r2, #88]	; 0x58
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x44>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0ae      	sub	sp, #184	; 0xb8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	2288      	movs	r2, #136	; 0x88
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fe89 	bl	800976c <memset>
  if(huart->Instance==UART4)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a42      	ldr	r2, [pc, #264]	; (8000b68 <HAL_UART_MspInit+0x134>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d13c      	bne.n	8000ade <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a64:	2308      	movs	r3, #8
 8000a66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 fc79 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a7c:	f7ff ffb0 	bl	80009e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a80:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8c:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a33      	ldr	r2, [pc, #204]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f005 fce8 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000adc:	e040      	b.n	8000b60 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <HAL_UART_MspInit+0x13c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d13b      	bne.n	8000b60 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 fc37 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000b00:	f7ff ff6e 	bl	80009e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b08:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_UART_MspInit+0x138>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b34:	230c      	movs	r3, #12
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f005 fca6 	bl	80064ac <HAL_GPIO_Init>
}
 8000b60:	bf00      	nop
 8000b62:	37b8      	adds	r7, #184	; 0xb8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40004c00 	.word	0x40004c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40004400 	.word	0x40004400

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f005 fb4a 	bl	8006258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <BSP_I2C1_Init+0x70>)
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <BSP_I2C1_Init+0x74>)
 8000bd6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <BSP_I2C1_Init+0x78>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	4918      	ldr	r1, [pc, #96]	; (8000c40 <BSP_I2C1_Init+0x78>)
 8000be0:	600a      	str	r2, [r1, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d122      	bne.n	8000c2c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000be6:	4814      	ldr	r0, [pc, #80]	; (8000c38 <BSP_I2C1_Init+0x70>)
 8000be8:	f006 fa16 	bl	8007018 <HAL_I2C_GetState>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d11c      	bne.n	8000c2c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <BSP_I2C1_Init+0x70>)
 8000bf4:	f000 f8fe 	bl	8000df4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d116      	bne.n	8000c2c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <BSP_I2C1_Init+0x70>)
 8000c00:	f000 f8b4 	bl	8000d6c <MX_I2C1_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c0a:	f06f 0307 	mvn.w	r3, #7
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	e00c      	b.n	8000c2c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <BSP_I2C1_Init+0x70>)
 8000c16:	f006 fcbf 	bl	8007598 <HAL_I2CEx_ConfigAnalogFilter>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c20:	f06f 0307 	mvn.w	r3, #7
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e001      	b.n	8000c2c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000468 	.word	0x20000468
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	200001e4 	.word	0x200001e4

08000c44 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <BSP_I2C1_DeInit+0x48>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d014      	beq.n	8000c80 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <BSP_I2C1_DeInit+0x48>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <BSP_I2C1_DeInit+0x48>)
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <BSP_I2C1_DeInit+0x48>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10b      	bne.n	8000c80 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <BSP_I2C1_DeInit+0x4c>)
 8000c6a:	f000 f909 	bl	8000e80 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <BSP_I2C1_DeInit+0x4c>)
 8000c70:	f005 ff61 	bl	8006b36 <HAL_I2C_DeInit>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000c7a:	f06f 0307 	mvn.w	r3, #7
 8000c7e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001e4 	.word	0x200001e4
 8000c90:	20000468 	.word	0x20000468

08000c94 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	60ba      	str	r2, [r7, #8]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	81fb      	strh	r3, [r7, #14]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	81bb      	strh	r3, [r7, #12]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000cae:	89ba      	ldrh	r2, [r7, #12]
 8000cb0:	89f9      	ldrh	r1, [r7, #14]
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <BSP_I2C1_WriteReg+0x60>)
 8000cc4:	f005 ff7a 	bl	8006bbc <HAL_I2C_Mem_Write>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00c      	beq.n	8000ce8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <BSP_I2C1_WriteReg+0x60>)
 8000cd0:	f006 f9b0 	bl	8007034 <HAL_I2C_GetError>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d103      	bne.n	8000ce2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000cda:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e002      	b.n	8000ce8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000ce2:	f06f 0303 	mvn.w	r3, #3
 8000ce6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000ce8:	697b      	ldr	r3, [r7, #20]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000468 	.word	0x20000468

08000cf8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af04      	add	r7, sp, #16
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4603      	mov	r3, r0
 8000d04:	81fb      	strh	r3, [r7, #14]
 8000d06:	460b      	mov	r3, r1
 8000d08:	81bb      	strh	r3, [r7, #12]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d12:	89ba      	ldrh	r2, [r7, #12]
 8000d14:	89f9      	ldrh	r1, [r7, #14]
 8000d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <BSP_I2C1_ReadReg+0x60>)
 8000d28:	f006 f85c 	bl	8006de4 <HAL_I2C_Mem_Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <BSP_I2C1_ReadReg+0x60>)
 8000d34:	f006 f97e 	bl	8007034 <HAL_I2C_GetError>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d103      	bne.n	8000d46 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d3e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e002      	b.n	8000d4c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d46:	f06f 0303 	mvn.w	r3, #3
 8000d4a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d4c:	697b      	ldr	r3, [r7, #20]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000468 	.word	0x20000468

08000d5c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d60:	f005 fa8e 	bl	8006280 <HAL_GetTick>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <MX_I2C1_Init+0x80>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <MX_I2C1_Init+0x84>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f005 fe32 	bl	8006a18 <HAL_I2C_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f006 fbe9 	bl	8007598 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f006 fc2b 	bl	800762e <HAL_I2CEx_ConfigDigitalFilter>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005400 	.word	0x40005400
 8000df0:	10909cec 	.word	0x10909cec

08000df4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <I2C1_MspInit+0x84>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <I2C1_MspInit+0x84>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <I2C1_MspInit+0x84>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1a:	2312      	movs	r3, #18
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e26:	2304      	movs	r3, #4
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4812      	ldr	r0, [pc, #72]	; (8000e7c <I2C1_MspInit+0x88>)
 8000e32:	f005 fb3b 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <I2C1_MspInit+0x88>)
 8000e54:	f005 fb2a 	bl	80064ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <I2C1_MspInit+0x84>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <I2C1_MspInit+0x84>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e62:	6593      	str	r3, [r2, #88]	; 0x58
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <I2C1_MspInit+0x84>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	48000400 	.word	0x48000400

08000e80 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <I2C1_MspDeInit+0x30>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <I2C1_MspDeInit+0x30>)
 8000e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e92:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <I2C1_MspDeInit+0x34>)
 8000e9a:	f005 fcb1 	bl	8006800 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <I2C1_MspDeInit+0x34>)
 8000ea4:	f005 fcac 	bl	8006800 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f008 fc16 	bl	8009718 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20018000 	.word	0x20018000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	200001e8 	.word	0x200001e8
 8000f20:	200004e0 	.word	0x200004e0

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	; (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	; (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f008 fbd5 	bl	8009724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fafd 	bl	8000578 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000f8c:	0800a108 	.word	0x0800a108
  ldr r2, =_sbss
 8000f90:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000f94:	200004dc 	.word	0x200004dc

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d103      	bne.n	8000fb4 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e030      	b.n	8001016 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	7b1a      	ldrb	r2, [r3, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	695a      	ldr	r2, [r3, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <HTS221_RegisterBusIO+0x84>)
 8000ff0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HTS221_RegisterBusIO+0x88>)
 8000ff6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4798      	blx	r3
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	e002      	b.n	8001016 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08001653 	.word	0x08001653
 8001024:	080016b5 	.word	0x080016b5

08001028 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001036:	2b00      	cmp	r3, #0
 8001038:	d108      	bne.n	800104c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 faa4 	bl	8001588 <HTS221_Initialize>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e004      	b.n	8001056 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800106c:	2b01      	cmp	r3, #1
 800106e:	d111      	bne.n	8001094 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f878 	bl	8001166 <HTS221_HUM_Disable>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	e00d      	b.n	800109e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f95f 	bl	8001346 <HTS221_TEMP_Disable>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e004      	b.n	800109e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	331c      	adds	r3, #28
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fc28 	bl	800190c <hts221_device_id_get>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e000      	b.n	80010ca <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HTS221_GetCapabilities+0x44>)
 80010fa:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HTS221_GetCapabilities+0x44>)
 8001100:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	41480000 	.word	0x41480000

0800111c <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e015      	b.n	800115e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10b      	bne.n	8001154 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	331c      	adds	r3, #28
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fbf3 	bl	800192e <hts221_power_on_set>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e004      	b.n	800115e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	e015      	b.n	80011a8 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	331c      	adds	r3, #28
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fbce 	bl	800192e <hts221_power_on_set>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	e004      	b.n	80011a8 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f96f 	bl	80014a0 <HTS221_GetOutputDataRate>
 80011c2:	4603      	mov	r3, r0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80011d8:	ed97 0a00 	vldr	s0, [r7]
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f9a3 	bl	8001528 <HTS221_SetOutputDataRate>
 80011e2:	4603      	mov	r3, r0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	331c      	adds	r3, #28
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fc58 	bl	8001ab6 <hts221_hum_adc_point_0_get>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	e06b      	b.n	80012ea <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f103 021c 	add.w	r2, r3, #28
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	3304      	adds	r3, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4610      	mov	r0, r2
 8001222:	f000 fbaa 	bl	800197a <hts221_hum_rh_point_0_get>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e05b      	b.n	80012ea <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f103 021c 	add.w	r2, r3, #28
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	3308      	adds	r3, #8
 800123e:	4619      	mov	r1, r3
 8001240:	4610      	mov	r0, r2
 8001242:	f000 fc5c 	bl	8001afe <hts221_hum_adc_point_1_get>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	e04b      	b.n	80012ea <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f103 021c 	add.w	r2, r3, #28
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	330c      	adds	r3, #12
 800125e:	4619      	mov	r1, r3
 8001260:	4610      	mov	r0, r2
 8001262:	f000 fba8 	bl	80019b6 <hts221_hum_rh_point_1_get>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	e03b      	b.n	80012ea <HTS221_HUM_GetHumidity+0xfe>
 8001272:	2300      	movs	r3, #0
 8001274:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	331c      	adds	r3, #28
 800127a:	f107 021c 	add.w	r2, r7, #28
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fafd 	bl	8001880 <hts221_humidity_raw_get>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	e02b      	b.n	80012ea <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001292:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f99a 	bl	80015e0 <Linear_Interpolation>
 80012ac:	eef0 7a40 	vmov.f32	s15, s0
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	d503      	bpl.n	80012ce <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012f4 <HTS221_HUM_GetHumidity+0x108>
 80012d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	dd02      	ble.n	80012e8 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HTS221_HUM_GetHumidity+0x10c>)
 80012e6:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	42c80000 	.word	0x42c80000
 80012f8:	42c80000 	.word	0x42c80000

080012fc <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e015      	b.n	800133e <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10b      	bne.n	8001334 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	331c      	adds	r3, #28
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fb03 	bl	800192e <hts221_power_on_set>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e004      	b.n	800133e <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	e015      	b.n	8001388 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10b      	bne.n	800137e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	331c      	adds	r3, #28
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fade 	bl	800192e <hts221_power_on_set>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	e004      	b.n	8001388 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f87f 	bl	80014a0 <HTS221_GetOutputDataRate>
 80013a2:	4603      	mov	r3, r0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80013b8:	ed97 0a00 	vldr	s0, [r7]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f8b3 	bl	8001528 <HTS221_SetOutputDataRate>
 80013c2:	4603      	mov	r3, r0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	331c      	adds	r3, #28
 80013da:	f107 020c 	add.w	r2, r7, #12
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fbb0 	bl	8001b46 <hts221_temp_adc_point_0_get>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	e052      	b.n	8001498 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f103 021c 	add.w	r2, r3, #28
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	3304      	adds	r3, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4610      	mov	r0, r2
 8001402:	f000 faf6 	bl	80019f2 <hts221_temp_deg_point_0_get>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	e042      	b.n	8001498 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f103 021c 	add.w	r2, r3, #28
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	3308      	adds	r3, #8
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f000 fbb4 	bl	8001b8e <hts221_temp_adc_point_1_get>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	e032      	b.n	8001498 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f103 021c 	add.w	r2, r3, #28
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	330c      	adds	r3, #12
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f000 fb07 	bl	8001a54 <hts221_temp_deg_point_1_get>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	e022      	b.n	8001498 <HTS221_TEMP_GetTemperature+0xcc>
 8001452:	2300      	movs	r3, #0
 8001454:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	331c      	adds	r3, #28
 800145a:	f107 021c 	add.w	r2, r7, #28
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fa30 	bl	80018c6 <hts221_temperature_raw_get>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	e012      	b.n	8001498 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001472:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f8aa 	bl	80015e0 <Linear_Interpolation>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	331c      	adds	r3, #28
 80014b2:	f107 020b 	add.w	r2, r7, #11
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f983 	bl	80017c4 <hts221_data_rate_get>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	e025      	b.n	8001516 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80014ca:	7afb      	ldrb	r3, [r7, #11]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d81d      	bhi.n	800150c <HTS221_GetOutputDataRate+0x6c>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <HTS221_GetOutputDataRate+0x38>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	080014f3 	.word	0x080014f3
 80014e0:	080014fd 	.word	0x080014fd
 80014e4:	08001505 	.word	0x08001505
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
      break;
 80014f0:	e010      	b.n	8001514 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014f8:	601a      	str	r2, [r3, #0]
      break;
 80014fa:	e00b      	b.n	8001514 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HTS221_GetOutputDataRate+0x80>)
 8001500:	601a      	str	r2, [r3, #0]
      break;
 8001502:	e007      	b.n	8001514 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HTS221_GetOutputDataRate+0x84>)
 8001508:	601a      	str	r2, [r3, #0]
      break;
 800150a:	e003      	b.n	8001514 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	60fb      	str	r3, [r7, #12]
      break;
 8001512:	bf00      	nop
  }

  return ret;
 8001514:	68fb      	ldr	r3, [r7, #12]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40e00000 	.word	0x40e00000
 8001524:	41480000 	.word	0x41480000

08001528 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001534:	edd7 7a00 	vldr	s15, [r7]
 8001538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d801      	bhi.n	800154a <HTS221_SetOutputDataRate+0x22>
 8001546:	2301      	movs	r3, #1
 8001548:	e00b      	b.n	8001562 <HTS221_SetOutputDataRate+0x3a>
 800154a:	edd7 7a00 	vldr	s15, [r7]
 800154e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	d801      	bhi.n	8001560 <HTS221_SetOutputDataRate+0x38>
 800155c:	2302      	movs	r3, #2
 800155e:	e000      	b.n	8001562 <HTS221_SetOutputDataRate+0x3a>
 8001560:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001562:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	331c      	adds	r3, #28
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f902 	bl	8001776 <hts221_data_rate_set>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	e000      	b.n	8001580 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	331c      	adds	r3, #28
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f9c9 	bl	800192e <hts221_power_on_set>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e017      	b.n	80015d8 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	331c      	adds	r3, #28
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f940 	bl	8001834 <hts221_block_data_update_set>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e00b      	b.n	80015d8 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80015c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffaf 	bl	8001528 <HTS221_SetOutputDataRate>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	e000      	b.n	80015d8 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fc:	edd7 7a00 	vldr	s15, [r7]
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	edd3 6a02 	vldr	s13, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001610:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	ed93 6a00 	vldr	s12, [r3]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001620:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001624:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800163c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001640:	eef0 7a66 	vmov.f32	s15, s13
}
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b087      	sub	sp, #28
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	461a      	mov	r2, r3
 800165e:	460b      	mov	r3, r1
 8001660:	72fb      	strb	r3, [r7, #11]
 8001662:	4613      	mov	r3, r2
 8001664:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10e      	bne.n	8001690 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	695c      	ldr	r4, [r3, #20]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	7b1b      	ldrb	r3, [r3, #12]
 800167a:	b298      	uxth	r0, r3
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b299      	uxth	r1, r3
 8001686:	893b      	ldrh	r3, [r7, #8]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	47a0      	blx	r4
 800168c:	4603      	mov	r3, r0
 800168e:	e00d      	b.n	80016ac <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	695c      	ldr	r4, [r3, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	b298      	uxth	r0, r3
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	b299      	uxth	r1, r3
 80016a4:	893b      	ldrh	r3, [r7, #8]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	47a0      	blx	r4
 80016aa:	4603      	mov	r3, r0
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	460b      	mov	r3, r1
 80016c2:	72fb      	strb	r3, [r7, #11]
 80016c4:	4613      	mov	r3, r2
 80016c6:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10e      	bne.n	80016f2 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	691c      	ldr	r4, [r3, #16]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	7b1b      	ldrb	r3, [r3, #12]
 80016dc:	b298      	uxth	r0, r3
 80016de:	7afb      	ldrb	r3, [r7, #11]
 80016e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	b299      	uxth	r1, r3
 80016e8:	893b      	ldrh	r3, [r7, #8]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	47a0      	blx	r4
 80016ee:	4603      	mov	r3, r0
 80016f0:	e00d      	b.n	800170e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	691c      	ldr	r4, [r3, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	7b1b      	ldrb	r3, [r3, #12]
 80016fa:	b298      	uxth	r0, r3
 80016fc:	7afb      	ldrb	r3, [r7, #11]
 80016fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001702:	b2db      	uxtb	r3, r3
 8001704:	b299      	uxth	r1, r3
 8001706:	893b      	ldrh	r3, [r7, #8]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	47a0      	blx	r4
 800170c:	4603      	mov	r3, r0
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}

08001716 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8001716:	b590      	push	{r4, r7, lr}
 8001718:	b087      	sub	sp, #28
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	461a      	mov	r2, r3
 8001722:	460b      	mov	r3, r1
 8001724:	72fb      	strb	r3, [r7, #11]
 8001726:	4613      	mov	r3, r2
 8001728:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685c      	ldr	r4, [r3, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6898      	ldr	r0, [r3, #8]
 8001732:	893b      	ldrh	r3, [r7, #8]
 8001734:	7af9      	ldrb	r1, [r7, #11]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	47a0      	blx	r4
 800173a:	6178      	str	r0, [r7, #20]
  return ret;
 800173c:	697b      	ldr	r3, [r7, #20]
}
 800173e:	4618      	mov	r0, r3
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd90      	pop	{r4, r7, pc}

08001746 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001746:	b590      	push	{r4, r7, lr}
 8001748:	b087      	sub	sp, #28
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	461a      	mov	r2, r3
 8001752:	460b      	mov	r3, r1
 8001754:	72fb      	strb	r3, [r7, #11]
 8001756:	4613      	mov	r3, r2
 8001758:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681c      	ldr	r4, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6898      	ldr	r0, [r3, #8]
 8001762:	893b      	ldrh	r3, [r7, #8]
 8001764:	7af9      	ldrb	r1, [r7, #11]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	47a0      	blx	r4
 800176a:	6178      	str	r0, [r7, #20]
  return ret;
 800176c:	697b      	ldr	r3, [r7, #20]
}
 800176e:	4618      	mov	r0, r3
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}

08001776 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001782:	f107 0208 	add.w	r2, r7, #8
 8001786:	2301      	movs	r3, #1
 8001788:	2120      	movs	r1, #32
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffc3 	bl	8001716 <hts221_read_reg>
 8001790:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10f      	bne.n	80017b8 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	7a3b      	ldrb	r3, [r7, #8]
 80017a2:	f362 0301 	bfi	r3, r2, #0, #2
 80017a6:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017a8:	f107 0208 	add.w	r2, r7, #8
 80017ac:	2301      	movs	r3, #1
 80017ae:	2120      	movs	r1, #32
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ffc8 	bl	8001746 <hts221_write_reg>
 80017b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017ce:	f107 0208 	add.w	r2, r7, #8
 80017d2:	2301      	movs	r3, #1
 80017d4:	2120      	movs	r1, #32
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ff9d 	bl	8001716 <hts221_read_reg>
 80017dc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80017de:	7a3b      	ldrb	r3, [r7, #8]
 80017e0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d81a      	bhi.n	8001820 <hts221_data_rate_get+0x5c>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <hts221_data_rate_get+0x2c>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	08001801 	.word	0x08001801
 80017f4:	08001809 	.word	0x08001809
 80017f8:	08001811 	.word	0x08001811
 80017fc:	08001819 	.word	0x08001819
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e00f      	b.n	8001828 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e00b      	b.n	8001828 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e007      	b.n	8001828 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2203      	movs	r2, #3
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e003      	b.n	8001828 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2204      	movs	r2, #4
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	bf00      	nop
  }

  return ret;
 8001828:	68fb      	ldr	r3, [r7, #12]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop

08001834 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001840:	f107 0208 	add.w	r2, r7, #8
 8001844:	2301      	movs	r3, #1
 8001846:	2120      	movs	r1, #32
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff64 	bl	8001716 <hts221_read_reg>
 800184e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	7a3b      	ldrb	r3, [r7, #8]
 8001860:	f362 0382 	bfi	r3, r2, #2, #1
 8001864:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001866:	f107 0208 	add.w	r2, r7, #8
 800186a:	2301      	movs	r3, #1
 800186c:	2120      	movs	r1, #32
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff69 	bl	8001746 <hts221_write_reg>
 8001874:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800188a:	f107 0208 	add.w	r2, r7, #8
 800188e:	2302      	movs	r3, #2
 8001890:	2128      	movs	r1, #40	; 0x28
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff3f 	bl	8001716 <hts221_read_reg>
 8001898:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800189a:	7a7b      	ldrb	r3, [r7, #9]
 800189c:	b21a      	sxth	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	7a3b      	ldrb	r3, [r7, #8]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	801a      	strh	r2, [r3, #0]
  return ret;
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80018d0:	f107 0208 	add.w	r2, r7, #8
 80018d4:	2302      	movs	r3, #2
 80018d6:	212a      	movs	r1, #42	; 0x2a
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff1c 	bl	8001716 <hts221_read_reg>
 80018de:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80018e0:	7a7b      	ldrb	r3, [r7, #9]
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	7a3b      	ldrb	r3, [r7, #8]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	801a      	strh	r2, [r3, #0]
  return ret;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001916:	2301      	movs	r3, #1
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	210f      	movs	r1, #15
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fefa 	bl	8001716 <hts221_read_reg>
 8001922:	60f8      	str	r0, [r7, #12]
  return ret;
 8001924:	68fb      	ldr	r3, [r7, #12]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800193a:	f107 0208 	add.w	r2, r7, #8
 800193e:	2301      	movs	r3, #1
 8001940:	2120      	movs	r1, #32
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fee7 	bl	8001716 <hts221_read_reg>
 8001948:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10f      	bne.n	8001970 <hts221_power_on_set+0x42>
    reg.pd = val;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	7a3b      	ldrb	r3, [r7, #8]
 800195a:	f362 13c7 	bfi	r3, r2, #7, #1
 800195e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001960:	f107 0208 	add.w	r2, r7, #8
 8001964:	2301      	movs	r3, #1
 8001966:	2120      	movs	r1, #32
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff feec 	bl	8001746 <hts221_write_reg>
 800196e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001984:	f107 020b 	add.w	r2, r7, #11
 8001988:	2301      	movs	r3, #1
 800198a:	2130      	movs	r1, #48	; 0x30
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fec2 	bl	8001716 <hts221_read_reg>
 8001992:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80019c0:	f107 020b 	add.w	r2, r7, #11
 80019c4:	2301      	movs	r3, #1
 80019c6:	2131      	movs	r1, #49	; 0x31
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fea4 	bl	8001716 <hts221_read_reg>
 80019ce:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80019fc:	f107 020f 	add.w	r2, r7, #15
 8001a00:	2301      	movs	r3, #1
 8001a02:	2132      	movs	r1, #50	; 0x32
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fe86 	bl	8001716 <hts221_read_reg>
 8001a0a:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d11b      	bne.n	8001a4a <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001a12:	f107 0210 	add.w	r2, r7, #16
 8001a16:	2301      	movs	r3, #1
 8001a18:	2135      	movs	r1, #53	; 0x35
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fe7b 	bl	8001716 <hts221_read_reg>
 8001a20:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001a22:	7c3b      	ldrb	r3, [r7, #16]
 8001a24:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001a2c:	7cfb      	ldrb	r3, [r7, #19]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	4413      	add	r3, r2
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001a4a:	697b      	ldr	r3, [r7, #20]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001a5e:	f107 020f 	add.w	r2, r7, #15
 8001a62:	2301      	movs	r3, #1
 8001a64:	2133      	movs	r1, #51	; 0x33
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fe55 	bl	8001716 <hts221_read_reg>
 8001a6c:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11b      	bne.n	8001aac <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001a74:	f107 0210 	add.w	r2, r7, #16
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2135      	movs	r1, #53	; 0x35
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fe4a 	bl	8001716 <hts221_read_reg>
 8001a82:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001a84:	7c3b      	ldrb	r3, [r7, #16]
 8001a86:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	4413      	add	r3, r2
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001aac:	697b      	ldr	r3, [r7, #20]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001ac0:	f107 0208 	add.w	r2, r7, #8
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	2136      	movs	r1, #54	; 0x36
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fe24 	bl	8001716 <hts221_read_reg>
 8001ace:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001ad0:	7a7b      	ldrb	r3, [r7, #9]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	7a3b      	ldrb	r3, [r7, #8]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001ae2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001af4:	68fb      	ldr	r3, [r7, #12]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001b08:	f107 0208 	add.w	r2, r7, #8
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	213a      	movs	r1, #58	; 0x3a
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fe00 	bl	8001716 <hts221_read_reg>
 8001b16:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001b18:	7a7b      	ldrb	r3, [r7, #9]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	7a3b      	ldrb	r3, [r7, #8]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001b2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001b50:	f107 0208 	add.w	r2, r7, #8
 8001b54:	2302      	movs	r3, #2
 8001b56:	213c      	movs	r1, #60	; 0x3c
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fddc 	bl	8001716 <hts221_read_reg>
 8001b5e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001b60:	7a7b      	ldrb	r3, [r7, #9]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	7a3b      	ldrb	r3, [r7, #8]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001b72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001b98:	f107 0208 	add.w	r2, r7, #8
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	213e      	movs	r1, #62	; 0x3e
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fdb8 	bl	8001716 <hts221_read_reg>
 8001ba6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001ba8:	7a7b      	ldrb	r3, [r7, #9]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	7a3b      	ldrb	r3, [r7, #8]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001bba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e04d      	b.n	8001c90 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	7b1a      	ldrb	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <LPS22HB_RegisterBusIO+0xc4>)
 8001c30:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <LPS22HB_RegisterBusIO+0xc8>)
 8001c36:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d103      	bne.n	8001c4e <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e020      	b.n	8001c90 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4798      	blx	r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e016      	b.n	8001c90 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d112      	bne.n	8001c90 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001c74:	2301      	movs	r3, #1
 8001c76:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f9df 	bl	8002042 <LPS22HB_Write_Reg>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	08002303 	.word	0x08002303
 8001ca0:	08002389 	.word	0x08002389

08001ca4 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d108      	bne.n	8001cc8 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 faca 	bl	8002250 <LPS22HB_Initialize>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e004      	b.n	8001cd2 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d111      	bne.n	8001d10 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f877 	bl	8001de0 <LPS22HB_PRESS_Disable>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfc:	e00d      	b.n	8001d1a <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f918 	bl	8001f34 <LPS22HB_TEMP_Disable>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e004      	b.n	8001d1a <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	331c      	adds	r3, #28
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fcd0 	bl	80026d8 <lps22hb_device_id_get>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e000      	b.n	8001d46 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <LPS22HB_GetCapabilities+0x44>)
 8001d7e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <LPS22HB_GetCapabilities+0x44>)
 8001d84:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	42960000 	.word	0x42960000

08001d98 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e014      	b.n	8001dd8 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 021c 	add.w	r2, r3, #28
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f000 fbd5 	bl	800256c <lps22hb_data_rate_set>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	e004      	b.n	8001dd8 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e024      	b.n	8001e40 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11a      	bne.n	8001e36 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f103 021c 	add.w	r2, r3, #28
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	332b      	adds	r3, #43	; 0x2b
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f000 fbd3 	bl	80025b8 <lps22hb_data_rate_get>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	e010      	b.n	8001e40 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	331c      	adds	r3, #28
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fba1 	bl	800256c <lps22hb_data_rate_set>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	e004      	b.n	8001e40 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001e52:	6839      	ldr	r1, [r7, #0]
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f90f 	bl	8002078 <LPS22HB_GetOutputDataRate>
 8001e5a:	4603      	mov	r3, r0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e7a:	ed97 0a00 	vldr	s0, [r7]
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f94e 	bl	8002120 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001e84:	4603      	mov	r3, r0
 8001e86:	e005      	b.n	8001e94 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e88:	ed97 0a00 	vldr	s0, [r7]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f99f 	bl	80021d0 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001e92:	4603      	mov	r3, r0
  }
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	2204      	movs	r2, #4
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f007 fc5c 	bl	800976c <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	331c      	adds	r3, #28
 8001eb8:	f107 020c 	add.w	r2, r7, #12
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fbbe 	bl	8002640 <lps22hb_pressure_raw_get>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e009      	b.n	8001ee4 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 facc 	bl	8002470 <lps22hb_from_lsb_to_hpa>
 8001ed8:	eef0 7a40 	vmov.f32	s15, s0
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e014      	b.n	8001f2c <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 021c 	add.w	r2, r3, #28
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4610      	mov	r0, r2
 8001f12:	f000 fb2b 	bl	800256c <lps22hb_data_rate_set>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f20:	e004      	b.n	8001f2c <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e024      	b.n	8001f94 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d11a      	bne.n	8001f8a <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 021c 	add.w	r2, r3, #28
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	332b      	adds	r3, #43	; 0x2b
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4610      	mov	r0, r2
 8001f62:	f000 fb29 	bl	80025b8 <lps22hb_data_rate_get>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	e010      	b.n	8001f94 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	331c      	adds	r3, #28
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 faf7 	bl	800256c <lps22hb_data_rate_set>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	e004      	b.n	8001f94 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f865 	bl	8002078 <LPS22HB_GetOutputDataRate>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001fce:	ed97 0a00 	vldr	s0, [r7]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8a4 	bl	8002120 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	e005      	b.n	8001fe8 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001fdc:	ed97 0a00 	vldr	s0, [r7]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8f5 	bl	80021d0 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001fe6:	4603      	mov	r3, r0
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2202      	movs	r2, #2
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f007 fbb2 	bl	800976c <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	331c      	adds	r3, #28
 800200c:	f107 020c 	add.w	r2, r7, #12
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fb3d 	bl	8002692 <lps22hb_temperature_raw_get>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e00a      	b.n	800203a <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8002024:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fa39 	bl	80024a0 <lps22hb_from_lsb_to_degc>
 800202e:	eef0 7a40 	vmov.f32	s15, s0
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
 800204e:	4613      	mov	r3, r2
 8002050:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f103 001c 	add.w	r0, r3, #28
 8002058:	1cba      	adds	r2, r7, #2
 800205a:	78f9      	ldrb	r1, [r7, #3]
 800205c:	2301      	movs	r3, #1
 800205e:	f000 f9ee 	bl	800243e <lps22hb_write_reg>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	e000      	b.n	8002070 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	331c      	adds	r3, #28
 800208a:	f107 020b 	add.w	r2, r7, #11
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fa91 	bl	80025b8 <lps22hb_data_rate_get>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	e031      	b.n	8002106 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 80020a2:	7afb      	ldrb	r3, [r7, #11]
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d829      	bhi.n	80020fc <LPS22HB_GetOutputDataRate+0x84>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <LPS22HB_GetOutputDataRate+0x38>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c9 	.word	0x080020c9
 80020b4:	080020d3 	.word	0x080020d3
 80020b8:	080020dd 	.word	0x080020dd
 80020bc:	080020e5 	.word	0x080020e5
 80020c0:	080020ed 	.word	0x080020ed
 80020c4:	080020f5 	.word	0x080020f5
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
      break;
 80020d0:	e018      	b.n	8002104 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020d8:	601a      	str	r2, [r3, #0]
      break;
 80020da:	e013      	b.n	8002104 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <LPS22HB_GetOutputDataRate+0x98>)
 80020e0:	601a      	str	r2, [r3, #0]
      break;
 80020e2:	e00f      	b.n	8002104 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <LPS22HB_GetOutputDataRate+0x9c>)
 80020e8:	601a      	str	r2, [r3, #0]
      break;
 80020ea:	e00b      	b.n	8002104 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <LPS22HB_GetOutputDataRate+0xa0>)
 80020f0:	601a      	str	r2, [r3, #0]
      break;
 80020f2:	e007      	b.n	8002104 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <LPS22HB_GetOutputDataRate+0xa4>)
 80020f8:	601a      	str	r2, [r3, #0]
      break;
 80020fa:	e003      	b.n	8002104 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	60fb      	str	r3, [r7, #12]
      break;
 8002102:	bf00      	nop
  }

  return ret;
 8002104:	68fb      	ldr	r3, [r7, #12]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	41200000 	.word	0x41200000
 8002114:	41c80000 	.word	0x41c80000
 8002118:	42480000 	.word	0x42480000
 800211c:	42960000 	.word	0x42960000

08002120 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800212c:	edd7 7a00 	vldr	s15, [r7]
 8002130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	d801      	bhi.n	8002142 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 800213e:	2301      	movs	r3, #1
 8002140:	e021      	b.n	8002186 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002142:	edd7 7a00 	vldr	s15, [r7]
 8002146:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800214a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d801      	bhi.n	8002158 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8002154:	2302      	movs	r3, #2
 8002156:	e016      	b.n	8002186 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002158:	edd7 7a00 	vldr	s15, [r7]
 800215c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	d801      	bhi.n	800216e <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 800216a:	2303      	movs	r3, #3
 800216c:	e00b      	b.n	8002186 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800216e:	edd7 7a00 	vldr	s15, [r7]
 8002172:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80021cc <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d801      	bhi.n	8002184 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8002180:	2304      	movs	r3, #4
 8002182:	e000      	b.n	8002186 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002184:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002186:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	331c      	adds	r3, #28
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f9eb 	bl	800256c <lps22hb_data_rate_set>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	e00f      	b.n	80021c2 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f103 021c 	add.w	r2, r3, #28
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	332b      	adds	r3, #43	; 0x2b
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f000 fa02 	bl	80025b8 <lps22hb_data_rate_get>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e000      	b.n	80021c2 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	42480000 	.word	0x42480000

080021d0 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80021dc:	edd7 7a00 	vldr	s15, [r7]
 80021e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d801      	bhi.n	80021f2 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e021      	b.n	8002236 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80021f2:	edd7 7a00 	vldr	s15, [r7]
 80021f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	d801      	bhi.n	8002208 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8002204:	2302      	movs	r3, #2
 8002206:	e016      	b.n	8002236 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002208:	edd7 7a00 	vldr	s15, [r7]
 800220c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002218:	d801      	bhi.n	800221e <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 800221a:	2303      	movs	r3, #3
 800221c:	e00b      	b.n	8002236 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800221e:	edd7 7a00 	vldr	s15, [r7]
 8002222:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800224c <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8002226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	d801      	bhi.n	8002234 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8002230:	2304      	movs	r3, #4
 8002232:	e000      	b.n	8002236 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002234:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	42480000 	.word	0x42480000

08002250 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	331c      	adds	r3, #28
 800225c:	2101      	movs	r1, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fa4b 	bl	80026fa <lps22hb_low_power_set>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	e044      	b.n	80022fa <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	331c      	adds	r3, #28
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f978 	bl	800256c <lps22hb_data_rate_set>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e038      	b.n	80022fa <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	331c      	adds	r3, #28
 800228c:	2102      	movs	r1, #2
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f946 	bl	8002520 <lps22hb_low_pass_filter_mode_set>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e02c      	b.n	80022fa <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	331c      	adds	r3, #28
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f914 	bl	80024d4 <lps22hb_block_data_update_set>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e020      	b.n	80022fa <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10b      	bne.n	80022d8 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	331c      	adds	r3, #28
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fa3d 	bl	8002746 <lps22hb_auto_add_inc_set>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00e      	beq.n	80022f0 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e010      	b.n	80022fa <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	331c      	adds	r3, #28
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fa31 	bl	8002746 <lps22hb_auto_add_inc_set>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	e004      	b.n	80022fa <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2203      	movs	r2, #3
 80022f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002302:	b590      	push	{r4, r7, lr}
 8002304:	b089      	sub	sp, #36	; 0x24
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	461a      	mov	r2, r3
 800230e:	460b      	mov	r3, r1
 8002310:	72fb      	strb	r3, [r7, #11]
 8002312:	4613      	mov	r3, r2
 8002314:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d121      	bne.n	800236a <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	83fb      	strh	r3, [r7, #30]
 800232a:	e018      	b.n	800235e <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	695c      	ldr	r4, [r3, #20]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	7b1b      	ldrb	r3, [r3, #12]
 8002334:	b298      	uxth	r0, r3
 8002336:	7afb      	ldrb	r3, [r7, #11]
 8002338:	b29a      	uxth	r2, r3
 800233a:	8bfb      	ldrh	r3, [r7, #30]
 800233c:	4413      	add	r3, r2
 800233e:	b299      	uxth	r1, r3
 8002340:	8bfb      	ldrh	r3, [r7, #30]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	441a      	add	r2, r3
 8002346:	2301      	movs	r3, #1
 8002348:	47a0      	blx	r4
 800234a:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	e013      	b.n	8002380 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002358:	8bfb      	ldrh	r3, [r7, #30]
 800235a:	3301      	adds	r3, #1
 800235c:	83fb      	strh	r3, [r7, #30]
 800235e:	8bfa      	ldrh	r2, [r7, #30]
 8002360:	893b      	ldrh	r3, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3e2      	bcc.n	800232c <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	e00a      	b.n	8002380 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	695c      	ldr	r4, [r3, #20]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	7b1b      	ldrb	r3, [r3, #12]
 8002372:	b298      	uxth	r0, r3
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	b299      	uxth	r1, r3
 8002378:	893b      	ldrh	r3, [r7, #8]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	47a0      	blx	r4
 800237e:	4603      	mov	r3, r0
  }
}
 8002380:	4618      	mov	r0, r3
 8002382:	3724      	adds	r7, #36	; 0x24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}

08002388 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	461a      	mov	r2, r3
 8002394:	460b      	mov	r3, r1
 8002396:	72fb      	strb	r3, [r7, #11]
 8002398:	4613      	mov	r3, r2
 800239a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d121      	bne.n	80023f0 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	83fb      	strh	r3, [r7, #30]
 80023b0:	e018      	b.n	80023e4 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	691c      	ldr	r4, [r3, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	7b1b      	ldrb	r3, [r3, #12]
 80023ba:	b298      	uxth	r0, r3
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	8bfb      	ldrh	r3, [r7, #30]
 80023c2:	4413      	add	r3, r2
 80023c4:	b299      	uxth	r1, r3
 80023c6:	8bfb      	ldrh	r3, [r7, #30]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	441a      	add	r2, r3
 80023cc:	2301      	movs	r3, #1
 80023ce:	47a0      	blx	r4
 80023d0:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
 80023dc:	e013      	b.n	8002406 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80023de:	8bfb      	ldrh	r3, [r7, #30]
 80023e0:	3301      	adds	r3, #1
 80023e2:	83fb      	strh	r3, [r7, #30]
 80023e4:	8bfa      	ldrh	r2, [r7, #30]
 80023e6:	893b      	ldrh	r3, [r7, #8]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3e2      	bcc.n	80023b2 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	e00a      	b.n	8002406 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	691c      	ldr	r4, [r3, #16]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	b298      	uxth	r0, r3
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	b299      	uxth	r1, r3
 80023fe:	893b      	ldrh	r3, [r7, #8]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	47a0      	blx	r4
 8002404:	4603      	mov	r3, r0
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}

0800240e <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800240e:	b590      	push	{r4, r7, lr}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	461a      	mov	r2, r3
 800241a:	460b      	mov	r3, r1
 800241c:	72fb      	strb	r3, [r7, #11]
 800241e:	4613      	mov	r3, r2
 8002420:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685c      	ldr	r4, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6898      	ldr	r0, [r3, #8]
 800242a:	893b      	ldrh	r3, [r7, #8]
 800242c:	7af9      	ldrb	r1, [r7, #11]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	47a0      	blx	r4
 8002432:	6178      	str	r0, [r7, #20]
  return ret;
 8002434:	697b      	ldr	r3, [r7, #20]
}
 8002436:	4618      	mov	r0, r3
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}

0800243e <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800243e:	b590      	push	{r4, r7, lr}
 8002440:	b087      	sub	sp, #28
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	461a      	mov	r2, r3
 800244a:	460b      	mov	r3, r1
 800244c:	72fb      	strb	r3, [r7, #11]
 800244e:	4613      	mov	r3, r2
 8002450:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681c      	ldr	r4, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6898      	ldr	r0, [r3, #8]
 800245a:	893b      	ldrh	r3, [r7, #8]
 800245c:	7af9      	ldrb	r1, [r7, #11]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	47a0      	blx	r4
 8002462:	6178      	str	r0, [r7, #20]
  return ret;
 8002464:	697b      	ldr	r3, [r7, #20]
}
 8002466:	4618      	mov	r0, r3
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
	...

08002470 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002482:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800249c <lps22hb_from_lsb_to_hpa+0x2c>
 8002486:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800248a:	eef0 7a66 	vmov.f32	s15, s13
}
 800248e:	eeb0 0a67 	vmov.f32	s0, s15
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	49800000 	.word	0x49800000

080024a0 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80024aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80024d0 <lps22hb_from_lsb_to_degc+0x30>
 80024ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024be:	eef0 7a66 	vmov.f32	s15, s13
}
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	42c80000 	.word	0x42c80000

080024d4 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80024e0:	f107 0208 	add.w	r2, r7, #8
 80024e4:	2301      	movs	r3, #1
 80024e6:	2110      	movs	r1, #16
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff90 	bl	800240e <lps22hb_read_reg>
 80024ee:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	7a3b      	ldrb	r3, [r7, #8]
 8002500:	f362 0341 	bfi	r3, r2, #1, #1
 8002504:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002506:	f107 0208 	add.w	r2, r7, #8
 800250a:	2301      	movs	r3, #1
 800250c:	2110      	movs	r1, #16
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff95 	bl	800243e <lps22hb_write_reg>
 8002514:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800252c:	f107 0208 	add.w	r2, r7, #8
 8002530:	2301      	movs	r3, #1
 8002532:	2110      	movs	r1, #16
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff6a 	bl	800240e <lps22hb_read_reg>
 800253a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	7a3b      	ldrb	r3, [r7, #8]
 800254c:	f362 0383 	bfi	r3, r2, #2, #2
 8002550:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002552:	f107 0208 	add.w	r2, r7, #8
 8002556:	2301      	movs	r3, #1
 8002558:	2110      	movs	r1, #16
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff6f 	bl	800243e <lps22hb_write_reg>
 8002560:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002578:	f107 0208 	add.w	r2, r7, #8
 800257c:	2301      	movs	r3, #1
 800257e:	2110      	movs	r1, #16
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff44 	bl	800240e <lps22hb_read_reg>
 8002586:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	b2da      	uxtb	r2, r3
 8002596:	7a3b      	ldrb	r3, [r7, #8]
 8002598:	f362 1306 	bfi	r3, r2, #4, #3
 800259c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800259e:	f107 0208 	add.w	r2, r7, #8
 80025a2:	2301      	movs	r3, #1
 80025a4:	2110      	movs	r1, #16
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff49 	bl	800243e <lps22hb_write_reg>
 80025ac:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80025c2:	f107 0208 	add.w	r2, r7, #8
 80025c6:	2301      	movs	r3, #1
 80025c8:	2110      	movs	r1, #16
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff1f 	bl	800240e <lps22hb_read_reg>
 80025d0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 80025d2:	7a3b      	ldrb	r3, [r7, #8]
 80025d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d826      	bhi.n	800262c <lps22hb_data_rate_get+0x74>
 80025de:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <lps22hb_data_rate_get+0x2c>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	080025fd 	.word	0x080025fd
 80025e8:	08002605 	.word	0x08002605
 80025ec:	0800260d 	.word	0x0800260d
 80025f0:	08002615 	.word	0x08002615
 80025f4:	0800261d 	.word	0x0800261d
 80025f8:	08002625 	.word	0x08002625
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
      break;
 8002602:	e017      	b.n	8002634 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
      break;
 800260a:	e013      	b.n	8002634 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
      break;
 8002612:	e00f      	b.n	8002634 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
      break;
 800261a:	e00b      	b.n	8002634 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2204      	movs	r2, #4
 8002620:	701a      	strb	r2, [r3, #0]
      break;
 8002622:	e007      	b.n	8002634 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2205      	movs	r2, #5
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	e003      	b.n	8002634 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
      break;
 8002632:	bf00      	nop
  }

  return ret;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop

08002640 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 800264a:	f107 0208 	add.w	r2, r7, #8
 800264e:	2303      	movs	r3, #3
 8002650:	2128      	movs	r1, #40	; 0x28
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fedb 	bl	800240e <lps22hb_read_reg>
 8002658:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800265a:	7abb      	ldrb	r3, [r7, #10]
 800265c:	461a      	mov	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	7a7a      	ldrb	r2, [r7, #9]
 800266a:	441a      	add	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	7a3a      	ldrb	r2, [r7, #8]
 8002678:	441a      	add	r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	601a      	str	r2, [r3, #0]
  return ret;
 8002688:	68fb      	ldr	r3, [r7, #12]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 800269c:	f107 0208 	add.w	r2, r7, #8
 80026a0:	2302      	movs	r3, #2
 80026a2:	212b      	movs	r1, #43	; 0x2b
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff feb2 	bl	800240e <lps22hb_read_reg>
 80026aa:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80026ac:	7a7b      	ldrb	r3, [r7, #9]
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b29a      	uxth	r2, r3
 80026c0:	7a3b      	ldrb	r3, [r7, #8]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	801a      	strh	r2, [r3, #0]
  return ret;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 80026e2:	2301      	movs	r3, #1
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	210f      	movs	r1, #15
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fe90 	bl	800240e <lps22hb_read_reg>
 80026ee:	60f8      	str	r0, [r7, #12]
  return ret;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002706:	f107 0208 	add.w	r2, r7, #8
 800270a:	2301      	movs	r3, #1
 800270c:	211a      	movs	r1, #26
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fe7d 	bl	800240e <lps22hb_read_reg>
 8002714:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10f      	bne.n	800273c <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	b2da      	uxtb	r2, r3
 8002724:	7a3b      	ldrb	r3, [r7, #8]
 8002726:	f362 0300 	bfi	r3, r2, #0, #1
 800272a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 800272c:	f107 0208 	add.w	r2, r7, #8
 8002730:	2301      	movs	r3, #1
 8002732:	211a      	movs	r1, #26
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fe82 	bl	800243e <lps22hb_write_reg>
 800273a:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002752:	f107 0208 	add.w	r2, r7, #8
 8002756:	2301      	movs	r3, #1
 8002758:	2111      	movs	r1, #17
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fe57 	bl	800240e <lps22hb_read_reg>
 8002760:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10f      	bne.n	8002788 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	7a3b      	ldrb	r3, [r7, #8]
 8002772:	f362 1304 	bfi	r3, r2, #4, #1
 8002776:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002778:	f107 0208 	add.w	r2, r7, #8
 800277c:	2301      	movs	r3, #1
 800277e:	2111      	movs	r1, #17
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fe5c 	bl	800243e <lps22hb_write_reg>
 8002786:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002788:	68fb      	ldr	r3, [r7, #12]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e04d      	b.n	800284c <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	7b1a      	ldrb	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80027ec:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80027f2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e020      	b.n	800284c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4798      	blx	r3
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e016      	b.n	800284c <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d112      	bne.n	800284c <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002830:	2301      	movs	r3, #1
 8002832:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	461a      	mov	r2, r3
 8002838:	2123      	movs	r1, #35	; 0x23
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fb55 	bl	8002eea <LSM303AGR_ACC_Write_Reg>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e000      	b.n	800284e <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	080036f9 	.word	0x080036f9
 800285c:	0800375b 	.word	0x0800375b

08002860 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	331c      	adds	r3, #28
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f001 f94a 	bl	8003b08 <lsm303agr_xl_block_data_update_set>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e02c      	b.n	80028da <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	331c      	adds	r3, #28
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f001 faed 	bl	8003e66 <lsm303agr_xl_fifo_mode_set>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	e020      	b.n	80028da <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2205      	movs	r2, #5
 800289c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	331c      	adds	r3, #28
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 f84e 	bl	8003948 <lsm303agr_xl_data_rate_set>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	e010      	b.n	80028da <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	331c      	adds	r3, #28
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 f8c4 	bl	8003a4c <lsm303agr_xl_full_scale_set>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e004      	b.n	80028da <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f87c 	bl	80029e8 <LSM303AGR_ACC_Disable>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e008      	b.n	800290e <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	331c      	adds	r3, #28
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fa55 	bl	8003dd6 <lsm303agr_xl_device_id_get>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e000      	b.n	800293a <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2210      	movs	r2, #16
 8002970:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2200      	movs	r2, #0
 8002976:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4a06      	ldr	r2, [pc, #24]	; (800299c <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002984:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	43c80000 	.word	0x43c80000

080029a0 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e014      	b.n	80029e0 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f103 021c 	add.w	r2, r3, #28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 ffbf 	bl	8003948 <lsm303agr_xl_data_rate_set>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	e004      	b.n	80029e0 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e01f      	b.n	8002a3e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f103 021c 	add.w	r2, r3, #28
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	332a      	adds	r3, #42	; 0x2a
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f000 ffc2 	bl	8003994 <lsm303agr_xl_data_rate_get>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e010      	b.n	8002a3e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	331c      	adds	r3, #28
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 ff90 	bl	8003948 <lsm303agr_xl_data_rate_set>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	e004      	b.n	8002a3e <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	331c      	adds	r3, #28
 8002a58:	f107 020b 	add.w	r2, r7, #11
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 ff3e 	bl	80038e0 <lsm303agr_xl_operating_mode_get>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	e031      	b.n	8002ad4 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002a70:	7afb      	ldrb	r3, [r7, #11]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d01a      	beq.n	8002aac <LSM303AGR_ACC_GetSensitivity+0x66>
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	dc22      	bgt.n	8002ac0 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d00a      	beq.n	8002a98 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002a82:	e01d      	b.n	8002ac0 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fca8 	bl	80033dc <LSM303AGR_ACC_GetSensitivityHR>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01a      	beq.n	8002ac8 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e01d      	b.n	8002ad4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fce4 	bl	8003468 <LSM303AGR_ACC_GetSensitivityNM>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d012      	beq.n	8002acc <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aaa:	e013      	b.n	8002ad4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fd20 	bl	80034f4 <LSM303AGR_ACC_GetSensitivityLP>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	e009      	b.n	8002ad4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	60fb      	str	r3, [r7, #12]
      break;
 8002ac6:	e004      	b.n	8002ad2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e002      	b.n	8002ad2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002ad0:	bf00      	nop
  }

  return ret;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	331c      	adds	r3, #28
 8002aee:	f107 020b 	add.w	r2, r7, #11
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fef3 	bl	80038e0 <lsm303agr_xl_operating_mode_get>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	e09d      	b.n	8002c42 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	331c      	adds	r3, #28
 8002b0a:	f107 020a 	add.w	r2, r7, #10
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 ff3f 	bl	8003994 <lsm303agr_xl_data_rate_get>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e08f      	b.n	8002c42 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d147      	bne.n	8002bb8 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002b28:	7abb      	ldrb	r3, [r7, #10]
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	d840      	bhi.n	8002bb0 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b5d 	.word	0x08002b5d
 8002b38:	08002b67 	.word	0x08002b67
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002b79 	.word	0x08002b79
 8002b44:	08002b81 	.word	0x08002b81
 8002b48:	08002b89 	.word	0x08002b89
 8002b4c:	08002b91 	.word	0x08002b91
 8002b50:	08002b99 	.word	0x08002b99
 8002b54:	08002ba1 	.word	0x08002ba1
 8002b58:	08002ba9 	.word	0x08002ba9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
        break;
 8002b64:	e06c      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b6c:	601a      	str	r2, [r3, #0]
        break;
 8002b6e:	e067      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4a36      	ldr	r2, [pc, #216]	; (8002c4c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002b74:	601a      	str	r2, [r3, #0]
        break;
 8002b76:	e063      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4a35      	ldr	r2, [pc, #212]	; (8002c50 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002b7c:	601a      	str	r2, [r3, #0]
        break;
 8002b7e:	e05f      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002b84:	601a      	str	r2, [r3, #0]
        break;
 8002b86:	e05b      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002b8c:	601a      	str	r2, [r3, #0]
        break;
 8002b8e:	e057      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002b94:	601a      	str	r2, [r3, #0]
        break;
 8002b96:	e053      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002b9c:	601a      	str	r2, [r3, #0]
        break;
 8002b9e:	e04f      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4a30      	ldr	r2, [pc, #192]	; (8002c64 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002ba4:	601a      	str	r2, [r3, #0]
        break;
 8002ba6:	e04b      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002bac:	601a      	str	r2, [r3, #0]
        break;
 8002bae:	e047      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	60fb      	str	r3, [r7, #12]
        break;
 8002bb6:	e043      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002bb8:	7abb      	ldrb	r3, [r7, #10]
 8002bba:	2b09      	cmp	r3, #9
 8002bbc:	d83c      	bhi.n	8002c38 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bed 	.word	0x08002bed
 8002bc8:	08002bf7 	.word	0x08002bf7
 8002bcc:	08002c01 	.word	0x08002c01
 8002bd0:	08002c09 	.word	0x08002c09
 8002bd4:	08002c11 	.word	0x08002c11
 8002bd8:	08002c19 	.word	0x08002c19
 8002bdc:	08002c21 	.word	0x08002c21
 8002be0:	08002c29 	.word	0x08002c29
 8002be4:	08002c39 	.word	0x08002c39
 8002be8:	08002c31 	.word	0x08002c31
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
        break;
 8002bf4:	e024      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bfc:	601a      	str	r2, [r3, #0]
        break;
 8002bfe:	e01f      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002c04:	601a      	str	r2, [r3, #0]
        break;
 8002c06:	e01b      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002c0c:	601a      	str	r2, [r3, #0]
        break;
 8002c0e:	e017      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002c14:	601a      	str	r2, [r3, #0]
        break;
 8002c16:	e013      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	; (8002c58 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002c1c:	601a      	str	r2, [r3, #0]
        break;
 8002c1e:	e00f      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002c24:	601a      	str	r2, [r3, #0]
        break;
 8002c26:	e00b      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002c2c:	601a      	str	r2, [r3, #0]
        break;
 8002c2e:	e007      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002c34:	601a      	str	r2, [r3, #0]
        break;
 8002c36:	e003      	b.n	8002c40 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	60fb      	str	r3, [r7, #12]
        break;
 8002c3e:	bf00      	nop
    }
  }

  return ret;
 8002c40:	68fb      	ldr	r3, [r7, #12]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	41200000 	.word	0x41200000
 8002c50:	41c80000 	.word	0x41c80000
 8002c54:	42480000 	.word	0x42480000
 8002c58:	42c80000 	.word	0x42c80000
 8002c5c:	43480000 	.word	0x43480000
 8002c60:	43c80000 	.word	0x43c80000
 8002c64:	44ca8000 	.word	0x44ca8000
 8002c68:	45a80000 	.word	0x45a80000
 8002c6c:	44a80000 	.word	0x44a80000

08002c70 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d106      	bne.n	8002c94 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002c86:	ed97 0a00 	vldr	s0, [r7]
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fc78 	bl	8003580 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	e005      	b.n	8002ca0 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002c94:	ed97 0a00 	vldr	s0, [r7]
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fcd3 	bl	8003644 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002c9e:	4603      	mov	r3, r0
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	331c      	adds	r3, #28
 8002cba:	f107 020b 	add.w	r2, r7, #11
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fee9 	bl	8003a98 <lsm303agr_xl_full_scale_get>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e023      	b.n	8002d1a <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002cd2:	7afb      	ldrb	r3, [r7, #11]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d81b      	bhi.n	8002d10 <LSM303AGR_ACC_GetFullScale+0x68>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cf9 	.word	0x08002cf9
 8002ce8:	08002d01 	.word	0x08002d01
 8002cec:	08002d09 	.word	0x08002d09
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	601a      	str	r2, [r3, #0]
      break;
 8002cf6:	e00f      	b.n	8002d18 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	601a      	str	r2, [r3, #0]
      break;
 8002cfe:	e00b      	b.n	8002d18 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2208      	movs	r2, #8
 8002d04:	601a      	str	r2, [r3, #0]
      break;
 8002d06:	e007      	b.n	8002d18 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	601a      	str	r2, [r3, #0]
      break;
 8002d0e:	e003      	b.n	8002d18 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	60fb      	str	r3, [r7, #12]
      break;
 8002d16:	bf00      	nop
  }

  return ret;
 8002d18:	68fb      	ldr	r3, [r7, #12]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	dd0b      	ble.n	8002d4c <LSM303AGR_ACC_SetFullScale+0x28>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	dd06      	ble.n	8002d48 <LSM303AGR_ACC_SetFullScale+0x24>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	dc01      	bgt.n	8002d44 <LSM303AGR_ACC_SetFullScale+0x20>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e004      	b.n	8002d4e <LSM303AGR_ACC_SetFullScale+0x2a>
 8002d44:	2303      	movs	r3, #3
 8002d46:	e002      	b.n	8002d4e <LSM303AGR_ACC_SetFullScale+0x2a>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <LSM303AGR_ACC_SetFullScale+0x2a>
 8002d4c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002d4e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	331c      	adds	r3, #28
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fe77 	bl	8003a4c <lsm303agr_xl_full_scale_set>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e000      	b.n	8002d6c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	331c      	adds	r3, #28
 8002d8a:	f107 020f 	add.w	r2, r7, #15
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fda5 	bl	80038e0 <lsm303agr_xl_operating_mode_get>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	e04a      	b.n	8002e38 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d00c      	beq.n	8002dc2 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	dc0e      	bgt.n	8002dca <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d003      	beq.n	8002dbc <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002db4:	e009      	b.n	8002dca <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002db6:	2310      	movs	r3, #16
 8002db8:	83fb      	strh	r3, [r7, #30]
      break;
 8002dba:	e00a      	b.n	8002dd2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002dbc:	2340      	movs	r3, #64	; 0x40
 8002dbe:	83fb      	strh	r3, [r7, #30]
      break;
 8002dc0:	e007      	b.n	8002dd2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc6:	83fb      	strh	r3, [r7, #30]
      break;
 8002dc8:	e003      	b.n	8002dd2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	61bb      	str	r3, [r7, #24]
      break;
 8002dd0:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d101      	bne.n	8002dde <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	e02c      	b.n	8002e38 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	331c      	adds	r3, #28
 8002de2:	f107 0210 	add.w	r2, r7, #16
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 feb3 	bl	8003b54 <lsm303agr_acceleration_raw_get>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	e01e      	b.n	8002e38 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002dfa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e04:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002e0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e18:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e1c:	b21a      	sxth	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002e22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	809a      	strh	r2, [r3, #4]

  return ret;
 8002e36:	69bb      	ldr	r3, [r7, #24]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff ff8c 	bl	8002d74 <LSM303AGR_ACC_GetAxesRaw>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	e03c      	b.n	8002ee2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fde9 	bl	8002a46 <LSM303AGR_ACC_GetSensitivity>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e030      	b.n	8002ee2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002e80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e98:	ee17 2a90 	vmov	r2, s15
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ea4:	ee07 3a90 	vmov	s15, r3
 8002ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb8:	ee17 2a90 	vmov	r2, s15
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002ec0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed8:	ee17 2a90 	vmov	r2, s15
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f103 001c 	add.w	r0, r3, #28
 8002f00:	1cba      	adds	r2, r7, #2
 8002f02:	78f9      	ldrb	r1, [r7, #3]
 8002f04:	2301      	movs	r3, #1
 8002f06:	f000 fcd3 	bl	80038b0 <lsm303agr_write_reg>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	e000      	b.n	8002f18 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e04b      	b.n	8002fd4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	7b1a      	ldrb	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002f78:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002f7e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e01e      	b.n	8002fd4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4798      	blx	r3
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e014      	b.n	8002fd4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	331c      	adds	r3, #28
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 ff75 	bl	8003eb2 <lsm303agr_mag_i2c_interface_set>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e000      	b.n	8002fd6 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	080037bd 	.word	0x080037bd
 8002fe4:	0800381f 	.word	0x0800381f

08002fe8 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	331c      	adds	r3, #28
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fe7c 	bl	8003cf4 <lsm303agr_mag_block_data_update_set>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	e028      	b.n	800305a <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	331c      	adds	r3, #28
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fdeb 	bl	8003bea <lsm303agr_mag_operating_mode_set>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	e01c      	b.n	800305a <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	331c      	adds	r3, #28
 8003024:	2103      	movs	r1, #3
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fe05 	bl	8003c36 <lsm303agr_mag_data_rate_set>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	e010      	b.n	800305a <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	331c      	adds	r3, #28
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 feeb 	bl	8003e1a <lsm303agr_mag_self_test_set>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	e004      	b.n	800305a <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f874 	bl	8003158 <LSM303AGR_MAG_Disable>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	e004      	b.n	8003086 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	331c      	adds	r3, #28
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 feaa 	bl	8003df8 <lsm303agr_mag_device_id_get>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e000      	b.n	80030b2 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2200      	movs	r2, #0
 80030dc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2232      	movs	r2, #50	; 0x32
 80030ee:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8003104:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	42c80000 	.word	0x42c80000

08003118 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e010      	b.n	8003150 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	331c      	adds	r3, #28
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fd58 	bl	8003bea <lsm303agr_mag_operating_mode_set>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	e004      	b.n	8003150 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e010      	b.n	8003190 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	331c      	adds	r3, #28
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fd38 	bl	8003bea <lsm303agr_mag_operating_mode_set>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
 8003184:	e004      	b.n	8003190 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80031a8:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	331c      	adds	r3, #28
 80031ca:	f107 020b 	add.w	r2, r7, #11
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fd57 	bl	8003c84 <lsm303agr_mag_data_rate_get>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e023      	b.n	800322a <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d81b      	bhi.n	8003220 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003201 	.word	0x08003201
 80031f4:	08003209 	.word	0x08003209
 80031f8:	08003211 	.word	0x08003211
 80031fc:	08003219 	.word	0x08003219
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003204:	601a      	str	r2, [r3, #0]
      break;
 8003206:	e00f      	b.n	8003228 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 800320c:	601a      	str	r2, [r3, #0]
      break;
 800320e:	e00b      	b.n	8003228 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003214:	601a      	str	r2, [r3, #0]
      break;
 8003216:	e007      	b.n	8003228 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 800321c:	601a      	str	r2, [r3, #0]
      break;
 800321e:	e003      	b.n	8003228 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
 8003224:	60fb      	str	r3, [r7, #12]
      break;
 8003226:	bf00      	nop
  }

  return ret;
 8003228:	68fb      	ldr	r3, [r7, #12]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	41200000 	.word	0x41200000
 8003238:	41a00000 	.word	0x41a00000
 800323c:	42480000 	.word	0x42480000
 8003240:	42c80000 	.word	0x42c80000

08003244 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003250:	edd7 7a00 	vldr	s15, [r7]
 8003254:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	d801      	bhi.n	8003266 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8003262:	2300      	movs	r3, #0
 8003264:	e016      	b.n	8003294 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003266:	edd7 7a00 	vldr	s15, [r7]
 800326a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800326e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	d801      	bhi.n	800327c <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003278:	2301      	movs	r3, #1
 800327a:	e00b      	b.n	8003294 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800327c:	edd7 7a00 	vldr	s15, [r7]
 8003280:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80032bc <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d801      	bhi.n	8003292 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800328e:	2302      	movs	r3, #2
 8003290:	e000      	b.n	8003294 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003292:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003294:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	331c      	adds	r3, #28
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fcc9 	bl	8003c36 <lsm303agr_mag_data_rate_set>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	e000      	b.n	80032b2 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	42480000 	.word	0x42480000

080032c0 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2232      	movs	r2, #50	; 0x32
 80032ce:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	331c      	adds	r3, #28
 8003304:	f107 0208 	add.w	r2, r7, #8
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fd18 	bl	8003d40 <lsm303agr_magnetic_raw_get>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	e00c      	b.n	8003336 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800331c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003324:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800332c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	331c      	adds	r3, #28
 800334c:	f107 0210 	add.w	r2, r7, #16
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fcf4 	bl	8003d40 <lsm303agr_magnetic_raw_get>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e036      	b.n	80033d2 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff14 	bl	8003198 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003370:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800337c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003388:	ee17 2a90 	vmov	r2, s15
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800339c:	edd7 7a03 	vldr	s15, [r7, #12]
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033a8:	ee17 2a90 	vmov	r2, s15
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80033b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80033c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033c8:	ee17 2a90 	vmov	r2, s15
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	331c      	adds	r3, #28
 80033ee:	f107 020b 	add.w	r2, r7, #11
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fb4f 	bl	8003a98 <lsm303agr_xl_full_scale_get>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	e023      	b.n	800344e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d81b      	bhi.n	8003444 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003425 	.word	0x08003425
 8003418:	0800342d 	.word	0x0800342d
 800341c:	08003435 	.word	0x08003435
 8003420:	0800343d 	.word	0x0800343d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003428:	601a      	str	r2, [r3, #0]
      break;
 800342a:	e00f      	b.n	800344c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003430:	601a      	str	r2, [r3, #0]
      break;
 8003432:	e00b      	b.n	800344c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003438:	601a      	str	r2, [r3, #0]
      break;
 800343a:	e007      	b.n	800344c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003440:	601a      	str	r2, [r3, #0]
      break;
 8003442:	e003      	b.n	800344c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
 8003448:	60fb      	str	r3, [r7, #12]
      break;
 800344a:	bf00      	nop
  }

  return ret;
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	3f7ae148 	.word	0x3f7ae148
 800345c:	3ff9999a 	.word	0x3ff9999a
 8003460:	4079999a 	.word	0x4079999a
 8003464:	413b851f 	.word	0x413b851f

08003468 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	331c      	adds	r3, #28
 800347a:	f107 020b 	add.w	r2, r7, #11
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fb09 	bl	8003a98 <lsm303agr_xl_full_scale_get>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
 8003490:	e023      	b.n	80034da <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d81b      	bhi.n	80034d0 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b9 	.word	0x080034b9
 80034a8:	080034c1 	.word	0x080034c1
 80034ac:	080034c9 	.word	0x080034c9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80034b4:	601a      	str	r2, [r3, #0]
      break;
 80034b6:	e00f      	b.n	80034d8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80034bc:	601a      	str	r2, [r3, #0]
      break;
 80034be:	e00b      	b.n	80034d8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80034c4:	601a      	str	r2, [r3, #0]
      break;
 80034c6:	e007      	b.n	80034d8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80034cc:	601a      	str	r2, [r3, #0]
      break;
 80034ce:	e003      	b.n	80034d8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
 80034d4:	60fb      	str	r3, [r7, #12]
      break;
 80034d6:	bf00      	nop
  }

  return ret;
 80034d8:	68fb      	ldr	r3, [r7, #12]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	4079999a 	.word	0x4079999a
 80034e8:	40fa3d71 	.word	0x40fa3d71
 80034ec:	417a147b 	.word	0x417a147b
 80034f0:	423b999a 	.word	0x423b999a

080034f4 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	331c      	adds	r3, #28
 8003506:	f107 020b 	add.w	r2, r7, #11
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fac3 	bl	8003a98 <lsm303agr_xl_full_scale_get>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	e023      	b.n	8003566 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d81b      	bhi.n	800355c <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003545 	.word	0x08003545
 8003534:	0800354d 	.word	0x0800354d
 8003538:	08003555 	.word	0x08003555
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003540:	601a      	str	r2, [r3, #0]
      break;
 8003542:	e00f      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003548:	601a      	str	r2, [r3, #0]
      break;
 800354a:	e00b      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003550:	601a      	str	r2, [r3, #0]
      break;
 8003552:	e007      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003558:	601a      	str	r2, [r3, #0]
      break;
 800355a:	e003      	b.n	8003564 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	60fb      	str	r3, [r7, #12]
      break;
 8003562:	bf00      	nop
  }

  return ret;
 8003564:	68fb      	ldr	r3, [r7, #12]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	417a147b 	.word	0x417a147b
 8003574:	41fa147b 	.word	0x41fa147b
 8003578:	427a147b 	.word	0x427a147b
 800357c:	433b947b 	.word	0x433b947b

08003580 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800358c:	edd7 7a00 	vldr	s15, [r7]
 8003590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359c:	d801      	bhi.n	80035a2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800359e:	2301      	movs	r3, #1
 80035a0:	e037      	b.n	8003612 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035a2:	edd7 7a00 	vldr	s15, [r7]
 80035a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b2:	d801      	bhi.n	80035b8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e02c      	b.n	8003612 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035b8:	edd7 7a00 	vldr	s15, [r7]
 80035bc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80035c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	d801      	bhi.n	80035ce <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e021      	b.n	8003612 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035ce:	edd7 7a00 	vldr	s15, [r7]
 80035d2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003638 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80035d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	d801      	bhi.n	80035e4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80035e0:	2304      	movs	r3, #4
 80035e2:	e016      	b.n	8003612 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035e4:	edd7 7a00 	vldr	s15, [r7]
 80035e8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800363c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80035ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f4:	d801      	bhi.n	80035fa <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80035f6:	2305      	movs	r3, #5
 80035f8:	e00b      	b.n	8003612 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035fa:	edd7 7a00 	vldr	s15, [r7]
 80035fe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003640 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360a:	d801      	bhi.n	8003610 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 800360c:	2306      	movs	r3, #6
 800360e:	e000      	b.n	8003612 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003610:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003612:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	331c      	adds	r3, #28
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f993 	bl	8003948 <lsm303agr_xl_data_rate_set>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
 800362c:	e000      	b.n	8003630 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	42480000 	.word	0x42480000
 800363c:	42c80000 	.word	0x42c80000
 8003640:	43480000 	.word	0x43480000

08003644 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003650:	edd7 7a00 	vldr	s15, [r7]
 8003654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800365c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003660:	d801      	bhi.n	8003666 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003662:	2301      	movs	r3, #1
 8003664:	e037      	b.n	80036d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003666:	edd7 7a00 	vldr	s15, [r7]
 800366a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800366e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003676:	d801      	bhi.n	800367c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003678:	2302      	movs	r3, #2
 800367a:	e02c      	b.n	80036d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800367c:	edd7 7a00 	vldr	s15, [r7]
 8003680:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368c:	d801      	bhi.n	8003692 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800368e:	2303      	movs	r3, #3
 8003690:	e021      	b.n	80036d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003692:	edd7 7a00 	vldr	s15, [r7]
 8003696:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80036ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800369a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	d801      	bhi.n	80036a8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80036a4:	2304      	movs	r3, #4
 80036a6:	e016      	b.n	80036d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80036a8:	edd7 7a00 	vldr	s15, [r7]
 80036ac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80036f0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80036b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b8:	d801      	bhi.n	80036be <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80036ba:	2305      	movs	r3, #5
 80036bc:	e00b      	b.n	80036d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80036be:	edd7 7a00 	vldr	s15, [r7]
 80036c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80036f4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80036c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	d801      	bhi.n	80036d4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80036d0:	2306      	movs	r3, #6
 80036d2:	e000      	b.n	80036d6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80036d4:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	42480000 	.word	0x42480000
 80036f0:	42c80000 	.word	0x42c80000
 80036f4:	43480000 	.word	0x43480000

080036f8 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	461a      	mov	r2, r3
 8003704:	460b      	mov	r3, r1
 8003706:	72fb      	strb	r3, [r7, #11]
 8003708:	4613      	mov	r3, r2
 800370a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10e      	bne.n	8003736 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	695c      	ldr	r4, [r3, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	7b1b      	ldrb	r3, [r3, #12]
 8003720:	b298      	uxth	r0, r3
 8003722:	7afb      	ldrb	r3, [r7, #11]
 8003724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003728:	b2db      	uxtb	r3, r3
 800372a:	b299      	uxth	r1, r3
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	47a0      	blx	r4
 8003732:	4603      	mov	r3, r0
 8003734:	e00d      	b.n	8003752 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	695c      	ldr	r4, [r3, #20]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	7b1b      	ldrb	r3, [r3, #12]
 800373e:	b298      	uxth	r0, r3
 8003740:	7afb      	ldrb	r3, [r7, #11]
 8003742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003746:	b2db      	uxtb	r3, r3
 8003748:	b299      	uxth	r1, r3
 800374a:	893b      	ldrh	r3, [r7, #8]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	47a0      	blx	r4
 8003750:	4603      	mov	r3, r0
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}

0800375a <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800375a:	b590      	push	{r4, r7, lr}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	461a      	mov	r2, r3
 8003766:	460b      	mov	r3, r1
 8003768:	72fb      	strb	r3, [r7, #11]
 800376a:	4613      	mov	r3, r2
 800376c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10e      	bne.n	8003798 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	691c      	ldr	r4, [r3, #16]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	7b1b      	ldrb	r3, [r3, #12]
 8003782:	b298      	uxth	r0, r3
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800378a:	b2db      	uxtb	r3, r3
 800378c:	b299      	uxth	r1, r3
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	47a0      	blx	r4
 8003794:	4603      	mov	r3, r0
 8003796:	e00d      	b.n	80037b4 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	691c      	ldr	r4, [r3, #16]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	7b1b      	ldrb	r3, [r3, #12]
 80037a0:	b298      	uxth	r0, r3
 80037a2:	7afb      	ldrb	r3, [r7, #11]
 80037a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	b299      	uxth	r1, r3
 80037ac:	893b      	ldrh	r3, [r7, #8]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	47a0      	blx	r4
 80037b2:	4603      	mov	r3, r0
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd90      	pop	{r4, r7, pc}

080037bc <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	460b      	mov	r3, r1
 80037ca:	72fb      	strb	r3, [r7, #11]
 80037cc:	4613      	mov	r3, r2
 80037ce:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10e      	bne.n	80037fa <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	695c      	ldr	r4, [r3, #20]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	7b1b      	ldrb	r3, [r3, #12]
 80037e4:	b298      	uxth	r0, r3
 80037e6:	7afb      	ldrb	r3, [r7, #11]
 80037e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	b299      	uxth	r1, r3
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	47a0      	blx	r4
 80037f6:	4603      	mov	r3, r0
 80037f8:	e00d      	b.n	8003816 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	695c      	ldr	r4, [r3, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	7b1b      	ldrb	r3, [r3, #12]
 8003802:	b298      	uxth	r0, r3
 8003804:	7afb      	ldrb	r3, [r7, #11]
 8003806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800380a:	b2db      	uxtb	r3, r3
 800380c:	b299      	uxth	r1, r3
 800380e:	893b      	ldrh	r3, [r7, #8]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	47a0      	blx	r4
 8003814:	4603      	mov	r3, r0
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd90      	pop	{r4, r7, pc}

0800381e <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800381e:	b590      	push	{r4, r7, lr}
 8003820:	b087      	sub	sp, #28
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	461a      	mov	r2, r3
 800382a:	460b      	mov	r3, r1
 800382c:	72fb      	strb	r3, [r7, #11]
 800382e:	4613      	mov	r3, r2
 8003830:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10e      	bne.n	800385c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	691c      	ldr	r4, [r3, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	7b1b      	ldrb	r3, [r3, #12]
 8003846:	b298      	uxth	r0, r3
 8003848:	7afb      	ldrb	r3, [r7, #11]
 800384a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800384e:	b2db      	uxtb	r3, r3
 8003850:	b299      	uxth	r1, r3
 8003852:	893b      	ldrh	r3, [r7, #8]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	47a0      	blx	r4
 8003858:	4603      	mov	r3, r0
 800385a:	e00d      	b.n	8003878 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	691c      	ldr	r4, [r3, #16]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	7b1b      	ldrb	r3, [r3, #12]
 8003864:	b298      	uxth	r0, r3
 8003866:	7afb      	ldrb	r3, [r7, #11]
 8003868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386c:	b2db      	uxtb	r3, r3
 800386e:	b299      	uxth	r1, r3
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	47a0      	blx	r4
 8003876:	4603      	mov	r3, r0
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}

08003880 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	460b      	mov	r3, r1
 800388e:	72fb      	strb	r3, [r7, #11]
 8003890:	4613      	mov	r3, r2
 8003892:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685c      	ldr	r4, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6898      	ldr	r0, [r3, #8]
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	7af9      	ldrb	r1, [r7, #11]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	47a0      	blx	r4
 80038a4:	6178      	str	r0, [r7, #20]
  return ret;
 80038a6:	697b      	ldr	r3, [r7, #20]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}

080038b0 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	461a      	mov	r2, r3
 80038bc:	460b      	mov	r3, r1
 80038be:	72fb      	strb	r3, [r7, #11]
 80038c0:	4613      	mov	r3, r2
 80038c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681c      	ldr	r4, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6898      	ldr	r0, [r3, #8]
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	7af9      	ldrb	r1, [r7, #11]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	47a0      	blx	r4
 80038d4:	6178      	str	r0, [r7, #20]
  return ret;
 80038d6:	697b      	ldr	r3, [r7, #20]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80038ea:	f107 020c 	add.w	r2, r7, #12
 80038ee:	2301      	movs	r3, #1
 80038f0:	2120      	movs	r1, #32
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ffc4 	bl	8003880 <lsm303agr_read_reg>
 80038f8:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003900:	f107 0210 	add.w	r2, r7, #16
 8003904:	2301      	movs	r3, #1
 8003906:	2123      	movs	r1, #35	; 0x23
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ffb9 	bl	8003880 <lsm303agr_read_reg>
 800390e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003910:	7b3b      	ldrb	r3, [r7, #12]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2202      	movs	r2, #2
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e00c      	b.n	800393e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003924:	7c3b      	ldrb	r3, [r7, #16]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e002      	b.n	800393e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800393e:	697b      	ldr	r3, [r7, #20]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003954:	f107 0208 	add.w	r2, r7, #8
 8003958:	2301      	movs	r3, #1
 800395a:	2120      	movs	r1, #32
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff8f 	bl	8003880 <lsm303agr_read_reg>
 8003962:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10f      	bne.n	800398a <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	b2da      	uxtb	r2, r3
 8003972:	7a3b      	ldrb	r3, [r7, #8]
 8003974:	f362 1307 	bfi	r3, r2, #4, #4
 8003978:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800397a:	f107 0208 	add.w	r2, r7, #8
 800397e:	2301      	movs	r3, #1
 8003980:	2120      	movs	r1, #32
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff94 	bl	80038b0 <lsm303agr_write_reg>
 8003988:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800399e:	f107 0208 	add.w	r2, r7, #8
 80039a2:	2301      	movs	r3, #1
 80039a4:	2120      	movs	r1, #32
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ff6a 	bl	8003880 <lsm303agr_read_reg>
 80039ac:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 80039ae:	7a3b      	ldrb	r3, [r7, #8]
 80039b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b09      	cmp	r3, #9
 80039b8:	d83e      	bhi.n	8003a38 <lsm303agr_xl_data_rate_get+0xa4>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <lsm303agr_xl_data_rate_get+0x2c>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039e9 	.word	0x080039e9
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	080039f9 	.word	0x080039f9
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a09 	.word	0x08003a09
 80039d4:	08003a11 	.word	0x08003a11
 80039d8:	08003a19 	.word	0x08003a19
 80039dc:	08003a21 	.word	0x08003a21
 80039e0:	08003a29 	.word	0x08003a29
 80039e4:	08003a31 	.word	0x08003a31
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
      break;
 80039ee:	e027      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
      break;
 80039f6:	e023      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
      break;
 80039fe:	e01f      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2203      	movs	r2, #3
 8003a04:	701a      	strb	r2, [r3, #0]
      break;
 8003a06:	e01b      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	701a      	strb	r2, [r3, #0]
      break;
 8003a0e:	e017      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2205      	movs	r2, #5
 8003a14:	701a      	strb	r2, [r3, #0]
      break;
 8003a16:	e013      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2206      	movs	r2, #6
 8003a1c:	701a      	strb	r2, [r3, #0]
      break;
 8003a1e:	e00f      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2207      	movs	r2, #7
 8003a24:	701a      	strb	r2, [r3, #0]
      break;
 8003a26:	e00b      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	701a      	strb	r2, [r3, #0]
      break;
 8003a2e:	e007      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2209      	movs	r2, #9
 8003a34:	701a      	strb	r2, [r3, #0]
      break;
 8003a36:	e003      	b.n	8003a40 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
      break;
 8003a3e:	bf00      	nop
  }

  return ret;
 8003a40:	68fb      	ldr	r3, [r7, #12]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop

08003a4c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a58:	f107 0208 	add.w	r2, r7, #8
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	2123      	movs	r1, #35	; 0x23
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff0d 	bl	8003880 <lsm303agr_read_reg>
 8003a66:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	7a3b      	ldrb	r3, [r7, #8]
 8003a78:	f362 1305 	bfi	r3, r2, #4, #2
 8003a7c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a7e:	f107 0208 	add.w	r2, r7, #8
 8003a82:	2301      	movs	r3, #1
 8003a84:	2123      	movs	r1, #35	; 0x23
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff12 	bl	80038b0 <lsm303agr_write_reg>
 8003a8c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003aa2:	f107 0208 	add.w	r2, r7, #8
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2123      	movs	r1, #35	; 0x23
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fee8 	bl	8003880 <lsm303agr_read_reg>
 8003ab0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003ab2:	7a3b      	ldrb	r3, [r7, #8]
 8003ab4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d81a      	bhi.n	8003af4 <lsm303agr_xl_full_scale_get+0x5c>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <lsm303agr_xl_full_scale_get+0x2c>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003add 	.word	0x08003add
 8003acc:	08003ae5 	.word	0x08003ae5
 8003ad0:	08003aed 	.word	0x08003aed
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
      break;
 8003ada:	e00f      	b.n	8003afc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
      break;
 8003ae2:	e00b      	b.n	8003afc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	701a      	strb	r2, [r3, #0]
      break;
 8003aea:	e007      	b.n	8003afc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2203      	movs	r2, #3
 8003af0:	701a      	strb	r2, [r3, #0]
      break;
 8003af2:	e003      	b.n	8003afc <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
      break;
 8003afa:	bf00      	nop
  }

  return ret;
 8003afc:	68fb      	ldr	r3, [r7, #12]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop

08003b08 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b14:	f107 0208 	add.w	r2, r7, #8
 8003b18:	2301      	movs	r3, #1
 8003b1a:	2123      	movs	r1, #35	; 0x23
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff feaf 	bl	8003880 <lsm303agr_read_reg>
 8003b22:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	7a3b      	ldrb	r3, [r7, #8]
 8003b34:	f362 13c7 	bfi	r3, r2, #7, #1
 8003b38:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b3a:	f107 0208 	add.w	r2, r7, #8
 8003b3e:	2301      	movs	r3, #1
 8003b40:	2123      	movs	r1, #35	; 0x23
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff feb4 	bl	80038b0 <lsm303agr_write_reg>
 8003b48:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003b5e:	f107 020c 	add.w	r2, r7, #12
 8003b62:	2306      	movs	r3, #6
 8003b64:	2128      	movs	r1, #40	; 0x28
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fe8a 	bl	8003880 <lsm303agr_read_reg>
 8003b6c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003b6e:	7b7b      	ldrb	r3, [r7, #13]
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	7b3b      	ldrb	r3, [r7, #12]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b21a      	sxth	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	3302      	adds	r3, #2
 8003b96:	b212      	sxth	r2, r2
 8003b98:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	7bbb      	ldrb	r3, [r7, #14]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	b212      	sxth	r2, r2
 8003bb6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003bb8:	7c7a      	ldrb	r2, [r7, #17]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	b212      	sxth	r2, r2
 8003bc0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	7c3b      	ldrb	r3, [r7, #16]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	b212      	sxth	r2, r2
 8003bde:	801a      	strh	r2, [r3, #0]
  return ret;
 8003be0:	697b      	ldr	r3, [r7, #20]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003bf6:	f107 0208 	add.w	r2, r7, #8
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	2160      	movs	r1, #96	; 0x60
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff fe3e 	bl	8003880 <lsm303agr_read_reg>
 8003c04:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10f      	bne.n	8003c2c <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	7a3b      	ldrb	r3, [r7, #8]
 8003c16:	f362 0301 	bfi	r3, r2, #0, #2
 8003c1a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c1c:	f107 0208 	add.w	r2, r7, #8
 8003c20:	2301      	movs	r3, #1
 8003c22:	2160      	movs	r1, #96	; 0x60
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fe43 	bl	80038b0 <lsm303agr_write_reg>
 8003c2a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c42:	f107 0208 	add.w	r2, r7, #8
 8003c46:	2301      	movs	r3, #1
 8003c48:	2160      	movs	r1, #96	; 0x60
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fe18 	bl	8003880 <lsm303agr_read_reg>
 8003c50:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	7a3b      	ldrb	r3, [r7, #8]
 8003c62:	f362 0383 	bfi	r3, r2, #2, #2
 8003c66:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c68:	f107 0208 	add.w	r2, r7, #8
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	2160      	movs	r1, #96	; 0x60
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fe1d 	bl	80038b0 <lsm303agr_write_reg>
 8003c76:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c8e:	f107 0208 	add.w	r2, r7, #8
 8003c92:	2301      	movs	r3, #1
 8003c94:	2160      	movs	r1, #96	; 0x60
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fdf2 	bl	8003880 <lsm303agr_read_reg>
 8003c9c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003c9e:	7a3b      	ldrb	r3, [r7, #8]
 8003ca0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d81a      	bhi.n	8003ce0 <lsm303agr_mag_data_rate_get+0x5c>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <lsm303agr_mag_data_rate_get+0x2c>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cc9 	.word	0x08003cc9
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003cd9 	.word	0x08003cd9
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
      break;
 8003cc6:	e00f      	b.n	8003ce8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
      break;
 8003cce:	e00b      	b.n	8003ce8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e007      	b.n	8003ce8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	701a      	strb	r2, [r3, #0]
      break;
 8003cde:	e003      	b.n	8003ce8 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
      break;
 8003ce6:	bf00      	nop
  }

  return ret;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop

08003cf4 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d00:	f107 0208 	add.w	r2, r7, #8
 8003d04:	2301      	movs	r3, #1
 8003d06:	2162      	movs	r1, #98	; 0x62
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fdb9 	bl	8003880 <lsm303agr_read_reg>
 8003d0e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	7a3b      	ldrb	r3, [r7, #8]
 8003d20:	f362 1304 	bfi	r3, r2, #4, #1
 8003d24:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d26:	f107 0208 	add.w	r2, r7, #8
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	2162      	movs	r1, #98	; 0x62
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fdbe 	bl	80038b0 <lsm303agr_write_reg>
 8003d34:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003d4a:	f107 020c 	add.w	r2, r7, #12
 8003d4e:	2306      	movs	r3, #6
 8003d50:	2168      	movs	r1, #104	; 0x68
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fd94 	bl	8003880 <lsm303agr_read_reg>
 8003d58:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003d5a:	7b7b      	ldrb	r3, [r7, #13]
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	7b3b      	ldrb	r3, [r7, #12]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	b21a      	sxth	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	3302      	adds	r3, #2
 8003d82:	b212      	sxth	r2, r2
 8003d84:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3302      	adds	r3, #2
 8003d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	3302      	adds	r3, #2
 8003da0:	b212      	sxth	r2, r2
 8003da2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003da4:	7c7a      	ldrb	r2, [r7, #17]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	3304      	adds	r3, #4
 8003daa:	b212      	sxth	r2, r2
 8003dac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	3304      	adds	r3, #4
 8003db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	7c3b      	ldrb	r3, [r7, #16]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	b212      	sxth	r2, r2
 8003dca:	801a      	strh	r2, [r3, #0]
  return ret;
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003de0:	2301      	movs	r3, #1
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	210f      	movs	r1, #15
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fd4a 	bl	8003880 <lsm303agr_read_reg>
 8003dec:	60f8      	str	r0, [r7, #12]
  return ret;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003e02:	2301      	movs	r3, #1
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	214f      	movs	r1, #79	; 0x4f
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fd39 	bl	8003880 <lsm303agr_read_reg>
 8003e0e:	60f8      	str	r0, [r7, #12]
  return ret;
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e26:	f107 0208 	add.w	r2, r7, #8
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	2162      	movs	r1, #98	; 0x62
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fd26 	bl	8003880 <lsm303agr_read_reg>
 8003e34:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	7a3b      	ldrb	r3, [r7, #8]
 8003e46:	f362 0341 	bfi	r3, r2, #1, #1
 8003e4a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e4c:	f107 0208 	add.w	r2, r7, #8
 8003e50:	2301      	movs	r3, #1
 8003e52:	2162      	movs	r1, #98	; 0x62
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fd2b 	bl	80038b0 <lsm303agr_write_reg>
 8003e5a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003e72:	f107 0208 	add.w	r2, r7, #8
 8003e76:	2301      	movs	r3, #1
 8003e78:	212e      	movs	r1, #46	; 0x2e
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fd00 	bl	8003880 <lsm303agr_read_reg>
 8003e80:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10f      	bne.n	8003ea8 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	7a3b      	ldrb	r3, [r7, #8]
 8003e92:	f362 1387 	bfi	r3, r2, #6, #2
 8003e96:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003e98:	f107 0208 	add.w	r2, r7, #8
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	212e      	movs	r1, #46	; 0x2e
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff fd05 	bl	80038b0 <lsm303agr_write_reg>
 8003ea6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ebe:	f107 0208 	add.w	r2, r7, #8
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	2162      	movs	r1, #98	; 0x62
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fcda 	bl	8003880 <lsm303agr_read_reg>
 8003ecc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10f      	bne.n	8003ef4 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	7a3b      	ldrb	r3, [r7, #8]
 8003ede:	f362 1345 	bfi	r3, r2, #5, #1
 8003ee2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ee4:	f107 0208 	add.w	r2, r7, #8
 8003ee8:	2301      	movs	r3, #1
 8003eea:	2162      	movs	r1, #98	; 0x62
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff fcdf 	bl	80038b0 <lsm303agr_write_reg>
 8003ef2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003f14:	f04f 33ff 	mov.w	r3, #4294967295
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e04d      	b.n	8003fb8 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	7b1a      	ldrb	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <LSM6DSL_RegisterBusIO+0xc4>)
 8003f58:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <LSM6DSL_RegisterBusIO+0xc8>)
 8003f5e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e020      	b.n	8003fb8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4798      	blx	r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e016      	b.n	8003fb8 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d112      	bne.n	8003fb8 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10d      	bne.n	8003fb8 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2112      	movs	r1, #18
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fd2d 	bl	8004a06 <LSM6DSL_Write_Reg>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	08004e75 	.word	0x08004e75
 8003fc8:	08004eab 	.word	0x08004eab

08003fcc <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	331c      	adds	r3, #28
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fa59 	bl	8005492 <lsm6dsl_auto_increment_set>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	e054      	b.n	8004096 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	331c      	adds	r3, #28
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f980 	bl	80052f8 <lsm6dsl_block_data_update_set>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8004002:	e048      	b.n	8004096 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	331c      	adds	r3, #28
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fa67 	bl	80054de <lsm6dsl_fifo_mode_set>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004016:	f04f 33ff 	mov.w	r3, #4294967295
 800401a:	e03c      	b.n	8004096 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2204      	movs	r2, #4
 8004020:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	331c      	adds	r3, #28
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f000 ffe6 	bl	8004ffc <lsm6dsl_xl_data_rate_set>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	e02c      	b.n	8004096 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	331c      	adds	r3, #28
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ff7c 	bl	8004f40 <lsm6dsl_xl_full_scale_set>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	e020      	b.n	8004096 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2204      	movs	r2, #4
 8004058:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	331c      	adds	r3, #28
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f001 f8c0 	bl	80051e8 <lsm6dsl_gy_data_rate_set>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	e010      	b.n	8004096 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	331c      	adds	r3, #28
 8004078:	2106      	movs	r1, #6
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f84c 	bl	8005118 <lsm6dsl_gy_full_scale_set>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	e004      	b.n	8004096 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f888 	bl	80041bc <LSM6DSL_ACC_Disable>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	e015      	b.n	80040e4 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa9a 	bl	80045f2 <LSM6DSL_GYRO_Disable>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
 80040c8:	e00c      	b.n	80040e4 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	331c      	adds	r3, #28
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 f9b7 	bl	8005470 <lsm6dsl_device_id_get>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004108:	f04f 33ff 	mov.w	r3, #4294967295
 800410c:	e000      	b.n	8004110 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2201      	movs	r2, #1
 800412c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2200      	movs	r2, #0
 8004132:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004140:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2210      	movs	r2, #16
 8004146:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <LSM6DSL_GetCapabilities+0x58>)
 8004152:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4a06      	ldr	r2, [pc, #24]	; (8004170 <LSM6DSL_GetCapabilities+0x58>)
 8004158:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	45d02000 	.word	0x45d02000

08004174 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e014      	b.n	80041b4 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f103 021c 	add.w	r2, r3, #28
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f000 ff2f 	bl	8004ffc <lsm6dsl_xl_data_rate_set>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80041a4:	f04f 33ff 	mov.w	r3, #4294967295
 80041a8:	e004      	b.n	80041b4 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e01f      	b.n	8004212 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f103 021c 	add.w	r2, r3, #28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	332b      	adds	r3, #43	; 0x2b
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 ff32 	bl	8005048 <lsm6dsl_xl_data_rate_get>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	e010      	b.n	8004212 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	331c      	adds	r3, #28
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 ff00 	bl	8004ffc <lsm6dsl_xl_data_rate_set>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	e004      	b.n	8004212 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	331c      	adds	r3, #28
 800422e:	f107 020b 	add.w	r2, r7, #11
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fea9 	bl	8004f8c <lsm6dsl_xl_full_scale_get>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	e023      	b.n	800428e <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d81b      	bhi.n	8004284 <LSM6DSL_ACC_GetSensitivity+0x68>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	0800427d 	.word	0x0800427d
 800425c:	0800426d 	.word	0x0800426d
 8004260:	08004275 	.word	0x08004275
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004268:	601a      	str	r2, [r3, #0]
      break;
 800426a:	e00f      	b.n	800428c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4a0b      	ldr	r2, [pc, #44]	; (800429c <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004270:	601a      	str	r2, [r3, #0]
      break;
 8004272:	e00b      	b.n	800428c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004278:	601a      	str	r2, [r3, #0]
      break;
 800427a:	e007      	b.n	800428c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004280:	601a      	str	r2, [r3, #0]
      break;
 8004282:	e003      	b.n	800428c <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	60fb      	str	r3, [r7, #12]
      break;
 800428a:	bf00      	nop
  }

  return ret;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	3d79db23 	.word	0x3d79db23
 800429c:	3df9db23 	.word	0x3df9db23
 80042a0:	3e79db23 	.word	0x3e79db23
 80042a4:	3ef9db23 	.word	0x3ef9db23

080042a8 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	331c      	adds	r3, #28
 80042ba:	f107 020b 	add.w	r2, r7, #11
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fec1 	bl	8005048 <lsm6dsl_xl_data_rate_get>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	e054      	b.n	800437c <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	2b0b      	cmp	r3, #11
 80042d6:	d84c      	bhi.n	8004372 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004311 	.word	0x08004311
 80042e4:	08004323 	.word	0x08004323
 80042e8:	0800432b 	.word	0x0800432b
 80042ec:	08004333 	.word	0x08004333
 80042f0:	0800433b 	.word	0x0800433b
 80042f4:	08004343 	.word	0x08004343
 80042f8:	0800434b 	.word	0x0800434b
 80042fc:	08004353 	.word	0x08004353
 8004300:	0800435b 	.word	0x0800435b
 8004304:	08004363 	.word	0x08004363
 8004308:	0800436b 	.word	0x0800436b
 800430c:	0800431b 	.word	0x0800431b
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
      break;
 8004318:	e02f      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	4a19      	ldr	r2, [pc, #100]	; (8004384 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800431e:	601a      	str	r2, [r3, #0]
      break;
 8004320:	e02b      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	4a18      	ldr	r2, [pc, #96]	; (8004388 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004326:	601a      	str	r2, [r3, #0]
      break;
 8004328:	e027      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	4a17      	ldr	r2, [pc, #92]	; (800438c <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 800432e:	601a      	str	r2, [r3, #0]
      break;
 8004330:	e023      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	4a16      	ldr	r2, [pc, #88]	; (8004390 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004336:	601a      	str	r2, [r3, #0]
      break;
 8004338:	e01f      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 800433e:	601a      	str	r2, [r3, #0]
      break;
 8004340:	e01b      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004346:	601a      	str	r2, [r3, #0]
      break;
 8004348:	e017      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800434e:	601a      	str	r2, [r3, #0]
      break;
 8004350:	e013      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004356:	601a      	str	r2, [r3, #0]
      break;
 8004358:	e00f      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800435e:	601a      	str	r2, [r3, #0]
      break;
 8004360:	e00b      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4a10      	ldr	r2, [pc, #64]	; (80043a8 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004366:	601a      	str	r2, [r3, #0]
      break;
 8004368:	e007      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	4a0f      	ldr	r2, [pc, #60]	; (80043ac <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800436e:	601a      	str	r2, [r3, #0]
      break;
 8004370:	e003      	b.n	800437a <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	60fb      	str	r3, [r7, #12]
      break;
 8004378:	bf00      	nop
  }

  return ret;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	3fcccccd 	.word	0x3fcccccd
 8004388:	41480000 	.word	0x41480000
 800438c:	41d00000 	.word	0x41d00000
 8004390:	42500000 	.word	0x42500000
 8004394:	42d00000 	.word	0x42d00000
 8004398:	43500000 	.word	0x43500000
 800439c:	43d00000 	.word	0x43d00000
 80043a0:	44504000 	.word	0x44504000
 80043a4:	44cf8000 	.word	0x44cf8000
 80043a8:	45502000 	.word	0x45502000
 80043ac:	45d02000 	.word	0x45d02000

080043b0 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d106      	bne.n	80043d4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80043c6:	ed97 0a00 	vldr	s0, [r7]
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fb36 	bl	8004a3c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80043d0:	4603      	mov	r3, r0
 80043d2:	e005      	b.n	80043e0 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80043d4:	ed97 0a00 	vldr	s0, [r7]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fbbb 	bl	8004b54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80043de:	4603      	mov	r3, r0
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	331c      	adds	r3, #28
 80043fa:	f107 020b 	add.w	r2, r7, #11
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fdc3 	bl	8004f8c <lsm6dsl_xl_full_scale_get>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800440c:	f04f 33ff 	mov.w	r3, #4294967295
 8004410:	e023      	b.n	800445a <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d81b      	bhi.n	8004450 <LSM6DSL_ACC_GetFullScale+0x68>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <LSM6DSL_ACC_GetFullScale+0x38>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004431 	.word	0x08004431
 8004424:	08004449 	.word	0x08004449
 8004428:	08004439 	.word	0x08004439
 800442c:	08004441 	.word	0x08004441
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2202      	movs	r2, #2
 8004434:	601a      	str	r2, [r3, #0]
      break;
 8004436:	e00f      	b.n	8004458 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2204      	movs	r2, #4
 800443c:	601a      	str	r2, [r3, #0]
      break;
 800443e:	e00b      	b.n	8004458 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2208      	movs	r2, #8
 8004444:	601a      	str	r2, [r3, #0]
      break;
 8004446:	e007      	b.n	8004458 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2210      	movs	r2, #16
 800444c:	601a      	str	r2, [r3, #0]
      break;
 800444e:	e003      	b.n	8004458 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	60fb      	str	r3, [r7, #12]
      break;
 8004456:	bf00      	nop
  }

  return ret;
 8004458:	68fb      	ldr	r3, [r7, #12]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop

08004464 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b02      	cmp	r3, #2
 8004472:	dd0b      	ble.n	800448c <LSM6DSL_ACC_SetFullScale+0x28>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b04      	cmp	r3, #4
 8004478:	dd06      	ble.n	8004488 <LSM6DSL_ACC_SetFullScale+0x24>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b08      	cmp	r3, #8
 800447e:	dc01      	bgt.n	8004484 <LSM6DSL_ACC_SetFullScale+0x20>
 8004480:	2303      	movs	r3, #3
 8004482:	e004      	b.n	800448e <LSM6DSL_ACC_SetFullScale+0x2a>
 8004484:	2301      	movs	r3, #1
 8004486:	e002      	b.n	800448e <LSM6DSL_ACC_SetFullScale+0x2a>
 8004488:	2302      	movs	r3, #2
 800448a:	e000      	b.n	800448e <LSM6DSL_ACC_SetFullScale+0x2a>
 800448c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800448e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	331c      	adds	r3, #28
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	4611      	mov	r1, r2
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fd51 	bl	8004f40 <lsm6dsl_xl_full_scale_set>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	e000      	b.n	80044ac <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	331c      	adds	r3, #28
 80044c2:	f107 0208 	add.w	r2, r7, #8
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ff86 	bl	80053da <lsm6dsl_acceleration_raw_get>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
 80044d8:	e00c      	b.n	80044f4 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80044da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80044e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80044ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	331c      	adds	r3, #28
 8004510:	f107 0210 	add.w	r2, r7, #16
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ff5f 	bl	80053da <lsm6dsl_acceleration_raw_get>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	e03c      	b.n	80045a2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fe74 	bl	800421c <LSM6DSL_ACC_GetSensitivity>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	e030      	b.n	80045a2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004540:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800454c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004558:	ee17 2a90 	vmov	r2, s15
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800456c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004578:	ee17 2a90 	vmov	r2, s15
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004580:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800458c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004598:	ee17 2a90 	vmov	r2, s15
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	e014      	b.n	80045ea <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f103 021c 	add.w	r2, r3, #28
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f000 fe0a 	bl	80051e8 <lsm6dsl_gy_data_rate_set>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e004      	b.n	80045ea <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e01f      	b.n	8004648 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f103 021c 	add.w	r2, r3, #28
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	332c      	adds	r3, #44	; 0x2c
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f000 fe0d 	bl	8005234 <lsm6dsl_gy_data_rate_get>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	e010      	b.n	8004648 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	331c      	adds	r3, #28
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fddb 	bl	80051e8 <lsm6dsl_gy_data_rate_set>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	e004      	b.n	8004648 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	331c      	adds	r3, #28
 8004662:	f107 020b 	add.w	r2, r7, #11
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fd7b 	bl	8005164 <lsm6dsl_gy_full_scale_get>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	e02d      	b.n	80046d6 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800467a:	7afb      	ldrb	r3, [r7, #11]
 800467c:	2b06      	cmp	r3, #6
 800467e:	d825      	bhi.n	80046cc <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046a5 	.word	0x080046a5
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046cd 	.word	0x080046cd
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046c5 	.word	0x080046c5
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80046a8:	601a      	str	r2, [r3, #0]
      break;
 80046aa:	e013      	b.n	80046d4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4a0d      	ldr	r2, [pc, #52]	; (80046e4 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80046b0:	601a      	str	r2, [r3, #0]
      break;
 80046b2:	e00f      	b.n	80046d4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80046b8:	601a      	str	r2, [r3, #0]
      break;
 80046ba:	e00b      	b.n	80046d4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80046c0:	601a      	str	r2, [r3, #0]
      break;
 80046c2:	e007      	b.n	80046d4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80046c8:	601a      	str	r2, [r3, #0]
      break;
 80046ca:	e003      	b.n	80046d4 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
 80046d0:	60fb      	str	r3, [r7, #12]
      break;
 80046d2:	bf00      	nop
  }

  return ret;
 80046d4:	68fb      	ldr	r3, [r7, #12]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	408c0000 	.word	0x408c0000
 80046e4:	410c0000 	.word	0x410c0000
 80046e8:	418c0000 	.word	0x418c0000
 80046ec:	420c0000 	.word	0x420c0000
 80046f0:	428c0000 	.word	0x428c0000

080046f4 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	331c      	adds	r3, #28
 8004706:	f107 020b 	add.w	r2, r7, #11
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fd91 	bl	8005234 <lsm6dsl_gy_data_rate_get>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	e04e      	b.n	80047bc <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800471e:	7afb      	ldrb	r3, [r7, #11]
 8004720:	2b0a      	cmp	r3, #10
 8004722:	d846      	bhi.n	80047b2 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004759 	.word	0x08004759
 8004730:	08004763 	.word	0x08004763
 8004734:	0800476b 	.word	0x0800476b
 8004738:	08004773 	.word	0x08004773
 800473c:	0800477b 	.word	0x0800477b
 8004740:	08004783 	.word	0x08004783
 8004744:	0800478b 	.word	0x0800478b
 8004748:	08004793 	.word	0x08004793
 800474c:	0800479b 	.word	0x0800479b
 8004750:	080047a3 	.word	0x080047a3
 8004754:	080047ab 	.word	0x080047ab
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
      break;
 8004760:	e02b      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004766:	601a      	str	r2, [r3, #0]
      break;
 8004768:	e027      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 800476e:	601a      	str	r2, [r3, #0]
      break;
 8004770:	e023      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	4a15      	ldr	r2, [pc, #84]	; (80047cc <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004776:	601a      	str	r2, [r3, #0]
      break;
 8004778:	e01f      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800477e:	601a      	str	r2, [r3, #0]
      break;
 8004780:	e01b      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004786:	601a      	str	r2, [r3, #0]
      break;
 8004788:	e017      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800478e:	601a      	str	r2, [r3, #0]
      break;
 8004790:	e013      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	4a11      	ldr	r2, [pc, #68]	; (80047dc <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004796:	601a      	str	r2, [r3, #0]
      break;
 8004798:	e00f      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	4a10      	ldr	r2, [pc, #64]	; (80047e0 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800479e:	601a      	str	r2, [r3, #0]
      break;
 80047a0:	e00b      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80047a6:	601a      	str	r2, [r3, #0]
      break;
 80047a8:	e007      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80047ae:	601a      	str	r2, [r3, #0]
      break;
 80047b0:	e003      	b.n	80047ba <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	60fb      	str	r3, [r7, #12]
      break;
 80047b8:	bf00      	nop
  }

  return ret;
 80047ba:	68fb      	ldr	r3, [r7, #12]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	41480000 	.word	0x41480000
 80047c8:	41d00000 	.word	0x41d00000
 80047cc:	42500000 	.word	0x42500000
 80047d0:	42d00000 	.word	0x42d00000
 80047d4:	43500000 	.word	0x43500000
 80047d8:	43d00000 	.word	0x43d00000
 80047dc:	44504000 	.word	0x44504000
 80047e0:	44cf8000 	.word	0x44cf8000
 80047e4:	45502000 	.word	0x45502000
 80047e8:	45d02000 	.word	0x45d02000

080047ec <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d106      	bne.n	8004810 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004802:	ed97 0a00 	vldr	s0, [r7]
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa26 	bl	8004c58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800480c:	4603      	mov	r3, r0
 800480e:	e005      	b.n	800481c <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004810:	ed97 0a00 	vldr	s0, [r7]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 faab 	bl	8004d70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800481a:	4603      	mov	r3, r0
  }
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	331c      	adds	r3, #28
 8004836:	f107 020b 	add.w	r2, r7, #11
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fc91 	bl	8005164 <lsm6dsl_gy_full_scale_get>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	e030      	b.n	80048b0 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800484e:	7afb      	ldrb	r3, [r7, #11]
 8004850:	2b06      	cmp	r3, #6
 8004852:	d828      	bhi.n	80048a6 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004881 	.word	0x08004881
 8004860:	08004879 	.word	0x08004879
 8004864:	08004889 	.word	0x08004889
 8004868:	080048a7 	.word	0x080048a7
 800486c:	08004893 	.word	0x08004893
 8004870:	080048a7 	.word	0x080048a7
 8004874:	0800489d 	.word	0x0800489d
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	227d      	movs	r2, #125	; 0x7d
 800487c:	601a      	str	r2, [r3, #0]
      break;
 800487e:	e016      	b.n	80048ae <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	22fa      	movs	r2, #250	; 0xfa
 8004884:	601a      	str	r2, [r3, #0]
      break;
 8004886:	e012      	b.n	80048ae <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800488e:	601a      	str	r2, [r3, #0]
      break;
 8004890:	e00d      	b.n	80048ae <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004898:	601a      	str	r2, [r3, #0]
      break;
 800489a:	e008      	b.n	80048ae <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80048a2:	601a      	str	r2, [r3, #0]
      break;
 80048a4:	e003      	b.n	80048ae <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295
 80048aa:	60fb      	str	r3, [r7, #12]
      break;
 80048ac:	bf00      	nop
  }

  return ret;
 80048ae:	68fb      	ldr	r3, [r7, #12]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b7d      	cmp	r3, #125	; 0x7d
 80048c6:	dd12      	ble.n	80048ee <LSM6DSL_GYRO_SetFullScale+0x36>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2bfa      	cmp	r3, #250	; 0xfa
 80048cc:	dd0d      	ble.n	80048ea <LSM6DSL_GYRO_SetFullScale+0x32>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048d4:	dd07      	ble.n	80048e6 <LSM6DSL_GYRO_SetFullScale+0x2e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048dc:	dc01      	bgt.n	80048e2 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80048de:	2304      	movs	r3, #4
 80048e0:	e006      	b.n	80048f0 <LSM6DSL_GYRO_SetFullScale+0x38>
 80048e2:	2306      	movs	r3, #6
 80048e4:	e004      	b.n	80048f0 <LSM6DSL_GYRO_SetFullScale+0x38>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e002      	b.n	80048f0 <LSM6DSL_GYRO_SetFullScale+0x38>
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <LSM6DSL_GYRO_SetFullScale+0x38>
 80048ee:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80048f0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	331c      	adds	r3, #28
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fc0c 	bl	8005118 <lsm6dsl_gy_full_scale_set>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
 800490a:	e000      	b.n	800490e <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	331c      	adds	r3, #28
 8004924:	f107 0208 	add.w	r2, r7, #8
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fd0a 	bl	8005344 <lsm6dsl_angular_rate_raw_get>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e00c      	b.n	8004956 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800493c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004944:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800494c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b086      	sub	sp, #24
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	331c      	adds	r3, #28
 800496c:	f107 0210 	add.w	r2, r7, #16
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fce6 	bl	8005344 <lsm6dsl_angular_rate_raw_get>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	e03c      	b.n	80049fe <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fe60 	bl	8004650 <LSM6DSL_GYRO_GetSensitivity>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
 800499a:	e030      	b.n	80049fe <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800499c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b4:	ee17 2a90 	vmov	r2, s15
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80049bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d4:	ee17 2a90 	vmov	r2, s15
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80049dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f4:	ee17 2a90 	vmov	r2, s15
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	70fb      	strb	r3, [r7, #3]
 8004a12:	4613      	mov	r3, r2
 8004a14:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f103 001c 	add.w	r0, r3, #28
 8004a1c:	1cba      	adds	r2, r7, #2
 8004a1e:	78f9      	ldrb	r1, [r7, #3]
 8004a20:	2301      	movs	r3, #1
 8004a22:	f000 fa75 	bl	8004f10 <lsm6dsl_write_reg>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	e000      	b.n	8004a34 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004a48:	edd7 7a00 	vldr	s15, [r7]
 8004a4c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	d801      	bhi.n	8004a5e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e058      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004a5e:	edd7 7a00 	vldr	s15, [r7]
 8004a62:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6e:	d801      	bhi.n	8004a74 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e04d      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004a74:	edd7 7a00 	vldr	s15, [r7]
 8004a78:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	d801      	bhi.n	8004a8a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004a86:	2303      	movs	r3, #3
 8004a88:	e042      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004a8a:	edd7 7a00 	vldr	s15, [r7]
 8004a8e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004b3c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9a:	d801      	bhi.n	8004aa0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	e037      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004aa0:	edd7 7a00 	vldr	s15, [r7]
 8004aa4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	d801      	bhi.n	8004ab6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	e02c      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ab6:	edd7 7a00 	vldr	s15, [r7]
 8004aba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004b44 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac6:	d801      	bhi.n	8004acc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004ac8:	2306      	movs	r3, #6
 8004aca:	e021      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004acc:	edd7 7a00 	vldr	s15, [r7]
 8004ad0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b48 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004ad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004adc:	d801      	bhi.n	8004ae2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004ade:	2307      	movs	r3, #7
 8004ae0:	e016      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ae2:	edd7 7a00 	vldr	s15, [r7]
 8004ae6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004b4c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af2:	d801      	bhi.n	8004af8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004af4:	2308      	movs	r3, #8
 8004af6:	e00b      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004af8:	edd7 7a00 	vldr	s15, [r7]
 8004afc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b08:	d801      	bhi.n	8004b0e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004b0a:	2309      	movs	r3, #9
 8004b0c:	e000      	b.n	8004b10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b0e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004b10:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	331c      	adds	r3, #28
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	4611      	mov	r1, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fa6e 	bl	8004ffc <lsm6dsl_xl_data_rate_set>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	e000      	b.n	8004b2e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	42500000 	.word	0x42500000
 8004b3c:	42d00000 	.word	0x42d00000
 8004b40:	43500000 	.word	0x43500000
 8004b44:	43d00000 	.word	0x43d00000
 8004b48:	44504000 	.word	0x44504000
 8004b4c:	44cf8000 	.word	0x44cf8000
 8004b50:	45502000 	.word	0x45502000

08004b54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004b60:	edd7 7a00 	vldr	s15, [r7]
 8004b64:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	d801      	bhi.n	8004b76 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e058      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004b76:	edd7 7a00 	vldr	s15, [r7]
 8004b7a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d801      	bhi.n	8004b8c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e04d      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004b8c:	edd7 7a00 	vldr	s15, [r7]
 8004b90:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004c3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9c:	d801      	bhi.n	8004ba2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e042      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ba2:	edd7 7a00 	vldr	s15, [r7]
 8004ba6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004c40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	d801      	bhi.n	8004bb8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	e037      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004bb8:	edd7 7a00 	vldr	s15, [r7]
 8004bbc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004c44 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	d801      	bhi.n	8004bce <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004bca:	2305      	movs	r3, #5
 8004bcc:	e02c      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004bce:	edd7 7a00 	vldr	s15, [r7]
 8004bd2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004c48 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bde:	d801      	bhi.n	8004be4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004be0:	2306      	movs	r3, #6
 8004be2:	e021      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004be4:	edd7 7a00 	vldr	s15, [r7]
 8004be8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004c4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d801      	bhi.n	8004bfa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004bf6:	2307      	movs	r3, #7
 8004bf8:	e016      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004bfa:	edd7 7a00 	vldr	s15, [r7]
 8004bfe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d801      	bhi.n	8004c10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	e00b      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c10:	edd7 7a00 	vldr	s15, [r7]
 8004c14:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004c54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	d801      	bhi.n	8004c26 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004c22:	2309      	movs	r3, #9
 8004c24:	e000      	b.n	8004c28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c26:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	42500000 	.word	0x42500000
 8004c40:	42d00000 	.word	0x42d00000
 8004c44:	43500000 	.word	0x43500000
 8004c48:	43d00000 	.word	0x43d00000
 8004c4c:	44504000 	.word	0x44504000
 8004c50:	44cf8000 	.word	0x44cf8000
 8004c54:	45502000 	.word	0x45502000

08004c58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004c64:	edd7 7a00 	vldr	s15, [r7]
 8004c68:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c74:	d801      	bhi.n	8004c7a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e058      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c7a:	edd7 7a00 	vldr	s15, [r7]
 8004c7e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8a:	d801      	bhi.n	8004c90 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e04d      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c90:	edd7 7a00 	vldr	s15, [r7]
 8004c94:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca0:	d801      	bhi.n	8004ca6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e042      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ca6:	edd7 7a00 	vldr	s15, [r7]
 8004caa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004d58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb6:	d801      	bhi.n	8004cbc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e037      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cbc:	edd7 7a00 	vldr	s15, [r7]
 8004cc0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ccc:	d801      	bhi.n	8004cd2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004cce:	2305      	movs	r3, #5
 8004cd0:	e02c      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cd2:	edd7 7a00 	vldr	s15, [r7]
 8004cd6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004d60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	d801      	bhi.n	8004ce8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004ce4:	2306      	movs	r3, #6
 8004ce6:	e021      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ce8:	edd7 7a00 	vldr	s15, [r7]
 8004cec:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	d801      	bhi.n	8004cfe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004cfa:	2307      	movs	r3, #7
 8004cfc:	e016      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cfe:	edd7 7a00 	vldr	s15, [r7]
 8004d02:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004d68 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0e:	d801      	bhi.n	8004d14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004d10:	2308      	movs	r3, #8
 8004d12:	e00b      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d14:	edd7 7a00 	vldr	s15, [r7]
 8004d18:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d24:	d801      	bhi.n	8004d2a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004d26:	2309      	movs	r3, #9
 8004d28:	e000      	b.n	8004d2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d2a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004d2c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	331c      	adds	r3, #28
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa56 	bl	80051e8 <lsm6dsl_gy_data_rate_set>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	e000      	b.n	8004d4a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	42500000 	.word	0x42500000
 8004d58:	42d00000 	.word	0x42d00000
 8004d5c:	43500000 	.word	0x43500000
 8004d60:	43d00000 	.word	0x43d00000
 8004d64:	44504000 	.word	0x44504000
 8004d68:	44cf8000 	.word	0x44cf8000
 8004d6c:	45502000 	.word	0x45502000

08004d70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004d7c:	edd7 7a00 	vldr	s15, [r7]
 8004d80:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	d801      	bhi.n	8004d92 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e058      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d92:	edd7 7a00 	vldr	s15, [r7]
 8004d96:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da2:	d801      	bhi.n	8004da8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e04d      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004da8:	edd7 7a00 	vldr	s15, [r7]
 8004dac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004e58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	d801      	bhi.n	8004dbe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e042      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dbe:	edd7 7a00 	vldr	s15, [r7]
 8004dc2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d801      	bhi.n	8004dd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	e037      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dd4:	edd7 7a00 	vldr	s15, [r7]
 8004dd8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de4:	d801      	bhi.n	8004dea <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004de6:	2305      	movs	r3, #5
 8004de8:	e02c      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dea:	edd7 7a00 	vldr	s15, [r7]
 8004dee:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfa:	d801      	bhi.n	8004e00 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004dfc:	2306      	movs	r3, #6
 8004dfe:	e021      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e00:	edd7 7a00 	vldr	s15, [r7]
 8004e04:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004e68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e10:	d801      	bhi.n	8004e16 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004e12:	2307      	movs	r3, #7
 8004e14:	e016      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e16:	edd7 7a00 	vldr	s15, [r7]
 8004e1a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	d801      	bhi.n	8004e2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	e00b      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e2c:	edd7 7a00 	vldr	s15, [r7]
 8004e30:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004e70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	d801      	bhi.n	8004e42 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004e3e:	2309      	movs	r3, #9
 8004e40:	e000      	b.n	8004e44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e42:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	42500000 	.word	0x42500000
 8004e5c:	42d00000 	.word	0x42d00000
 8004e60:	43500000 	.word	0x43500000
 8004e64:	43d00000 	.word	0x43d00000
 8004e68:	44504000 	.word	0x44504000
 8004e6c:	44cf8000 	.word	0x44cf8000
 8004e70:	45502000 	.word	0x45502000

08004e74 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	460b      	mov	r3, r1
 8004e82:	72fb      	strb	r3, [r7, #11]
 8004e84:	4613      	mov	r3, r2
 8004e86:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	695c      	ldr	r4, [r3, #20]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	7b1b      	ldrb	r3, [r3, #12]
 8004e94:	b298      	uxth	r0, r3
 8004e96:	7afb      	ldrb	r3, [r7, #11]
 8004e98:	b299      	uxth	r1, r3
 8004e9a:	893b      	ldrh	r3, [r7, #8]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	47a0      	blx	r4
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd90      	pop	{r4, r7, pc}

08004eaa <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004eaa:	b590      	push	{r4, r7, lr}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	72fb      	strb	r3, [r7, #11]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	691c      	ldr	r4, [r3, #16]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	7b1b      	ldrb	r3, [r3, #12]
 8004eca:	b298      	uxth	r0, r3
 8004ecc:	7afb      	ldrb	r3, [r7, #11]
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	893b      	ldrh	r3, [r7, #8]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	47a0      	blx	r4
 8004ed6:	4603      	mov	r3, r0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd90      	pop	{r4, r7, pc}

08004ee0 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	72fb      	strb	r3, [r7, #11]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685c      	ldr	r4, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6898      	ldr	r0, [r3, #8]
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	7af9      	ldrb	r1, [r7, #11]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	47a0      	blx	r4
 8004f04:	6178      	str	r0, [r7, #20]
  return ret;
 8004f06:	697b      	ldr	r3, [r7, #20]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd90      	pop	{r4, r7, pc}

08004f10 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	72fb      	strb	r3, [r7, #11]
 8004f20:	4613      	mov	r3, r2
 8004f22:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681c      	ldr	r4, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6898      	ldr	r0, [r3, #8]
 8004f2c:	893b      	ldrh	r3, [r7, #8]
 8004f2e:	7af9      	ldrb	r1, [r7, #11]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	47a0      	blx	r4
 8004f34:	6178      	str	r0, [r7, #20]
  return ret;
 8004f36:	697b      	ldr	r3, [r7, #20]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd90      	pop	{r4, r7, pc}

08004f40 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004f4c:	f107 0208 	add.w	r2, r7, #8
 8004f50:	2301      	movs	r3, #1
 8004f52:	2110      	movs	r1, #16
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ffc3 	bl	8004ee0 <lsm6dsl_read_reg>
 8004f5a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10f      	bne.n	8004f82 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	7a3b      	ldrb	r3, [r7, #8]
 8004f6c:	f362 0383 	bfi	r3, r2, #2, #2
 8004f70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004f72:	f107 0208 	add.w	r2, r7, #8
 8004f76:	2301      	movs	r3, #1
 8004f78:	2110      	movs	r1, #16
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff ffc8 	bl	8004f10 <lsm6dsl_write_reg>
 8004f80:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004f82:	68fb      	ldr	r3, [r7, #12]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004f96:	f107 0208 	add.w	r2, r7, #8
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	2110      	movs	r1, #16
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ff9e 	bl	8004ee0 <lsm6dsl_read_reg>
 8004fa4:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004fa6:	7a3b      	ldrb	r3, [r7, #8]
 8004fa8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d81a      	bhi.n	8004fe8 <lsm6dsl_xl_full_scale_get+0x5c>
 8004fb2:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fc9 	.word	0x08004fc9
 8004fbc:	08004fd1 	.word	0x08004fd1
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fe1 	.word	0x08004fe1
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
      break;
 8004fce:	e00f      	b.n	8004ff0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
      break;
 8004fd6:	e00b      	b.n	8004ff0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	701a      	strb	r2, [r3, #0]
      break;
 8004fde:	e007      	b.n	8004ff0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	701a      	strb	r2, [r3, #0]
      break;
 8004fe6:	e003      	b.n	8004ff0 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2204      	movs	r2, #4
 8004fec:	701a      	strb	r2, [r3, #0]
      break;
 8004fee:	bf00      	nop
  }

  return ret;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop

08004ffc <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005008:	f107 0208 	add.w	r2, r7, #8
 800500c:	2301      	movs	r3, #1
 800500e:	2110      	movs	r1, #16
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ff65 	bl	8004ee0 <lsm6dsl_read_reg>
 8005016:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	b2da      	uxtb	r2, r3
 8005026:	7a3b      	ldrb	r3, [r7, #8]
 8005028:	f362 1307 	bfi	r3, r2, #4, #4
 800502c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800502e:	f107 0208 	add.w	r2, r7, #8
 8005032:	2301      	movs	r3, #1
 8005034:	2110      	movs	r1, #16
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff6a 	bl	8004f10 <lsm6dsl_write_reg>
 800503c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800503e:	68fb      	ldr	r3, [r7, #12]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005052:	f107 0208 	add.w	r2, r7, #8
 8005056:	2301      	movs	r3, #1
 8005058:	2110      	movs	r1, #16
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff ff40 	bl	8004ee0 <lsm6dsl_read_reg>
 8005060:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8005062:	7a3b      	ldrb	r3, [r7, #8]
 8005064:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b0b      	cmp	r3, #11
 800506c:	d84a      	bhi.n	8005104 <lsm6dsl_xl_data_rate_get+0xbc>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <lsm6dsl_xl_data_rate_get+0x2c>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	080050a5 	.word	0x080050a5
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050b5 	.word	0x080050b5
 8005080:	080050bd 	.word	0x080050bd
 8005084:	080050c5 	.word	0x080050c5
 8005088:	080050cd 	.word	0x080050cd
 800508c:	080050d5 	.word	0x080050d5
 8005090:	080050dd 	.word	0x080050dd
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080050ed 	.word	0x080050ed
 800509c:	080050f5 	.word	0x080050f5
 80050a0:	080050fd 	.word	0x080050fd
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
      break;
 80050aa:	e02f      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
      break;
 80050b2:	e02b      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2202      	movs	r2, #2
 80050b8:	701a      	strb	r2, [r3, #0]
      break;
 80050ba:	e027      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2203      	movs	r2, #3
 80050c0:	701a      	strb	r2, [r3, #0]
      break;
 80050c2:	e023      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2204      	movs	r2, #4
 80050c8:	701a      	strb	r2, [r3, #0]
      break;
 80050ca:	e01f      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2205      	movs	r2, #5
 80050d0:	701a      	strb	r2, [r3, #0]
      break;
 80050d2:	e01b      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2206      	movs	r2, #6
 80050d8:	701a      	strb	r2, [r3, #0]
      break;
 80050da:	e017      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2207      	movs	r2, #7
 80050e0:	701a      	strb	r2, [r3, #0]
      break;
 80050e2:	e013      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2208      	movs	r2, #8
 80050e8:	701a      	strb	r2, [r3, #0]
      break;
 80050ea:	e00f      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2209      	movs	r2, #9
 80050f0:	701a      	strb	r2, [r3, #0]
      break;
 80050f2:	e00b      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	220a      	movs	r2, #10
 80050f8:	701a      	strb	r2, [r3, #0]
      break;
 80050fa:	e007      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	220b      	movs	r2, #11
 8005100:	701a      	strb	r2, [r3, #0]
      break;
 8005102:	e003      	b.n	800510c <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	220c      	movs	r2, #12
 8005108:	701a      	strb	r2, [r3, #0]
      break;
 800510a:	bf00      	nop
  }

  return ret;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop

08005118 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005124:	f107 0208 	add.w	r2, r7, #8
 8005128:	2301      	movs	r3, #1
 800512a:	2111      	movs	r1, #17
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff fed7 	bl	8004ee0 <lsm6dsl_read_reg>
 8005132:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	b2da      	uxtb	r2, r3
 8005142:	7a3b      	ldrb	r3, [r7, #8]
 8005144:	f362 0343 	bfi	r3, r2, #1, #3
 8005148:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800514a:	f107 0208 	add.w	r2, r7, #8
 800514e:	2301      	movs	r3, #1
 8005150:	2111      	movs	r1, #17
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fedc 	bl	8004f10 <lsm6dsl_write_reg>
 8005158:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800516e:	f107 0208 	add.w	r2, r7, #8
 8005172:	2301      	movs	r3, #1
 8005174:	2111      	movs	r1, #17
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff feb2 	bl	8004ee0 <lsm6dsl_read_reg>
 800517c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800517e:	7a3b      	ldrb	r3, [r7, #8]
 8005180:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b06      	cmp	r3, #6
 8005188:	d824      	bhi.n	80051d4 <lsm6dsl_gy_full_scale_get+0x70>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <lsm6dsl_gy_full_scale_get+0x2c>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051b5 	.word	0x080051b5
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051cd 	.word	0x080051cd
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
      break;
 80051b2:	e013      	b.n	80051dc <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
      break;
 80051ba:	e00f      	b.n	80051dc <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2202      	movs	r2, #2
 80051c0:	701a      	strb	r2, [r3, #0]
      break;
 80051c2:	e00b      	b.n	80051dc <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2204      	movs	r2, #4
 80051c8:	701a      	strb	r2, [r3, #0]
      break;
 80051ca:	e007      	b.n	80051dc <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2206      	movs	r2, #6
 80051d0:	701a      	strb	r2, [r3, #0]
      break;
 80051d2:	e003      	b.n	80051dc <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2207      	movs	r2, #7
 80051d8:	701a      	strb	r2, [r3, #0]
      break;
 80051da:	bf00      	nop
  }

  return ret;
 80051dc:	68fb      	ldr	r3, [r7, #12]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop

080051e8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80051f4:	f107 0208 	add.w	r2, r7, #8
 80051f8:	2301      	movs	r3, #1
 80051fa:	2111      	movs	r1, #17
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fe6f 	bl	8004ee0 <lsm6dsl_read_reg>
 8005202:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10f      	bne.n	800522a <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	b2da      	uxtb	r2, r3
 8005212:	7a3b      	ldrb	r3, [r7, #8]
 8005214:	f362 1307 	bfi	r3, r2, #4, #4
 8005218:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800521a:	f107 0208 	add.w	r2, r7, #8
 800521e:	2301      	movs	r3, #1
 8005220:	2111      	movs	r1, #17
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fe74 	bl	8004f10 <lsm6dsl_write_reg>
 8005228:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800523e:	f107 0208 	add.w	r2, r7, #8
 8005242:	2301      	movs	r3, #1
 8005244:	2111      	movs	r1, #17
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fe4a 	bl	8004ee0 <lsm6dsl_read_reg>
 800524c:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800524e:	7a3b      	ldrb	r3, [r7, #8]
 8005250:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b0a      	cmp	r3, #10
 8005258:	d844      	bhi.n	80052e4 <lsm6dsl_gy_data_rate_get+0xb0>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <lsm6dsl_gy_data_rate_get+0x2c>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	0800528d 	.word	0x0800528d
 8005264:	08005295 	.word	0x08005295
 8005268:	0800529d 	.word	0x0800529d
 800526c:	080052a5 	.word	0x080052a5
 8005270:	080052ad 	.word	0x080052ad
 8005274:	080052b5 	.word	0x080052b5
 8005278:	080052bd 	.word	0x080052bd
 800527c:	080052c5 	.word	0x080052c5
 8005280:	080052cd 	.word	0x080052cd
 8005284:	080052d5 	.word	0x080052d5
 8005288:	080052dd 	.word	0x080052dd
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
      break;
 8005292:	e02b      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
      break;
 800529a:	e027      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
      break;
 80052a2:	e023      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2203      	movs	r2, #3
 80052a8:	701a      	strb	r2, [r3, #0]
      break;
 80052aa:	e01f      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2204      	movs	r2, #4
 80052b0:	701a      	strb	r2, [r3, #0]
      break;
 80052b2:	e01b      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2205      	movs	r2, #5
 80052b8:	701a      	strb	r2, [r3, #0]
      break;
 80052ba:	e017      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2206      	movs	r2, #6
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e013      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2207      	movs	r2, #7
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e00f      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2208      	movs	r2, #8
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	e00b      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2209      	movs	r2, #9
 80052d8:	701a      	strb	r2, [r3, #0]
      break;
 80052da:	e007      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	220a      	movs	r2, #10
 80052e0:	701a      	strb	r2, [r3, #0]
      break;
 80052e2:	e003      	b.n	80052ec <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	220b      	movs	r2, #11
 80052e8:	701a      	strb	r2, [r3, #0]
      break;
 80052ea:	bf00      	nop
  }

  return ret;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop

080052f8 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005304:	f107 0208 	add.w	r2, r7, #8
 8005308:	2301      	movs	r3, #1
 800530a:	2112      	movs	r1, #18
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fde7 	bl	8004ee0 <lsm6dsl_read_reg>
 8005312:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	b2da      	uxtb	r2, r3
 8005322:	7a3b      	ldrb	r3, [r7, #8]
 8005324:	f362 1386 	bfi	r3, r2, #6, #1
 8005328:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800532a:	f107 0208 	add.w	r2, r7, #8
 800532e:	2301      	movs	r3, #1
 8005330:	2112      	movs	r1, #18
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff fdec 	bl	8004f10 <lsm6dsl_write_reg>
 8005338:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800533a:	68fb      	ldr	r3, [r7, #12]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800534e:	f107 020c 	add.w	r2, r7, #12
 8005352:	2306      	movs	r3, #6
 8005354:	2122      	movs	r1, #34	; 0x22
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fdc2 	bl	8004ee0 <lsm6dsl_read_reg>
 800535c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800535e:	7b7b      	ldrb	r3, [r7, #13]
 8005360:	b21a      	sxth	r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800536c:	b29b      	uxth	r3, r3
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	b29a      	uxth	r2, r3
 8005372:	7b3b      	ldrb	r3, [r7, #12]
 8005374:	b29b      	uxth	r3, r3
 8005376:	4413      	add	r3, r2
 8005378:	b29b      	uxth	r3, r3
 800537a:	b21a      	sxth	r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	3302      	adds	r3, #2
 8005386:	b212      	sxth	r2, r2
 8005388:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	3302      	adds	r3, #2
 800538e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005392:	b29b      	uxth	r3, r3
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	b29a      	uxth	r2, r3
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	b29b      	uxth	r3, r3
 800539c:	4413      	add	r3, r2
 800539e:	b29a      	uxth	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	3302      	adds	r3, #2
 80053a4:	b212      	sxth	r2, r2
 80053a6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80053a8:	7c7a      	ldrb	r2, [r7, #17]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	3304      	adds	r3, #4
 80053ae:	b212      	sxth	r2, r2
 80053b0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	3304      	adds	r3, #4
 80053b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	b29a      	uxth	r2, r3
 80053c0:	7c3b      	ldrb	r3, [r7, #16]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	3304      	adds	r3, #4
 80053cc:	b212      	sxth	r2, r2
 80053ce:	801a      	strh	r2, [r3, #0]
  return ret;
 80053d0:	697b      	ldr	r3, [r7, #20]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80053e4:	f107 020c 	add.w	r2, r7, #12
 80053e8:	2306      	movs	r3, #6
 80053ea:	2128      	movs	r1, #40	; 0x28
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fd77 	bl	8004ee0 <lsm6dsl_read_reg>
 80053f2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80053f4:	7b7b      	ldrb	r3, [r7, #13]
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005402:	b29b      	uxth	r3, r3
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	b29a      	uxth	r2, r3
 8005408:	7b3b      	ldrb	r3, [r7, #12]
 800540a:	b29b      	uxth	r3, r3
 800540c:	4413      	add	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	b21a      	sxth	r2, r3
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	3302      	adds	r3, #2
 800541c:	b212      	sxth	r2, r2
 800541e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3302      	adds	r3, #2
 8005424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005428:	b29b      	uxth	r3, r3
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	b29a      	uxth	r2, r3
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	b29b      	uxth	r3, r3
 8005432:	4413      	add	r3, r2
 8005434:	b29a      	uxth	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	3302      	adds	r3, #2
 800543a:	b212      	sxth	r2, r2
 800543c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800543e:	7c7a      	ldrb	r2, [r7, #17]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	3304      	adds	r3, #4
 8005444:	b212      	sxth	r2, r2
 8005446:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	3304      	adds	r3, #4
 800544c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005450:	b29b      	uxth	r3, r3
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	b29a      	uxth	r2, r3
 8005456:	7c3b      	ldrb	r3, [r7, #16]
 8005458:	b29b      	uxth	r3, r3
 800545a:	4413      	add	r3, r2
 800545c:	b29a      	uxth	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	b212      	sxth	r2, r2
 8005464:	801a      	strh	r2, [r3, #0]
  return ret;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800547a:	2301      	movs	r3, #1
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	210f      	movs	r1, #15
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fd2d 	bl	8004ee0 <lsm6dsl_read_reg>
 8005486:	60f8      	str	r0, [r7, #12]
  return ret;
 8005488:	68fb      	ldr	r3, [r7, #12]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800549e:	f107 0208 	add.w	r2, r7, #8
 80054a2:	2301      	movs	r3, #1
 80054a4:	2112      	movs	r1, #18
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fd1a 	bl	8004ee0 <lsm6dsl_read_reg>
 80054ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10f      	bne.n	80054d4 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	7a3b      	ldrb	r3, [r7, #8]
 80054be:	f362 0382 	bfi	r3, r2, #2, #1
 80054c2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80054c4:	f107 0208 	add.w	r2, r7, #8
 80054c8:	2301      	movs	r3, #1
 80054ca:	2112      	movs	r1, #18
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff fd1f 	bl	8004f10 <lsm6dsl_write_reg>
 80054d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054d4:	68fb      	ldr	r3, [r7, #12]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	460b      	mov	r3, r1
 80054e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80054ea:	f107 0208 	add.w	r2, r7, #8
 80054ee:	2301      	movs	r3, #1
 80054f0:	210a      	movs	r1, #10
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fcf4 	bl	8004ee0 <lsm6dsl_read_reg>
 80054f8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10f      	bne.n	8005520 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	b2da      	uxtb	r2, r3
 8005508:	7a3b      	ldrb	r3, [r7, #8]
 800550a:	f362 0302 	bfi	r3, r2, #0, #3
 800550e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005510:	f107 0208 	add.w	r2, r7, #8
 8005514:	2301      	movs	r3, #1
 8005516:	210a      	movs	r1, #10
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fcf9 	bl	8004f10 <lsm6dsl_write_reg>
 800551e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005536:	2300      	movs	r3, #0
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800553a:	2301      	movs	r3, #1
 800553c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <IKS01A2_ENV_SENSOR_Init+0x24>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d032      	beq.n	80055b4 <IKS01A2_ENV_SENSOR_Init+0x88>
 800554e:	e063      	b.n	8005618 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005550:	6838      	ldr	r0, [r7, #0]
 8005552:	f000 f931 	bl	80057b8 <HTS221_0_Probe>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
 8005560:	e098      	b.n	8005694 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005562:	4a4e      	ldr	r2, [pc, #312]	; (800569c <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	494c      	ldr	r1, [pc, #304]	; (80056a0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005574:	f107 0108 	add.w	r1, r7, #8
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005582:	f06f 0306 	mvn.w	r3, #6
 8005586:	e085      	b.n	8005694 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005588:	7a3b      	ldrb	r3, [r7, #8]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d103      	bne.n	8005596 <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005596:	7abb      	ldrb	r3, [r7, #10]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d103      	bne.n	80055a4 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80055a4:	7a7b      	ldrb	r3, [r7, #9]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d13a      	bne.n	8005620 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f043 0302 	orr.w	r3, r3, #2
 80055b0:	61bb      	str	r3, [r7, #24]
      }
      break;
 80055b2:	e035      	b.n	8005620 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80055b4:	6838      	ldr	r0, [r7, #0]
 80055b6:	f000 f9b9 	bl	800592c <LPS22HB_0_Probe>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295
 80055c4:	e066      	b.n	8005694 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80055c6:	4a35      	ldr	r2, [pc, #212]	; (800569c <IKS01A2_ENV_SENSOR_Init+0x170>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4933      	ldr	r1, [pc, #204]	; (80056a0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055d8:	f107 0108 	add.w	r1, r7, #8
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80055e6:	f06f 0306 	mvn.w	r3, #6
 80055ea:	e053      	b.n	8005694 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80055ec:	7a3b      	ldrb	r3, [r7, #8]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d103      	bne.n	80055fa <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80055fa:	7abb      	ldrb	r3, [r7, #10]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d103      	bne.n	8005608 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f043 0304 	orr.w	r3, r3, #4
 8005606:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005608:	7a7b      	ldrb	r3, [r7, #9]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d10a      	bne.n	8005624 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f043 0302 	orr.w	r3, r3, #2
 8005614:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005616:	e005      	b.n	8005624 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005618:	f06f 0301 	mvn.w	r3, #1
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800561e:	e002      	b.n	8005626 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005620:	bf00      	nop
 8005622:	e000      	b.n	8005626 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005624:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	e031      	b.n	8005694 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e02a      	b.n	800568c <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	4013      	ands	r3, r2
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	429a      	cmp	r2, r3
 8005640:	d11e      	bne.n	8005680 <IKS01A2_ENV_SENSOR_Init+0x154>
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	4013      	ands	r3, r2
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	429a      	cmp	r2, r3
 800564c:	d118      	bne.n	8005680 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800564e:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005656:	4814      	ldr	r0, [pc, #80]	; (80056a8 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	440b      	add	r3, r1
 8005662:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	490d      	ldr	r1, [pc, #52]	; (80056a0 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005670:	4610      	mov	r0, r2
 8005672:	4798      	blx	r3
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800567a:	f06f 0304 	mvn.w	r3, #4
 800567e:	e009      	b.n	8005694 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3301      	adds	r3, #1
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d9d1      	bls.n	8005636 <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005694:	4618      	mov	r0, r3
 8005696:	3728      	adds	r7, #40	; 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000204 	.word	0x20000204
 80056a0:	200004b4 	.word	0x200004b4
 80056a4:	20000134 	.word	0x20000134
 80056a8:	200001ec 	.word	0x200001ec

080056ac <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d903      	bls.n	80056c4 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80056bc:	f06f 0301 	mvn.w	r3, #1
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e028      	b.n	8005716 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80056c4:	4a16      	ldr	r2, [pc, #88]	; (8005720 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	4013      	ands	r3, r2
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d11c      	bne.n	8005710 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80056d6:	4a13      	ldr	r2, [pc, #76]	; (8005724 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056de:	4812      	ldr	r0, [pc, #72]	; (8005728 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4413      	add	r3, r2
 80056e8:	440b      	add	r3, r1
 80056ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	490e      	ldr	r1, [pc, #56]	; (800572c <IKS01A2_ENV_SENSOR_Enable+0x80>)
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056f8:	4610      	mov	r0, r2
 80056fa:	4798      	blx	r3
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005702:	f06f 0304 	mvn.w	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e005      	b.n	8005716 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e002      	b.n	8005716 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005710:	f06f 0301 	mvn.w	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	2000020c 	.word	0x2000020c
 8005724:	20000134 	.word	0x20000134
 8005728:	200001ec 	.word	0x200001ec
 800572c:	200004b4 	.word	0x200004b4

08005730 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d903      	bls.n	800574a <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005742:	f06f 0301 	mvn.w	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e029      	b.n	800579e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	d11d      	bne.n	8005798 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005764:	4812      	ldr	r0, [pc, #72]	; (80057b0 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	440b      	add	r3, r1
 8005770:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	490f      	ldr	r1, [pc, #60]	; (80057b4 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4610      	mov	r0, r2
 8005782:	4798      	blx	r3
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800578a:	f06f 0304 	mvn.w	r3, #4
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e005      	b.n	800579e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e002      	b.n	800579e <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005798:	f06f 0301 	mvn.w	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800579e:	697b      	ldr	r3, [r7, #20]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	2000020c 	.word	0x2000020c
 80057ac:	20000134 	.word	0x20000134
 80057b0:	200001ec 	.word	0x200001ec
 80057b4:	200004b4 	.word	0x200004b4

080057b8 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b090      	sub	sp, #64	; 0x40
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80057c4:	2300      	movs	r3, #0
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80057c8:	23bf      	movs	r3, #191	; 0xbf
 80057ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80057ce:	4b49      	ldr	r3, [pc, #292]	; (80058f4 <HTS221_0_Probe+0x13c>)
 80057d0:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80057d2:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <HTS221_0_Probe+0x140>)
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HTS221_0_Probe+0x144>)
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80057da:	4b49      	ldr	r3, [pc, #292]	; (8005900 <HTS221_0_Probe+0x148>)
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 80057de:	4b49      	ldr	r3, [pc, #292]	; (8005904 <HTS221_0_Probe+0x14c>)
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80057e2:	f107 0320 	add.w	r3, r7, #32
 80057e6:	4619      	mov	r1, r3
 80057e8:	4847      	ldr	r0, [pc, #284]	; (8005908 <HTS221_0_Probe+0x150>)
 80057ea:	f7fb fbd7 	bl	8000f9c <HTS221_RegisterBusIO>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057f4:	f06f 0306 	mvn.w	r3, #6
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fa:	e076      	b.n	80058ea <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80057fc:	f107 031f 	add.w	r3, r7, #31
 8005800:	4619      	mov	r1, r3
 8005802:	4841      	ldr	r0, [pc, #260]	; (8005908 <HTS221_0_Probe+0x150>)
 8005804:	f7fb fc4f 	bl	80010a6 <HTS221_ReadID>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800580e:	f06f 0306 	mvn.w	r3, #6
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	e069      	b.n	80058ea <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8005816:	7ffb      	ldrb	r3, [r7, #31]
 8005818:	2bbc      	cmp	r3, #188	; 0xbc
 800581a:	d003      	beq.n	8005824 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800581c:	f06f 0306 	mvn.w	r3, #6
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005822:	e062      	b.n	80058ea <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	4619      	mov	r1, r3
 800582a:	4837      	ldr	r0, [pc, #220]	; (8005908 <HTS221_0_Probe+0x150>)
 800582c:	f7fb fc52 	bl	80010d4 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005830:	7b3b      	ldrb	r3, [r7, #12]
 8005832:	461a      	mov	r2, r3
 8005834:	7b7b      	ldrb	r3, [r7, #13]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800583e:	4313      	orrs	r3, r2
 8005840:	4a32      	ldr	r2, [pc, #200]	; (800590c <HTS221_0_Probe+0x154>)
 8005842:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8005844:	4b32      	ldr	r3, [pc, #200]	; (8005910 <HTS221_0_Probe+0x158>)
 8005846:	4a30      	ldr	r2, [pc, #192]	; (8005908 <HTS221_0_Probe+0x150>)
 8005848:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800584a:	4b32      	ldr	r3, [pc, #200]	; (8005914 <HTS221_0_Probe+0x15c>)
 800584c:	4a32      	ldr	r2, [pc, #200]	; (8005918 <HTS221_0_Probe+0x160>)
 800584e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11d      	bne.n	8005892 <HTS221_0_Probe+0xda>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d018      	beq.n	8005892 <HTS221_0_Probe+0xda>
 8005860:	7b3b      	ldrb	r3, [r7, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d115      	bne.n	8005892 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005866:	4b2d      	ldr	r3, [pc, #180]	; (800591c <HTS221_0_Probe+0x164>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4a2d      	ldr	r2, [pc, #180]	; (8005920 <HTS221_0_Probe+0x168>)
 800586c:	492d      	ldr	r1, [pc, #180]	; (8005924 <HTS221_0_Probe+0x16c>)
 800586e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005872:	4b28      	ldr	r3, [pc, #160]	; (8005914 <HTS221_0_Probe+0x15c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a25      	ldr	r2, [pc, #148]	; (8005910 <HTS221_0_Probe+0x158>)
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005886:	f06f 0304 	mvn.w	r3, #4
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588c:	e001      	b.n	8005892 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800588e:	2300      	movs	r3, #0
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11d      	bne.n	80058d4 <HTS221_0_Probe+0x11c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <HTS221_0_Probe+0x11c>
 80058a2:	7bbb      	ldrb	r3, [r7, #14]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d115      	bne.n	80058d4 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80058a8:	4b1c      	ldr	r3, [pc, #112]	; (800591c <HTS221_0_Probe+0x164>)
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HTS221_0_Probe+0x168>)
 80058ae:	491e      	ldr	r1, [pc, #120]	; (8005928 <HTS221_0_Probe+0x170>)
 80058b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80058b4:	4b17      	ldr	r3, [pc, #92]	; (8005914 <HTS221_0_Probe+0x15c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a15      	ldr	r2, [pc, #84]	; (8005910 <HTS221_0_Probe+0x158>)
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	4610      	mov	r0, r2
 80058c0:	4798      	blx	r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058c8:	f06f 0304 	mvn.w	r3, #4
 80058cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ce:	e001      	b.n	80058d4 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80058d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <HTS221_0_Probe+0x132>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058e4:	f06f 0304 	mvn.w	r3, #4
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80058ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3740      	adds	r7, #64	; 0x40
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	08000bc9 	.word	0x08000bc9
 80058f8:	08000c45 	.word	0x08000c45
 80058fc:	08000cf9 	.word	0x08000cf9
 8005900:	08000c95 	.word	0x08000c95
 8005904:	08000d5d 	.word	0x08000d5d
 8005908:	20000214 	.word	0x20000214
 800590c:	2000020c 	.word	0x2000020c
 8005910:	200004b4 	.word	0x200004b4
 8005914:	20000204 	.word	0x20000204
 8005918:	20000004 	.word	0x20000004
 800591c:	20000134 	.word	0x20000134
 8005920:	200001ec 	.word	0x200001ec
 8005924:	20000028 	.word	0x20000028
 8005928:	20000014 	.word	0x20000014

0800592c <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b090      	sub	sp, #64	; 0x40
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005934:	2300      	movs	r3, #0
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8005938:	2300      	movs	r3, #0
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800593c:	23bb      	movs	r3, #187	; 0xbb
 800593e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005942:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <LPS22HB_0_Probe+0x140>)
 8005944:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005946:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <LPS22HB_0_Probe+0x144>)
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800594a:	4b4a      	ldr	r3, [pc, #296]	; (8005a74 <LPS22HB_0_Probe+0x148>)
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800594e:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <LPS22HB_0_Probe+0x14c>)
 8005950:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005952:	4b4a      	ldr	r3, [pc, #296]	; (8005a7c <LPS22HB_0_Probe+0x150>)
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8005956:	f107 0320 	add.w	r3, r7, #32
 800595a:	4619      	mov	r1, r3
 800595c:	4848      	ldr	r0, [pc, #288]	; (8005a80 <LPS22HB_0_Probe+0x154>)
 800595e:	f7fc f93b 	bl	8001bd8 <LPS22HB_RegisterBusIO>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005968:	f06f 0306 	mvn.w	r3, #6
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596e:	e078      	b.n	8005a62 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005970:	f107 031f 	add.w	r3, r7, #31
 8005974:	4619      	mov	r1, r3
 8005976:	4842      	ldr	r0, [pc, #264]	; (8005a80 <LPS22HB_0_Probe+0x154>)
 8005978:	f7fc f9d3 	bl	8001d22 <LPS22HB_ReadID>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005982:	f06f 0306 	mvn.w	r3, #6
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005988:	e06b      	b.n	8005a62 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800598a:	7ffb      	ldrb	r3, [r7, #31]
 800598c:	2bb1      	cmp	r3, #177	; 0xb1
 800598e:	d003      	beq.n	8005998 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005990:	f06f 0306 	mvn.w	r3, #6
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005996:	e064      	b.n	8005a62 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	4619      	mov	r1, r3
 800599e:	4838      	ldr	r0, [pc, #224]	; (8005a80 <LPS22HB_0_Probe+0x154>)
 80059a0:	f7fc f9d6 	bl	8001d50 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80059a4:	7b3b      	ldrb	r3, [r7, #12]
 80059a6:	461a      	mov	r2, r3
 80059a8:	7b7b      	ldrb	r3, [r7, #13]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80059b2:	4313      	orrs	r3, r2
 80059b4:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <LPS22HB_0_Probe+0x158>)
 80059b6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80059b8:	4b33      	ldr	r3, [pc, #204]	; (8005a88 <LPS22HB_0_Probe+0x15c>)
 80059ba:	4a31      	ldr	r2, [pc, #196]	; (8005a80 <LPS22HB_0_Probe+0x154>)
 80059bc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80059be:	4b33      	ldr	r3, [pc, #204]	; (8005a8c <LPS22HB_0_Probe+0x160>)
 80059c0:	4a33      	ldr	r2, [pc, #204]	; (8005a90 <LPS22HB_0_Probe+0x164>)
 80059c2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11e      	bne.n	8005a08 <LPS22HB_0_Probe+0xdc>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d019      	beq.n	8005a08 <LPS22HB_0_Probe+0xdc>
 80059d4:	7b3b      	ldrb	r3, [r7, #12]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d116      	bne.n	8005a08 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80059da:	4b2e      	ldr	r3, [pc, #184]	; (8005a94 <LPS22HB_0_Probe+0x168>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4a2e      	ldr	r2, [pc, #184]	; (8005a98 <LPS22HB_0_Probe+0x16c>)
 80059e0:	3303      	adds	r3, #3
 80059e2:	492e      	ldr	r1, [pc, #184]	; (8005a9c <LPS22HB_0_Probe+0x170>)
 80059e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80059e8:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <LPS22HB_0_Probe+0x160>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <LPS22HB_0_Probe+0x15c>)
 80059f0:	6852      	ldr	r2, [r2, #4]
 80059f2:	4610      	mov	r0, r2
 80059f4:	4798      	blx	r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80059fc:	f06f 0304 	mvn.w	r3, #4
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a02:	e001      	b.n	8005a08 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11e      	bne.n	8005a4c <LPS22HB_0_Probe+0x120>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <LPS22HB_0_Probe+0x120>
 8005a18:	7b7b      	ldrb	r3, [r7, #13]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d116      	bne.n	8005a4c <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <LPS22HB_0_Probe+0x168>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <LPS22HB_0_Probe+0x16c>)
 8005a24:	3303      	adds	r3, #3
 8005a26:	491e      	ldr	r1, [pc, #120]	; (8005aa0 <LPS22HB_0_Probe+0x174>)
 8005a28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <LPS22HB_0_Probe+0x160>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <LPS22HB_0_Probe+0x15c>)
 8005a34:	6852      	ldr	r2, [r2, #4]
 8005a36:	4610      	mov	r0, r2
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a40:	f06f 0304 	mvn.w	r3, #4
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a46:	e001      	b.n	8005a4c <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <LPS22HB_0_Probe+0x136>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a5c:	f06f 0304 	mvn.w	r3, #4
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3740      	adds	r7, #64	; 0x40
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	08000bc9 	.word	0x08000bc9
 8005a70:	08000c45 	.word	0x08000c45
 8005a74:	08000cf9 	.word	0x08000cf9
 8005a78:	08000c95 	.word	0x08000c95
 8005a7c:	08000d5d 	.word	0x08000d5d
 8005a80:	20000240 	.word	0x20000240
 8005a84:	2000020c 	.word	0x2000020c
 8005a88:	200004b4 	.word	0x200004b4
 8005a8c:	20000204 	.word	0x20000204
 8005a90:	2000003c 	.word	0x2000003c
 8005a94:	20000134 	.word	0x20000134
 8005a98:	200001ec 	.word	0x200001ec
 8005a9c:	20000060 	.word	0x20000060
 8005aa0:	2000004c 	.word	0x2000004c

08005aa4 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08e      	sub	sp, #56	; 0x38
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d06e      	beq.n	8005b9e <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	f200 809d 	bhi.w	8005c02 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d032      	beq.n	8005b3a <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005ad4:	e095      	b.n	8005c02 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005ad6:	6838      	ldr	r0, [r7, #0]
 8005ad8:	f000 f966 	bl	8005da8 <LSM6DSL_0_Probe>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae6:	e0cc      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005ae8:	4a68      	ldr	r2, [pc, #416]	; (8005c8c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	4967      	ldr	r1, [pc, #412]	; (8005c90 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005afa:	f107 010c 	add.w	r1, r7, #12
 8005afe:	4610      	mov	r0, r2
 8005b00:	4798      	blx	r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b08:	f06f 0306 	mvn.w	r3, #6
 8005b0c:	e0b9      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b0e:	7b3b      	ldrb	r3, [r7, #12]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d103      	bne.n	8005b1c <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f043 0302 	orr.w	r3, r3, #2
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b1c:	7b7b      	ldrb	r3, [r7, #13]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d103      	bne.n	8005b2a <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d16c      	bne.n	8005c0a <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b38:	e067      	b.n	8005c0a <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b3a:	6838      	ldr	r0, [r7, #0]
 8005b3c:	f000 f9f0 	bl	8005f20 <LSM303AGR_ACC_0_Probe>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4a:	e09a      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b4c:	4a4f      	ldr	r2, [pc, #316]	; (8005c8c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	494e      	ldr	r1, [pc, #312]	; (8005c90 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b5e:	f107 010c 	add.w	r1, r7, #12
 8005b62:	4610      	mov	r0, r2
 8005b64:	4798      	blx	r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b6c:	f06f 0306 	mvn.w	r3, #6
 8005b70:	e087      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b72:	7b3b      	ldrb	r3, [r7, #12]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d103      	bne.n	8005b80 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	f043 0302 	orr.w	r3, r3, #2
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b80:	7b7b      	ldrb	r3, [r7, #13]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d103      	bne.n	8005b8e <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b8e:	7bbb      	ldrb	r3, [r7, #14]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d13c      	bne.n	8005c0e <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	f043 0304 	orr.w	r3, r3, #4
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b9c:	e037      	b.n	8005c0e <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f000 fa62 	bl	8006068 <LSM303AGR_MAG_0_Probe>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bae:	e068      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005bb0:	4a36      	ldr	r2, [pc, #216]	; (8005c8c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	4935      	ldr	r1, [pc, #212]	; (8005c90 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bc2:	f107 010c 	add.w	r1, r7, #12
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4798      	blx	r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005bd0:	f06f 0306 	mvn.w	r3, #6
 8005bd4:	e055      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005bd6:	7b3b      	ldrb	r3, [r7, #12]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d103      	bne.n	8005be4 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	f043 0302 	orr.w	r3, r3, #2
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005be4:	7b7b      	ldrb	r3, [r7, #13]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d103      	bne.n	8005bf2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d10c      	bne.n	8005c12 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c00:	e007      	b.n	8005c12 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005c02:	f06f 0301 	mvn.w	r3, #1
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005c08:	e004      	b.n	8005c14 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c12:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	e031      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005c1e:	2300      	movs	r3, #0
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c22:	e02a      	b.n	8005c7a <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	4013      	ands	r3, r2
 8005c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d11e      	bne.n	8005c6e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	4013      	ands	r3, r2
 8005c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d118      	bne.n	8005c6e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005c3c:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c44:	4814      	ldr	r0, [pc, #80]	; (8005c98 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	440b      	add	r3, r1
 8005c50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	490e      	ldr	r1, [pc, #56]	; (8005c90 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c5e:	4610      	mov	r0, r2
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005c68:	f06f 0304 	mvn.w	r3, #4
 8005c6c:	e009      	b.n	8005c82 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	3301      	adds	r3, #1
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d9d1      	bls.n	8005c24 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3738      	adds	r7, #56	; 0x38
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000290 	.word	0x20000290
 8005c90:	200004bc 	.word	0x200004bc
 8005c94:	20000148 	.word	0x20000148
 8005c98:	2000026c 	.word	0x2000026c

08005c9c <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d903      	bls.n	8005cb4 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cac:	f06f 0301 	mvn.w	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e028      	b.n	8005d06 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d11c      	bne.n	8005d00 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005cc6:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005cce:	4812      	ldr	r0, [pc, #72]	; (8005d18 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	440b      	add	r3, r1
 8005cda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	490e      	ldr	r1, [pc, #56]	; (8005d1c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cf2:	f06f 0304 	mvn.w	r3, #4
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e005      	b.n	8005d06 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e002      	b.n	8005d06 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d00:	f06f 0301 	mvn.w	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	2000029c 	.word	0x2000029c
 8005d14:	20000148 	.word	0x20000148
 8005d18:	2000026c 	.word	0x2000026c
 8005d1c:	200004bc 	.word	0x200004bc

08005d20 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d903      	bls.n	8005d3a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d32:	f06f 0301 	mvn.w	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e029      	b.n	8005d8e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d11d      	bne.n	8005d88 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005d4c:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d54:	4812      	ldr	r0, [pc, #72]	; (8005da0 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4413      	add	r3, r2
 8005d5e:	440b      	add	r3, r1
 8005d60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	490f      	ldr	r1, [pc, #60]	; (8005da4 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d7a:	f06f 0304 	mvn.w	r3, #4
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e005      	b.n	8005d8e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e002      	b.n	8005d8e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d88:	f06f 0301 	mvn.w	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d8e:	697b      	ldr	r3, [r7, #20]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	2000029c 	.word	0x2000029c
 8005d9c:	20000148 	.word	0x20000148
 8005da0:	2000026c 	.word	0x2000026c
 8005da4:	200004bc 	.word	0x200004bc

08005da8 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b092      	sub	sp, #72	; 0x48
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005db4:	2300      	movs	r3, #0
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005db8:	23d7      	movs	r3, #215	; 0xd7
 8005dba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005dbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <LSM6DSL_0_Probe+0x140>)
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005dc2:	4b4a      	ldr	r3, [pc, #296]	; (8005eec <LSM6DSL_0_Probe+0x144>)
 8005dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005dc6:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <LSM6DSL_0_Probe+0x148>)
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005dca:	4b4a      	ldr	r3, [pc, #296]	; (8005ef4 <LSM6DSL_0_Probe+0x14c>)
 8005dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005dce:	4b4a      	ldr	r3, [pc, #296]	; (8005ef8 <LSM6DSL_0_Probe+0x150>)
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4848      	ldr	r0, [pc, #288]	; (8005efc <LSM6DSL_0_Probe+0x154>)
 8005dda:	f7fe f891 	bl	8003f00 <LSM6DSL_RegisterBusIO>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005de4:	f06f 0306 	mvn.w	r3, #6
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dea:	e077      	b.n	8005edc <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005dec:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005df0:	4619      	mov	r1, r3
 8005df2:	4842      	ldr	r0, [pc, #264]	; (8005efc <LSM6DSL_0_Probe+0x154>)
 8005df4:	f7fe f97a 	bl	80040ec <LSM6DSL_ReadID>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dfe:	f06f 0306 	mvn.w	r3, #6
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
 8005e04:	e06a      	b.n	8005edc <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e0a:	2b6a      	cmp	r3, #106	; 0x6a
 8005e0c:	d003      	beq.n	8005e16 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e0e:	f06f 0306 	mvn.w	r3, #6
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
 8005e14:	e062      	b.n	8005edc <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005e16:	f107 0308 	add.w	r3, r7, #8
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4837      	ldr	r0, [pc, #220]	; (8005efc <LSM6DSL_0_Probe+0x154>)
 8005e1e:	f7fe f97b 	bl	8004118 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005e22:	7a7b      	ldrb	r3, [r7, #9]
 8005e24:	461a      	mov	r2, r3
 8005e26:	7a3b      	ldrb	r3, [r7, #8]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	7abb      	ldrb	r3, [r7, #10]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4313      	orrs	r3, r2
 8005e32:	4a33      	ldr	r2, [pc, #204]	; (8005f00 <LSM6DSL_0_Probe+0x158>)
 8005e34:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005e36:	4b33      	ldr	r3, [pc, #204]	; (8005f04 <LSM6DSL_0_Probe+0x15c>)
 8005e38:	4a30      	ldr	r2, [pc, #192]	; (8005efc <LSM6DSL_0_Probe+0x154>)
 8005e3a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005e3c:	4b32      	ldr	r3, [pc, #200]	; (8005f08 <LSM6DSL_0_Probe+0x160>)
 8005e3e:	4a33      	ldr	r2, [pc, #204]	; (8005f0c <LSM6DSL_0_Probe+0x164>)
 8005e40:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11d      	bne.n	8005e84 <LSM6DSL_0_Probe+0xdc>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d018      	beq.n	8005e84 <LSM6DSL_0_Probe+0xdc>
 8005e52:	7a7b      	ldrb	r3, [r7, #9]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d115      	bne.n	8005e84 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005e58:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <LSM6DSL_0_Probe+0x168>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a2d      	ldr	r2, [pc, #180]	; (8005f14 <LSM6DSL_0_Probe+0x16c>)
 8005e5e:	492e      	ldr	r1, [pc, #184]	; (8005f18 <LSM6DSL_0_Probe+0x170>)
 8005e60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005e64:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <LSM6DSL_0_Probe+0x160>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a26      	ldr	r2, [pc, #152]	; (8005f04 <LSM6DSL_0_Probe+0x15c>)
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4798      	blx	r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e78:	f06f 0304 	mvn.w	r3, #4
 8005e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7e:	e001      	b.n	8005e84 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e80:	2300      	movs	r3, #0
 8005e82:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d11d      	bne.n	8005ec6 <LSM6DSL_0_Probe+0x11e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d018      	beq.n	8005ec6 <LSM6DSL_0_Probe+0x11e>
 8005e94:	7a3b      	ldrb	r3, [r7, #8]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d115      	bne.n	8005ec6 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e9a:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <LSM6DSL_0_Probe+0x168>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <LSM6DSL_0_Probe+0x16c>)
 8005ea0:	491e      	ldr	r1, [pc, #120]	; (8005f1c <LSM6DSL_0_Probe+0x174>)
 8005ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <LSM6DSL_0_Probe+0x160>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a15      	ldr	r2, [pc, #84]	; (8005f04 <LSM6DSL_0_Probe+0x15c>)
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eba:	f06f 0304 	mvn.w	r3, #4
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec0:	e001      	b.n	8005ec6 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d107      	bne.n	8005edc <LSM6DSL_0_Probe+0x134>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ed6:	f06f 0304 	mvn.w	r3, #4
 8005eda:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3748      	adds	r7, #72	; 0x48
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	08000bc9 	.word	0x08000bc9
 8005eec:	08000c45 	.word	0x08000c45
 8005ef0:	08000cf9 	.word	0x08000cf9
 8005ef4:	08000c95 	.word	0x08000c95
 8005ef8:	08000d5d 	.word	0x08000d5d
 8005efc:	200002a8 	.word	0x200002a8
 8005f00:	2000029c 	.word	0x2000029c
 8005f04:	200004bc 	.word	0x200004bc
 8005f08:	20000290 	.word	0x20000290
 8005f0c:	200000dc 	.word	0x200000dc
 8005f10:	20000148 	.word	0x20000148
 8005f14:	2000026c 	.word	0x2000026c
 8005f18:	20000110 	.word	0x20000110
 8005f1c:	200000ec 	.word	0x200000ec

08005f20 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b092      	sub	sp, #72	; 0x48
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005f30:	2333      	movs	r3, #51	; 0x33
 8005f32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005f36:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <LSM303AGR_ACC_0_Probe+0x114>)
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <LSM303AGR_ACC_0_Probe+0x118>)
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	; (800603c <LSM303AGR_ACC_0_Probe+0x11c>)
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <LSM303AGR_ACC_0_Probe+0x120>)
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005f46:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <LSM303AGR_ACC_0_Probe+0x124>)
 8005f48:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f4e:	4619      	mov	r1, r3
 8005f50:	483d      	ldr	r0, [pc, #244]	; (8006048 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f52:	f7fc fc1f 	bl	8002794 <LSM303AGR_ACC_RegisterBusIO>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f5c:	f06f 0306 	mvn.w	r3, #6
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
 8005f62:	e062      	b.n	800602a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005f64:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4837      	ldr	r0, [pc, #220]	; (8006048 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f6c:	f7fc fcd3 	bl	8002916 <LSM303AGR_ACC_ReadID>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f76:	f06f 0306 	mvn.w	r3, #6
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7c:	e055      	b.n	800602a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f82:	2b33      	cmp	r3, #51	; 0x33
 8005f84:	d003      	beq.n	8005f8e <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f86:	f06f 0306 	mvn.w	r3, #6
 8005f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f8c:	e04d      	b.n	800602a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005f8e:	f107 0308 	add.w	r3, r7, #8
 8005f92:	4619      	mov	r1, r3
 8005f94:	482c      	ldr	r0, [pc, #176]	; (8006048 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f96:	f7fc fcd5 	bl	8002944 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f9a:	7a7b      	ldrb	r3, [r7, #9]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	7a3b      	ldrb	r3, [r7, #8]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005fa4:	7abb      	ldrb	r3, [r7, #10]
 8005fa6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	4a28      	ldr	r2, [pc, #160]	; (800604c <LSM303AGR_ACC_0_Probe+0x12c>)
 8005fac:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005fae:	4b28      	ldr	r3, [pc, #160]	; (8006050 <LSM303AGR_ACC_0_Probe+0x130>)
 8005fb0:	4a25      	ldr	r2, [pc, #148]	; (8006048 <LSM303AGR_ACC_0_Probe+0x128>)
 8005fb2:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005fb4:	4b27      	ldr	r3, [pc, #156]	; (8006054 <LSM303AGR_ACC_0_Probe+0x134>)
 8005fb6:	4a28      	ldr	r2, [pc, #160]	; (8006058 <LSM303AGR_ACC_0_Probe+0x138>)
 8005fb8:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11e      	bne.n	8005ffe <LSM303AGR_ACC_0_Probe+0xde>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d019      	beq.n	8005ffe <LSM303AGR_ACC_0_Probe+0xde>
 8005fca:	7a3b      	ldrb	r3, [r7, #8]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d116      	bne.n	8005ffe <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005fd0:	4b22      	ldr	r3, [pc, #136]	; (800605c <LSM303AGR_ACC_0_Probe+0x13c>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4a22      	ldr	r2, [pc, #136]	; (8006060 <LSM303AGR_ACC_0_Probe+0x140>)
 8005fd6:	3303      	adds	r3, #3
 8005fd8:	4922      	ldr	r1, [pc, #136]	; (8006064 <LSM303AGR_ACC_0_Probe+0x144>)
 8005fda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005fde:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <LSM303AGR_ACC_0_Probe+0x134>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1a      	ldr	r2, [pc, #104]	; (8006050 <LSM303AGR_ACC_0_Probe+0x130>)
 8005fe6:	6852      	ldr	r2, [r2, #4]
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4798      	blx	r3
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ff2:	f06f 0304 	mvn.w	r3, #4
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff8:	e001      	b.n	8005ffe <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006000:	2b00      	cmp	r3, #0
 8006002:	d107      	bne.n	8006014 <LSM303AGR_ACC_0_Probe+0xf4>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800600e:	f06f 0304 	mvn.w	r3, #4
 8006012:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <LSM303AGR_ACC_0_Probe+0x10a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006024:	f06f 0304 	mvn.w	r3, #4
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800602a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800602c:	4618      	mov	r0, r3
 800602e:	3748      	adds	r7, #72	; 0x48
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	08000bc9 	.word	0x08000bc9
 8006038:	08000c45 	.word	0x08000c45
 800603c:	08000cf9 	.word	0x08000cf9
 8006040:	08000c95 	.word	0x08000c95
 8006044:	08000d5d 	.word	0x08000d5d
 8006048:	200002d8 	.word	0x200002d8
 800604c:	2000029c 	.word	0x2000029c
 8006050:	200004bc 	.word	0x200004bc
 8006054:	20000290 	.word	0x20000290
 8006058:	20000074 	.word	0x20000074
 800605c:	20000148 	.word	0x20000148
 8006060:	2000026c 	.word	0x2000026c
 8006064:	20000084 	.word	0x20000084

08006068 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b092      	sub	sp, #72	; 0x48
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006070:	2300      	movs	r3, #0
 8006072:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006074:	2300      	movs	r3, #0
 8006076:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006078:	233d      	movs	r3, #61	; 0x3d
 800607a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800607e:	4b3f      	ldr	r3, [pc, #252]	; (800617c <LSM303AGR_MAG_0_Probe+0x114>)
 8006080:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006082:	4b3f      	ldr	r3, [pc, #252]	; (8006180 <LSM303AGR_MAG_0_Probe+0x118>)
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006086:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006088:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800608a:	4b3f      	ldr	r3, [pc, #252]	; (8006188 <LSM303AGR_MAG_0_Probe+0x120>)
 800608c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800608e:	4b3f      	ldr	r3, [pc, #252]	; (800618c <LSM303AGR_MAG_0_Probe+0x124>)
 8006090:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8006092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006096:	4619      	mov	r1, r3
 8006098:	483d      	ldr	r0, [pc, #244]	; (8006190 <LSM303AGR_MAG_0_Probe+0x128>)
 800609a:	f7fc ff41 	bl	8002f20 <LSM303AGR_MAG_RegisterBusIO>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060a4:	f06f 0306 	mvn.w	r3, #6
 80060a8:	647b      	str	r3, [r7, #68]	; 0x44
 80060aa:	e062      	b.n	8006172 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80060ac:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80060b0:	4619      	mov	r1, r3
 80060b2:	4837      	ldr	r0, [pc, #220]	; (8006190 <LSM303AGR_MAG_0_Probe+0x128>)
 80060b4:	f7fc ffeb 	bl	800308e <LSM303AGR_MAG_ReadID>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060be:	f06f 0306 	mvn.w	r3, #6
 80060c2:	647b      	str	r3, [r7, #68]	; 0x44
 80060c4:	e055      	b.n	8006172 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80060c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d003      	beq.n	80060d6 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060ce:	f06f 0306 	mvn.w	r3, #6
 80060d2:	647b      	str	r3, [r7, #68]	; 0x44
 80060d4:	e04d      	b.n	8006172 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4619      	mov	r1, r3
 80060dc:	482c      	ldr	r0, [pc, #176]	; (8006190 <LSM303AGR_MAG_0_Probe+0x128>)
 80060de:	f7fc ffed 	bl	80030bc <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060e2:	7a7b      	ldrb	r3, [r7, #9]
 80060e4:	461a      	mov	r2, r3
 80060e6:	7a3b      	ldrb	r3, [r7, #8]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80060ec:	7abb      	ldrb	r3, [r7, #10]
 80060ee:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060f0:	4313      	orrs	r3, r2
 80060f2:	4a28      	ldr	r2, [pc, #160]	; (8006194 <LSM303AGR_MAG_0_Probe+0x12c>)
 80060f4:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80060f6:	4b28      	ldr	r3, [pc, #160]	; (8006198 <LSM303AGR_MAG_0_Probe+0x130>)
 80060f8:	4a25      	ldr	r2, [pc, #148]	; (8006190 <LSM303AGR_MAG_0_Probe+0x128>)
 80060fa:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80060fc:	4b27      	ldr	r3, [pc, #156]	; (800619c <LSM303AGR_MAG_0_Probe+0x134>)
 80060fe:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <LSM303AGR_MAG_0_Probe+0x138>)
 8006100:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	2b00      	cmp	r3, #0
 8006106:	d11e      	bne.n	8006146 <LSM303AGR_MAG_0_Probe+0xde>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d019      	beq.n	8006146 <LSM303AGR_MAG_0_Probe+0xde>
 8006112:	7abb      	ldrb	r3, [r7, #10]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d116      	bne.n	8006146 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006118:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <LSM303AGR_MAG_0_Probe+0x13c>)
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <LSM303AGR_MAG_0_Probe+0x140>)
 800611e:	3306      	adds	r3, #6
 8006120:	4922      	ldr	r1, [pc, #136]	; (80061ac <LSM303AGR_MAG_0_Probe+0x144>)
 8006122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006126:	4b1d      	ldr	r3, [pc, #116]	; (800619c <LSM303AGR_MAG_0_Probe+0x134>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <LSM303AGR_MAG_0_Probe+0x130>)
 800612e:	6892      	ldr	r2, [r2, #8]
 8006130:	4610      	mov	r0, r2
 8006132:	4798      	blx	r3
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800613a:	f06f 0304 	mvn.w	r3, #4
 800613e:	647b      	str	r3, [r7, #68]	; 0x44
 8006140:	e001      	b.n	8006146 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006142:	2300      	movs	r3, #0
 8006144:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006148:	2b00      	cmp	r3, #0
 800614a:	d107      	bne.n	800615c <LSM303AGR_MAG_0_Probe+0xf4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006156:	f06f 0304 	mvn.w	r3, #4
 800615a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800615c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615e:	2b00      	cmp	r3, #0
 8006160:	d107      	bne.n	8006172 <LSM303AGR_MAG_0_Probe+0x10a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800616c:	f06f 0304 	mvn.w	r3, #4
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006174:	4618      	mov	r0, r3
 8006176:	3748      	adds	r7, #72	; 0x48
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	08000bc9 	.word	0x08000bc9
 8006180:	08000c45 	.word	0x08000c45
 8006184:	08000cf9 	.word	0x08000cf9
 8006188:	08000c95 	.word	0x08000c95
 800618c:	08000d5d 	.word	0x08000d5d
 8006190:	20000304 	.word	0x20000304
 8006194:	2000029c 	.word	0x2000029c
 8006198:	200004bc 	.word	0x200004bc
 800619c:	20000290 	.word	0x20000290
 80061a0:	200000a8 	.word	0x200000a8
 80061a4:	20000148 	.word	0x20000148
 80061a8:	2000026c 	.word	0x2000026c
 80061ac:	200000b8 	.word	0x200000b8

080061b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061ba:	2003      	movs	r0, #3
 80061bc:	f000 f942 	bl	8006444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061c0:	2000      	movs	r0, #0
 80061c2:	f000 f80d 	bl	80061e0 <HAL_InitTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	71fb      	strb	r3, [r7, #7]
 80061d0:	e001      	b.n	80061d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80061d2:	f7fa fc0b 	bl	80009ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061d6:	79fb      	ldrb	r3, [r7, #7]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80061ec:	4b17      	ldr	r3, [pc, #92]	; (800624c <HAL_InitTick+0x6c>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d023      	beq.n	800623c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80061f4:	4b16      	ldr	r3, [pc, #88]	; (8006250 <HAL_InitTick+0x70>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b14      	ldr	r3, [pc, #80]	; (800624c <HAL_InitTick+0x6c>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006202:	fbb3 f3f1 	udiv	r3, r3, r1
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f941 	bl	8006492 <HAL_SYSTICK_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b0f      	cmp	r3, #15
 800621a:	d809      	bhi.n	8006230 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800621c:	2200      	movs	r2, #0
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	f000 f919 	bl	800645a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006228:	4a0a      	ldr	r2, [pc, #40]	; (8006254 <HAL_InitTick+0x74>)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e007      	b.n	8006240 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
 8006234:	e004      	b.n	8006240 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e001      	b.n	8006240 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000160 	.word	0x20000160
 8006250:	20000000 	.word	0x20000000
 8006254:	2000015c 	.word	0x2000015c

08006258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_IncTick+0x20>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_IncTick+0x24>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4413      	add	r3, r2
 8006268:	4a04      	ldr	r2, [pc, #16]	; (800627c <HAL_IncTick+0x24>)
 800626a:	6013      	str	r3, [r2, #0]
}
 800626c:	bf00      	nop
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	20000160 	.word	0x20000160
 800627c:	200004c8 	.word	0x200004c8

08006280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return uwTick;
 8006284:	4b03      	ldr	r3, [pc, #12]	; (8006294 <HAL_GetTick+0x14>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	200004c8 	.word	0x200004c8

08006298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062a0:	f7ff ffee 	bl	8006280 <HAL_GetTick>
 80062a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d005      	beq.n	80062be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <HAL_Delay+0x44>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062be:	bf00      	nop
 80062c0:	f7ff ffde 	bl	8006280 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d8f7      	bhi.n	80062c0 <HAL_Delay+0x28>
  {
  }
}
 80062d0:	bf00      	nop
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000160 	.word	0x20000160

080062e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <__NVIC_SetPriorityGrouping+0x44>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062fc:	4013      	ands	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800630c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006312:	4a04      	ldr	r2, [pc, #16]	; (8006324 <__NVIC_SetPriorityGrouping+0x44>)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	60d3      	str	r3, [r2, #12]
}
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <__NVIC_GetPriorityGrouping+0x18>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	0a1b      	lsrs	r3, r3, #8
 8006332:	f003 0307 	and.w	r3, r3, #7
}
 8006336:	4618      	mov	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	e000ed00 	.word	0xe000ed00

08006344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	6039      	str	r1, [r7, #0]
 800634e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006354:	2b00      	cmp	r3, #0
 8006356:	db0a      	blt.n	800636e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	490c      	ldr	r1, [pc, #48]	; (8006390 <__NVIC_SetPriority+0x4c>)
 800635e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006362:	0112      	lsls	r2, r2, #4
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	440b      	add	r3, r1
 8006368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800636c:	e00a      	b.n	8006384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	4908      	ldr	r1, [pc, #32]	; (8006394 <__NVIC_SetPriority+0x50>)
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	3b04      	subs	r3, #4
 800637c:	0112      	lsls	r2, r2, #4
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	440b      	add	r3, r1
 8006382:	761a      	strb	r2, [r3, #24]
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	e000e100 	.word	0xe000e100
 8006394:	e000ed00 	.word	0xe000ed00

08006398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	; 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f1c3 0307 	rsb	r3, r3, #7
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	bf28      	it	cs
 80063b6:	2304      	movcs	r3, #4
 80063b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	3304      	adds	r3, #4
 80063be:	2b06      	cmp	r3, #6
 80063c0:	d902      	bls.n	80063c8 <NVIC_EncodePriority+0x30>
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	3b03      	subs	r3, #3
 80063c6:	e000      	b.n	80063ca <NVIC_EncodePriority+0x32>
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063cc:	f04f 32ff 	mov.w	r2, #4294967295
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	43da      	mvns	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	401a      	ands	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063e0:	f04f 31ff 	mov.w	r1, #4294967295
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ea:	43d9      	mvns	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063f0:	4313      	orrs	r3, r2
         );
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3724      	adds	r7, #36	; 0x24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3b01      	subs	r3, #1
 800640c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006410:	d301      	bcc.n	8006416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006412:	2301      	movs	r3, #1
 8006414:	e00f      	b.n	8006436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006416:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <SysTick_Config+0x40>)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3b01      	subs	r3, #1
 800641c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800641e:	210f      	movs	r1, #15
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	f7ff ff8e 	bl	8006344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006428:	4b05      	ldr	r3, [pc, #20]	; (8006440 <SysTick_Config+0x40>)
 800642a:	2200      	movs	r2, #0
 800642c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800642e:	4b04      	ldr	r3, [pc, #16]	; (8006440 <SysTick_Config+0x40>)
 8006430:	2207      	movs	r2, #7
 8006432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000e010 	.word	0xe000e010

08006444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff47 	bl	80062e0 <__NVIC_SetPriorityGrouping>
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	4603      	mov	r3, r0
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800646c:	f7ff ff5c 	bl	8006328 <__NVIC_GetPriorityGrouping>
 8006470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	6978      	ldr	r0, [r7, #20]
 8006478:	f7ff ff8e 	bl	8006398 <NVIC_EncodePriority>
 800647c:	4602      	mov	r2, r0
 800647e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff5d 	bl	8006344 <__NVIC_SetPriority>
}
 800648a:	bf00      	nop
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ffb0 	bl	8006400 <SysTick_Config>
 80064a0:	4603      	mov	r3, r0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064ba:	e17f      	b.n	80067bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	2101      	movs	r1, #1
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	fa01 f303 	lsl.w	r3, r1, r3
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8171 	beq.w	80067b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d005      	beq.n	80064ec <HAL_GPIO_Init+0x40>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d130      	bne.n	800654e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	2203      	movs	r2, #3
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4013      	ands	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006522:	2201      	movs	r2, #1
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43db      	mvns	r3, r3
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4013      	ands	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	f003 0201 	and.w	r2, r3, #1
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d118      	bne.n	800658c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006560:	2201      	movs	r2, #1
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4013      	ands	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	f003 0201 	and.w	r2, r3, #1
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	2b03      	cmp	r3, #3
 8006596:	d017      	beq.n	80065c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	2203      	movs	r2, #3
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4013      	ands	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d123      	bne.n	800661c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	08da      	lsrs	r2, r3, #3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3208      	adds	r2, #8
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	220f      	movs	r2, #15
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	08da      	lsrs	r2, r3, #3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3208      	adds	r2, #8
 8006616:	6939      	ldr	r1, [r7, #16]
 8006618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	2203      	movs	r2, #3
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	43db      	mvns	r3, r3
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4013      	ands	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 0203 	and.w	r2, r3, #3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80ac 	beq.w	80067b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800665e:	4b5f      	ldr	r3, [pc, #380]	; (80067dc <HAL_GPIO_Init+0x330>)
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	4a5e      	ldr	r2, [pc, #376]	; (80067dc <HAL_GPIO_Init+0x330>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6613      	str	r3, [r2, #96]	; 0x60
 800666a:	4b5c      	ldr	r3, [pc, #368]	; (80067dc <HAL_GPIO_Init+0x330>)
 800666c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006676:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	3302      	adds	r3, #2
 800667e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006682:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	220f      	movs	r2, #15
 800668e:	fa02 f303 	lsl.w	r3, r2, r3
 8006692:	43db      	mvns	r3, r3
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4013      	ands	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066a0:	d025      	beq.n	80066ee <HAL_GPIO_Init+0x242>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a4f      	ldr	r2, [pc, #316]	; (80067e4 <HAL_GPIO_Init+0x338>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01f      	beq.n	80066ea <HAL_GPIO_Init+0x23e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a4e      	ldr	r2, [pc, #312]	; (80067e8 <HAL_GPIO_Init+0x33c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d019      	beq.n	80066e6 <HAL_GPIO_Init+0x23a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a4d      	ldr	r2, [pc, #308]	; (80067ec <HAL_GPIO_Init+0x340>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <HAL_GPIO_Init+0x236>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a4c      	ldr	r2, [pc, #304]	; (80067f0 <HAL_GPIO_Init+0x344>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00d      	beq.n	80066de <HAL_GPIO_Init+0x232>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a4b      	ldr	r2, [pc, #300]	; (80067f4 <HAL_GPIO_Init+0x348>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d007      	beq.n	80066da <HAL_GPIO_Init+0x22e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a4a      	ldr	r2, [pc, #296]	; (80067f8 <HAL_GPIO_Init+0x34c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d101      	bne.n	80066d6 <HAL_GPIO_Init+0x22a>
 80066d2:	2306      	movs	r3, #6
 80066d4:	e00c      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066d6:	2307      	movs	r3, #7
 80066d8:	e00a      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066da:	2305      	movs	r3, #5
 80066dc:	e008      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066de:	2304      	movs	r3, #4
 80066e0:	e006      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066e2:	2303      	movs	r3, #3
 80066e4:	e004      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e002      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066ee:	2300      	movs	r3, #0
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	f002 0203 	and.w	r2, r2, #3
 80066f6:	0092      	lsls	r2, r2, #2
 80066f8:	4093      	lsls	r3, r2
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006700:	4937      	ldr	r1, [pc, #220]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	3302      	adds	r3, #2
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800670e:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	43db      	mvns	r3, r3
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4013      	ands	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006732:	4a32      	ldr	r2, [pc, #200]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006738:	4b30      	ldr	r3, [pc, #192]	; (80067fc <HAL_GPIO_Init+0x350>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	43db      	mvns	r3, r3
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4013      	ands	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <HAL_GPIO_Init+0x350>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006762:	4b26      	ldr	r3, [pc, #152]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	43db      	mvns	r3, r3
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006786:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <HAL_GPIO_Init+0x350>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	43db      	mvns	r3, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4013      	ands	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067b0:	4a12      	ldr	r2, [pc, #72]	; (80067fc <HAL_GPIO_Init+0x350>)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	fa22 f303 	lsr.w	r3, r2, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f47f ae78 	bne.w	80064bc <HAL_GPIO_Init+0x10>
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40010000 	.word	0x40010000
 80067e4:	48000400 	.word	0x48000400
 80067e8:	48000800 	.word	0x48000800
 80067ec:	48000c00 	.word	0x48000c00
 80067f0:	48001000 	.word	0x48001000
 80067f4:	48001400 	.word	0x48001400
 80067f8:	48001800 	.word	0x48001800
 80067fc:	40010400 	.word	0x40010400

08006800 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800680e:	e0cd      	b.n	80069ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006810:	2201      	movs	r2, #1
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	4013      	ands	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80c0 	beq.w	80069a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006826:	4a68      	ldr	r2, [pc, #416]	; (80069c8 <HAL_GPIO_DeInit+0x1c8>)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	3302      	adds	r3, #2
 800682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006832:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	220f      	movs	r2, #15
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4013      	ands	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800684e:	d025      	beq.n	800689c <HAL_GPIO_DeInit+0x9c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a5e      	ldr	r2, [pc, #376]	; (80069cc <HAL_GPIO_DeInit+0x1cc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d01f      	beq.n	8006898 <HAL_GPIO_DeInit+0x98>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a5d      	ldr	r2, [pc, #372]	; (80069d0 <HAL_GPIO_DeInit+0x1d0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d019      	beq.n	8006894 <HAL_GPIO_DeInit+0x94>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a5c      	ldr	r2, [pc, #368]	; (80069d4 <HAL_GPIO_DeInit+0x1d4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_GPIO_DeInit+0x90>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a5b      	ldr	r2, [pc, #364]	; (80069d8 <HAL_GPIO_DeInit+0x1d8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00d      	beq.n	800688c <HAL_GPIO_DeInit+0x8c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a5a      	ldr	r2, [pc, #360]	; (80069dc <HAL_GPIO_DeInit+0x1dc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <HAL_GPIO_DeInit+0x88>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a59      	ldr	r2, [pc, #356]	; (80069e0 <HAL_GPIO_DeInit+0x1e0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d101      	bne.n	8006884 <HAL_GPIO_DeInit+0x84>
 8006880:	2306      	movs	r3, #6
 8006882:	e00c      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006884:	2307      	movs	r3, #7
 8006886:	e00a      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006888:	2305      	movs	r3, #5
 800688a:	e008      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 800688c:	2304      	movs	r3, #4
 800688e:	e006      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006890:	2303      	movs	r3, #3
 8006892:	e004      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006894:	2302      	movs	r3, #2
 8006896:	e002      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 800689c:	2300      	movs	r3, #0
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	f002 0203 	and.w	r2, r2, #3
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4093      	lsls	r3, r2
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d132      	bne.n	8006914 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80068ae:	4b4d      	ldr	r3, [pc, #308]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	43db      	mvns	r3, r3
 80068b6:	494b      	ldr	r1, [pc, #300]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80068bc:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	43db      	mvns	r3, r3
 80068c4:	4947      	ldr	r1, [pc, #284]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068c6:	4013      	ands	r3, r2
 80068c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80068ca:	4b46      	ldr	r3, [pc, #280]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	43db      	mvns	r3, r3
 80068d2:	4944      	ldr	r1, [pc, #272]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80068d8:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	43db      	mvns	r3, r3
 80068e0:	4940      	ldr	r1, [pc, #256]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	220f      	movs	r2, #15
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80068f6:	4a34      	ldr	r2, [pc, #208]	; (80069c8 <HAL_GPIO_DeInit+0x1c8>)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	089b      	lsrs	r3, r3, #2
 80068fc:	3302      	adds	r3, #2
 80068fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	43da      	mvns	r2, r3
 8006906:	4830      	ldr	r0, [pc, #192]	; (80069c8 <HAL_GPIO_DeInit+0x1c8>)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	089b      	lsrs	r3, r3, #2
 800690c:	400a      	ands	r2, r1
 800690e:	3302      	adds	r3, #2
 8006910:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	2103      	movs	r1, #3
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	08da      	lsrs	r2, r3, #3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3208      	adds	r2, #8
 8006930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	220f      	movs	r2, #15
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43db      	mvns	r3, r3
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	08d2      	lsrs	r2, r2, #3
 8006948:	4019      	ands	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3208      	adds	r2, #8
 800694e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	2103      	movs	r1, #3
 800695c:	fa01 f303 	lsl.w	r3, r1, r3
 8006960:	43db      	mvns	r3, r3
 8006962:	401a      	ands	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	2101      	movs	r1, #1
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	43db      	mvns	r3, r3
 8006976:	401a      	ands	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	2103      	movs	r1, #3
 8006986:	fa01 f303 	lsl.w	r3, r1, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	401a      	ands	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	2101      	movs	r1, #1
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	fa01 f303 	lsl.w	r3, r1, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	401a      	ands	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	3301      	adds	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f47f af2b 	bne.w	8006810 <HAL_GPIO_DeInit+0x10>
  }
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40010000 	.word	0x40010000
 80069cc:	48000400 	.word	0x48000400
 80069d0:	48000800 	.word	0x48000800
 80069d4:	48000c00 	.word	0x48000c00
 80069d8:	48001000 	.word	0x48001000
 80069dc:	48001400 	.word	0x48001400
 80069e0:	48001800 	.word	0x48001800
 80069e4:	40010400 	.word	0x40010400

080069e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
 80069f4:	4613      	mov	r3, r2
 80069f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069f8:	787b      	ldrb	r3, [r7, #1]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a04:	e002      	b.n	8006a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e081      	b.n	8006b2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f8a8 	bl	8006b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2224      	movs	r2, #36	; 0x24
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d107      	bne.n	8006a92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a8e:	609a      	str	r2, [r3, #8]
 8006a90:	e006      	b.n	8006aa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d104      	bne.n	8006ab2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ab0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ad4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69d9      	ldr	r1, [r3, #28]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1a      	ldr	r2, [r3, #32]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e021      	b.n	8006b8c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2224      	movs	r2, #36	; 0x24
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0201 	bic.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f821 	bl	8006ba8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	817b      	strh	r3, [r7, #10]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	813b      	strh	r3, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f040 80f9 	bne.w	8006dd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_I2C_Mem_Write+0x34>
 8006bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0ed      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_I2C_Mem_Write+0x4e>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e0e6      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c12:	f7ff fb35 	bl	8006280 <HAL_GetTick>
 8006c16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2319      	movs	r3, #25
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fadd 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0d1      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2221      	movs	r2, #33	; 0x21
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2240      	movs	r2, #64	; 0x40
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c5c:	88f8      	ldrh	r0, [r7, #6]
 8006c5e:	893a      	ldrh	r2, [r7, #8]
 8006c60:	8979      	ldrh	r1, [r7, #10]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f9ed 	bl	800704c <I2C_RequestMemoryWrite>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0a9      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2bff      	cmp	r3, #255	; 0xff
 8006c8c:	d90e      	bls.n	8006cac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	22ff      	movs	r2, #255	; 0xff
 8006c92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	8979      	ldrh	r1, [r7, #10]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fc45 	bl	8007534 <I2C_TransferConfig>
 8006caa:	e00f      	b.n	8006ccc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	8979      	ldrh	r1, [r7, #10]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fc34 	bl	8007534 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fac7 	bl	8007264 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e07b      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d034      	beq.n	8006d84 <HAL_I2C_Mem_Write+0x1c8>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d130      	bne.n	8006d84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2180      	movs	r1, #128	; 0x80
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fa59 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e04d      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d90e      	bls.n	8006d64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	8979      	ldrh	r1, [r7, #10]
 8006d54:	2300      	movs	r3, #0
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fbe9 	bl	8007534 <I2C_TransferConfig>
 8006d62:	e00f      	b.n	8006d84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	8979      	ldrh	r1, [r7, #10]
 8006d76:	2300      	movs	r3, #0
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fbd8 	bl	8007534 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d19e      	bne.n	8006ccc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 faa6 	bl	80072e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e01a      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2220      	movs	r2, #32
 8006da8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <HAL_I2C_Mem_Write+0x224>)
 8006db6:	400b      	ands	r3, r1
 8006db8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e000      	b.n	8006dd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006dd6:	2302      	movs	r3, #2
  }
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	fe00e800 	.word	0xfe00e800

08006de4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af02      	add	r7, sp, #8
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	4608      	mov	r0, r1
 8006dee:	4611      	mov	r1, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	4603      	mov	r3, r0
 8006df4:	817b      	strh	r3, [r7, #10]
 8006df6:	460b      	mov	r3, r1
 8006df8:	813b      	strh	r3, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	f040 80fd 	bne.w	8007006 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_I2C_Mem_Read+0x34>
 8006e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0f1      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_I2C_Mem_Read+0x4e>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e0ea      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e3a:	f7ff fa21 	bl	8006280 <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2319      	movs	r3, #25
 8006e46:	2201      	movs	r2, #1
 8006e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f9c9 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0d5      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2222      	movs	r2, #34	; 0x22
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2240      	movs	r2, #64	; 0x40
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e84:	88f8      	ldrh	r0, [r7, #6]
 8006e86:	893a      	ldrh	r2, [r7, #8]
 8006e88:	8979      	ldrh	r1, [r7, #10]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4603      	mov	r3, r0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f92d 	bl	80070f4 <I2C_RequestMemoryRead>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0ad      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2bff      	cmp	r3, #255	; 0xff
 8006eb4:	d90e      	bls.n	8006ed4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	8979      	ldrh	r1, [r7, #10]
 8006ec4:	4b52      	ldr	r3, [pc, #328]	; (8007010 <HAL_I2C_Mem_Read+0x22c>)
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fb31 	bl	8007534 <I2C_TransferConfig>
 8006ed2:	e00f      	b.n	8006ef4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	8979      	ldrh	r1, [r7, #10]
 8006ee6:	4b4a      	ldr	r3, [pc, #296]	; (8007010 <HAL_I2C_Mem_Read+0x22c>)
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fb20 	bl	8007534 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	2200      	movs	r2, #0
 8006efc:	2104      	movs	r1, #4
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f970 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07c      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d034      	beq.n	8006fb4 <HAL_I2C_Mem_Read+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d130      	bne.n	8006fb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2180      	movs	r1, #128	; 0x80
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f941 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e04d      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2bff      	cmp	r3, #255	; 0xff
 8006f74:	d90e      	bls.n	8006f94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	22ff      	movs	r2, #255	; 0xff
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	8979      	ldrh	r1, [r7, #10]
 8006f84:	2300      	movs	r3, #0
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fad1 	bl	8007534 <I2C_TransferConfig>
 8006f92:	e00f      	b.n	8006fb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	8979      	ldrh	r1, [r7, #10]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fac0 	bl	8007534 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d19a      	bne.n	8006ef4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f98e 	bl	80072e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e01a      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6859      	ldr	r1, [r3, #4]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <HAL_I2C_Mem_Read+0x230>)
 8006fe6:	400b      	ands	r3, r1
 8006fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e000      	b.n	8007008 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007006:	2302      	movs	r3, #2
  }
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	80002400 	.word	0x80002400
 8007014:	fe00e800 	.word	0xfe00e800

08007018 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007026:	b2db      	uxtb	r3, r3
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	461a      	mov	r2, r3
 800705a:	4603      	mov	r3, r0
 800705c:	817b      	strh	r3, [r7, #10]
 800705e:	460b      	mov	r3, r1
 8007060:	813b      	strh	r3, [r7, #8]
 8007062:	4613      	mov	r3, r2
 8007064:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	b2da      	uxtb	r2, r3
 800706a:	8979      	ldrh	r1, [r7, #10]
 800706c:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <I2C_RequestMemoryWrite+0xa4>)
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fa5d 	bl	8007534 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	69b9      	ldr	r1, [r7, #24]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 f8f0 	bl	8007264 <I2C_WaitOnTXISFlagUntilTimeout>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e02c      	b.n	80070e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d105      	bne.n	80070a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007094:	893b      	ldrh	r3, [r7, #8]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	629a      	str	r2, [r3, #40]	; 0x28
 800709e:	e015      	b.n	80070cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	69b9      	ldr	r1, [r7, #24]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f8d6 	bl	8007264 <I2C_WaitOnTXISFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e012      	b.n	80070e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070c2:	893b      	ldrh	r3, [r7, #8]
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2200      	movs	r2, #0
 80070d4:	2180      	movs	r1, #128	; 0x80
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f884 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	80002000 	.word	0x80002000

080070f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4603      	mov	r3, r0
 8007104:	817b      	strh	r3, [r7, #10]
 8007106:	460b      	mov	r3, r1
 8007108:	813b      	strh	r3, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	b2da      	uxtb	r2, r3
 8007112:	8979      	ldrh	r1, [r7, #10]
 8007114:	4b20      	ldr	r3, [pc, #128]	; (8007198 <I2C_RequestMemoryRead+0xa4>)
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	2300      	movs	r3, #0
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fa0a 	bl	8007534 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	69b9      	ldr	r1, [r7, #24]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f89d 	bl	8007264 <I2C_WaitOnTXISFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e02c      	b.n	800718e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007134:	88fb      	ldrh	r3, [r7, #6]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d105      	bne.n	8007146 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800713a:	893b      	ldrh	r3, [r7, #8]
 800713c:	b2da      	uxtb	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
 8007144:	e015      	b.n	8007172 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007146:	893b      	ldrh	r3, [r7, #8]
 8007148:	0a1b      	lsrs	r3, r3, #8
 800714a:	b29b      	uxth	r3, r3
 800714c:	b2da      	uxtb	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	69b9      	ldr	r1, [r7, #24]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f883 	bl	8007264 <I2C_WaitOnTXISFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e012      	b.n	800718e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007168:	893b      	ldrh	r3, [r7, #8]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2200      	movs	r2, #0
 800717a:	2140      	movs	r1, #64	; 0x40
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f831 	bl	80071e4 <I2C_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	80002000 	.word	0x80002000

0800719c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d103      	bne.n	80071ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2200      	movs	r2, #0
 80071b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d007      	beq.n	80071d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	619a      	str	r2, [r3, #24]
  }
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071f4:	e022      	b.n	800723c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d01e      	beq.n	800723c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fe:	f7ff f83f 	bl	8006280 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <I2C_WaitOnFlagUntilTimeout+0x30>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d113      	bne.n	800723c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007218:	f043 0220 	orr.w	r2, r3, #32
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e00f      	b.n	800725c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4013      	ands	r3, r2
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	bf0c      	ite	eq
 800724c:	2301      	moveq	r3, #1
 800724e:	2300      	movne	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	429a      	cmp	r2, r3
 8007258:	d0cd      	beq.n	80071f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007270:	e02c      	b.n	80072cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f870 	bl	800735c <I2C_IsErrorOccurred>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e02a      	b.n	80072dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d01e      	beq.n	80072cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728e:	f7fe fff7 	bl	8006280 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	d302      	bcc.n	80072a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d113      	bne.n	80072cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a8:	f043 0220 	orr.w	r2, r3, #32
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e007      	b.n	80072dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d1cb      	bne.n	8007272 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072f0:	e028      	b.n	8007344 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f830 	bl	800735c <I2C_IsErrorOccurred>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e026      	b.n	8007354 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007306:	f7fe ffbb 	bl	8006280 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	429a      	cmp	r2, r3
 8007314:	d302      	bcc.n	800731c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d113      	bne.n	8007344 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e007      	b.n	8007354 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b20      	cmp	r3, #32
 8007350:	d1cf      	bne.n	80072f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	d075      	beq.n	8007474 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2210      	movs	r2, #16
 800738e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007390:	e056      	b.n	8007440 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d052      	beq.n	8007440 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800739a:	f7fe ff71 	bl	8006280 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d302      	bcc.n	80073b0 <I2C_IsErrorOccurred+0x54>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d147      	bne.n	8007440 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d2:	d12e      	bne.n	8007432 <I2C_IsErrorOccurred+0xd6>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073da:	d02a      	beq.n	8007432 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d027      	beq.n	8007432 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073f0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80073f2:	f7fe ff45 	bl	8006280 <HAL_GetTick>
 80073f6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073f8:	e01b      	b.n	8007432 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80073fa:	f7fe ff41 	bl	8006280 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b19      	cmp	r3, #25
 8007406:	d914      	bls.n	8007432 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b20      	cmp	r3, #32
 800743e:	d1dc      	bne.n	80073fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b20      	cmp	r3, #32
 800744c:	d003      	beq.n	8007456 <I2C_IsErrorOccurred+0xfa>
 800744e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007452:	2b00      	cmp	r3, #0
 8007454:	d09d      	beq.n	8007392 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2220      	movs	r2, #32
 8007464:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f043 0304 	orr.w	r3, r3, #4
 800746c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007496:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	f043 0308 	orr.w	r3, r3, #8
 80074ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80074e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01c      	beq.n	8007524 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff fe56 	bl	800719c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <I2C_IsErrorOccurred+0x1d4>)
 80074fc:	400b      	ands	r3, r1
 80074fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	431a      	orrs	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007528:	4618      	mov	r0, r3
 800752a:	3728      	adds	r7, #40	; 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	fe00e800 	.word	0xfe00e800

08007534 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	817b      	strh	r3, [r7, #10]
 8007542:	4613      	mov	r3, r2
 8007544:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007546:	897b      	ldrh	r3, [r7, #10]
 8007548:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800754c:	7a7b      	ldrb	r3, [r7, #9]
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007554:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	4313      	orrs	r3, r2
 800755e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007562:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	0d5b      	lsrs	r3, r3, #21
 800756e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <I2C_TransferConfig+0x60>)
 8007574:	430b      	orrs	r3, r1
 8007576:	43db      	mvns	r3, r3
 8007578:	ea02 0103 	and.w	r1, r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	03ff63ff 	.word	0x03ff63ff

08007598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d138      	bne.n	8007620 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e032      	b.n	8007622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2224      	movs	r2, #36	; 0x24
 80075c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6819      	ldr	r1, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b20      	cmp	r3, #32
 8007642:	d139      	bne.n	80076b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800764e:	2302      	movs	r3, #2
 8007650:	e033      	b.n	80076ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2224      	movs	r2, #36	; 0x24
 800765e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007680:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e000      	b.n	80076ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076b8:	2302      	movs	r3, #2
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
	...

080076c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80076cc:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40007000 	.word	0x40007000

080076e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f2:	d130      	bne.n	8007756 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80076f4:	4b23      	ldr	r3, [pc, #140]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007700:	d038      	beq.n	8007774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007702:	4b20      	ldr	r3, [pc, #128]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800770a:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800770c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007710:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2232      	movs	r2, #50	; 0x32
 8007718:	fb02 f303 	mul.w	r3, r2, r3
 800771c:	4a1b      	ldr	r2, [pc, #108]	; (800778c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800771e:	fba2 2303 	umull	r2, r3, r2, r3
 8007722:	0c9b      	lsrs	r3, r3, #18
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007728:	e002      	b.n	8007730 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b01      	subs	r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007730:	4b14      	ldr	r3, [pc, #80]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773c:	d102      	bne.n	8007744 <HAL_PWREx_ControlVoltageScaling+0x60>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f2      	bne.n	800772a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800774c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007750:	d110      	bne.n	8007774 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e00f      	b.n	8007776 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007756:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800775e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007762:	d007      	beq.n	8007774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800776c:	4a05      	ldr	r2, [pc, #20]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800776e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007772:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40007000 	.word	0x40007000
 8007788:	20000000 	.word	0x20000000
 800778c:	431bde83 	.word	0x431bde83

08007790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e3d4      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077a2:	4ba1      	ldr	r3, [pc, #644]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 030c 	and.w	r3, r3, #12
 80077aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077ac:	4b9e      	ldr	r3, [pc, #632]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80e4 	beq.w	800798c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <HAL_RCC_OscConfig+0x4a>
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b0c      	cmp	r3, #12
 80077ce:	f040 808b 	bne.w	80078e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	f040 8087 	bne.w	80078e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80077da:	4b93      	ldr	r3, [pc, #588]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_RCC_OscConfig+0x62>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e3ac      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1a      	ldr	r2, [r3, #32]
 80077f6:	4b8c      	ldr	r3, [pc, #560]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <HAL_RCC_OscConfig+0x7c>
 8007802:	4b89      	ldr	r3, [pc, #548]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800780a:	e005      	b.n	8007818 <HAL_RCC_OscConfig+0x88>
 800780c:	4b86      	ldr	r3, [pc, #536]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800780e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007812:	091b      	lsrs	r3, r3, #4
 8007814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007818:	4293      	cmp	r3, r2
 800781a:	d223      	bcs.n	8007864 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fd41 	bl	80082a8 <RCC_SetFlashLatencyFromMSIRange>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e38d      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007830:	4b7d      	ldr	r3, [pc, #500]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a7c      	ldr	r2, [pc, #496]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007836:	f043 0308 	orr.w	r3, r3, #8
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	4b7a      	ldr	r3, [pc, #488]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	4977      	ldr	r1, [pc, #476]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800784a:	4313      	orrs	r3, r2
 800784c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800784e:	4b76      	ldr	r3, [pc, #472]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	4972      	ldr	r1, [pc, #456]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800785e:	4313      	orrs	r3, r2
 8007860:	604b      	str	r3, [r1, #4]
 8007862:	e025      	b.n	80078b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007864:	4b70      	ldr	r3, [pc, #448]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a6f      	ldr	r2, [pc, #444]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800786a:	f043 0308 	orr.w	r3, r3, #8
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	4b6d      	ldr	r3, [pc, #436]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	496a      	ldr	r1, [pc, #424]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800787e:	4313      	orrs	r3, r2
 8007880:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007882:	4b69      	ldr	r3, [pc, #420]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	4965      	ldr	r1, [pc, #404]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007892:	4313      	orrs	r3, r2
 8007894:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fd01 	bl	80082a8 <RCC_SetFlashLatencyFromMSIRange>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e34d      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078b0:	f000 fc36 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 80078b4:	4602      	mov	r2, r0
 80078b6:	4b5c      	ldr	r3, [pc, #368]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	091b      	lsrs	r3, r3, #4
 80078bc:	f003 030f 	and.w	r3, r3, #15
 80078c0:	495a      	ldr	r1, [pc, #360]	; (8007a2c <HAL_RCC_OscConfig+0x29c>)
 80078c2:	5ccb      	ldrb	r3, [r1, r3]
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	fa22 f303 	lsr.w	r3, r2, r3
 80078cc:	4a58      	ldr	r2, [pc, #352]	; (8007a30 <HAL_RCC_OscConfig+0x2a0>)
 80078ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80078d0:	4b58      	ldr	r3, [pc, #352]	; (8007a34 <HAL_RCC_OscConfig+0x2a4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fc83 	bl	80061e0 <HAL_InitTick>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d052      	beq.n	800798a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	e331      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d032      	beq.n	8007956 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80078f0:	4b4d      	ldr	r3, [pc, #308]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a4c      	ldr	r2, [pc, #304]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078fc:	f7fe fcc0 	bl	8006280 <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007904:	f7fe fcbc 	bl	8006280 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e31a      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007916:	4b44      	ldr	r3, [pc, #272]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0f0      	beq.n	8007904 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007922:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a40      	ldr	r2, [pc, #256]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007928:	f043 0308 	orr.w	r3, r3, #8
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	4b3e      	ldr	r3, [pc, #248]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	493b      	ldr	r1, [pc, #236]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800793c:	4313      	orrs	r3, r2
 800793e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007940:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	4936      	ldr	r1, [pc, #216]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007950:	4313      	orrs	r3, r2
 8007952:	604b      	str	r3, [r1, #4]
 8007954:	e01a      	b.n	800798c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a33      	ldr	r2, [pc, #204]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007962:	f7fe fc8d 	bl	8006280 <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800796a:	f7fe fc89 	bl	8006280 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e2e7      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800797c:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f0      	bne.n	800796a <HAL_RCC_OscConfig+0x1da>
 8007988:	e000      	b.n	800798c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800798a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d074      	beq.n	8007a82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b08      	cmp	r3, #8
 800799c:	d005      	beq.n	80079aa <HAL_RCC_OscConfig+0x21a>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b0c      	cmp	r3, #12
 80079a2:	d10e      	bne.n	80079c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d10b      	bne.n	80079c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079aa:	4b1f      	ldr	r3, [pc, #124]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d064      	beq.n	8007a80 <HAL_RCC_OscConfig+0x2f0>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d160      	bne.n	8007a80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e2c4      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ca:	d106      	bne.n	80079da <HAL_RCC_OscConfig+0x24a>
 80079cc:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a15      	ldr	r2, [pc, #84]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80079d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	e01d      	b.n	8007a16 <HAL_RCC_OscConfig+0x286>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079e2:	d10c      	bne.n	80079fe <HAL_RCC_OscConfig+0x26e>
 80079e4:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80079ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a0c      	ldr	r2, [pc, #48]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 80079f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e00b      	b.n	8007a16 <HAL_RCC_OscConfig+0x286>
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	4b07      	ldr	r3, [pc, #28]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a06      	ldr	r2, [pc, #24]	; (8007a28 <HAL_RCC_OscConfig+0x298>)
 8007a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d01c      	beq.n	8007a58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1e:	f7fe fc2f 	bl	8006280 <HAL_GetTick>
 8007a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a24:	e011      	b.n	8007a4a <HAL_RCC_OscConfig+0x2ba>
 8007a26:	bf00      	nop
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	0800a07c 	.word	0x0800a07c
 8007a30:	20000000 	.word	0x20000000
 8007a34:	2000015c 	.word	0x2000015c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a38:	f7fe fc22 	bl	8006280 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b64      	cmp	r3, #100	; 0x64
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e280      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a4a:	4baf      	ldr	r3, [pc, #700]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f0      	beq.n	8007a38 <HAL_RCC_OscConfig+0x2a8>
 8007a56:	e014      	b.n	8007a82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a58:	f7fe fc12 	bl	8006280 <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a60:	f7fe fc0e 	bl	8006280 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b64      	cmp	r3, #100	; 0x64
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e26c      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a72:	4ba5      	ldr	r3, [pc, #660]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1f0      	bne.n	8007a60 <HAL_RCC_OscConfig+0x2d0>
 8007a7e:	e000      	b.n	8007a82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d060      	beq.n	8007b50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x310>
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b0c      	cmp	r3, #12
 8007a98:	d119      	bne.n	8007ace <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d116      	bne.n	8007ace <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aa0:	4b99      	ldr	r3, [pc, #612]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x328>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e249      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab8:	4b93      	ldr	r3, [pc, #588]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	061b      	lsls	r3, r3, #24
 8007ac6:	4990      	ldr	r1, [pc, #576]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007acc:	e040      	b.n	8007b50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d023      	beq.n	8007b1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ad6:	4b8c      	ldr	r3, [pc, #560]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a8b      	ldr	r2, [pc, #556]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae2:	f7fe fbcd 	bl	8006280 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aea:	f7fe fbc9 	bl	8006280 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e227      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007afc:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0f0      	beq.n	8007aea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b08:	4b7f      	ldr	r3, [pc, #508]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	061b      	lsls	r3, r3, #24
 8007b16:	497c      	ldr	r1, [pc, #496]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	604b      	str	r3, [r1, #4]
 8007b1c:	e018      	b.n	8007b50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b1e:	4b7a      	ldr	r3, [pc, #488]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a79      	ldr	r2, [pc, #484]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2a:	f7fe fba9 	bl	8006280 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b30:	e008      	b.n	8007b44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b32:	f7fe fba5 	bl	8006280 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e203      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b44:	4b70      	ldr	r3, [pc, #448]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1f0      	bne.n	8007b32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d03c      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01c      	beq.n	8007b9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b64:	4b68      	ldr	r3, [pc, #416]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b6a:	4a67      	ldr	r2, [pc, #412]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b6c:	f043 0301 	orr.w	r3, r3, #1
 8007b70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b74:	f7fe fb84 	bl	8006280 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b7c:	f7fe fb80 	bl	8006280 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e1de      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b8e:	4b5e      	ldr	r3, [pc, #376]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0ef      	beq.n	8007b7c <HAL_RCC_OscConfig+0x3ec>
 8007b9c:	e01b      	b.n	8007bd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b9e:	4b5a      	ldr	r3, [pc, #360]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba4:	4a58      	ldr	r2, [pc, #352]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bae:	f7fe fb67 	bl	8006280 <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb6:	f7fe fb63 	bl	8006280 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e1c1      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bc8:	4b4f      	ldr	r3, [pc, #316]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1ef      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80a6 	beq.w	8007d30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007be4:	2300      	movs	r3, #0
 8007be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007be8:	4b47      	ldr	r3, [pc, #284]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10d      	bne.n	8007c10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bf4:	4b44      	ldr	r3, [pc, #272]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf8:	4a43      	ldr	r2, [pc, #268]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8007c00:	4b41      	ldr	r3, [pc, #260]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c08:	60bb      	str	r3, [r7, #8]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c10:	4b3e      	ldr	r3, [pc, #248]	; (8007d0c <HAL_RCC_OscConfig+0x57c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d118      	bne.n	8007c4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c1c:	4b3b      	ldr	r3, [pc, #236]	; (8007d0c <HAL_RCC_OscConfig+0x57c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a3a      	ldr	r2, [pc, #232]	; (8007d0c <HAL_RCC_OscConfig+0x57c>)
 8007c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c28:	f7fe fb2a 	bl	8006280 <HAL_GetTick>
 8007c2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c30:	f7fe fb26 	bl	8006280 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e184      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c42:	4b32      	ldr	r3, [pc, #200]	; (8007d0c <HAL_RCC_OscConfig+0x57c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f0      	beq.n	8007c30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d108      	bne.n	8007c68 <HAL_RCC_OscConfig+0x4d8>
 8007c56:	4b2c      	ldr	r3, [pc, #176]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5c:	4a2a      	ldr	r2, [pc, #168]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c5e:	f043 0301 	orr.w	r3, r3, #1
 8007c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c66:	e024      	b.n	8007cb2 <HAL_RCC_OscConfig+0x522>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b05      	cmp	r3, #5
 8007c6e:	d110      	bne.n	8007c92 <HAL_RCC_OscConfig+0x502>
 8007c70:	4b25      	ldr	r3, [pc, #148]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c76:	4a24      	ldr	r2, [pc, #144]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c78:	f043 0304 	orr.w	r3, r3, #4
 8007c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c80:	4b21      	ldr	r3, [pc, #132]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	4a20      	ldr	r2, [pc, #128]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c88:	f043 0301 	orr.w	r3, r3, #1
 8007c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c90:	e00f      	b.n	8007cb2 <HAL_RCC_OscConfig+0x522>
 8007c92:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007c9a:	f023 0301 	bic.w	r3, r3, #1
 8007c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ca2:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca8:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007caa:	f023 0304 	bic.w	r3, r3, #4
 8007cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d016      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cba:	f7fe fae1 	bl	8006280 <HAL_GetTick>
 8007cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cc0:	e00a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc2:	f7fe fadd 	bl	8006280 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d901      	bls.n	8007cd8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e139      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	; (8007d08 <HAL_RCC_OscConfig+0x578>)
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0ed      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x532>
 8007ce6:	e01a      	b.n	8007d1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce8:	f7fe faca 	bl	8006280 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cee:	e00f      	b.n	8007d10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf0:	f7fe fac6 	bl	8006280 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d906      	bls.n	8007d10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e122      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
 8007d06:	bf00      	nop
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d10:	4b90      	ldr	r3, [pc, #576]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e8      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d1e:	7ffb      	ldrb	r3, [r7, #31]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d105      	bne.n	8007d30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d24:	4b8b      	ldr	r3, [pc, #556]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d28:	4a8a      	ldr	r2, [pc, #552]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8108 	beq.w	8007f4a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	f040 80d0 	bne.w	8007ee4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007d44:	4b83      	ldr	r3, [pc, #524]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f003 0203 	and.w	r2, r3, #3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d130      	bne.n	8007dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	3b01      	subs	r3, #1
 8007d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d127      	bne.n	8007dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d11f      	bne.n	8007dba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d84:	2a07      	cmp	r2, #7
 8007d86:	bf14      	ite	ne
 8007d88:	2201      	movne	r2, #1
 8007d8a:	2200      	moveq	r2, #0
 8007d8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d113      	bne.n	8007dba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9c:	085b      	lsrs	r3, r3, #1
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d109      	bne.n	8007dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	085b      	lsrs	r3, r3, #1
 8007db2:	3b01      	subs	r3, #1
 8007db4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d06e      	beq.n	8007e98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	2b0c      	cmp	r3, #12
 8007dbe:	d069      	beq.n	8007e94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007dc0:	4b64      	ldr	r3, [pc, #400]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007dcc:	4b61      	ldr	r3, [pc, #388]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e0b7      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007ddc:	4b5d      	ldr	r3, [pc, #372]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a5c      	ldr	r2, [pc, #368]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007de6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007de8:	f7fe fa4a 	bl	8006280 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007df0:	f7fe fa46 	bl	8006280 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e0a4      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e02:	4b54      	ldr	r3, [pc, #336]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f0      	bne.n	8007df0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e0e:	4b51      	ldr	r3, [pc, #324]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	4b51      	ldr	r3, [pc, #324]	; (8007f58 <HAL_RCC_OscConfig+0x7c8>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e1e:	3a01      	subs	r2, #1
 8007e20:	0112      	lsls	r2, r2, #4
 8007e22:	4311      	orrs	r1, r2
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e28:	0212      	lsls	r2, r2, #8
 8007e2a:	4311      	orrs	r1, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e30:	0852      	lsrs	r2, r2, #1
 8007e32:	3a01      	subs	r2, #1
 8007e34:	0552      	lsls	r2, r2, #21
 8007e36:	4311      	orrs	r1, r2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e3c:	0852      	lsrs	r2, r2, #1
 8007e3e:	3a01      	subs	r2, #1
 8007e40:	0652      	lsls	r2, r2, #25
 8007e42:	4311      	orrs	r1, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e48:	0912      	lsrs	r2, r2, #4
 8007e4a:	0452      	lsls	r2, r2, #17
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	4941      	ldr	r1, [pc, #260]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007e54:	4b3f      	ldr	r3, [pc, #252]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a3e      	ldr	r2, [pc, #248]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e60:	4b3c      	ldr	r3, [pc, #240]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4a3b      	ldr	r2, [pc, #236]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e6c:	f7fe fa08 	bl	8006280 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e74:	f7fe fa04 	bl	8006280 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e062      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e86:	4b33      	ldr	r3, [pc, #204]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f0      	beq.n	8007e74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e92:	e05a      	b.n	8007f4a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e059      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e98:	4b2e      	ldr	r3, [pc, #184]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d152      	bne.n	8007f4a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ea4:	4b2b      	ldr	r3, [pc, #172]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007eb0:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4a27      	ldr	r2, [pc, #156]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ebc:	f7fe f9e0 	bl	8006280 <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec4:	f7fe f9dc 	bl	8006280 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e03a      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ed6:	4b1f      	ldr	r3, [pc, #124]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x734>
 8007ee2:	e032      	b.n	8007f4a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b0c      	cmp	r3, #12
 8007ee8:	d02d      	beq.n	8007f46 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eea:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a19      	ldr	r2, [pc, #100]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ef4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007ef6:	4b17      	ldr	r3, [pc, #92]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007f02:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007f08:	f023 0303 	bic.w	r3, r3, #3
 8007f0c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f0e:	4b11      	ldr	r3, [pc, #68]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007f14:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f1c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1e:	f7fe f9af 	bl	8006280 <HAL_GetTick>
 8007f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f24:	e008      	b.n	8007f38 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f26:	f7fe f9ab 	bl	8006280 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d901      	bls.n	8007f38 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e009      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <HAL_RCC_OscConfig+0x7c4>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1f0      	bne.n	8007f26 <HAL_RCC_OscConfig+0x796>
 8007f44:	e001      	b.n	8007f4a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	40021000 	.word	0x40021000
 8007f58:	f99d808c 	.word	0xf99d808c

08007f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e0c8      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f70:	4b66      	ldr	r3, [pc, #408]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d910      	bls.n	8007fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f7e:	4b63      	ldr	r3, [pc, #396]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f023 0207 	bic.w	r2, r3, #7
 8007f86:	4961      	ldr	r1, [pc, #388]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f8e:	4b5f      	ldr	r3, [pc, #380]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d001      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0b0      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d04c      	beq.n	8008046 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fb4:	4b56      	ldr	r3, [pc, #344]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d121      	bne.n	8008004 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e09e      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d107      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fcc:	4b50      	ldr	r3, [pc, #320]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d115      	bne.n	8008004 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e092      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fe4:	4b4a      	ldr	r3, [pc, #296]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d109      	bne.n	8008004 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e086      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ff4:	4b46      	ldr	r3, [pc, #280]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e07e      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008004:	4b42      	ldr	r3, [pc, #264]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f023 0203 	bic.w	r2, r3, #3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	493f      	ldr	r1, [pc, #252]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8008012:	4313      	orrs	r3, r2
 8008014:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008016:	f7fe f933 	bl	8006280 <HAL_GetTick>
 800801a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801c:	e00a      	b.n	8008034 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800801e:	f7fe f92f 	bl	8006280 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	f241 3288 	movw	r2, #5000	; 0x1388
 800802c:	4293      	cmp	r3, r2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e066      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008034:	4b36      	ldr	r3, [pc, #216]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f003 020c 	and.w	r2, r3, #12
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	429a      	cmp	r2, r3
 8008044:	d1eb      	bne.n	800801e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d008      	beq.n	8008064 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008052:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	492c      	ldr	r1, [pc, #176]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 8008060:	4313      	orrs	r3, r2
 8008062:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008064:	4b29      	ldr	r3, [pc, #164]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d210      	bcs.n	8008094 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008072:	4b26      	ldr	r3, [pc, #152]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f023 0207 	bic.w	r2, r3, #7
 800807a:	4924      	ldr	r1, [pc, #144]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	4313      	orrs	r3, r2
 8008080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008082:	4b22      	ldr	r3, [pc, #136]	; (800810c <HAL_RCC_ClockConfig+0x1b0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d001      	beq.n	8008094 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e036      	b.n	8008102 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d008      	beq.n	80080b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080a0:	4b1b      	ldr	r3, [pc, #108]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	4918      	ldr	r1, [pc, #96]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080be:	4b14      	ldr	r3, [pc, #80]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	4910      	ldr	r1, [pc, #64]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80080d2:	f000 f825 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 80080d6:	4602      	mov	r2, r0
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <HAL_RCC_ClockConfig+0x1b4>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	091b      	lsrs	r3, r3, #4
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	490c      	ldr	r1, [pc, #48]	; (8008114 <HAL_RCC_ClockConfig+0x1b8>)
 80080e4:	5ccb      	ldrb	r3, [r1, r3]
 80080e6:	f003 031f 	and.w	r3, r3, #31
 80080ea:	fa22 f303 	lsr.w	r3, r2, r3
 80080ee:	4a0a      	ldr	r2, [pc, #40]	; (8008118 <HAL_RCC_ClockConfig+0x1bc>)
 80080f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80080f2:	4b0a      	ldr	r3, [pc, #40]	; (800811c <HAL_RCC_ClockConfig+0x1c0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe f872 	bl	80061e0 <HAL_InitTick>
 80080fc:	4603      	mov	r3, r0
 80080fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8008100:	7afb      	ldrb	r3, [r7, #11]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40022000 	.word	0x40022000
 8008110:	40021000 	.word	0x40021000
 8008114:	0800a07c 	.word	0x0800a07c
 8008118:	20000000 	.word	0x20000000
 800811c:	2000015c 	.word	0x2000015c

08008120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008120:	b480      	push	{r7}
 8008122:	b089      	sub	sp, #36	; 0x24
 8008124:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800812e:	4b3e      	ldr	r3, [pc, #248]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 030c 	and.w	r3, r3, #12
 8008136:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008138:	4b3b      	ldr	r3, [pc, #236]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <HAL_RCC_GetSysClockFreq+0x34>
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b0c      	cmp	r3, #12
 800814c:	d121      	bne.n	8008192 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d11e      	bne.n	8008192 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008154:	4b34      	ldr	r3, [pc, #208]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d107      	bne.n	8008170 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008160:	4b31      	ldr	r3, [pc, #196]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 8008162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	e005      	b.n	800817c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008170:	4b2d      	ldr	r3, [pc, #180]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	091b      	lsrs	r3, r3, #4
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800817c:	4a2b      	ldr	r2, [pc, #172]	; (800822c <HAL_RCC_GetSysClockFreq+0x10c>)
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008184:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10d      	bne.n	80081a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008190:	e00a      	b.n	80081a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b04      	cmp	r3, #4
 8008196:	d102      	bne.n	800819e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008198:	4b25      	ldr	r3, [pc, #148]	; (8008230 <HAL_RCC_GetSysClockFreq+0x110>)
 800819a:	61bb      	str	r3, [r7, #24]
 800819c:	e004      	b.n	80081a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d101      	bne.n	80081a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80081a4:	4b23      	ldr	r3, [pc, #140]	; (8008234 <HAL_RCC_GetSysClockFreq+0x114>)
 80081a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b0c      	cmp	r3, #12
 80081ac:	d134      	bne.n	8008218 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081ae:	4b1e      	ldr	r3, [pc, #120]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d003      	beq.n	80081c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d003      	beq.n	80081cc <HAL_RCC_GetSysClockFreq+0xac>
 80081c4:	e005      	b.n	80081d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80081c6:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <HAL_RCC_GetSysClockFreq+0x110>)
 80081c8:	617b      	str	r3, [r7, #20]
      break;
 80081ca:	e005      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80081cc:	4b19      	ldr	r3, [pc, #100]	; (8008234 <HAL_RCC_GetSysClockFreq+0x114>)
 80081ce:	617b      	str	r3, [r7, #20]
      break;
 80081d0:	e002      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	617b      	str	r3, [r7, #20]
      break;
 80081d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	3301      	adds	r3, #1
 80081e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	fb02 f203 	mul.w	r2, r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081fe:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <HAL_RCC_GetSysClockFreq+0x108>)
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	0e5b      	lsrs	r3, r3, #25
 8008204:	f003 0303 	and.w	r3, r3, #3
 8008208:	3301      	adds	r3, #1
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	fbb2 f3f3 	udiv	r3, r2, r3
 8008216:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008218:	69bb      	ldr	r3, [r7, #24]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3724      	adds	r7, #36	; 0x24
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	40021000 	.word	0x40021000
 800822c:	0800a094 	.word	0x0800a094
 8008230:	00f42400 	.word	0x00f42400
 8008234:	007a1200 	.word	0x007a1200

08008238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800823c:	4b03      	ldr	r3, [pc, #12]	; (800824c <HAL_RCC_GetHCLKFreq+0x14>)
 800823e:	681b      	ldr	r3, [r3, #0]
}
 8008240:	4618      	mov	r0, r3
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000000 	.word	0x20000000

08008250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008254:	f7ff fff0 	bl	8008238 <HAL_RCC_GetHCLKFreq>
 8008258:	4602      	mov	r2, r0
 800825a:	4b06      	ldr	r3, [pc, #24]	; (8008274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	4904      	ldr	r1, [pc, #16]	; (8008278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008266:	5ccb      	ldrb	r3, [r1, r3]
 8008268:	f003 031f 	and.w	r3, r3, #31
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008270:	4618      	mov	r0, r3
 8008272:	bd80      	pop	{r7, pc}
 8008274:	40021000 	.word	0x40021000
 8008278:	0800a08c 	.word	0x0800a08c

0800827c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008280:	f7ff ffda 	bl	8008238 <HAL_RCC_GetHCLKFreq>
 8008284:	4602      	mov	r2, r0
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	0adb      	lsrs	r3, r3, #11
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	4904      	ldr	r1, [pc, #16]	; (80082a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008292:	5ccb      	ldrb	r3, [r1, r3]
 8008294:	f003 031f 	and.w	r3, r3, #31
 8008298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800829c:	4618      	mov	r0, r3
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	40021000 	.word	0x40021000
 80082a4:	0800a08c 	.word	0x0800a08c

080082a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80082b4:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80082c0:	f7ff fa02 	bl	80076c8 <HAL_PWREx_GetVoltageRange>
 80082c4:	6178      	str	r0, [r7, #20]
 80082c6:	e014      	b.n	80082f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082c8:	4b25      	ldr	r3, [pc, #148]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082cc:	4a24      	ldr	r2, [pc, #144]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d2:	6593      	str	r3, [r2, #88]	; 0x58
 80082d4:	4b22      	ldr	r3, [pc, #136]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80082e0:	f7ff f9f2 	bl	80076c8 <HAL_PWREx_GetVoltageRange>
 80082e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80082e6:	4b1e      	ldr	r3, [pc, #120]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ea:	4a1d      	ldr	r2, [pc, #116]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f8:	d10b      	bne.n	8008312 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b80      	cmp	r3, #128	; 0x80
 80082fe:	d919      	bls.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2ba0      	cmp	r3, #160	; 0xa0
 8008304:	d902      	bls.n	800830c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008306:	2302      	movs	r3, #2
 8008308:	613b      	str	r3, [r7, #16]
 800830a:	e013      	b.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800830c:	2301      	movs	r3, #1
 800830e:	613b      	str	r3, [r7, #16]
 8008310:	e010      	b.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d902      	bls.n	800831e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008318:	2303      	movs	r3, #3
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	e00a      	b.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d102      	bne.n	800832a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008324:	2302      	movs	r3, #2
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	e004      	b.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b70      	cmp	r3, #112	; 0x70
 800832e:	d101      	bne.n	8008334 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008330:	2301      	movs	r3, #1
 8008332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f023 0207 	bic.w	r2, r3, #7
 800833c:	4909      	ldr	r1, [pc, #36]	; (8008364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	4313      	orrs	r3, r2
 8008342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	429a      	cmp	r2, r3
 8008350:	d001      	beq.n	8008356 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40021000 	.word	0x40021000
 8008364:	40022000 	.word	0x40022000

08008368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008370:	2300      	movs	r3, #0
 8008372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008374:	2300      	movs	r3, #0
 8008376:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008380:	2b00      	cmp	r3, #0
 8008382:	d041      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008388:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800838c:	d02a      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800838e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008392:	d824      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008398:	d008      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800839a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800839e:	d81e      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80083a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083a8:	d010      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083aa:	e018      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80083ac:	4b86      	ldr	r3, [pc, #536]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	4a85      	ldr	r2, [pc, #532]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083b8:	e015      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fabb 	bl	800893c <RCCEx_PLLSAI1_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083ca:	e00c      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3320      	adds	r3, #32
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fba6 	bl	8008b24 <RCCEx_PLLSAI2_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	74fb      	strb	r3, [r7, #19]
      break;
 80083e2:	e000      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e6:	7cfb      	ldrb	r3, [r7, #19]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083ec:	4b76      	ldr	r3, [pc, #472]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fa:	4973      	ldr	r1, [pc, #460]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008402:	e001      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	7cfb      	ldrb	r3, [r7, #19]
 8008406:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d041      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008418:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800841c:	d02a      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800841e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008422:	d824      	bhi.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008428:	d008      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800842a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800842e:	d81e      	bhi.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008438:	d010      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800843a:	e018      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800843c:	4b62      	ldr	r3, [pc, #392]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	4a61      	ldr	r2, [pc, #388]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008446:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008448:	e015      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	2100      	movs	r1, #0
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fa73 	bl	800893c <RCCEx_PLLSAI1_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800845a:	e00c      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3320      	adds	r3, #32
 8008460:	2100      	movs	r1, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fb5e 	bl	8008b24 <RCCEx_PLLSAI2_Config>
 8008468:	4603      	mov	r3, r0
 800846a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800846c:	e003      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	74fb      	strb	r3, [r7, #19]
      break;
 8008472:	e000      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008476:	7cfb      	ldrb	r3, [r7, #19]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10b      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800847c:	4b52      	ldr	r3, [pc, #328]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800847e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008482:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800848a:	494f      	ldr	r1, [pc, #316]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800848c:	4313      	orrs	r3, r2
 800848e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008492:	e001      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008494:	7cfb      	ldrb	r3, [r7, #19]
 8008496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80a0 	beq.w	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084a6:	2300      	movs	r3, #0
 80084a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80084aa:	4b47      	ldr	r3, [pc, #284]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80084ba:	2300      	movs	r3, #0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00d      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084c0:	4b41      	ldr	r3, [pc, #260]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c4:	4a40      	ldr	r2, [pc, #256]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ca:	6593      	str	r3, [r2, #88]	; 0x58
 80084cc:	4b3e      	ldr	r3, [pc, #248]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d4:	60bb      	str	r3, [r7, #8]
 80084d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084d8:	2301      	movs	r3, #1
 80084da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084dc:	4b3b      	ldr	r3, [pc, #236]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a3a      	ldr	r2, [pc, #232]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80084e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084e8:	f7fd feca 	bl	8006280 <HAL_GetTick>
 80084ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80084ee:	e009      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084f0:	f7fd fec6 	bl	8006280 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d902      	bls.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	74fb      	strb	r3, [r7, #19]
        break;
 8008502:	e005      	b.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008504:	4b31      	ldr	r3, [pc, #196]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0ef      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008510:	7cfb      	ldrb	r3, [r7, #19]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d15c      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008516:	4b2c      	ldr	r3, [pc, #176]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01f      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	429a      	cmp	r2, r3
 8008532:	d019      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008534:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008540:	4b21      	ldr	r3, [pc, #132]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008546:	4a20      	ldr	r2, [pc, #128]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800854c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008550:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008556:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008560:	4a19      	ldr	r2, [pc, #100]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d016      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008572:	f7fd fe85 	bl	8006280 <HAL_GetTick>
 8008576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008578:	e00b      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800857a:	f7fd fe81 	bl	8006280 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	f241 3288 	movw	r2, #5000	; 0x1388
 8008588:	4293      	cmp	r3, r2
 800858a:	d902      	bls.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	74fb      	strb	r3, [r7, #19]
            break;
 8008590:	e006      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008592:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0ec      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80085a0:	7cfb      	ldrb	r3, [r7, #19]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10c      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085a6:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b6:	4904      	ldr	r1, [pc, #16]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80085be:	e009      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085c0:	7cfb      	ldrb	r3, [r7, #19]
 80085c2:	74bb      	strb	r3, [r7, #18]
 80085c4:	e006      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80085c6:	bf00      	nop
 80085c8:	40021000 	.word	0x40021000
 80085cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d0:	7cfb      	ldrb	r3, [r7, #19]
 80085d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085d4:	7c7b      	ldrb	r3, [r7, #17]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d105      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085da:	4b9e      	ldr	r3, [pc, #632]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085de:	4a9d      	ldr	r2, [pc, #628]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085f2:	4b98      	ldr	r3, [pc, #608]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f8:	f023 0203 	bic.w	r2, r3, #3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	4994      	ldr	r1, [pc, #592]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008614:	4b8f      	ldr	r3, [pc, #572]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861a:	f023 020c 	bic.w	r2, r3, #12
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	498c      	ldr	r1, [pc, #560]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008636:	4b87      	ldr	r3, [pc, #540]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	4983      	ldr	r1, [pc, #524]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008646:	4313      	orrs	r3, r2
 8008648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008658:	4b7e      	ldr	r3, [pc, #504]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800865a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800865e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008666:	497b      	ldr	r1, [pc, #492]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008668:	4313      	orrs	r3, r2
 800866a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800867a:	4b76      	ldr	r3, [pc, #472]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800867c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008688:	4972      	ldr	r1, [pc, #456]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800868a:	4313      	orrs	r3, r2
 800868c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800869c:	4b6d      	ldr	r3, [pc, #436]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800869e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086aa:	496a      	ldr	r1, [pc, #424]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086be:	4b65      	ldr	r3, [pc, #404]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086cc:	4961      	ldr	r1, [pc, #388]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00a      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086e0:	4b5c      	ldr	r3, [pc, #368]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ee:	4959      	ldr	r1, [pc, #356]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008702:	4b54      	ldr	r3, [pc, #336]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008710:	4950      	ldr	r1, [pc, #320]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008724:	4b4b      	ldr	r3, [pc, #300]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800872a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	4948      	ldr	r1, [pc, #288]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008734:	4313      	orrs	r3, r2
 8008736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008746:	4b43      	ldr	r3, [pc, #268]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008754:	493f      	ldr	r1, [pc, #252]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008756:	4313      	orrs	r3, r2
 8008758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d028      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008768:	4b3a      	ldr	r3, [pc, #232]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800876a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008776:	4937      	ldr	r1, [pc, #220]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008786:	d106      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008788:	4b32      	ldr	r3, [pc, #200]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a31      	ldr	r2, [pc, #196]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800878e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008792:	60d3      	str	r3, [r2, #12]
 8008794:	e011      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800879a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800879e:	d10c      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3304      	adds	r3, #4
 80087a4:	2101      	movs	r1, #1
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f8c8 	bl	800893c <RCCEx_PLLSAI1_Config>
 80087ac:	4603      	mov	r3, r0
 80087ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80087b0:	7cfb      	ldrb	r3, [r7, #19]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80087b6:	7cfb      	ldrb	r3, [r7, #19]
 80087b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d028      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087c6:	4b23      	ldr	r3, [pc, #140]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d4:	491f      	ldr	r1, [pc, #124]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087e4:	d106      	bne.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087e6:	4b1b      	ldr	r3, [pc, #108]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	4a1a      	ldr	r2, [pc, #104]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087f0:	60d3      	str	r3, [r2, #12]
 80087f2:	e011      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087fc:	d10c      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3304      	adds	r3, #4
 8008802:	2101      	movs	r1, #1
 8008804:	4618      	mov	r0, r3
 8008806:	f000 f899 	bl	800893c <RCCEx_PLLSAI1_Config>
 800880a:	4603      	mov	r3, r0
 800880c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800880e:	7cfb      	ldrb	r3, [r7, #19]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008814:	7cfb      	ldrb	r3, [r7, #19]
 8008816:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d02b      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008832:	4908      	ldr	r1, [pc, #32]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008834:	4313      	orrs	r3, r2
 8008836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008842:	d109      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008844:	4b03      	ldr	r3, [pc, #12]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	4a02      	ldr	r2, [pc, #8]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800884a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800884e:	60d3      	str	r3, [r2, #12]
 8008850:	e014      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008852:	bf00      	nop
 8008854:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800885c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008860:	d10c      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3304      	adds	r3, #4
 8008866:	2101      	movs	r1, #1
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f867 	bl	800893c <RCCEx_PLLSAI1_Config>
 800886e:	4603      	mov	r3, r0
 8008870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008872:	7cfb      	ldrb	r3, [r7, #19]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008878:	7cfb      	ldrb	r3, [r7, #19]
 800887a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d02f      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008888:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800888a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008896:	4928      	ldr	r1, [pc, #160]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008898:	4313      	orrs	r3, r2
 800889a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a6:	d10d      	bne.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3304      	adds	r3, #4
 80088ac:	2102      	movs	r1, #2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f844 	bl	800893c <RCCEx_PLLSAI1_Config>
 80088b4:	4603      	mov	r3, r0
 80088b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088b8:	7cfb      	ldrb	r3, [r7, #19]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d014      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80088be:	7cfb      	ldrb	r3, [r7, #19]
 80088c0:	74bb      	strb	r3, [r7, #18]
 80088c2:	e011      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088cc:	d10c      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3320      	adds	r3, #32
 80088d2:	2102      	movs	r1, #2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f925 	bl	8008b24 <RCCEx_PLLSAI2_Config>
 80088da:	4603      	mov	r3, r0
 80088dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088de:	7cfb      	ldrb	r3, [r7, #19]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80088e4:	7cfb      	ldrb	r3, [r7, #19]
 80088e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088f4:	4b10      	ldr	r3, [pc, #64]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80088f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008902:	490d      	ldr	r1, [pc, #52]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008904:	4313      	orrs	r3, r2
 8008906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00b      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008916:	4b08      	ldr	r3, [pc, #32]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008926:	4904      	ldr	r1, [pc, #16]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008928:	4313      	orrs	r3, r2
 800892a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800892e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	40021000 	.word	0x40021000

0800893c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800894a:	4b75      	ldr	r3, [pc, #468]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008956:	4b72      	ldr	r3, [pc, #456]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f003 0203 	and.w	r2, r3, #3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d10d      	bne.n	8008982 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
       ||
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800896e:	4b6c      	ldr	r3, [pc, #432]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
       ||
 800897e:	429a      	cmp	r2, r3
 8008980:	d047      	beq.n	8008a12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	73fb      	strb	r3, [r7, #15]
 8008986:	e044      	b.n	8008a12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b03      	cmp	r3, #3
 800898e:	d018      	beq.n	80089c2 <RCCEx_PLLSAI1_Config+0x86>
 8008990:	2b03      	cmp	r3, #3
 8008992:	d825      	bhi.n	80089e0 <RCCEx_PLLSAI1_Config+0xa4>
 8008994:	2b01      	cmp	r3, #1
 8008996:	d002      	beq.n	800899e <RCCEx_PLLSAI1_Config+0x62>
 8008998:	2b02      	cmp	r3, #2
 800899a:	d009      	beq.n	80089b0 <RCCEx_PLLSAI1_Config+0x74>
 800899c:	e020      	b.n	80089e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800899e:	4b60      	ldr	r3, [pc, #384]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d11d      	bne.n	80089e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089ae:	e01a      	b.n	80089e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089b0:	4b5b      	ldr	r3, [pc, #364]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d116      	bne.n	80089ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089c0:	e013      	b.n	80089ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089c2:	4b57      	ldr	r3, [pc, #348]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10f      	bne.n	80089ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089ce:	4b54      	ldr	r3, [pc, #336]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d109      	bne.n	80089ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089de:	e006      	b.n	80089ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	73fb      	strb	r3, [r7, #15]
      break;
 80089e4:	e004      	b.n	80089f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80089e6:	bf00      	nop
 80089e8:	e002      	b.n	80089f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80089ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10d      	bne.n	8008a12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80089f6:	4b4a      	ldr	r3, [pc, #296]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6819      	ldr	r1, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	4944      	ldr	r1, [pc, #272]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d17d      	bne.n	8008b14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008a18:	4b41      	ldr	r3, [pc, #260]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a40      	ldr	r2, [pc, #256]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a24:	f7fd fc2c 	bl	8006280 <HAL_GetTick>
 8008a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a2a:	e009      	b.n	8008a40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a2c:	f7fd fc28 	bl	8006280 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d902      	bls.n	8008a40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a3e:	e005      	b.n	8008a4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a40:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1ef      	bne.n	8008a2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d160      	bne.n	8008b14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d111      	bne.n	8008a7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a58:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6892      	ldr	r2, [r2, #8]
 8008a68:	0211      	lsls	r1, r2, #8
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	68d2      	ldr	r2, [r2, #12]
 8008a6e:	0912      	lsrs	r2, r2, #4
 8008a70:	0452      	lsls	r2, r2, #17
 8008a72:	430a      	orrs	r2, r1
 8008a74:	492a      	ldr	r1, [pc, #168]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	610b      	str	r3, [r1, #16]
 8008a7a:	e027      	b.n	8008acc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d112      	bne.n	8008aa8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a82:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008a8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6892      	ldr	r2, [r2, #8]
 8008a92:	0211      	lsls	r1, r2, #8
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6912      	ldr	r2, [r2, #16]
 8008a98:	0852      	lsrs	r2, r2, #1
 8008a9a:	3a01      	subs	r2, #1
 8008a9c:	0552      	lsls	r2, r2, #21
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	491f      	ldr	r1, [pc, #124]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	610b      	str	r3, [r1, #16]
 8008aa6:	e011      	b.n	8008acc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6892      	ldr	r2, [r2, #8]
 8008ab8:	0211      	lsls	r1, r2, #8
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6952      	ldr	r2, [r2, #20]
 8008abe:	0852      	lsrs	r2, r2, #1
 8008ac0:	3a01      	subs	r2, #1
 8008ac2:	0652      	lsls	r2, r2, #25
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	4916      	ldr	r1, [pc, #88]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008acc:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a13      	ldr	r2, [pc, #76]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad8:	f7fd fbd2 	bl	8006280 <HAL_GetTick>
 8008adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008ade:	e009      	b.n	8008af4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ae0:	f7fd fbce 	bl	8006280 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d902      	bls.n	8008af4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	73fb      	strb	r3, [r7, #15]
          break;
 8008af2:	e005      	b.n	8008b00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0ef      	beq.n	8008ae0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	4904      	ldr	r1, [pc, #16]	; (8008b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40021000 	.word	0x40021000

08008b24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008b32:	4b6a      	ldr	r3, [pc, #424]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	f003 0303 	and.w	r3, r3, #3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d018      	beq.n	8008b70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008b3e:	4b67      	ldr	r3, [pc, #412]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f003 0203 	and.w	r2, r3, #3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d10d      	bne.n	8008b6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
       ||
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008b56:	4b61      	ldr	r3, [pc, #388]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
       ||
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d047      	beq.n	8008bfa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
 8008b6e:	e044      	b.n	8008bfa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d018      	beq.n	8008baa <RCCEx_PLLSAI2_Config+0x86>
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d825      	bhi.n	8008bc8 <RCCEx_PLLSAI2_Config+0xa4>
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d002      	beq.n	8008b86 <RCCEx_PLLSAI2_Config+0x62>
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d009      	beq.n	8008b98 <RCCEx_PLLSAI2_Config+0x74>
 8008b84:	e020      	b.n	8008bc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008b86:	4b55      	ldr	r3, [pc, #340]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d11d      	bne.n	8008bce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b96:	e01a      	b.n	8008bce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008b98:	4b50      	ldr	r3, [pc, #320]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d116      	bne.n	8008bd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ba8:	e013      	b.n	8008bd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008baa:	4b4c      	ldr	r3, [pc, #304]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10f      	bne.n	8008bd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008bb6:	4b49      	ldr	r3, [pc, #292]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d109      	bne.n	8008bd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bc6:	e006      	b.n	8008bd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73fb      	strb	r3, [r7, #15]
      break;
 8008bcc:	e004      	b.n	8008bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008bce:	bf00      	nop
 8008bd0:	e002      	b.n	8008bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008bd2:	bf00      	nop
 8008bd4:	e000      	b.n	8008bd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008bd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10d      	bne.n	8008bfa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008bde:	4b3f      	ldr	r3, [pc, #252]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6819      	ldr	r1, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	011b      	lsls	r3, r3, #4
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	4939      	ldr	r1, [pc, #228]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d167      	bne.n	8008cd0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008c00:	4b36      	ldr	r3, [pc, #216]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a35      	ldr	r2, [pc, #212]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c0c:	f7fd fb38 	bl	8006280 <HAL_GetTick>
 8008c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c12:	e009      	b.n	8008c28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008c14:	f7fd fb34 	bl	8006280 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d902      	bls.n	8008c28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	73fb      	strb	r3, [r7, #15]
        break;
 8008c26:	e005      	b.n	8008c34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c28:	4b2c      	ldr	r3, [pc, #176]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1ef      	bne.n	8008c14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d14a      	bne.n	8008cd0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d111      	bne.n	8008c64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008c40:	4b26      	ldr	r3, [pc, #152]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6892      	ldr	r2, [r2, #8]
 8008c50:	0211      	lsls	r1, r2, #8
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	68d2      	ldr	r2, [r2, #12]
 8008c56:	0912      	lsrs	r2, r2, #4
 8008c58:	0452      	lsls	r2, r2, #17
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	491f      	ldr	r1, [pc, #124]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	614b      	str	r3, [r1, #20]
 8008c62:	e011      	b.n	8008c88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008c64:	4b1d      	ldr	r3, [pc, #116]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008c6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6892      	ldr	r2, [r2, #8]
 8008c74:	0211      	lsls	r1, r2, #8
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6912      	ldr	r2, [r2, #16]
 8008c7a:	0852      	lsrs	r2, r2, #1
 8008c7c:	3a01      	subs	r2, #1
 8008c7e:	0652      	lsls	r2, r2, #25
 8008c80:	430a      	orrs	r2, r1
 8008c82:	4916      	ldr	r1, [pc, #88]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008c88:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c94:	f7fd faf4 	bl	8006280 <HAL_GetTick>
 8008c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008c9a:	e009      	b.n	8008cb0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008c9c:	f7fd faf0 	bl	8006280 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d902      	bls.n	8008cb0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	73fb      	strb	r3, [r7, #15]
          break;
 8008cae:	e005      	b.n	8008cbc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008cb0:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0ef      	beq.n	8008c9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d106      	bne.n	8008cd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	4904      	ldr	r1, [pc, #16]	; (8008cdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	40021000 	.word	0x40021000

08008ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e040      	b.n	8008d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7f7 fe96 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2224      	movs	r2, #36	; 0x24
 8008d0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0201 	bic.w	r2, r2, #1
 8008d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f8c0 	bl	8008ea4 <UART_SetConfig>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d101      	bne.n	8008d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e022      	b.n	8008d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fb3e 	bl	80093b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0201 	orr.w	r2, r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fbc5 	bl	80094fc <UART_CheckIdleState>
 8008d72:	4603      	mov	r3, r0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08a      	sub	sp, #40	; 0x28
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	f040 8082 	bne.w	8008e9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <HAL_UART_Transmit+0x26>
 8008d9c:	88fb      	ldrh	r3, [r7, #6]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e07a      	b.n	8008e9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_UART_Transmit+0x38>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e073      	b.n	8008e9c <HAL_UART_Transmit+0x120>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2221      	movs	r2, #33	; 0x21
 8008dc8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dca:	f7fd fa59 	bl	8006280 <HAL_GetTick>
 8008dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	88fa      	ldrh	r2, [r7, #6]
 8008dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	88fa      	ldrh	r2, [r7, #6]
 8008ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de8:	d108      	bne.n	8008dfc <HAL_UART_Transmit+0x80>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d104      	bne.n	8008dfc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	e003      	b.n	8008e04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008e0c:	e02d      	b.n	8008e6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2200      	movs	r2, #0
 8008e16:	2180      	movs	r1, #128	; 0x80
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 fbb8 	bl	800958e <UART_WaitOnFlagUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e039      	b.n	8008e9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10b      	bne.n	8008e46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	881a      	ldrh	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e3a:	b292      	uxth	r2, r2
 8008e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	3302      	adds	r3, #2
 8008e42:	61bb      	str	r3, [r7, #24]
 8008e44:	e008      	b.n	8008e58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	781a      	ldrb	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	3301      	adds	r3, #1
 8008e56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1cb      	bne.n	8008e0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2140      	movs	r1, #64	; 0x40
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 fb84 	bl	800958e <UART_WaitOnFlagUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e005      	b.n	8008e9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2220      	movs	r2, #32
 8008e94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e000      	b.n	8008e9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008e9a:	2302      	movs	r3, #2
  }
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ea4:	b5b0      	push	{r4, r5, r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4bad      	ldr	r3, [pc, #692]	; (8009184 <UART_SetConfig+0x2e0>)
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	69f9      	ldr	r1, [r7, #28]
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4aa2      	ldr	r2, [pc, #648]	; (8009188 <UART_SetConfig+0x2e4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d004      	beq.n	8008f0c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	69fa      	ldr	r2, [r7, #28]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a99      	ldr	r2, [pc, #612]	; (800918c <UART_SetConfig+0x2e8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d121      	bne.n	8008f6e <UART_SetConfig+0xca>
 8008f2a:	4b99      	ldr	r3, [pc, #612]	; (8009190 <UART_SetConfig+0x2ec>)
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d817      	bhi.n	8008f68 <UART_SetConfig+0xc4>
 8008f38:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <UART_SetConfig+0x9c>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f5d 	.word	0x08008f5d
 8008f48:	08008f57 	.word	0x08008f57
 8008f4c:	08008f63 	.word	0x08008f63
 8008f50:	2301      	movs	r3, #1
 8008f52:	76fb      	strb	r3, [r7, #27]
 8008f54:	e0e7      	b.n	8009126 <UART_SetConfig+0x282>
 8008f56:	2302      	movs	r3, #2
 8008f58:	76fb      	strb	r3, [r7, #27]
 8008f5a:	e0e4      	b.n	8009126 <UART_SetConfig+0x282>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	76fb      	strb	r3, [r7, #27]
 8008f60:	e0e1      	b.n	8009126 <UART_SetConfig+0x282>
 8008f62:	2308      	movs	r3, #8
 8008f64:	76fb      	strb	r3, [r7, #27]
 8008f66:	e0de      	b.n	8009126 <UART_SetConfig+0x282>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	76fb      	strb	r3, [r7, #27]
 8008f6c:	e0db      	b.n	8009126 <UART_SetConfig+0x282>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a88      	ldr	r2, [pc, #544]	; (8009194 <UART_SetConfig+0x2f0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d132      	bne.n	8008fde <UART_SetConfig+0x13a>
 8008f78:	4b85      	ldr	r3, [pc, #532]	; (8009190 <UART_SetConfig+0x2ec>)
 8008f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7e:	f003 030c 	and.w	r3, r3, #12
 8008f82:	2b0c      	cmp	r3, #12
 8008f84:	d828      	bhi.n	8008fd8 <UART_SetConfig+0x134>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <UART_SetConfig+0xe8>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fc1 	.word	0x08008fc1
 8008f90:	08008fd9 	.word	0x08008fd9
 8008f94:	08008fd9 	.word	0x08008fd9
 8008f98:	08008fd9 	.word	0x08008fd9
 8008f9c:	08008fcd 	.word	0x08008fcd
 8008fa0:	08008fd9 	.word	0x08008fd9
 8008fa4:	08008fd9 	.word	0x08008fd9
 8008fa8:	08008fd9 	.word	0x08008fd9
 8008fac:	08008fc7 	.word	0x08008fc7
 8008fb0:	08008fd9 	.word	0x08008fd9
 8008fb4:	08008fd9 	.word	0x08008fd9
 8008fb8:	08008fd9 	.word	0x08008fd9
 8008fbc:	08008fd3 	.word	0x08008fd3
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	76fb      	strb	r3, [r7, #27]
 8008fc4:	e0af      	b.n	8009126 <UART_SetConfig+0x282>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	76fb      	strb	r3, [r7, #27]
 8008fca:	e0ac      	b.n	8009126 <UART_SetConfig+0x282>
 8008fcc:	2304      	movs	r3, #4
 8008fce:	76fb      	strb	r3, [r7, #27]
 8008fd0:	e0a9      	b.n	8009126 <UART_SetConfig+0x282>
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	76fb      	strb	r3, [r7, #27]
 8008fd6:	e0a6      	b.n	8009126 <UART_SetConfig+0x282>
 8008fd8:	2310      	movs	r3, #16
 8008fda:	76fb      	strb	r3, [r7, #27]
 8008fdc:	e0a3      	b.n	8009126 <UART_SetConfig+0x282>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a6d      	ldr	r2, [pc, #436]	; (8009198 <UART_SetConfig+0x2f4>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d120      	bne.n	800902a <UART_SetConfig+0x186>
 8008fe8:	4b69      	ldr	r3, [pc, #420]	; (8009190 <UART_SetConfig+0x2ec>)
 8008fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ff2:	2b30      	cmp	r3, #48	; 0x30
 8008ff4:	d013      	beq.n	800901e <UART_SetConfig+0x17a>
 8008ff6:	2b30      	cmp	r3, #48	; 0x30
 8008ff8:	d814      	bhi.n	8009024 <UART_SetConfig+0x180>
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d009      	beq.n	8009012 <UART_SetConfig+0x16e>
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	d810      	bhi.n	8009024 <UART_SetConfig+0x180>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <UART_SetConfig+0x168>
 8009006:	2b10      	cmp	r3, #16
 8009008:	d006      	beq.n	8009018 <UART_SetConfig+0x174>
 800900a:	e00b      	b.n	8009024 <UART_SetConfig+0x180>
 800900c:	2300      	movs	r3, #0
 800900e:	76fb      	strb	r3, [r7, #27]
 8009010:	e089      	b.n	8009126 <UART_SetConfig+0x282>
 8009012:	2302      	movs	r3, #2
 8009014:	76fb      	strb	r3, [r7, #27]
 8009016:	e086      	b.n	8009126 <UART_SetConfig+0x282>
 8009018:	2304      	movs	r3, #4
 800901a:	76fb      	strb	r3, [r7, #27]
 800901c:	e083      	b.n	8009126 <UART_SetConfig+0x282>
 800901e:	2308      	movs	r3, #8
 8009020:	76fb      	strb	r3, [r7, #27]
 8009022:	e080      	b.n	8009126 <UART_SetConfig+0x282>
 8009024:	2310      	movs	r3, #16
 8009026:	76fb      	strb	r3, [r7, #27]
 8009028:	e07d      	b.n	8009126 <UART_SetConfig+0x282>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a5b      	ldr	r2, [pc, #364]	; (800919c <UART_SetConfig+0x2f8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d120      	bne.n	8009076 <UART_SetConfig+0x1d2>
 8009034:	4b56      	ldr	r3, [pc, #344]	; (8009190 <UART_SetConfig+0x2ec>)
 8009036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800903e:	2bc0      	cmp	r3, #192	; 0xc0
 8009040:	d013      	beq.n	800906a <UART_SetConfig+0x1c6>
 8009042:	2bc0      	cmp	r3, #192	; 0xc0
 8009044:	d814      	bhi.n	8009070 <UART_SetConfig+0x1cc>
 8009046:	2b80      	cmp	r3, #128	; 0x80
 8009048:	d009      	beq.n	800905e <UART_SetConfig+0x1ba>
 800904a:	2b80      	cmp	r3, #128	; 0x80
 800904c:	d810      	bhi.n	8009070 <UART_SetConfig+0x1cc>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <UART_SetConfig+0x1b4>
 8009052:	2b40      	cmp	r3, #64	; 0x40
 8009054:	d006      	beq.n	8009064 <UART_SetConfig+0x1c0>
 8009056:	e00b      	b.n	8009070 <UART_SetConfig+0x1cc>
 8009058:	2300      	movs	r3, #0
 800905a:	76fb      	strb	r3, [r7, #27]
 800905c:	e063      	b.n	8009126 <UART_SetConfig+0x282>
 800905e:	2302      	movs	r3, #2
 8009060:	76fb      	strb	r3, [r7, #27]
 8009062:	e060      	b.n	8009126 <UART_SetConfig+0x282>
 8009064:	2304      	movs	r3, #4
 8009066:	76fb      	strb	r3, [r7, #27]
 8009068:	e05d      	b.n	8009126 <UART_SetConfig+0x282>
 800906a:	2308      	movs	r3, #8
 800906c:	76fb      	strb	r3, [r7, #27]
 800906e:	e05a      	b.n	8009126 <UART_SetConfig+0x282>
 8009070:	2310      	movs	r3, #16
 8009072:	76fb      	strb	r3, [r7, #27]
 8009074:	e057      	b.n	8009126 <UART_SetConfig+0x282>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a49      	ldr	r2, [pc, #292]	; (80091a0 <UART_SetConfig+0x2fc>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d125      	bne.n	80090cc <UART_SetConfig+0x228>
 8009080:	4b43      	ldr	r3, [pc, #268]	; (8009190 <UART_SetConfig+0x2ec>)
 8009082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800908a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800908e:	d017      	beq.n	80090c0 <UART_SetConfig+0x21c>
 8009090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009094:	d817      	bhi.n	80090c6 <UART_SetConfig+0x222>
 8009096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909a:	d00b      	beq.n	80090b4 <UART_SetConfig+0x210>
 800909c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090a0:	d811      	bhi.n	80090c6 <UART_SetConfig+0x222>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <UART_SetConfig+0x20a>
 80090a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090aa:	d006      	beq.n	80090ba <UART_SetConfig+0x216>
 80090ac:	e00b      	b.n	80090c6 <UART_SetConfig+0x222>
 80090ae:	2300      	movs	r3, #0
 80090b0:	76fb      	strb	r3, [r7, #27]
 80090b2:	e038      	b.n	8009126 <UART_SetConfig+0x282>
 80090b4:	2302      	movs	r3, #2
 80090b6:	76fb      	strb	r3, [r7, #27]
 80090b8:	e035      	b.n	8009126 <UART_SetConfig+0x282>
 80090ba:	2304      	movs	r3, #4
 80090bc:	76fb      	strb	r3, [r7, #27]
 80090be:	e032      	b.n	8009126 <UART_SetConfig+0x282>
 80090c0:	2308      	movs	r3, #8
 80090c2:	76fb      	strb	r3, [r7, #27]
 80090c4:	e02f      	b.n	8009126 <UART_SetConfig+0x282>
 80090c6:	2310      	movs	r3, #16
 80090c8:	76fb      	strb	r3, [r7, #27]
 80090ca:	e02c      	b.n	8009126 <UART_SetConfig+0x282>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a2d      	ldr	r2, [pc, #180]	; (8009188 <UART_SetConfig+0x2e4>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d125      	bne.n	8009122 <UART_SetConfig+0x27e>
 80090d6:	4b2e      	ldr	r3, [pc, #184]	; (8009190 <UART_SetConfig+0x2ec>)
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e4:	d017      	beq.n	8009116 <UART_SetConfig+0x272>
 80090e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090ea:	d817      	bhi.n	800911c <UART_SetConfig+0x278>
 80090ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090f0:	d00b      	beq.n	800910a <UART_SetConfig+0x266>
 80090f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090f6:	d811      	bhi.n	800911c <UART_SetConfig+0x278>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <UART_SetConfig+0x260>
 80090fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009100:	d006      	beq.n	8009110 <UART_SetConfig+0x26c>
 8009102:	e00b      	b.n	800911c <UART_SetConfig+0x278>
 8009104:	2300      	movs	r3, #0
 8009106:	76fb      	strb	r3, [r7, #27]
 8009108:	e00d      	b.n	8009126 <UART_SetConfig+0x282>
 800910a:	2302      	movs	r3, #2
 800910c:	76fb      	strb	r3, [r7, #27]
 800910e:	e00a      	b.n	8009126 <UART_SetConfig+0x282>
 8009110:	2304      	movs	r3, #4
 8009112:	76fb      	strb	r3, [r7, #27]
 8009114:	e007      	b.n	8009126 <UART_SetConfig+0x282>
 8009116:	2308      	movs	r3, #8
 8009118:	76fb      	strb	r3, [r7, #27]
 800911a:	e004      	b.n	8009126 <UART_SetConfig+0x282>
 800911c:	2310      	movs	r3, #16
 800911e:	76fb      	strb	r3, [r7, #27]
 8009120:	e001      	b.n	8009126 <UART_SetConfig+0x282>
 8009122:	2310      	movs	r3, #16
 8009124:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a17      	ldr	r2, [pc, #92]	; (8009188 <UART_SetConfig+0x2e4>)
 800912c:	4293      	cmp	r3, r2
 800912e:	f040 8087 	bne.w	8009240 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009132:	7efb      	ldrb	r3, [r7, #27]
 8009134:	2b08      	cmp	r3, #8
 8009136:	d837      	bhi.n	80091a8 <UART_SetConfig+0x304>
 8009138:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <UART_SetConfig+0x29c>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	08009165 	.word	0x08009165
 8009144:	080091a9 	.word	0x080091a9
 8009148:	0800916d 	.word	0x0800916d
 800914c:	080091a9 	.word	0x080091a9
 8009150:	08009173 	.word	0x08009173
 8009154:	080091a9 	.word	0x080091a9
 8009158:	080091a9 	.word	0x080091a9
 800915c:	080091a9 	.word	0x080091a9
 8009160:	0800917b 	.word	0x0800917b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009164:	f7ff f874 	bl	8008250 <HAL_RCC_GetPCLK1Freq>
 8009168:	6178      	str	r0, [r7, #20]
        break;
 800916a:	e022      	b.n	80091b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800916c:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <UART_SetConfig+0x300>)
 800916e:	617b      	str	r3, [r7, #20]
        break;
 8009170:	e01f      	b.n	80091b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009172:	f7fe ffd5 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 8009176:	6178      	str	r0, [r7, #20]
        break;
 8009178:	e01b      	b.n	80091b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800917a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800917e:	617b      	str	r3, [r7, #20]
        break;
 8009180:	e017      	b.n	80091b2 <UART_SetConfig+0x30e>
 8009182:	bf00      	nop
 8009184:	efff69f3 	.word	0xefff69f3
 8009188:	40008000 	.word	0x40008000
 800918c:	40013800 	.word	0x40013800
 8009190:	40021000 	.word	0x40021000
 8009194:	40004400 	.word	0x40004400
 8009198:	40004800 	.word	0x40004800
 800919c:	40004c00 	.word	0x40004c00
 80091a0:	40005000 	.word	0x40005000
 80091a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	76bb      	strb	r3, [r7, #26]
        break;
 80091b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 80f1 	beq.w	800939c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d305      	bcc.n	80091d6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d902      	bls.n	80091dc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	76bb      	strb	r3, [r7, #26]
 80091da:	e0df      	b.n	800939c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	4618      	mov	r0, r3
 80091e0:	f04f 0100 	mov.w	r1, #0
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	020b      	lsls	r3, r1, #8
 80091ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091f2:	0202      	lsls	r2, r0, #8
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	6849      	ldr	r1, [r1, #4]
 80091f8:	0849      	lsrs	r1, r1, #1
 80091fa:	4608      	mov	r0, r1
 80091fc:	f04f 0100 	mov.w	r1, #0
 8009200:	1814      	adds	r4, r2, r0
 8009202:	eb43 0501 	adc.w	r5, r3, r1
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	461a      	mov	r2, r3
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	4620      	mov	r0, r4
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 f834 	bl	8000280 <__aeabi_uldivmod>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4613      	mov	r3, r2
 800921e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009226:	d308      	bcc.n	800923a <UART_SetConfig+0x396>
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800922e:	d204      	bcs.n	800923a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	60da      	str	r2, [r3, #12]
 8009238:	e0b0      	b.n	800939c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	76bb      	strb	r3, [r7, #26]
 800923e:	e0ad      	b.n	800939c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009248:	d15b      	bne.n	8009302 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800924a:	7efb      	ldrb	r3, [r7, #27]
 800924c:	2b08      	cmp	r3, #8
 800924e:	d828      	bhi.n	80092a2 <UART_SetConfig+0x3fe>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <UART_SetConfig+0x3b4>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	0800927d 	.word	0x0800927d
 800925c:	08009285 	.word	0x08009285
 8009260:	0800928d 	.word	0x0800928d
 8009264:	080092a3 	.word	0x080092a3
 8009268:	08009293 	.word	0x08009293
 800926c:	080092a3 	.word	0x080092a3
 8009270:	080092a3 	.word	0x080092a3
 8009274:	080092a3 	.word	0x080092a3
 8009278:	0800929b 	.word	0x0800929b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800927c:	f7fe ffe8 	bl	8008250 <HAL_RCC_GetPCLK1Freq>
 8009280:	6178      	str	r0, [r7, #20]
        break;
 8009282:	e013      	b.n	80092ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009284:	f7fe fffa 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 8009288:	6178      	str	r0, [r7, #20]
        break;
 800928a:	e00f      	b.n	80092ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800928c:	4b49      	ldr	r3, [pc, #292]	; (80093b4 <UART_SetConfig+0x510>)
 800928e:	617b      	str	r3, [r7, #20]
        break;
 8009290:	e00c      	b.n	80092ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009292:	f7fe ff45 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 8009296:	6178      	str	r0, [r7, #20]
        break;
 8009298:	e008      	b.n	80092ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800929e:	617b      	str	r3, [r7, #20]
        break;
 80092a0:	e004      	b.n	80092ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	76bb      	strb	r3, [r7, #26]
        break;
 80092aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d074      	beq.n	800939c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	005a      	lsls	r2, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	441a      	add	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	2b0f      	cmp	r3, #15
 80092cc:	d916      	bls.n	80092fc <UART_SetConfig+0x458>
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d4:	d212      	bcs.n	80092fc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	f023 030f 	bic.w	r3, r3, #15
 80092de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	085b      	lsrs	r3, r3, #1
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	89fb      	ldrh	r3, [r7, #14]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	89fa      	ldrh	r2, [r7, #14]
 80092f8:	60da      	str	r2, [r3, #12]
 80092fa:	e04f      	b.n	800939c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	76bb      	strb	r3, [r7, #26]
 8009300:	e04c      	b.n	800939c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009302:	7efb      	ldrb	r3, [r7, #27]
 8009304:	2b08      	cmp	r3, #8
 8009306:	d828      	bhi.n	800935a <UART_SetConfig+0x4b6>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <UART_SetConfig+0x46c>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009335 	.word	0x08009335
 8009314:	0800933d 	.word	0x0800933d
 8009318:	08009345 	.word	0x08009345
 800931c:	0800935b 	.word	0x0800935b
 8009320:	0800934b 	.word	0x0800934b
 8009324:	0800935b 	.word	0x0800935b
 8009328:	0800935b 	.word	0x0800935b
 800932c:	0800935b 	.word	0x0800935b
 8009330:	08009353 	.word	0x08009353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009334:	f7fe ff8c 	bl	8008250 <HAL_RCC_GetPCLK1Freq>
 8009338:	6178      	str	r0, [r7, #20]
        break;
 800933a:	e013      	b.n	8009364 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800933c:	f7fe ff9e 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 8009340:	6178      	str	r0, [r7, #20]
        break;
 8009342:	e00f      	b.n	8009364 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009344:	4b1b      	ldr	r3, [pc, #108]	; (80093b4 <UART_SetConfig+0x510>)
 8009346:	617b      	str	r3, [r7, #20]
        break;
 8009348:	e00c      	b.n	8009364 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800934a:	f7fe fee9 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 800934e:	6178      	str	r0, [r7, #20]
        break;
 8009350:	e008      	b.n	8009364 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009356:	617b      	str	r3, [r7, #20]
        break;
 8009358:	e004      	b.n	8009364 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	76bb      	strb	r3, [r7, #26]
        break;
 8009362:	bf00      	nop
    }

    if (pclk != 0U)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d018      	beq.n	800939c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	085a      	lsrs	r2, r3, #1
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	441a      	add	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	fbb2 f3f3 	udiv	r3, r2, r3
 800937c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b0f      	cmp	r3, #15
 8009382:	d909      	bls.n	8009398 <UART_SetConfig+0x4f4>
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938a:	d205      	bcs.n	8009398 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	b29a      	uxth	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	60da      	str	r2, [r3, #12]
 8009396:	e001      	b.n	800939c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80093a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bdb0      	pop	{r4, r5, r7, pc}
 80093b2:	bf00      	nop
 80093b4:	00f42400 	.word	0x00f42400

080093b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00a      	beq.n	8009426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	f003 0310 	and.w	r3, r3, #16
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01a      	beq.n	80094ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b6:	d10a      	bne.n	80094ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	430a      	orrs	r2, r1
 80094cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	605a      	str	r2, [r3, #4]
  }
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af02      	add	r7, sp, #8
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800950c:	f7fc feb8 	bl	8006280 <HAL_GetTick>
 8009510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b08      	cmp	r3, #8
 800951e:	d10e      	bne.n	800953e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f82d 	bl	800958e <UART_WaitOnFlagUntilTimeout>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e023      	b.n	8009586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b04      	cmp	r3, #4
 800954a:	d10e      	bne.n	800956a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800954c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f817 	bl	800958e <UART_WaitOnFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e00d      	b.n	8009586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2220      	movs	r2, #32
 800956e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b09c      	sub	sp, #112	; 0x70
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	4613      	mov	r3, r2
 800959c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959e:	e0a5      	b.n	80096ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a6:	f000 80a1 	beq.w	80096ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095aa:	f7fc fe69 	bl	8006280 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d302      	bcc.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80095ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d13e      	bne.n	800963e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095d4:	667b      	str	r3, [r7, #100]	; 0x64
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	663b      	str	r3, [r7, #96]	; 0x60
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009612:	64ba      	str	r2, [r7, #72]	; 0x48
 8009614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2220      	movs	r2, #32
 8009630:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e067      	b.n	800970e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d04f      	beq.n	80096ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800965a:	d147      	bne.n	80096ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009664:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800967a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	461a      	mov	r2, r3
 8009682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009684:	637b      	str	r3, [r7, #52]	; 0x34
 8009686:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800968a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e6      	bne.n	8009666 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3308      	adds	r3, #8
 800969e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	613b      	str	r3, [r7, #16]
   return(result);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f023 0301 	bic.w	r3, r3, #1
 80096ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3308      	adds	r3, #8
 80096b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096b8:	623a      	str	r2, [r7, #32]
 80096ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	69f9      	ldr	r1, [r7, #28]
 80096be:	6a3a      	ldr	r2, [r7, #32]
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2220      	movs	r2, #32
 80096d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2220      	movs	r2, #32
 80096d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2220      	movs	r2, #32
 80096dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e010      	b.n	800970e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69da      	ldr	r2, [r3, #28]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	4013      	ands	r3, r2
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	bf0c      	ite	eq
 80096fc:	2301      	moveq	r3, #1
 80096fe:	2300      	movne	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	461a      	mov	r2, r3
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	429a      	cmp	r2, r3
 8009708:	f43f af4a 	beq.w	80095a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3770      	adds	r7, #112	; 0x70
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <__errno>:
 8009718:	4b01      	ldr	r3, [pc, #4]	; (8009720 <__errno+0x8>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	20000164 	.word	0x20000164

08009724 <__libc_init_array>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4d0d      	ldr	r5, [pc, #52]	; (800975c <__libc_init_array+0x38>)
 8009728:	4c0d      	ldr	r4, [pc, #52]	; (8009760 <__libc_init_array+0x3c>)
 800972a:	1b64      	subs	r4, r4, r5
 800972c:	10a4      	asrs	r4, r4, #2
 800972e:	2600      	movs	r6, #0
 8009730:	42a6      	cmp	r6, r4
 8009732:	d109      	bne.n	8009748 <__libc_init_array+0x24>
 8009734:	4d0b      	ldr	r5, [pc, #44]	; (8009764 <__libc_init_array+0x40>)
 8009736:	4c0c      	ldr	r4, [pc, #48]	; (8009768 <__libc_init_array+0x44>)
 8009738:	f000 fc4e 	bl	8009fd8 <_init>
 800973c:	1b64      	subs	r4, r4, r5
 800973e:	10a4      	asrs	r4, r4, #2
 8009740:	2600      	movs	r6, #0
 8009742:	42a6      	cmp	r6, r4
 8009744:	d105      	bne.n	8009752 <__libc_init_array+0x2e>
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	f855 3b04 	ldr.w	r3, [r5], #4
 800974c:	4798      	blx	r3
 800974e:	3601      	adds	r6, #1
 8009750:	e7ee      	b.n	8009730 <__libc_init_array+0xc>
 8009752:	f855 3b04 	ldr.w	r3, [r5], #4
 8009756:	4798      	blx	r3
 8009758:	3601      	adds	r6, #1
 800975a:	e7f2      	b.n	8009742 <__libc_init_array+0x1e>
 800975c:	0800a100 	.word	0x0800a100
 8009760:	0800a100 	.word	0x0800a100
 8009764:	0800a100 	.word	0x0800a100
 8009768:	0800a104 	.word	0x0800a104

0800976c <memset>:
 800976c:	4402      	add	r2, r0
 800976e:	4603      	mov	r3, r0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <siprintf>:
 800977c:	b40e      	push	{r1, r2, r3}
 800977e:	b500      	push	{lr}
 8009780:	b09c      	sub	sp, #112	; 0x70
 8009782:	ab1d      	add	r3, sp, #116	; 0x74
 8009784:	9002      	str	r0, [sp, #8]
 8009786:	9006      	str	r0, [sp, #24]
 8009788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800978c:	4809      	ldr	r0, [pc, #36]	; (80097b4 <siprintf+0x38>)
 800978e:	9107      	str	r1, [sp, #28]
 8009790:	9104      	str	r1, [sp, #16]
 8009792:	4909      	ldr	r1, [pc, #36]	; (80097b8 <siprintf+0x3c>)
 8009794:	f853 2b04 	ldr.w	r2, [r3], #4
 8009798:	9105      	str	r1, [sp, #20]
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	a902      	add	r1, sp, #8
 80097a0:	f000 f868 	bl	8009874 <_svfiprintf_r>
 80097a4:	9b02      	ldr	r3, [sp, #8]
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	b01c      	add	sp, #112	; 0x70
 80097ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b0:	b003      	add	sp, #12
 80097b2:	4770      	bx	lr
 80097b4:	20000164 	.word	0x20000164
 80097b8:	ffff0208 	.word	0xffff0208

080097bc <__ssputs_r>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	688e      	ldr	r6, [r1, #8]
 80097c2:	429e      	cmp	r6, r3
 80097c4:	4682      	mov	sl, r0
 80097c6:	460c      	mov	r4, r1
 80097c8:	4690      	mov	r8, r2
 80097ca:	461f      	mov	r7, r3
 80097cc:	d838      	bhi.n	8009840 <__ssputs_r+0x84>
 80097ce:	898a      	ldrh	r2, [r1, #12]
 80097d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097d4:	d032      	beq.n	800983c <__ssputs_r+0x80>
 80097d6:	6825      	ldr	r5, [r4, #0]
 80097d8:	6909      	ldr	r1, [r1, #16]
 80097da:	eba5 0901 	sub.w	r9, r5, r1
 80097de:	6965      	ldr	r5, [r4, #20]
 80097e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097e8:	3301      	adds	r3, #1
 80097ea:	444b      	add	r3, r9
 80097ec:	106d      	asrs	r5, r5, #1
 80097ee:	429d      	cmp	r5, r3
 80097f0:	bf38      	it	cc
 80097f2:	461d      	movcc	r5, r3
 80097f4:	0553      	lsls	r3, r2, #21
 80097f6:	d531      	bpl.n	800985c <__ssputs_r+0xa0>
 80097f8:	4629      	mov	r1, r5
 80097fa:	f000 fb47 	bl	8009e8c <_malloc_r>
 80097fe:	4606      	mov	r6, r0
 8009800:	b950      	cbnz	r0, 8009818 <__ssputs_r+0x5c>
 8009802:	230c      	movs	r3, #12
 8009804:	f8ca 3000 	str.w	r3, [sl]
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009818:	6921      	ldr	r1, [r4, #16]
 800981a:	464a      	mov	r2, r9
 800981c:	f000 fabe 	bl	8009d9c <memcpy>
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982a:	81a3      	strh	r3, [r4, #12]
 800982c:	6126      	str	r6, [r4, #16]
 800982e:	6165      	str	r5, [r4, #20]
 8009830:	444e      	add	r6, r9
 8009832:	eba5 0509 	sub.w	r5, r5, r9
 8009836:	6026      	str	r6, [r4, #0]
 8009838:	60a5      	str	r5, [r4, #8]
 800983a:	463e      	mov	r6, r7
 800983c:	42be      	cmp	r6, r7
 800983e:	d900      	bls.n	8009842 <__ssputs_r+0x86>
 8009840:	463e      	mov	r6, r7
 8009842:	4632      	mov	r2, r6
 8009844:	6820      	ldr	r0, [r4, #0]
 8009846:	4641      	mov	r1, r8
 8009848:	f000 fab6 	bl	8009db8 <memmove>
 800984c:	68a3      	ldr	r3, [r4, #8]
 800984e:	6822      	ldr	r2, [r4, #0]
 8009850:	1b9b      	subs	r3, r3, r6
 8009852:	4432      	add	r2, r6
 8009854:	60a3      	str	r3, [r4, #8]
 8009856:	6022      	str	r2, [r4, #0]
 8009858:	2000      	movs	r0, #0
 800985a:	e7db      	b.n	8009814 <__ssputs_r+0x58>
 800985c:	462a      	mov	r2, r5
 800985e:	f000 fb6f 	bl	8009f40 <_realloc_r>
 8009862:	4606      	mov	r6, r0
 8009864:	2800      	cmp	r0, #0
 8009866:	d1e1      	bne.n	800982c <__ssputs_r+0x70>
 8009868:	6921      	ldr	r1, [r4, #16]
 800986a:	4650      	mov	r0, sl
 800986c:	f000 fabe 	bl	8009dec <_free_r>
 8009870:	e7c7      	b.n	8009802 <__ssputs_r+0x46>
	...

08009874 <_svfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	4698      	mov	r8, r3
 800987a:	898b      	ldrh	r3, [r1, #12]
 800987c:	061b      	lsls	r3, r3, #24
 800987e:	b09d      	sub	sp, #116	; 0x74
 8009880:	4607      	mov	r7, r0
 8009882:	460d      	mov	r5, r1
 8009884:	4614      	mov	r4, r2
 8009886:	d50e      	bpl.n	80098a6 <_svfiprintf_r+0x32>
 8009888:	690b      	ldr	r3, [r1, #16]
 800988a:	b963      	cbnz	r3, 80098a6 <_svfiprintf_r+0x32>
 800988c:	2140      	movs	r1, #64	; 0x40
 800988e:	f000 fafd 	bl	8009e8c <_malloc_r>
 8009892:	6028      	str	r0, [r5, #0]
 8009894:	6128      	str	r0, [r5, #16]
 8009896:	b920      	cbnz	r0, 80098a2 <_svfiprintf_r+0x2e>
 8009898:	230c      	movs	r3, #12
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	f04f 30ff 	mov.w	r0, #4294967295
 80098a0:	e0d1      	b.n	8009a46 <_svfiprintf_r+0x1d2>
 80098a2:	2340      	movs	r3, #64	; 0x40
 80098a4:	616b      	str	r3, [r5, #20]
 80098a6:	2300      	movs	r3, #0
 80098a8:	9309      	str	r3, [sp, #36]	; 0x24
 80098aa:	2320      	movs	r3, #32
 80098ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b4:	2330      	movs	r3, #48	; 0x30
 80098b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a60 <_svfiprintf_r+0x1ec>
 80098ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098be:	f04f 0901 	mov.w	r9, #1
 80098c2:	4623      	mov	r3, r4
 80098c4:	469a      	mov	sl, r3
 80098c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ca:	b10a      	cbz	r2, 80098d0 <_svfiprintf_r+0x5c>
 80098cc:	2a25      	cmp	r2, #37	; 0x25
 80098ce:	d1f9      	bne.n	80098c4 <_svfiprintf_r+0x50>
 80098d0:	ebba 0b04 	subs.w	fp, sl, r4
 80098d4:	d00b      	beq.n	80098ee <_svfiprintf_r+0x7a>
 80098d6:	465b      	mov	r3, fp
 80098d8:	4622      	mov	r2, r4
 80098da:	4629      	mov	r1, r5
 80098dc:	4638      	mov	r0, r7
 80098de:	f7ff ff6d 	bl	80097bc <__ssputs_r>
 80098e2:	3001      	adds	r0, #1
 80098e4:	f000 80aa 	beq.w	8009a3c <_svfiprintf_r+0x1c8>
 80098e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ea:	445a      	add	r2, fp
 80098ec:	9209      	str	r2, [sp, #36]	; 0x24
 80098ee:	f89a 3000 	ldrb.w	r3, [sl]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 80a2 	beq.w	8009a3c <_svfiprintf_r+0x1c8>
 80098f8:	2300      	movs	r3, #0
 80098fa:	f04f 32ff 	mov.w	r2, #4294967295
 80098fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009902:	f10a 0a01 	add.w	sl, sl, #1
 8009906:	9304      	str	r3, [sp, #16]
 8009908:	9307      	str	r3, [sp, #28]
 800990a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800990e:	931a      	str	r3, [sp, #104]	; 0x68
 8009910:	4654      	mov	r4, sl
 8009912:	2205      	movs	r2, #5
 8009914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009918:	4851      	ldr	r0, [pc, #324]	; (8009a60 <_svfiprintf_r+0x1ec>)
 800991a:	f7f6 fc61 	bl	80001e0 <memchr>
 800991e:	9a04      	ldr	r2, [sp, #16]
 8009920:	b9d8      	cbnz	r0, 800995a <_svfiprintf_r+0xe6>
 8009922:	06d0      	lsls	r0, r2, #27
 8009924:	bf44      	itt	mi
 8009926:	2320      	movmi	r3, #32
 8009928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800992c:	0711      	lsls	r1, r2, #28
 800992e:	bf44      	itt	mi
 8009930:	232b      	movmi	r3, #43	; 0x2b
 8009932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009936:	f89a 3000 	ldrb.w	r3, [sl]
 800993a:	2b2a      	cmp	r3, #42	; 0x2a
 800993c:	d015      	beq.n	800996a <_svfiprintf_r+0xf6>
 800993e:	9a07      	ldr	r2, [sp, #28]
 8009940:	4654      	mov	r4, sl
 8009942:	2000      	movs	r0, #0
 8009944:	f04f 0c0a 	mov.w	ip, #10
 8009948:	4621      	mov	r1, r4
 800994a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800994e:	3b30      	subs	r3, #48	; 0x30
 8009950:	2b09      	cmp	r3, #9
 8009952:	d94e      	bls.n	80099f2 <_svfiprintf_r+0x17e>
 8009954:	b1b0      	cbz	r0, 8009984 <_svfiprintf_r+0x110>
 8009956:	9207      	str	r2, [sp, #28]
 8009958:	e014      	b.n	8009984 <_svfiprintf_r+0x110>
 800995a:	eba0 0308 	sub.w	r3, r0, r8
 800995e:	fa09 f303 	lsl.w	r3, r9, r3
 8009962:	4313      	orrs	r3, r2
 8009964:	9304      	str	r3, [sp, #16]
 8009966:	46a2      	mov	sl, r4
 8009968:	e7d2      	b.n	8009910 <_svfiprintf_r+0x9c>
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	1d19      	adds	r1, r3, #4
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	9103      	str	r1, [sp, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	bfbb      	ittet	lt
 8009976:	425b      	neglt	r3, r3
 8009978:	f042 0202 	orrlt.w	r2, r2, #2
 800997c:	9307      	strge	r3, [sp, #28]
 800997e:	9307      	strlt	r3, [sp, #28]
 8009980:	bfb8      	it	lt
 8009982:	9204      	strlt	r2, [sp, #16]
 8009984:	7823      	ldrb	r3, [r4, #0]
 8009986:	2b2e      	cmp	r3, #46	; 0x2e
 8009988:	d10c      	bne.n	80099a4 <_svfiprintf_r+0x130>
 800998a:	7863      	ldrb	r3, [r4, #1]
 800998c:	2b2a      	cmp	r3, #42	; 0x2a
 800998e:	d135      	bne.n	80099fc <_svfiprintf_r+0x188>
 8009990:	9b03      	ldr	r3, [sp, #12]
 8009992:	1d1a      	adds	r2, r3, #4
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	9203      	str	r2, [sp, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	bfb8      	it	lt
 800999c:	f04f 33ff 	movlt.w	r3, #4294967295
 80099a0:	3402      	adds	r4, #2
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a70 <_svfiprintf_r+0x1fc>
 80099a8:	7821      	ldrb	r1, [r4, #0]
 80099aa:	2203      	movs	r2, #3
 80099ac:	4650      	mov	r0, sl
 80099ae:	f7f6 fc17 	bl	80001e0 <memchr>
 80099b2:	b140      	cbz	r0, 80099c6 <_svfiprintf_r+0x152>
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	eba0 000a 	sub.w	r0, r0, sl
 80099ba:	fa03 f000 	lsl.w	r0, r3, r0
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	4303      	orrs	r3, r0
 80099c2:	3401      	adds	r4, #1
 80099c4:	9304      	str	r3, [sp, #16]
 80099c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ca:	4826      	ldr	r0, [pc, #152]	; (8009a64 <_svfiprintf_r+0x1f0>)
 80099cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099d0:	2206      	movs	r2, #6
 80099d2:	f7f6 fc05 	bl	80001e0 <memchr>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d038      	beq.n	8009a4c <_svfiprintf_r+0x1d8>
 80099da:	4b23      	ldr	r3, [pc, #140]	; (8009a68 <_svfiprintf_r+0x1f4>)
 80099dc:	bb1b      	cbnz	r3, 8009a26 <_svfiprintf_r+0x1b2>
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	3307      	adds	r3, #7
 80099e2:	f023 0307 	bic.w	r3, r3, #7
 80099e6:	3308      	adds	r3, #8
 80099e8:	9303      	str	r3, [sp, #12]
 80099ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ec:	4433      	add	r3, r6
 80099ee:	9309      	str	r3, [sp, #36]	; 0x24
 80099f0:	e767      	b.n	80098c2 <_svfiprintf_r+0x4e>
 80099f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f6:	460c      	mov	r4, r1
 80099f8:	2001      	movs	r0, #1
 80099fa:	e7a5      	b.n	8009948 <_svfiprintf_r+0xd4>
 80099fc:	2300      	movs	r3, #0
 80099fe:	3401      	adds	r4, #1
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	4619      	mov	r1, r3
 8009a04:	f04f 0c0a 	mov.w	ip, #10
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0e:	3a30      	subs	r2, #48	; 0x30
 8009a10:	2a09      	cmp	r2, #9
 8009a12:	d903      	bls.n	8009a1c <_svfiprintf_r+0x1a8>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0c5      	beq.n	80099a4 <_svfiprintf_r+0x130>
 8009a18:	9105      	str	r1, [sp, #20]
 8009a1a:	e7c3      	b.n	80099a4 <_svfiprintf_r+0x130>
 8009a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a20:	4604      	mov	r4, r0
 8009a22:	2301      	movs	r3, #1
 8009a24:	e7f0      	b.n	8009a08 <_svfiprintf_r+0x194>
 8009a26:	ab03      	add	r3, sp, #12
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <_svfiprintf_r+0x1f8>)
 8009a2e:	a904      	add	r1, sp, #16
 8009a30:	4638      	mov	r0, r7
 8009a32:	f3af 8000 	nop.w
 8009a36:	1c42      	adds	r2, r0, #1
 8009a38:	4606      	mov	r6, r0
 8009a3a:	d1d6      	bne.n	80099ea <_svfiprintf_r+0x176>
 8009a3c:	89ab      	ldrh	r3, [r5, #12]
 8009a3e:	065b      	lsls	r3, r3, #25
 8009a40:	f53f af2c 	bmi.w	800989c <_svfiprintf_r+0x28>
 8009a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a46:	b01d      	add	sp, #116	; 0x74
 8009a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4c:	ab03      	add	r3, sp, #12
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	462a      	mov	r2, r5
 8009a52:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <_svfiprintf_r+0x1f8>)
 8009a54:	a904      	add	r1, sp, #16
 8009a56:	4638      	mov	r0, r7
 8009a58:	f000 f87a 	bl	8009b50 <_printf_i>
 8009a5c:	e7eb      	b.n	8009a36 <_svfiprintf_r+0x1c2>
 8009a5e:	bf00      	nop
 8009a60:	0800a0c4 	.word	0x0800a0c4
 8009a64:	0800a0ce 	.word	0x0800a0ce
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	080097bd 	.word	0x080097bd
 8009a70:	0800a0ca 	.word	0x0800a0ca

08009a74 <_printf_common>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	4616      	mov	r6, r2
 8009a7a:	4699      	mov	r9, r3
 8009a7c:	688a      	ldr	r2, [r1, #8]
 8009a7e:	690b      	ldr	r3, [r1, #16]
 8009a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	bfb8      	it	lt
 8009a88:	4613      	movlt	r3, r2
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a90:	4607      	mov	r7, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b10a      	cbz	r2, 8009a9a <_printf_common+0x26>
 8009a96:	3301      	adds	r3, #1
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	0699      	lsls	r1, r3, #26
 8009a9e:	bf42      	ittt	mi
 8009aa0:	6833      	ldrmi	r3, [r6, #0]
 8009aa2:	3302      	addmi	r3, #2
 8009aa4:	6033      	strmi	r3, [r6, #0]
 8009aa6:	6825      	ldr	r5, [r4, #0]
 8009aa8:	f015 0506 	ands.w	r5, r5, #6
 8009aac:	d106      	bne.n	8009abc <_printf_common+0x48>
 8009aae:	f104 0a19 	add.w	sl, r4, #25
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	6832      	ldr	r2, [r6, #0]
 8009ab6:	1a9b      	subs	r3, r3, r2
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	dc26      	bgt.n	8009b0a <_printf_common+0x96>
 8009abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ac0:	1e13      	subs	r3, r2, #0
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	bf18      	it	ne
 8009ac6:	2301      	movne	r3, #1
 8009ac8:	0692      	lsls	r2, r2, #26
 8009aca:	d42b      	bmi.n	8009b24 <_printf_common+0xb0>
 8009acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	47c0      	blx	r8
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d01e      	beq.n	8009b18 <_printf_common+0xa4>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	68e5      	ldr	r5, [r4, #12]
 8009ade:	6832      	ldr	r2, [r6, #0]
 8009ae0:	f003 0306 	and.w	r3, r3, #6
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	bf08      	it	eq
 8009ae8:	1aad      	subeq	r5, r5, r2
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	bf0c      	ite	eq
 8009af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af4:	2500      	movne	r5, #0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bfc4      	itt	gt
 8009afa:	1a9b      	subgt	r3, r3, r2
 8009afc:	18ed      	addgt	r5, r5, r3
 8009afe:	2600      	movs	r6, #0
 8009b00:	341a      	adds	r4, #26
 8009b02:	42b5      	cmp	r5, r6
 8009b04:	d11a      	bne.n	8009b3c <_printf_common+0xc8>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e008      	b.n	8009b1c <_printf_common+0xa8>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4638      	mov	r0, r7
 8009b12:	47c0      	blx	r8
 8009b14:	3001      	adds	r0, #1
 8009b16:	d103      	bne.n	8009b20 <_printf_common+0xac>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	3501      	adds	r5, #1
 8009b22:	e7c6      	b.n	8009ab2 <_printf_common+0x3e>
 8009b24:	18e1      	adds	r1, r4, r3
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	2030      	movs	r0, #48	; 0x30
 8009b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2e:	4422      	add	r2, r4
 8009b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b38:	3302      	adds	r3, #2
 8009b3a:	e7c7      	b.n	8009acc <_printf_common+0x58>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4649      	mov	r1, r9
 8009b42:	4638      	mov	r0, r7
 8009b44:	47c0      	blx	r8
 8009b46:	3001      	adds	r0, #1
 8009b48:	d0e6      	beq.n	8009b18 <_printf_common+0xa4>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7d9      	b.n	8009b02 <_printf_common+0x8e>
	...

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	4691      	mov	r9, r2
 8009b58:	7e27      	ldrb	r7, [r4, #24]
 8009b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b5c:	2f78      	cmp	r7, #120	; 0x78
 8009b5e:	4680      	mov	r8, r0
 8009b60:	469a      	mov	sl, r3
 8009b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	; 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d8 	beq.w	8009d22 <_printf_i+0x1d2>
 8009b72:	2f58      	cmp	r7, #88	; 0x58
 8009b74:	f000 80a3 	beq.w	8009cbe <_printf_i+0x16e>
 8009b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a001      	add	r0, pc, #4	; (adr r0, 8009b90 <_printf_i+0x40>)
 8009b8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009d09 	.word	0x08009d09
 8009bc0:	08009c2d 	.word	0x08009c2d
 8009bc4:	08009ceb 	.word	0x08009ceb
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d2b 	.word	0x08009d2b
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cf3 	.word	0x08009cf3
 8009be8:	680b      	ldr	r3, [r1, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	600a      	str	r2, [r1, #0]
 8009bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0a3      	b.n	8009d44 <_printf_i+0x1f4>
 8009bfc:	6825      	ldr	r5, [r4, #0]
 8009bfe:	6808      	ldr	r0, [r1, #0]
 8009c00:	062e      	lsls	r6, r5, #24
 8009c02:	f100 0304 	add.w	r3, r0, #4
 8009c06:	d50a      	bpl.n	8009c1e <_printf_i+0xce>
 8009c08:	6805      	ldr	r5, [r0, #0]
 8009c0a:	600b      	str	r3, [r1, #0]
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	da03      	bge.n	8009c18 <_printf_i+0xc8>
 8009c10:	232d      	movs	r3, #45	; 0x2d
 8009c12:	426d      	negs	r5, r5
 8009c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c18:	485e      	ldr	r0, [pc, #376]	; (8009d94 <_printf_i+0x244>)
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	e019      	b.n	8009c52 <_printf_i+0x102>
 8009c1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c22:	6805      	ldr	r5, [r0, #0]
 8009c24:	600b      	str	r3, [r1, #0]
 8009c26:	bf18      	it	ne
 8009c28:	b22d      	sxthne	r5, r5
 8009c2a:	e7ef      	b.n	8009c0c <_printf_i+0xbc>
 8009c2c:	680b      	ldr	r3, [r1, #0]
 8009c2e:	6825      	ldr	r5, [r4, #0]
 8009c30:	1d18      	adds	r0, r3, #4
 8009c32:	6008      	str	r0, [r1, #0]
 8009c34:	0628      	lsls	r0, r5, #24
 8009c36:	d501      	bpl.n	8009c3c <_printf_i+0xec>
 8009c38:	681d      	ldr	r5, [r3, #0]
 8009c3a:	e002      	b.n	8009c42 <_printf_i+0xf2>
 8009c3c:	0669      	lsls	r1, r5, #25
 8009c3e:	d5fb      	bpl.n	8009c38 <_printf_i+0xe8>
 8009c40:	881d      	ldrh	r5, [r3, #0]
 8009c42:	4854      	ldr	r0, [pc, #336]	; (8009d94 <_printf_i+0x244>)
 8009c44:	2f6f      	cmp	r7, #111	; 0x6f
 8009c46:	bf0c      	ite	eq
 8009c48:	2308      	moveq	r3, #8
 8009c4a:	230a      	movne	r3, #10
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c52:	6866      	ldr	r6, [r4, #4]
 8009c54:	60a6      	str	r6, [r4, #8]
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	bfa2      	ittt	ge
 8009c5a:	6821      	ldrge	r1, [r4, #0]
 8009c5c:	f021 0104 	bicge.w	r1, r1, #4
 8009c60:	6021      	strge	r1, [r4, #0]
 8009c62:	b90d      	cbnz	r5, 8009c68 <_printf_i+0x118>
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	d04d      	beq.n	8009d04 <_printf_i+0x1b4>
 8009c68:	4616      	mov	r6, r2
 8009c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c72:	5dc7      	ldrb	r7, [r0, r7]
 8009c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c78:	462f      	mov	r7, r5
 8009c7a:	42bb      	cmp	r3, r7
 8009c7c:	460d      	mov	r5, r1
 8009c7e:	d9f4      	bls.n	8009c6a <_printf_i+0x11a>
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d10b      	bne.n	8009c9c <_printf_i+0x14c>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	07df      	lsls	r7, r3, #31
 8009c88:	d508      	bpl.n	8009c9c <_printf_i+0x14c>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6861      	ldr	r1, [r4, #4]
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	bfde      	ittt	le
 8009c92:	2330      	movle	r3, #48	; 0x30
 8009c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c9c:	1b92      	subs	r2, r2, r6
 8009c9e:	6122      	str	r2, [r4, #16]
 8009ca0:	f8cd a000 	str.w	sl, [sp]
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	aa03      	add	r2, sp, #12
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4640      	mov	r0, r8
 8009cac:	f7ff fee2 	bl	8009a74 <_printf_common>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d14c      	bne.n	8009d4e <_printf_i+0x1fe>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	b004      	add	sp, #16
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	4835      	ldr	r0, [pc, #212]	; (8009d94 <_printf_i+0x244>)
 8009cc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	680e      	ldr	r6, [r1, #0]
 8009cc8:	061f      	lsls	r7, r3, #24
 8009cca:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cce:	600e      	str	r6, [r1, #0]
 8009cd0:	d514      	bpl.n	8009cfc <_printf_i+0x1ac>
 8009cd2:	07d9      	lsls	r1, r3, #31
 8009cd4:	bf44      	itt	mi
 8009cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cda:	6023      	strmi	r3, [r4, #0]
 8009cdc:	b91d      	cbnz	r5, 8009ce6 <_printf_i+0x196>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	f023 0320 	bic.w	r3, r3, #32
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	e7b0      	b.n	8009c4c <_printf_i+0xfc>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	f043 0320 	orr.w	r3, r3, #32
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	2378      	movs	r3, #120	; 0x78
 8009cf4:	4828      	ldr	r0, [pc, #160]	; (8009d98 <_printf_i+0x248>)
 8009cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cfa:	e7e3      	b.n	8009cc4 <_printf_i+0x174>
 8009cfc:	065e      	lsls	r6, r3, #25
 8009cfe:	bf48      	it	mi
 8009d00:	b2ad      	uxthmi	r5, r5
 8009d02:	e7e6      	b.n	8009cd2 <_printf_i+0x182>
 8009d04:	4616      	mov	r6, r2
 8009d06:	e7bb      	b.n	8009c80 <_printf_i+0x130>
 8009d08:	680b      	ldr	r3, [r1, #0]
 8009d0a:	6826      	ldr	r6, [r4, #0]
 8009d0c:	6960      	ldr	r0, [r4, #20]
 8009d0e:	1d1d      	adds	r5, r3, #4
 8009d10:	600d      	str	r5, [r1, #0]
 8009d12:	0635      	lsls	r5, r6, #24
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0x1cc>
 8009d18:	6018      	str	r0, [r3, #0]
 8009d1a:	e002      	b.n	8009d22 <_printf_i+0x1d2>
 8009d1c:	0671      	lsls	r1, r6, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0x1c8>
 8009d20:	8018      	strh	r0, [r3, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	4616      	mov	r6, r2
 8009d28:	e7ba      	b.n	8009ca0 <_printf_i+0x150>
 8009d2a:	680b      	ldr	r3, [r1, #0]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	600a      	str	r2, [r1, #0]
 8009d30:	681e      	ldr	r6, [r3, #0]
 8009d32:	6862      	ldr	r2, [r4, #4]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4630      	mov	r0, r6
 8009d38:	f7f6 fa52 	bl	80001e0 <memchr>
 8009d3c:	b108      	cbz	r0, 8009d42 <_printf_i+0x1f2>
 8009d3e:	1b80      	subs	r0, r0, r6
 8009d40:	6060      	str	r0, [r4, #4]
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	2300      	movs	r3, #0
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	e7a8      	b.n	8009ca0 <_printf_i+0x150>
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	4632      	mov	r2, r6
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	47d0      	blx	sl
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d0ab      	beq.n	8009cb4 <_printf_i+0x164>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	079b      	lsls	r3, r3, #30
 8009d60:	d413      	bmi.n	8009d8a <_printf_i+0x23a>
 8009d62:	68e0      	ldr	r0, [r4, #12]
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	4298      	cmp	r0, r3
 8009d68:	bfb8      	it	lt
 8009d6a:	4618      	movlt	r0, r3
 8009d6c:	e7a4      	b.n	8009cb8 <_printf_i+0x168>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4632      	mov	r2, r6
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d09b      	beq.n	8009cb4 <_printf_i+0x164>
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	9903      	ldr	r1, [sp, #12]
 8009d82:	1a5b      	subs	r3, r3, r1
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dcf2      	bgt.n	8009d6e <_printf_i+0x21e>
 8009d88:	e7eb      	b.n	8009d62 <_printf_i+0x212>
 8009d8a:	2500      	movs	r5, #0
 8009d8c:	f104 0619 	add.w	r6, r4, #25
 8009d90:	e7f5      	b.n	8009d7e <_printf_i+0x22e>
 8009d92:	bf00      	nop
 8009d94:	0800a0d5 	.word	0x0800a0d5
 8009d98:	0800a0e6 	.word	0x0800a0e6

08009d9c <memcpy>:
 8009d9c:	440a      	add	r2, r1
 8009d9e:	4291      	cmp	r1, r2
 8009da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009da4:	d100      	bne.n	8009da8 <memcpy+0xc>
 8009da6:	4770      	bx	lr
 8009da8:	b510      	push	{r4, lr}
 8009daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009db2:	4291      	cmp	r1, r2
 8009db4:	d1f9      	bne.n	8009daa <memcpy+0xe>
 8009db6:	bd10      	pop	{r4, pc}

08009db8 <memmove>:
 8009db8:	4288      	cmp	r0, r1
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	eb01 0402 	add.w	r4, r1, r2
 8009dc0:	d902      	bls.n	8009dc8 <memmove+0x10>
 8009dc2:	4284      	cmp	r4, r0
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	d807      	bhi.n	8009dd8 <memmove+0x20>
 8009dc8:	1e43      	subs	r3, r0, #1
 8009dca:	42a1      	cmp	r1, r4
 8009dcc:	d008      	beq.n	8009de0 <memmove+0x28>
 8009dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dd6:	e7f8      	b.n	8009dca <memmove+0x12>
 8009dd8:	4402      	add	r2, r0
 8009dda:	4601      	mov	r1, r0
 8009ddc:	428a      	cmp	r2, r1
 8009dde:	d100      	bne.n	8009de2 <memmove+0x2a>
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dea:	e7f7      	b.n	8009ddc <memmove+0x24>

08009dec <_free_r>:
 8009dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dee:	2900      	cmp	r1, #0
 8009df0:	d048      	beq.n	8009e84 <_free_r+0x98>
 8009df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df6:	9001      	str	r0, [sp, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8009dfe:	bfb8      	it	lt
 8009e00:	18e4      	addlt	r4, r4, r3
 8009e02:	f000 f8d3 	bl	8009fac <__malloc_lock>
 8009e06:	4a20      	ldr	r2, [pc, #128]	; (8009e88 <_free_r+0x9c>)
 8009e08:	9801      	ldr	r0, [sp, #4]
 8009e0a:	6813      	ldr	r3, [r2, #0]
 8009e0c:	4615      	mov	r5, r2
 8009e0e:	b933      	cbnz	r3, 8009e1e <_free_r+0x32>
 8009e10:	6063      	str	r3, [r4, #4]
 8009e12:	6014      	str	r4, [r2, #0]
 8009e14:	b003      	add	sp, #12
 8009e16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e1a:	f000 b8cd 	b.w	8009fb8 <__malloc_unlock>
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	d90b      	bls.n	8009e3a <_free_r+0x4e>
 8009e22:	6821      	ldr	r1, [r4, #0]
 8009e24:	1862      	adds	r2, r4, r1
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bf04      	itt	eq
 8009e2a:	681a      	ldreq	r2, [r3, #0]
 8009e2c:	685b      	ldreq	r3, [r3, #4]
 8009e2e:	6063      	str	r3, [r4, #4]
 8009e30:	bf04      	itt	eq
 8009e32:	1852      	addeq	r2, r2, r1
 8009e34:	6022      	streq	r2, [r4, #0]
 8009e36:	602c      	str	r4, [r5, #0]
 8009e38:	e7ec      	b.n	8009e14 <_free_r+0x28>
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	b10b      	cbz	r3, 8009e44 <_free_r+0x58>
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	d9fa      	bls.n	8009e3a <_free_r+0x4e>
 8009e44:	6811      	ldr	r1, [r2, #0]
 8009e46:	1855      	adds	r5, r2, r1
 8009e48:	42a5      	cmp	r5, r4
 8009e4a:	d10b      	bne.n	8009e64 <_free_r+0x78>
 8009e4c:	6824      	ldr	r4, [r4, #0]
 8009e4e:	4421      	add	r1, r4
 8009e50:	1854      	adds	r4, r2, r1
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	6011      	str	r1, [r2, #0]
 8009e56:	d1dd      	bne.n	8009e14 <_free_r+0x28>
 8009e58:	681c      	ldr	r4, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	6053      	str	r3, [r2, #4]
 8009e5e:	4421      	add	r1, r4
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	e7d7      	b.n	8009e14 <_free_r+0x28>
 8009e64:	d902      	bls.n	8009e6c <_free_r+0x80>
 8009e66:	230c      	movs	r3, #12
 8009e68:	6003      	str	r3, [r0, #0]
 8009e6a:	e7d3      	b.n	8009e14 <_free_r+0x28>
 8009e6c:	6825      	ldr	r5, [r4, #0]
 8009e6e:	1961      	adds	r1, r4, r5
 8009e70:	428b      	cmp	r3, r1
 8009e72:	bf04      	itt	eq
 8009e74:	6819      	ldreq	r1, [r3, #0]
 8009e76:	685b      	ldreq	r3, [r3, #4]
 8009e78:	6063      	str	r3, [r4, #4]
 8009e7a:	bf04      	itt	eq
 8009e7c:	1949      	addeq	r1, r1, r5
 8009e7e:	6021      	streq	r1, [r4, #0]
 8009e80:	6054      	str	r4, [r2, #4]
 8009e82:	e7c7      	b.n	8009e14 <_free_r+0x28>
 8009e84:	b003      	add	sp, #12
 8009e86:	bd30      	pop	{r4, r5, pc}
 8009e88:	20000330 	.word	0x20000330

08009e8c <_malloc_r>:
 8009e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8e:	1ccd      	adds	r5, r1, #3
 8009e90:	f025 0503 	bic.w	r5, r5, #3
 8009e94:	3508      	adds	r5, #8
 8009e96:	2d0c      	cmp	r5, #12
 8009e98:	bf38      	it	cc
 8009e9a:	250c      	movcc	r5, #12
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	db01      	blt.n	8009ea6 <_malloc_r+0x1a>
 8009ea2:	42a9      	cmp	r1, r5
 8009ea4:	d903      	bls.n	8009eae <_malloc_r+0x22>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	2000      	movs	r0, #0
 8009eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eae:	f000 f87d 	bl	8009fac <__malloc_lock>
 8009eb2:	4921      	ldr	r1, [pc, #132]	; (8009f38 <_malloc_r+0xac>)
 8009eb4:	680a      	ldr	r2, [r1, #0]
 8009eb6:	4614      	mov	r4, r2
 8009eb8:	b99c      	cbnz	r4, 8009ee2 <_malloc_r+0x56>
 8009eba:	4f20      	ldr	r7, [pc, #128]	; (8009f3c <_malloc_r+0xb0>)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	b923      	cbnz	r3, 8009eca <_malloc_r+0x3e>
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f000 f862 	bl	8009f8c <_sbrk_r>
 8009ec8:	6038      	str	r0, [r7, #0]
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f000 f85d 	bl	8009f8c <_sbrk_r>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	d123      	bne.n	8009f1e <_malloc_r+0x92>
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	6033      	str	r3, [r6, #0]
 8009eda:	4630      	mov	r0, r6
 8009edc:	f000 f86c 	bl	8009fb8 <__malloc_unlock>
 8009ee0:	e7e3      	b.n	8009eaa <_malloc_r+0x1e>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	1b5b      	subs	r3, r3, r5
 8009ee6:	d417      	bmi.n	8009f18 <_malloc_r+0x8c>
 8009ee8:	2b0b      	cmp	r3, #11
 8009eea:	d903      	bls.n	8009ef4 <_malloc_r+0x68>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	441c      	add	r4, r3
 8009ef0:	6025      	str	r5, [r4, #0]
 8009ef2:	e004      	b.n	8009efe <_malloc_r+0x72>
 8009ef4:	6863      	ldr	r3, [r4, #4]
 8009ef6:	42a2      	cmp	r2, r4
 8009ef8:	bf0c      	ite	eq
 8009efa:	600b      	streq	r3, [r1, #0]
 8009efc:	6053      	strne	r3, [r2, #4]
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 f85a 	bl	8009fb8 <__malloc_unlock>
 8009f04:	f104 000b 	add.w	r0, r4, #11
 8009f08:	1d23      	adds	r3, r4, #4
 8009f0a:	f020 0007 	bic.w	r0, r0, #7
 8009f0e:	1ac2      	subs	r2, r0, r3
 8009f10:	d0cc      	beq.n	8009eac <_malloc_r+0x20>
 8009f12:	1a1b      	subs	r3, r3, r0
 8009f14:	50a3      	str	r3, [r4, r2]
 8009f16:	e7c9      	b.n	8009eac <_malloc_r+0x20>
 8009f18:	4622      	mov	r2, r4
 8009f1a:	6864      	ldr	r4, [r4, #4]
 8009f1c:	e7cc      	b.n	8009eb8 <_malloc_r+0x2c>
 8009f1e:	1cc4      	adds	r4, r0, #3
 8009f20:	f024 0403 	bic.w	r4, r4, #3
 8009f24:	42a0      	cmp	r0, r4
 8009f26:	d0e3      	beq.n	8009ef0 <_malloc_r+0x64>
 8009f28:	1a21      	subs	r1, r4, r0
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 f82e 	bl	8009f8c <_sbrk_r>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d1dd      	bne.n	8009ef0 <_malloc_r+0x64>
 8009f34:	e7cf      	b.n	8009ed6 <_malloc_r+0x4a>
 8009f36:	bf00      	nop
 8009f38:	20000330 	.word	0x20000330
 8009f3c:	20000334 	.word	0x20000334

08009f40 <_realloc_r>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	4607      	mov	r7, r0
 8009f44:	4614      	mov	r4, r2
 8009f46:	460e      	mov	r6, r1
 8009f48:	b921      	cbnz	r1, 8009f54 <_realloc_r+0x14>
 8009f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f4e:	4611      	mov	r1, r2
 8009f50:	f7ff bf9c 	b.w	8009e8c <_malloc_r>
 8009f54:	b922      	cbnz	r2, 8009f60 <_realloc_r+0x20>
 8009f56:	f7ff ff49 	bl	8009dec <_free_r>
 8009f5a:	4625      	mov	r5, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f60:	f000 f830 	bl	8009fc4 <_malloc_usable_size_r>
 8009f64:	42a0      	cmp	r0, r4
 8009f66:	d20f      	bcs.n	8009f88 <_realloc_r+0x48>
 8009f68:	4621      	mov	r1, r4
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	f7ff ff8e 	bl	8009e8c <_malloc_r>
 8009f70:	4605      	mov	r5, r0
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d0f2      	beq.n	8009f5c <_realloc_r+0x1c>
 8009f76:	4631      	mov	r1, r6
 8009f78:	4622      	mov	r2, r4
 8009f7a:	f7ff ff0f 	bl	8009d9c <memcpy>
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4638      	mov	r0, r7
 8009f82:	f7ff ff33 	bl	8009dec <_free_r>
 8009f86:	e7e9      	b.n	8009f5c <_realloc_r+0x1c>
 8009f88:	4635      	mov	r5, r6
 8009f8a:	e7e7      	b.n	8009f5c <_realloc_r+0x1c>

08009f8c <_sbrk_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d06      	ldr	r5, [pc, #24]	; (8009fa8 <_sbrk_r+0x1c>)
 8009f90:	2300      	movs	r3, #0
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	f7f6 ff8e 	bl	8000eb8 <_sbrk>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_sbrk_r+0x1a>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_sbrk_r+0x1a>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	200004cc 	.word	0x200004cc

08009fac <__malloc_lock>:
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__malloc_lock+0x8>)
 8009fae:	f000 b811 	b.w	8009fd4 <__retarget_lock_acquire_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	200004d4 	.word	0x200004d4

08009fb8 <__malloc_unlock>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__malloc_unlock+0x8>)
 8009fba:	f000 b80c 	b.w	8009fd6 <__retarget_lock_release_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	200004d4 	.word	0x200004d4

08009fc4 <_malloc_usable_size_r>:
 8009fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc8:	1f18      	subs	r0, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bfbc      	itt	lt
 8009fce:	580b      	ldrlt	r3, [r1, r0]
 8009fd0:	18c0      	addlt	r0, r0, r3
 8009fd2:	4770      	bx	lr

08009fd4 <__retarget_lock_acquire_recursive>:
 8009fd4:	4770      	bx	lr

08009fd6 <__retarget_lock_release_recursive>:
 8009fd6:	4770      	bx	lr

08009fd8 <_init>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr

08009fe4 <_fini>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	bf00      	nop
 8009fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fea:	bc08      	pop	{r3}
 8009fec:	469e      	mov	lr, r3
 8009fee:	4770      	bx	lr
