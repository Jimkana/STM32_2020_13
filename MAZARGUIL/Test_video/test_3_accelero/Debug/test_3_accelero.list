
test_3_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800a0e8  0800a0e8  0001a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a294  0800a294  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a294  0800a294  0001a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a29c  0800a29c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800a2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001c8  0800a46c  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800a46c  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033afe  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dca  00000000  00000000  00053cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00057ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002318  00000000  00000000  00059f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a7b  00000000  00000000  0005c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c241  00000000  00000000  00084cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b13  00000000  00000000  000a0f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199a27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a098  00000000  00000000  00199a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0d0 	.word	0x0800a0d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	0800a0d0 	.word	0x0800a0d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fe93 	bl	80062a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f99d 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fa4d 	bl	8000a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 fa1b 	bl	80009c4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800058e:	f000 f9e9 	bl	8000964 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_GYRO)==HAL_OK){
 8000592:	2101      	movs	r1, #1
 8000594:	2000      	movs	r0, #0
 8000596:	f005 fb01 	bl	8005b9c <IKS01A2_MOTION_SENSOR_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <main+0x30>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_GYRO);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2000      	movs	r0, #0
 80005a4:	f005 fbf6 	bl	8005d94 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO)==HAL_OK){
 80005a8:	2102      	movs	r1, #2
 80005aa:	2001      	movs	r0, #1
 80005ac:	f005 faf6 	bl	8005b9c <IKS01A2_MOTION_SENSOR_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <main+0x46>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80005b6:	2102      	movs	r1, #2
 80005b8:	2001      	movs	r0, #1
 80005ba:	f005 fbeb 	bl	8005d94 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_TEMPERATURE)==HAL_OK){
 80005be:	2101      	movs	r1, #1
 80005c0:	2000      	movs	r0, #0
 80005c2:	f005 f82f 	bl	8005624 <IKS01A2_ENV_SENSOR_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d103      	bne.n	80005d4 <main+0x5c>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_TEMPERATURE);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f005 f8e8 	bl	80057a4 <IKS01A2_ENV_SENSOR_Enable>
  }
  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_HUMIDITY)==HAL_OK){
 80005d4:	2104      	movs	r1, #4
 80005d6:	2000      	movs	r0, #0
 80005d8:	f005 f824 	bl	8005624 <IKS01A2_ENV_SENSOR_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d103      	bne.n	80005ea <main+0x72>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_HUMIDITY);
 80005e2:	2104      	movs	r1, #4
 80005e4:	2000      	movs	r0, #0
 80005e6:	f005 f8dd 	bl	80057a4 <IKS01A2_ENV_SENSOR_Enable>


  while (1)
  {

	  	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 80005ea:	4aa2      	ldr	r2, [pc, #648]	; (8000874 <main+0x2fc>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	2000      	movs	r0, #0
 80005f0:	f005 f91a 	bl	8005828 <IKS01A2_ENV_SENSOR_GetValue>
	  	  sprintf((char*)buf,"Température : %u\r\n",(unsigned int)data);
 80005f4:	4b9f      	ldr	r3, [pc, #636]	; (8000874 <main+0x2fc>)
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fe:	463b      	mov	r3, r7
 8000600:	ee17 2a90 	vmov	r2, s15
 8000604:	499c      	ldr	r1, [pc, #624]	; (8000878 <main+0x300>)
 8000606:	4618      	mov	r0, r3
 8000608:	f009 f934 	bl	8009874 <siprintf>
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fdde 	bl	80001d0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	4639      	mov	r1, r7
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	4897      	ldr	r0, [pc, #604]	; (800087c <main+0x304>)
 8000620:	f008 fc28 	bl	8008e74 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f005 feb3 	bl	8006390 <HAL_Delay>


	  	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_HUMIDITY, &data_humidity);
 800062a:	4a95      	ldr	r2, [pc, #596]	; (8000880 <main+0x308>)
 800062c:	2104      	movs	r1, #4
 800062e:	2000      	movs	r0, #0
 8000630:	f005 f8fa 	bl	8005828 <IKS01A2_ENV_SENSOR_GetValue>
	  	  sprintf((char*)buf,"Humidité : %u\r\n",(unsigned int)data_humidity);
 8000634:	4b92      	ldr	r3, [pc, #584]	; (8000880 <main+0x308>)
 8000636:	edd3 7a00 	vldr	s15, [r3]
 800063a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063e:	463b      	mov	r3, r7
 8000640:	ee17 2a90 	vmov	r2, s15
 8000644:	498f      	ldr	r1, [pc, #572]	; (8000884 <main+0x30c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f009 f914 	bl	8009874 <siprintf>
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbe 	bl	80001d0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	4639      	mov	r1, r7
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	4887      	ldr	r0, [pc, #540]	; (800087c <main+0x304>)
 8000660:	f008 fc08 	bl	8008e74 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	; 0x64
 8000666:	f005 fe93 	bl	8006390 <HAL_Delay>


	  	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO, &data_axe_acc);
 800066a:	4a87      	ldr	r2, [pc, #540]	; (8000888 <main+0x310>)
 800066c:	2102      	movs	r1, #2
 800066e:	2001      	movs	r0, #1
 8000670:	f005 fbd2 	bl	8005e18 <IKS01A2_MOTION_SENSOR_GetAxes>
	  	  if(data_axe_acc.x>0x80000000)
 8000674:	4b84      	ldr	r3, [pc, #528]	; (8000888 <main+0x310>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800067c:	d90e      	bls.n	800069c <main+0x124>
	  	  {
	  		  data_axe_acc.x=0xffffffff-data_axe_acc.x+1;
 800067e:	4b82      	ldr	r3, [pc, #520]	; (8000888 <main+0x310>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	425b      	negs	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	4b80      	ldr	r3, [pc, #512]	; (8000888 <main+0x310>)
 8000688:	601a      	str	r2, [r3, #0]
	  		  sprintf((char*)buf,"Accelero : \t x : -%u\r\n ",(unsigned int)data_axe_acc.x);
 800068a:	4b7f      	ldr	r3, [pc, #508]	; (8000888 <main+0x310>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	463b      	mov	r3, r7
 8000692:	497e      	ldr	r1, [pc, #504]	; (800088c <main+0x314>)
 8000694:	4618      	mov	r0, r3
 8000696:	f009 f8ed 	bl	8009874 <siprintf>
 800069a:	e007      	b.n	80006ac <main+0x134>
	  	  }else
	  	  {
	  	  sprintf((char*)buf,"Accelero : \t x : %u\r\n ",(unsigned int)data_axe_acc.x);
 800069c:	4b7a      	ldr	r3, [pc, #488]	; (8000888 <main+0x310>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	463b      	mov	r3, r7
 80006a4:	497a      	ldr	r1, [pc, #488]	; (8000890 <main+0x318>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f009 f8e4 	bl	8009874 <siprintf>
	  	  }
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80006ac:	463b      	mov	r3, r7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd8e 	bl	80001d0 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4639      	mov	r1, r7
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	486f      	ldr	r0, [pc, #444]	; (800087c <main+0x304>)
 80006c0:	f008 fbd8 	bl	8008e74 <HAL_UART_Transmit>
	  	  if(data_axe_acc.y>0x80000000)
 80006c4:	4b70      	ldr	r3, [pc, #448]	; (8000888 <main+0x310>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80006cc:	d90e      	bls.n	80006ec <main+0x174>
	  	  	  {
	  	  		  data_axe_acc.y=0xffffffff-data_axe_acc.y+1;
 80006ce:	4b6e      	ldr	r3, [pc, #440]	; (8000888 <main+0x310>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	425b      	negs	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b6c      	ldr	r3, [pc, #432]	; (8000888 <main+0x310>)
 80006d8:	605a      	str	r2, [r3, #4]
	  	  		  sprintf((char*)buf,"Accelero : \t y : -%u\r\n ",(unsigned int)data_axe_acc.y);
 80006da:	4b6b      	ldr	r3, [pc, #428]	; (8000888 <main+0x310>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	461a      	mov	r2, r3
 80006e0:	463b      	mov	r3, r7
 80006e2:	496c      	ldr	r1, [pc, #432]	; (8000894 <main+0x31c>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f009 f8c5 	bl	8009874 <siprintf>
 80006ea:	e007      	b.n	80006fc <main+0x184>
	  	  	  }else
	  	  	  {
	  	  	  sprintf((char*)buf,"Accelero : \t y : %u\r\n ",(unsigned int)data_axe_acc.y);
 80006ec:	4b66      	ldr	r3, [pc, #408]	; (8000888 <main+0x310>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	461a      	mov	r2, r3
 80006f2:	463b      	mov	r3, r7
 80006f4:	4968      	ldr	r1, [pc, #416]	; (8000898 <main+0x320>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f009 f8bc 	bl	8009874 <siprintf>
	  	  	  }
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80006fc:	463b      	mov	r3, r7
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd66 	bl	80001d0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	4639      	mov	r1, r7
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	485b      	ldr	r0, [pc, #364]	; (800087c <main+0x304>)
 8000710:	f008 fbb0 	bl	8008e74 <HAL_UART_Transmit>
	  	  if(data_axe_acc.z>0x80000000)
 8000714:	4b5c      	ldr	r3, [pc, #368]	; (8000888 <main+0x310>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800071c:	d90e      	bls.n	800073c <main+0x1c4>
	  	  	  {
	  	  		  data_axe_acc.z=0xffffffff-data_axe_acc.z+1;
 800071e:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <main+0x310>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	425b      	negs	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	4b58      	ldr	r3, [pc, #352]	; (8000888 <main+0x310>)
 8000728:	609a      	str	r2, [r3, #8]
	  	  		  sprintf((char*)buf,"Accelero : \t z : -%u\r\n ",(unsigned int)data_axe_acc.z);
 800072a:	4b57      	ldr	r3, [pc, #348]	; (8000888 <main+0x310>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	461a      	mov	r2, r3
 8000730:	463b      	mov	r3, r7
 8000732:	495a      	ldr	r1, [pc, #360]	; (800089c <main+0x324>)
 8000734:	4618      	mov	r0, r3
 8000736:	f009 f89d 	bl	8009874 <siprintf>
 800073a:	e007      	b.n	800074c <main+0x1d4>
	  	  	  }else
	  	  	  {
	  	  	  sprintf((char*)buf,"Accelero : \t z : %u\r\n ",(unsigned int)data_axe_acc.z);
 800073c:	4b52      	ldr	r3, [pc, #328]	; (8000888 <main+0x310>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	461a      	mov	r2, r3
 8000742:	463b      	mov	r3, r7
 8000744:	4956      	ldr	r1, [pc, #344]	; (80008a0 <main+0x328>)
 8000746:	4618      	mov	r0, r3
 8000748:	f009 f894 	bl	8009874 <siprintf>
	  	  	  }
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800074c:	463b      	mov	r3, r7
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd3e 	bl	80001d0 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	4639      	mov	r1, r7
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	4847      	ldr	r0, [pc, #284]	; (800087c <main+0x304>)
 8000760:	f008 fb88 	bl	8008e74 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f005 fe13 	bl	8006390 <HAL_Delay>



	  	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0,MOTION_GYRO, &data_axe_gyro);
 800076a:	4a4e      	ldr	r2, [pc, #312]	; (80008a4 <main+0x32c>)
 800076c:	2101      	movs	r1, #1
 800076e:	2000      	movs	r0, #0
 8000770:	f005 fb52 	bl	8005e18 <IKS01A2_MOTION_SENSOR_GetAxes>
	  	 // sprintf((char*)buf,"gyro \t x : %u\r\n",(unsigned int)val);
	  	  if(data_axe_gyro.x>0x80000000)
 8000774:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <main+0x32c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800077c:	d90e      	bls.n	800079c <main+0x224>
	  	  	  {
	  	  		  data_axe_gyro.x=0xffffffff-data_axe_gyro.x+1;
 800077e:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <main+0x32c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	425b      	negs	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <main+0x32c>)
 8000788:	601a      	str	r2, [r3, #0]
	  	  		  sprintf((char*)buf,"gyro : \t x : -%u\r\n ",(unsigned int)data_axe_gyro.x);
 800078a:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <main+0x32c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	463b      	mov	r3, r7
 8000792:	4945      	ldr	r1, [pc, #276]	; (80008a8 <main+0x330>)
 8000794:	4618      	mov	r0, r3
 8000796:	f009 f86d 	bl	8009874 <siprintf>
 800079a:	e007      	b.n	80007ac <main+0x234>
	  	  	  }else
	  	  	  {
	  	  	  sprintf((char*)buf,"gyro : \t x : %u\r\n ",(unsigned int)data_axe_gyro.x);
 800079c:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <main+0x32c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	463b      	mov	r3, r7
 80007a4:	4941      	ldr	r1, [pc, #260]	; (80008ac <main+0x334>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 f864 	bl	8009874 <siprintf>
	  	  	  }
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80007ac:	463b      	mov	r3, r7
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd0e 	bl	80001d0 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4639      	mov	r1, r7
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	482f      	ldr	r0, [pc, #188]	; (800087c <main+0x304>)
 80007c0:	f008 fb58 	bl	8008e74 <HAL_UART_Transmit>

	  	  if(data_axe_gyro.y>0x80000000)
 80007c4:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <main+0x32c>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007cc:	d90e      	bls.n	80007ec <main+0x274>
	  	  	  {
	  	  		  data_axe_gyro.y=0xffffffff-data_axe_gyro.y+1;
 80007ce:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <main+0x32c>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	425b      	negs	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <main+0x32c>)
 80007d8:	605a      	str	r2, [r3, #4]
	  	  		  sprintf((char*)buf,"gyro : \t y: -%u\r\n ",(unsigned int)data_axe_gyro.y);
 80007da:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <main+0x32c>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	461a      	mov	r2, r3
 80007e0:	463b      	mov	r3, r7
 80007e2:	4933      	ldr	r1, [pc, #204]	; (80008b0 <main+0x338>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f009 f845 	bl	8009874 <siprintf>
 80007ea:	e007      	b.n	80007fc <main+0x284>
	  	  	  }else
	  	  	  {
	  	  		 sprintf((char*)buf,"gyro : \t y : %u\r\n",(unsigned int)data_axe_gyro.y);
 80007ec:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <main+0x32c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	461a      	mov	r2, r3
 80007f2:	463b      	mov	r3, r7
 80007f4:	492f      	ldr	r1, [pc, #188]	; (80008b4 <main+0x33c>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 f83c 	bl	8009874 <siprintf>
	  	  	  }
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80007fc:	463b      	mov	r3, r7
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fce6 	bl	80001d0 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	4639      	mov	r1, r7
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <main+0x304>)
 8000810:	f008 fb30 	bl	8008e74 <HAL_UART_Transmit>

	  	  if(data_axe_gyro.z>0x80000000)
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <main+0x32c>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800081c:	d90e      	bls.n	800083c <main+0x2c4>
	  	  	  {
	  	  		  data_axe_gyro.z=0xffffffff-data_axe_gyro.z+1;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <main+0x32c>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	425b      	negs	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <main+0x32c>)
 8000828:	609a      	str	r2, [r3, #8]
	  	  		  sprintf((char*)buf,"gyro : \t z: -%u\r\n ",(unsigned int)data_axe_gyro.z);
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <main+0x32c>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	461a      	mov	r2, r3
 8000830:	463b      	mov	r3, r7
 8000832:	4921      	ldr	r1, [pc, #132]	; (80008b8 <main+0x340>)
 8000834:	4618      	mov	r0, r3
 8000836:	f009 f81d 	bl	8009874 <siprintf>
 800083a:	e007      	b.n	800084c <main+0x2d4>
	  	  	  }else
	  	  	  {
	  	  		 sprintf((char*)buf,"gyro : \t z : %u\r\n",(unsigned int)data_axe_gyro.z);
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <main+0x32c>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	461a      	mov	r2, r3
 8000842:	463b      	mov	r3, r7
 8000844:	491d      	ldr	r1, [pc, #116]	; (80008bc <main+0x344>)
 8000846:	4618      	mov	r0, r3
 8000848:	f009 f814 	bl	8009874 <siprintf>
	  	  	  }
	  	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800084c:	463b      	mov	r3, r7
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fcbe 	bl	80001d0 <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	4639      	mov	r1, r7
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <main+0x304>)
 8000860:	f008 fb08 	bl	8008e74 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f005 fd93 	bl	8006390 <HAL_Delay>


	  	  HAL_Delay(1000);
 800086a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086e:	f005 fd8f 	bl	8006390 <HAL_Delay>
	  	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 8000872:	e6ba      	b.n	80005ea <main+0x72>
 8000874:	2000034c 	.word	0x2000034c
 8000878:	0800a0e8 	.word	0x0800a0e8
 800087c:	200003e4 	.word	0x200003e4
 8000880:	20000338 	.word	0x20000338
 8000884:	0800a0fc 	.word	0x0800a0fc
 8000888:	200003d8 	.word	0x200003d8
 800088c:	0800a110 	.word	0x0800a110
 8000890:	0800a128 	.word	0x0800a128
 8000894:	0800a140 	.word	0x0800a140
 8000898:	0800a158 	.word	0x0800a158
 800089c:	0800a170 	.word	0x0800a170
 80008a0:	0800a188 	.word	0x0800a188
 80008a4:	20000340 	.word	0x20000340
 80008a8:	0800a1a0 	.word	0x0800a1a0
 80008ac:	0800a1b4 	.word	0x0800a1b4
 80008b0:	0800a1c8 	.word	0x0800a1c8
 80008b4:	0800a1dc 	.word	0x0800a1dc
 80008b8:	0800a1f0 	.word	0x0800a1f0
 80008bc:	0800a204 	.word	0x0800a204

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	; 0x58
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2244      	movs	r2, #68	; 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f008 ffc8 	bl	8009864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e6:	f006 ff79 	bl	80077dc <HAL_PWREx_ControlVoltageScaling>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f0:	f000 f8f2 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fe:	2310      	movs	r3, #16
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000906:	2302      	movs	r3, #2
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800090e:	230a      	movs	r3, #10
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000912:	2307      	movs	r3, #7
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4618      	mov	r0, r3
 8000924:	f006 ffb0 	bl	8007888 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800092e:	f000 f8d3 	bl	8000ad8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	2104      	movs	r1, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f007 fb82 	bl	8008054 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000956:	f000 f8bf 	bl	8000ad8 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3758      	adds	r7, #88	; 0x58
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_UART4_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_UART4_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_UART4_Init+0x58>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_UART4_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_UART4_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_UART4_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_UART4_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_UART4_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_UART4_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_UART4_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_UART4_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_UART4_Init+0x58>)
 80009a8:	f008 fa16 	bl	8008dd8 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f891 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000350 	.word	0x20000350
 80009c0:	40004c00 	.word	0x40004c00

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART2_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a08:	f008 f9e6 	bl	8008dd8 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f861 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200003e4 	.word	0x200003e4
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a24      	ldr	r2, [pc, #144]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a1e      	ldr	r2, [pc, #120]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_GPIO_Init+0xac>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f006 f829 	bl	8006ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <MX_GPIO_Init+0xb0>)
 8000aa6:	f005 fd7d 	bl	80065a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f005 fd6e 	bl	80065a4 <HAL_GPIO_Init>

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000800 	.word	0x48000800

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6613      	str	r3, [r2, #96]	; 0x60
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0ae      	sub	sp, #184	; 0xb8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2288      	movs	r2, #136	; 0x88
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 fe89 	bl	8009864 <memset>
  if(huart->Instance==UART4)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a42      	ldr	r2, [pc, #264]	; (8000c60 <HAL_UART_MspInit+0x134>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d13c      	bne.n	8000bd6 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f007 fc79 	bl	8008460 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b74:	f7ff ffb0 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b78:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	4a39      	ldr	r2, [pc, #228]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b82:	6593      	str	r3, [r2, #88]	; 0x58
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	4a33      	ldr	r2, [pc, #204]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9c:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd0:	f005 fce8 	bl	80065a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd4:	e040      	b.n	8000c58 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <HAL_UART_MspInit+0x13c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d13b      	bne.n	8000c58 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4618      	mov	r0, r3
 8000bee:	f007 fc37 	bl	8008460 <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000bf8:	f7ff ff6e 	bl	8000ad8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c06:	6593      	str	r3, [r2, #88]	; 0x58
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_UART_MspInit+0x138>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c44:	2307      	movs	r3, #7
 8000c46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f005 fca6 	bl	80065a4 <HAL_GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	37b8      	adds	r7, #184	; 0xb8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004c00 	.word	0x40004c00
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40004400 	.word	0x40004400

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f005 fb4a 	bl	8006350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <BSP_I2C1_Init+0x70>)
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <BSP_I2C1_Init+0x74>)
 8000cce:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <BSP_I2C1_Init+0x78>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	4918      	ldr	r1, [pc, #96]	; (8000d38 <BSP_I2C1_Init+0x78>)
 8000cd8:	600a      	str	r2, [r1, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d122      	bne.n	8000d24 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <BSP_I2C1_Init+0x70>)
 8000ce0:	f006 fa16 	bl	8007110 <HAL_I2C_GetState>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d11c      	bne.n	8000d24 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <BSP_I2C1_Init+0x70>)
 8000cec:	f000 f8fe 	bl	8000eec <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d116      	bne.n	8000d24 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000cf6:	480e      	ldr	r0, [pc, #56]	; (8000d30 <BSP_I2C1_Init+0x70>)
 8000cf8:	f000 f8b4 	bl	8000e64 <MX_I2C1_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000d02:	f06f 0307 	mvn.w	r3, #7
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	e00c      	b.n	8000d24 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <BSP_I2C1_Init+0x70>)
 8000d0e:	f006 fcbf 	bl	8007690 <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000d18:	f06f 0307 	mvn.w	r3, #7
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	e001      	b.n	8000d24 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000468 	.word	0x20000468
 8000d34:	40005400 	.word	0x40005400
 8000d38:	200001e4 	.word	0x200001e4

08000d3c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <BSP_I2C1_DeInit+0x48>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d014      	beq.n	8000d78 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <BSP_I2C1_DeInit+0x48>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <BSP_I2C1_DeInit+0x48>)
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <BSP_I2C1_DeInit+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10b      	bne.n	8000d78 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <BSP_I2C1_DeInit+0x4c>)
 8000d62:	f000 f909 	bl	8000f78 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <BSP_I2C1_DeInit+0x4c>)
 8000d68:	f005 ff61 	bl	8006c2e <HAL_I2C_DeInit>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000d72:	f06f 0307 	mvn.w	r3, #7
 8000d76:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001e4 	.word	0x200001e4
 8000d88:	20000468 	.word	0x20000468

08000d8c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	60ba      	str	r2, [r7, #8]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	81fb      	strh	r3, [r7, #14]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	81bb      	strh	r3, [r7, #12]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000da6:	89ba      	ldrh	r2, [r7, #12]
 8000da8:	89f9      	ldrh	r1, [r7, #14]
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <BSP_I2C1_WriteReg+0x60>)
 8000dbc:	f005 ff7a 	bl	8006cb4 <HAL_I2C_Mem_Write>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00c      	beq.n	8000de0 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <BSP_I2C1_WriteReg+0x60>)
 8000dc8:	f006 f9b0 	bl	800712c <HAL_I2C_GetError>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d103      	bne.n	8000dda <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000dd2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e002      	b.n	8000de0 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000dda:	f06f 0303 	mvn.w	r3, #3
 8000dde:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000de0:	697b      	ldr	r3, [r7, #20]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000468 	.word	0x20000468

08000df0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af04      	add	r7, sp, #16
 8000df6:	60ba      	str	r2, [r7, #8]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	81fb      	strh	r3, [r7, #14]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	81bb      	strh	r3, [r7, #12]
 8000e02:	4613      	mov	r3, r2
 8000e04:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000e0a:	89ba      	ldrh	r2, [r7, #12]
 8000e0c:	89f9      	ldrh	r1, [r7, #14]
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <BSP_I2C1_ReadReg+0x60>)
 8000e20:	f006 f85c 	bl	8006edc <HAL_I2C_Mem_Read>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00c      	beq.n	8000e44 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <BSP_I2C1_ReadReg+0x60>)
 8000e2c:	f006 f97e 	bl	800712c <HAL_I2C_GetError>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d103      	bne.n	8000e3e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e36:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e002      	b.n	8000e44 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000e3e:	f06f 0303 	mvn.w	r3, #3
 8000e42:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000e44:	697b      	ldr	r3, [r7, #20]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000468 	.word	0x20000468

08000e54 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000e58:	f005 fa8e 	bl	8006378 <HAL_GetTick>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_I2C1_Init+0x80>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <MX_I2C1_Init+0x84>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f005 fe32 	bl	8006b10 <HAL_I2C_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f006 fbe9 	bl	8007690 <HAL_I2CEx_ConfigAnalogFilter>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f006 fc2b 	bl	8007726 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	10909cec 	.word	0x10909cec

08000eec <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <I2C1_MspInit+0x84>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <I2C1_MspInit+0x84>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <I2C1_MspInit+0x84>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f12:	2312      	movs	r3, #18
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4812      	ldr	r0, [pc, #72]	; (8000f74 <I2C1_MspInit+0x88>)
 8000f2a:	f005 fb3b 	bl	80065a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000f40:	2304      	movs	r3, #4
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480a      	ldr	r0, [pc, #40]	; (8000f74 <I2C1_MspInit+0x88>)
 8000f4c:	f005 fb2a 	bl	80065a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <I2C1_MspInit+0x84>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <I2C1_MspInit+0x84>)
 8000f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <I2C1_MspInit+0x84>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400

08000f78 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <I2C1_MspDeInit+0x30>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <I2C1_MspDeInit+0x30>)
 8000f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f8a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f90:	4806      	ldr	r0, [pc, #24]	; (8000fac <I2C1_MspDeInit+0x34>)
 8000f92:	f005 fcb1 	bl	80068f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <I2C1_MspDeInit+0x34>)
 8000f9c:	f005 fcac 	bl	80068f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f008 fc16 	bl	8009810 <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20018000 	.word	0x20018000
 8001010:	00000400 	.word	0x00000400
 8001014:	200001e8 	.word	0x200001e8
 8001018:	200004e0 	.word	0x200004e0

0800101c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001044:	f7ff ffea 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <LoopForever+0x6>)
  ldr r1, =_edata
 800104a:	490d      	ldr	r1, [pc, #52]	; (8001080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <LoopForever+0xe>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001060:	4c0a      	ldr	r4, [pc, #40]	; (800108c <LoopForever+0x16>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106e:	f008 fbd5 	bl	800981c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001072:	f7ff fa81 	bl	8000578 <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001078:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001084:	0800a2a4 	.word	0x0800a2a4
  ldr r2, =_sbss
 8001088:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800108c:	200004dc 	.word	0x200004dc

08001090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_2_IRQHandler>
	...

08001094 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e030      	b.n	800110e <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7b1a      	ldrb	r2, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	699a      	ldr	r2, [r3, #24]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HTS221_RegisterBusIO+0x84>)
 80010e8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HTS221_RegisterBusIO+0x88>)
 80010ee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4798      	blx	r3
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	e002      	b.n	800110e <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800174b 	.word	0x0800174b
 800111c:	080017ad 	.word	0x080017ad

08001120 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800112e:	2b00      	cmp	r3, #0
 8001130:	d108      	bne.n	8001144 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 faa4 	bl	8001680 <HTS221_Initialize>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e004      	b.n	800114e <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001164:	2b01      	cmp	r3, #1
 8001166:	d111      	bne.n	800118c <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f878 	bl	800125e <HTS221_HUM_Disable>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	e00d      	b.n	8001196 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f95f 	bl	800143e <HTS221_TEMP_Disable>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e004      	b.n	8001196 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	331c      	adds	r3, #28
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fc28 	bl	8001a04 <hts221_device_id_get>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e000      	b.n	80011c2 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2201      	movs	r2, #1
 80011da:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HTS221_GetCapabilities+0x44>)
 80011f2:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HTS221_GetCapabilities+0x44>)
 80011f8:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	41480000 	.word	0x41480000

08001214 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e015      	b.n	8001256 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10b      	bne.n	800124c <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	331c      	adds	r3, #28
 8001238:	2101      	movs	r1, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fbf3 	bl	8001a26 <hts221_power_on_set>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	e004      	b.n	8001256 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e015      	b.n	80012a0 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10b      	bne.n	8001296 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	331c      	adds	r3, #28
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fbce 	bl	8001a26 <hts221_power_on_set>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	e004      	b.n	80012a0 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f96f 	bl	8001598 <HTS221_GetOutputDataRate>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80012d0:	ed97 0a00 	vldr	s0, [r7]
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f9a3 	bl	8001620 <HTS221_SetOutputDataRate>
 80012da:	4603      	mov	r3, r0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	331c      	adds	r3, #28
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fc58 	bl	8001bae <hts221_hum_adc_point_0_get>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	e06b      	b.n	80013e2 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f103 021c 	add.w	r2, r3, #28
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	3304      	adds	r3, #4
 8001316:	4619      	mov	r1, r3
 8001318:	4610      	mov	r0, r2
 800131a:	f000 fbaa 	bl	8001a72 <hts221_hum_rh_point_0_get>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	e05b      	b.n	80013e2 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 021c 	add.w	r2, r3, #28
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	3308      	adds	r3, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f000 fc5c 	bl	8001bf6 <hts221_hum_adc_point_1_get>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	e04b      	b.n	80013e2 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f103 021c 	add.w	r2, r3, #28
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	330c      	adds	r3, #12
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f000 fba8 	bl	8001aae <hts221_hum_rh_point_1_get>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	e03b      	b.n	80013e2 <HTS221_HUM_GetHumidity+0xfe>
 800136a:	2300      	movs	r3, #0
 800136c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	331c      	adds	r3, #28
 8001372:	f107 021c 	add.w	r2, r7, #28
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fafd 	bl	8001978 <hts221_humidity_raw_get>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	e02b      	b.n	80013e2 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800138a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f99a 	bl	80016d8 <Linear_Interpolation>
 80013a4:	eef0 7a40 	vmov.f32	s15, s0
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	d503      	bpl.n	80013c6 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80013ec <HTS221_HUM_GetHumidity+0x108>
 80013d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	dd02      	ble.n	80013e0 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HTS221_HUM_GetHumidity+0x10c>)
 80013de:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	42c80000 	.word	0x42c80000
 80013f0:	42c80000 	.word	0x42c80000

080013f4 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e015      	b.n	8001436 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10b      	bne.n	800142c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	331c      	adds	r3, #28
 8001418:	2101      	movs	r1, #1
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fb03 	bl	8001a26 <hts221_power_on_set>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e004      	b.n	8001436 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e015      	b.n	8001480 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10b      	bne.n	8001476 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	331c      	adds	r3, #28
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fade 	bl	8001a26 <hts221_power_on_set>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	e004      	b.n	8001480 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f87f 	bl	8001598 <HTS221_GetOutputDataRate>
 800149a:	4603      	mov	r3, r0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80014b0:	ed97 0a00 	vldr	s0, [r7]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f8b3 	bl	8001620 <HTS221_SetOutputDataRate>
 80014ba:	4603      	mov	r3, r0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	331c      	adds	r3, #28
 80014d2:	f107 020c 	add.w	r2, r7, #12
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fbb0 	bl	8001c3e <hts221_temp_adc_point_0_get>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	e052      	b.n	8001590 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 021c 	add.w	r2, r3, #28
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	3304      	adds	r3, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f000 faf6 	bl	8001aea <hts221_temp_deg_point_0_get>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	e042      	b.n	8001590 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f103 021c 	add.w	r2, r3, #28
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	3308      	adds	r3, #8
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f000 fbb4 	bl	8001c86 <hts221_temp_adc_point_1_get>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	e032      	b.n	8001590 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f103 021c 	add.w	r2, r3, #28
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	330c      	adds	r3, #12
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f000 fb07 	bl	8001b4c <hts221_temp_deg_point_1_get>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	e022      	b.n	8001590 <HTS221_TEMP_GetTemperature+0xcc>
 800154a:	2300      	movs	r3, #0
 800154c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	331c      	adds	r3, #28
 8001552:	f107 021c 	add.w	r2, r7, #28
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fa30 	bl	80019be <hts221_temperature_raw_get>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
 8001568:	e012      	b.n	8001590 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800156a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f8aa 	bl	80016d8 <Linear_Interpolation>
 8001584:	eef0 7a40 	vmov.f32	s15, s0
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	331c      	adds	r3, #28
 80015aa:	f107 020b 	add.w	r2, r7, #11
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f983 	bl	80018bc <hts221_data_rate_get>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	e025      	b.n	800160e <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d81d      	bhi.n	8001604 <HTS221_GetOutputDataRate+0x6c>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <HTS221_GetOutputDataRate+0x38>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015eb 	.word	0x080015eb
 80015d8:	080015f5 	.word	0x080015f5
 80015dc:	080015fd 	.word	0x080015fd
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
      break;
 80015e8:	e010      	b.n	800160c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f0:	601a      	str	r2, [r3, #0]
      break;
 80015f2:	e00b      	b.n	800160c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HTS221_GetOutputDataRate+0x80>)
 80015f8:	601a      	str	r2, [r3, #0]
      break;
 80015fa:	e007      	b.n	800160c <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <HTS221_GetOutputDataRate+0x84>)
 8001600:	601a      	str	r2, [r3, #0]
      break;
 8001602:	e003      	b.n	800160c <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	60fb      	str	r3, [r7, #12]
      break;
 800160a:	bf00      	nop
  }

  return ret;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40e00000 	.word	0x40e00000
 800161c:	41480000 	.word	0x41480000

08001620 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800162c:	edd7 7a00 	vldr	s15, [r7]
 8001630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d801      	bhi.n	8001642 <HTS221_SetOutputDataRate+0x22>
 800163e:	2301      	movs	r3, #1
 8001640:	e00b      	b.n	800165a <HTS221_SetOutputDataRate+0x3a>
 8001642:	edd7 7a00 	vldr	s15, [r7]
 8001646:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800164a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	d801      	bhi.n	8001658 <HTS221_SetOutputDataRate+0x38>
 8001654:	2302      	movs	r3, #2
 8001656:	e000      	b.n	800165a <HTS221_SetOutputDataRate+0x3a>
 8001658:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800165a:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	331c      	adds	r3, #28
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f902 	bl	800186e <hts221_data_rate_set>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	e000      	b.n	8001678 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	331c      	adds	r3, #28
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f9c9 	bl	8001a26 <hts221_power_on_set>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e017      	b.n	80016d0 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	331c      	adds	r3, #28
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f940 	bl	800192c <hts221_block_data_update_set>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e00b      	b.n	80016d0 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80016b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ffaf 	bl	8001620 <HTS221_SetOutputDataRate>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	e000      	b.n	80016d0 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f4:	edd7 7a00 	vldr	s15, [r7]
 80016f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edd3 7a01 	vldr	s15, [r3, #4]
 8001708:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ed93 6a00 	vldr	s12, [r3]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 7a03 	vldr	s15, [r3, #12]
 8001718:	ee66 7a27 	vmul.f32	s15, s12, s15
 800171c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edd3 6a02 	vldr	s13, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001734:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001738:	eef0 7a66 	vmov.f32	s15, s13
}
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800174a:	b590      	push	{r4, r7, lr}
 800174c:	b087      	sub	sp, #28
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	461a      	mov	r2, r3
 8001756:	460b      	mov	r3, r1
 8001758:	72fb      	strb	r3, [r7, #11]
 800175a:	4613      	mov	r3, r2
 800175c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10e      	bne.n	8001788 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	695c      	ldr	r4, [r3, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	b298      	uxth	r0, r3
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800177a:	b2db      	uxtb	r3, r3
 800177c:	b299      	uxth	r1, r3
 800177e:	893b      	ldrh	r3, [r7, #8]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	47a0      	blx	r4
 8001784:	4603      	mov	r3, r0
 8001786:	e00d      	b.n	80017a4 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	695c      	ldr	r4, [r3, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	7b1b      	ldrb	r3, [r3, #12]
 8001790:	b298      	uxth	r0, r3
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001798:	b2db      	uxtb	r3, r3
 800179a:	b299      	uxth	r1, r3
 800179c:	893b      	ldrh	r3, [r7, #8]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	47a0      	blx	r4
 80017a2:	4603      	mov	r3, r0
  }
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	72fb      	strb	r3, [r7, #11]
 80017bc:	4613      	mov	r3, r2
 80017be:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10e      	bne.n	80017ea <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	691c      	ldr	r4, [r3, #16]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	7b1b      	ldrb	r3, [r3, #12]
 80017d4:	b298      	uxth	r0, r3
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	b299      	uxth	r1, r3
 80017e0:	893b      	ldrh	r3, [r7, #8]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	47a0      	blx	r4
 80017e6:	4603      	mov	r3, r0
 80017e8:	e00d      	b.n	8001806 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	691c      	ldr	r4, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	7b1b      	ldrb	r3, [r3, #12]
 80017f2:	b298      	uxth	r0, r3
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	b299      	uxth	r1, r3
 80017fe:	893b      	ldrh	r3, [r7, #8]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	47a0      	blx	r4
 8001804:	4603      	mov	r3, r0
  }
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd90      	pop	{r4, r7, pc}

0800180e <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 800180e:	b590      	push	{r4, r7, lr}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	461a      	mov	r2, r3
 800181a:	460b      	mov	r3, r1
 800181c:	72fb      	strb	r3, [r7, #11]
 800181e:	4613      	mov	r3, r2
 8001820:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	685c      	ldr	r4, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6898      	ldr	r0, [r3, #8]
 800182a:	893b      	ldrh	r3, [r7, #8]
 800182c:	7af9      	ldrb	r1, [r7, #11]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	47a0      	blx	r4
 8001832:	6178      	str	r0, [r7, #20]
  return ret;
 8001834:	697b      	ldr	r3, [r7, #20]
}
 8001836:	4618      	mov	r0, r3
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}

0800183e <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800183e:	b590      	push	{r4, r7, lr}
 8001840:	b087      	sub	sp, #28
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	461a      	mov	r2, r3
 800184a:	460b      	mov	r3, r1
 800184c:	72fb      	strb	r3, [r7, #11]
 800184e:	4613      	mov	r3, r2
 8001850:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681c      	ldr	r4, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6898      	ldr	r0, [r3, #8]
 800185a:	893b      	ldrh	r3, [r7, #8]
 800185c:	7af9      	ldrb	r1, [r7, #11]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	47a0      	blx	r4
 8001862:	6178      	str	r0, [r7, #20]
  return ret;
 8001864:	697b      	ldr	r3, [r7, #20]
}
 8001866:	4618      	mov	r0, r3
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}

0800186e <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800187a:	f107 0208 	add.w	r2, r7, #8
 800187e:	2301      	movs	r3, #1
 8001880:	2120      	movs	r1, #32
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffc3 	bl	800180e <hts221_read_reg>
 8001888:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10f      	bne.n	80018b0 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	7a3b      	ldrb	r3, [r7, #8]
 800189a:	f362 0301 	bfi	r3, r2, #0, #2
 800189e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80018a0:	f107 0208 	add.w	r2, r7, #8
 80018a4:	2301      	movs	r3, #1
 80018a6:	2120      	movs	r1, #32
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffc8 	bl	800183e <hts221_write_reg>
 80018ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80018c6:	f107 0208 	add.w	r2, r7, #8
 80018ca:	2301      	movs	r3, #1
 80018cc:	2120      	movs	r1, #32
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff9d 	bl	800180e <hts221_read_reg>
 80018d4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80018d6:	7a3b      	ldrb	r3, [r7, #8]
 80018d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d81a      	bhi.n	8001918 <hts221_data_rate_get+0x5c>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <hts221_data_rate_get+0x2c>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001901 	.word	0x08001901
 80018f0:	08001909 	.word	0x08001909
 80018f4:	08001911 	.word	0x08001911
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
      break;
 80018fe:	e00f      	b.n	8001920 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
      break;
 8001906:	e00b      	b.n	8001920 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
      break;
 800190e:	e007      	b.n	8001920 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2203      	movs	r2, #3
 8001914:	701a      	strb	r2, [r3, #0]
      break;
 8001916:	e003      	b.n	8001920 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
      break;
 800191e:	bf00      	nop
  }

  return ret;
 8001920:	68fb      	ldr	r3, [r7, #12]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop

0800192c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001938:	f107 0208 	add.w	r2, r7, #8
 800193c:	2301      	movs	r3, #1
 800193e:	2120      	movs	r1, #32
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff64 	bl	800180e <hts221_read_reg>
 8001946:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	7a3b      	ldrb	r3, [r7, #8]
 8001958:	f362 0382 	bfi	r3, r2, #2, #1
 800195c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800195e:	f107 0208 	add.w	r2, r7, #8
 8001962:	2301      	movs	r3, #1
 8001964:	2120      	movs	r1, #32
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff69 	bl	800183e <hts221_write_reg>
 800196c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001982:	f107 0208 	add.w	r2, r7, #8
 8001986:	2302      	movs	r3, #2
 8001988:	2128      	movs	r1, #40	; 0x28
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff3f 	bl	800180e <hts221_read_reg>
 8001990:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001992:	7a7b      	ldrb	r3, [r7, #9]
 8001994:	b21a      	sxth	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	7a3b      	ldrb	r3, [r7, #8]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	801a      	strh	r2, [r3, #0]
  return ret;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80019c8:	f107 0208 	add.w	r2, r7, #8
 80019cc:	2302      	movs	r3, #2
 80019ce:	212a      	movs	r1, #42	; 0x2a
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff1c 	bl	800180e <hts221_read_reg>
 80019d6:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80019d8:	7a7b      	ldrb	r3, [r7, #9]
 80019da:	b21a      	sxth	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	7a3b      	ldrb	r3, [r7, #8]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	801a      	strh	r2, [r3, #0]
  return ret;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001a0e:	2301      	movs	r3, #1
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	210f      	movs	r1, #15
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fefa 	bl	800180e <hts221_read_reg>
 8001a1a:	60f8      	str	r0, [r7, #12]
  return ret;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a32:	f107 0208 	add.w	r2, r7, #8
 8001a36:	2301      	movs	r3, #1
 8001a38:	2120      	movs	r1, #32
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fee7 	bl	800180e <hts221_read_reg>
 8001a40:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <hts221_power_on_set+0x42>
    reg.pd = val;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	7a3b      	ldrb	r3, [r7, #8]
 8001a52:	f362 13c7 	bfi	r3, r2, #7, #1
 8001a56:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001a58:	f107 0208 	add.w	r2, r7, #8
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	2120      	movs	r1, #32
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff feec 	bl	800183e <hts221_write_reg>
 8001a66:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001a7c:	f107 020b 	add.w	r2, r7, #11
 8001a80:	2301      	movs	r3, #1
 8001a82:	2130      	movs	r1, #48	; 0x30
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fec2 	bl	800180e <hts221_read_reg>
 8001a8a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001a8c:	7afb      	ldrb	r3, [r7, #11]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001ab8:	f107 020b 	add.w	r2, r7, #11
 8001abc:	2301      	movs	r3, #1
 8001abe:	2131      	movs	r1, #49	; 0x31
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fea4 	bl	800180e <hts221_read_reg>
 8001ac6:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8001af4:	f107 020f 	add.w	r2, r7, #15
 8001af8:	2301      	movs	r3, #1
 8001afa:	2132      	movs	r1, #50	; 0x32
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fe86 	bl	800180e <hts221_read_reg>
 8001b02:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11b      	bne.n	8001b42 <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001b0a:	f107 0210 	add.w	r2, r7, #16
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2135      	movs	r1, #53	; 0x35
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fe7b 	bl	800180e <hts221_read_reg>
 8001b18:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001b1a:	7c3b      	ldrb	r3, [r7, #16]
 8001b1c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001b24:	7cfb      	ldrb	r3, [r7, #19]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b34:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001b38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001b42:	697b      	ldr	r3, [r7, #20]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001b56:	f107 020f 	add.w	r2, r7, #15
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	2133      	movs	r1, #51	; 0x33
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fe55 	bl	800180e <hts221_read_reg>
 8001b64:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d11b      	bne.n	8001ba4 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	2301      	movs	r3, #1
 8001b72:	2135      	movs	r1, #53	; 0x35
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe4a 	bl	800180e <hts221_read_reg>
 8001b7a:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001b7c:	7c3b      	ldrb	r3, [r7, #16]
 8001b7e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001b86:	7cfb      	ldrb	r3, [r7, #19]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b96:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001ba4:	697b      	ldr	r3, [r7, #20]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001bb8:	f107 0208 	add.w	r2, r7, #8
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	2136      	movs	r1, #54	; 0x36
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fe24 	bl	800180e <hts221_read_reg>
 8001bc6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	7a3b      	ldrb	r3, [r7, #8]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001bda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001bec:	68fb      	ldr	r3, [r7, #12]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001c00:	f107 0208 	add.w	r2, r7, #8
 8001c04:	2302      	movs	r3, #2
 8001c06:	213a      	movs	r1, #58	; 0x3a
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fe00 	bl	800180e <hts221_read_reg>
 8001c0e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	7a3b      	ldrb	r3, [r7, #8]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001c22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001c34:	68fb      	ldr	r3, [r7, #12]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001c48:	f107 0208 	add.w	r2, r7, #8
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	213c      	movs	r1, #60	; 0x3c
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fddc 	bl	800180e <hts221_read_reg>
 8001c56:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001c58:	7a7b      	ldrb	r3, [r7, #9]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	7a3b      	ldrb	r3, [r7, #8]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001c6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001c90:	f107 0208 	add.w	r2, r7, #8
 8001c94:	2302      	movs	r3, #2
 8001c96:	213e      	movs	r1, #62	; 0x3e
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fdb8 	bl	800180e <hts221_read_reg>
 8001c9e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001ca0:	7a7b      	ldrb	r3, [r7, #9]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	7a3b      	ldrb	r3, [r7, #8]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001cb2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e04d      	b.n	8001d88 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	7b1a      	ldrb	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <LPS22HB_RegisterBusIO+0xc4>)
 8001d28:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <LPS22HB_RegisterBusIO+0xc8>)
 8001d2e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e020      	b.n	8001d88 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4798      	blx	r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e016      	b.n	8001d88 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d112      	bne.n	8001d88 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10d      	bne.n	8001d88 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	461a      	mov	r2, r3
 8001d74:	2110      	movs	r1, #16
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f9df 	bl	800213a <LPS22HB_Write_Reg>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	080023fb 	.word	0x080023fb
 8001d98:	08002481 	.word	0x08002481

08001d9c <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 faca 	bl	8002348 <LPS22HB_Initialize>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e004      	b.n	8001dca <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d111      	bne.n	8001e08 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f877 	bl	8001ed8 <LPS22HB_PRESS_Disable>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	e00d      	b.n	8001e12 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f918 	bl	800202c <LPS22HB_TEMP_Disable>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e004      	b.n	8001e12 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	331c      	adds	r3, #28
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fcd0 	bl	80027d0 <lps22hb_device_id_get>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e000      	b.n	8001e3e <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <LPS22HB_GetCapabilities+0x44>)
 8001e76:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <LPS22HB_GetCapabilities+0x44>)
 8001e7c:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	42960000 	.word	0x42960000

08001e90 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e014      	b.n	8001ed0 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 021c 	add.w	r2, r3, #28
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f000 fbd5 	bl	8002664 <lps22hb_data_rate_set>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	e004      	b.n	8001ed0 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e024      	b.n	8001f38 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d11a      	bne.n	8001f2e <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f103 021c 	add.w	r2, r3, #28
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	332b      	adds	r3, #43	; 0x2b
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f000 fbd3 	bl	80026b0 <lps22hb_data_rate_get>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e010      	b.n	8001f38 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	331c      	adds	r3, #28
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fba1 	bl	8002664 <lps22hb_data_rate_set>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	e004      	b.n	8001f38 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001f4a:	6839      	ldr	r1, [r7, #0]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f90f 	bl	8002170 <LPS22HB_GetOutputDataRate>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d106      	bne.n	8001f80 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001f72:	ed97 0a00 	vldr	s0, [r7]
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f94e 	bl	8002218 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	e005      	b.n	8001f8c <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001f80:	ed97 0a00 	vldr	s0, [r7]
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f99f 	bl	80022c8 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001f8a:	4603      	mov	r3, r0
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f007 fc5c 	bl	8009864 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	331c      	adds	r3, #28
 8001fb0:	f107 020c 	add.w	r2, r7, #12
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fbbe 	bl	8002738 <lps22hb_pressure_raw_get>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	e009      	b.n	8001fdc <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 facc 	bl	8002568 <lps22hb_from_lsb_to_hpa>
 8001fd0:	eef0 7a40 	vmov.f32	s15, s0
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e014      	b.n	8002024 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f103 021c 	add.w	r2, r3, #28
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f000 fb2b 	bl	8002664 <lps22hb_data_rate_set>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
 8002018:	e004      	b.n	8002024 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e024      	b.n	800208c <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11a      	bne.n	8002082 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f103 021c 	add.w	r2, r3, #28
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	332b      	adds	r3, #43	; 0x2b
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f000 fb29 	bl	80026b0 <lps22hb_data_rate_get>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	e010      	b.n	800208c <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	331c      	adds	r3, #28
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f000 faf7 	bl	8002664 <lps22hb_data_rate_set>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	e004      	b.n	800208c <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800209e:	6839      	ldr	r1, [r7, #0]
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f865 	bl	8002170 <LPS22HB_GetOutputDataRate>
 80020a6:	4603      	mov	r3, r0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d106      	bne.n	80020d4 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 80020c6:	ed97 0a00 	vldr	s0, [r7]
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8a4 	bl	8002218 <LPS22HB_SetOutputDataRate_When_Enabled>
 80020d0:	4603      	mov	r3, r0
 80020d2:	e005      	b.n	80020e0 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80020d4:	ed97 0a00 	vldr	s0, [r7]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8f5 	bl	80022c8 <LPS22HB_SetOutputDataRate_When_Disabled>
 80020de:	4603      	mov	r3, r0
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2202      	movs	r2, #2
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f007 fbb2 	bl	8009864 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	331c      	adds	r3, #28
 8002104:	f107 020c 	add.w	r2, r7, #12
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fb3d 	bl	800278a <lps22hb_temperature_raw_get>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
 800211a:	e00a      	b.n	8002132 <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 800211c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fa39 	bl	8002598 <lps22hb_from_lsb_to_degc>
 8002126:	eef0 7a40 	vmov.f32	s15, s0
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
 8002146:	4613      	mov	r3, r2
 8002148:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 001c 	add.w	r0, r3, #28
 8002150:	1cba      	adds	r2, r7, #2
 8002152:	78f9      	ldrb	r1, [r7, #3]
 8002154:	2301      	movs	r3, #1
 8002156:	f000 f9ee 	bl	8002536 <lps22hb_write_reg>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	e000      	b.n	8002168 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	331c      	adds	r3, #28
 8002182:	f107 020b 	add.w	r2, r7, #11
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fa91 	bl	80026b0 <lps22hb_data_rate_get>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	e031      	b.n	80021fe <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d829      	bhi.n	80021f4 <LPS22HB_GetOutputDataRate+0x84>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <LPS22HB_GetOutputDataRate+0x38>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021c1 	.word	0x080021c1
 80021ac:	080021cb 	.word	0x080021cb
 80021b0:	080021d5 	.word	0x080021d5
 80021b4:	080021dd 	.word	0x080021dd
 80021b8:	080021e5 	.word	0x080021e5
 80021bc:	080021ed 	.word	0x080021ed
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
      break;
 80021c8:	e018      	b.n	80021fc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021d0:	601a      	str	r2, [r3, #0]
      break;
 80021d2:	e013      	b.n	80021fc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <LPS22HB_GetOutputDataRate+0x98>)
 80021d8:	601a      	str	r2, [r3, #0]
      break;
 80021da:	e00f      	b.n	80021fc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LPS22HB_GetOutputDataRate+0x9c>)
 80021e0:	601a      	str	r2, [r3, #0]
      break;
 80021e2:	e00b      	b.n	80021fc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LPS22HB_GetOutputDataRate+0xa0>)
 80021e8:	601a      	str	r2, [r3, #0]
      break;
 80021ea:	e007      	b.n	80021fc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <LPS22HB_GetOutputDataRate+0xa4>)
 80021f0:	601a      	str	r2, [r3, #0]
      break;
 80021f2:	e003      	b.n	80021fc <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
 80021f8:	60fb      	str	r3, [r7, #12]
      break;
 80021fa:	bf00      	nop
  }

  return ret;
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	41200000 	.word	0x41200000
 800220c:	41c80000 	.word	0x41c80000
 8002210:	42480000 	.word	0x42480000
 8002214:	42960000 	.word	0x42960000

08002218 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002224:	edd7 7a00 	vldr	s15, [r7]
 8002228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800222c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	d801      	bhi.n	800223a <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8002236:	2301      	movs	r3, #1
 8002238:	e021      	b.n	800227e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800223a:	edd7 7a00 	vldr	s15, [r7]
 800223e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224a:	d801      	bhi.n	8002250 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 800224c:	2302      	movs	r3, #2
 800224e:	e016      	b.n	800227e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002250:	edd7 7a00 	vldr	s15, [r7]
 8002254:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d801      	bhi.n	8002266 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8002262:	2303      	movs	r3, #3
 8002264:	e00b      	b.n	800227e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002266:	edd7 7a00 	vldr	s15, [r7]
 800226a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80022c4 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 800226e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	d801      	bhi.n	800227c <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8002278:	2304      	movs	r3, #4
 800227a:	e000      	b.n	800227e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800227c:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800227e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	331c      	adds	r3, #28
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f9eb 	bl	8002664 <lps22hb_data_rate_set>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	e00f      	b.n	80022ba <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 021c 	add.w	r2, r3, #28
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	332b      	adds	r3, #43	; 0x2b
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f000 fa02 	bl	80026b0 <lps22hb_data_rate_get>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e000      	b.n	80022ba <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	42480000 	.word	0x42480000

080022c8 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80022d4:	edd7 7a00 	vldr	s15, [r7]
 80022d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d801      	bhi.n	80022ea <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e021      	b.n	800232e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80022ea:	edd7 7a00 	vldr	s15, [r7]
 80022ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d801      	bhi.n	8002300 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e016      	b.n	800232e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002300:	edd7 7a00 	vldr	s15, [r7]
 8002304:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	d801      	bhi.n	8002316 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8002312:	2303      	movs	r3, #3
 8002314:	e00b      	b.n	800232e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002316:	edd7 7a00 	vldr	s15, [r7]
 800231a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002344 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 800231e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	d801      	bhi.n	800232c <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8002328:	2304      	movs	r3, #4
 800232a:	e000      	b.n	800232e <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800232c:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	42480000 	.word	0x42480000

08002348 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	331c      	adds	r3, #28
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fa4b 	bl	80027f2 <lps22hb_low_power_set>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	e044      	b.n	80023f2 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	331c      	adds	r3, #28
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f978 	bl	8002664 <lps22hb_data_rate_set>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e038      	b.n	80023f2 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	331c      	adds	r3, #28
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f946 	bl	8002618 <lps22hb_low_pass_filter_mode_set>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	e02c      	b.n	80023f2 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	331c      	adds	r3, #28
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f914 	bl	80025cc <lps22hb_block_data_update_set>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e020      	b.n	80023f2 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	331c      	adds	r3, #28
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fa3d 	bl	800283e <lps22hb_auto_add_inc_set>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	e010      	b.n	80023f2 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	331c      	adds	r3, #28
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fa31 	bl	800283e <lps22hb_auto_add_inc_set>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e004      	b.n	80023f2 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023fa:	b590      	push	{r4, r7, lr}
 80023fc:	b089      	sub	sp, #36	; 0x24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	461a      	mov	r2, r3
 8002406:	460b      	mov	r3, r1
 8002408:	72fb      	strb	r3, [r7, #11]
 800240a:	4613      	mov	r3, r2
 800240c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d121      	bne.n	8002462 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	83fb      	strh	r3, [r7, #30]
 8002422:	e018      	b.n	8002456 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	695c      	ldr	r4, [r3, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	7b1b      	ldrb	r3, [r3, #12]
 800242c:	b298      	uxth	r0, r3
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	b29a      	uxth	r2, r3
 8002432:	8bfb      	ldrh	r3, [r7, #30]
 8002434:	4413      	add	r3, r2
 8002436:	b299      	uxth	r1, r3
 8002438:	8bfb      	ldrh	r3, [r7, #30]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	441a      	add	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	47a0      	blx	r4
 8002442:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e013      	b.n	8002478 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002450:	8bfb      	ldrh	r3, [r7, #30]
 8002452:	3301      	adds	r3, #1
 8002454:	83fb      	strh	r3, [r7, #30]
 8002456:	8bfa      	ldrh	r2, [r7, #30]
 8002458:	893b      	ldrh	r3, [r7, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	d3e2      	bcc.n	8002424 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	e00a      	b.n	8002478 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	695c      	ldr	r4, [r3, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	7b1b      	ldrb	r3, [r3, #12]
 800246a:	b298      	uxth	r0, r3
 800246c:	7afb      	ldrb	r3, [r7, #11]
 800246e:	b299      	uxth	r1, r3
 8002470:	893b      	ldrh	r3, [r7, #8]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	47a0      	blx	r4
 8002476:	4603      	mov	r3, r0
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3724      	adds	r7, #36	; 0x24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	460b      	mov	r3, r1
 800248e:	72fb      	strb	r3, [r7, #11]
 8002490:	4613      	mov	r3, r2
 8002492:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d121      	bne.n	80024e8 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	83fb      	strh	r3, [r7, #30]
 80024a8:	e018      	b.n	80024dc <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	691c      	ldr	r4, [r3, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	7b1b      	ldrb	r3, [r3, #12]
 80024b2:	b298      	uxth	r0, r3
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	8bfb      	ldrh	r3, [r7, #30]
 80024ba:	4413      	add	r3, r2
 80024bc:	b299      	uxth	r1, r3
 80024be:	8bfb      	ldrh	r3, [r7, #30]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	441a      	add	r2, r3
 80024c4:	2301      	movs	r3, #1
 80024c6:	47a0      	blx	r4
 80024c8:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	e013      	b.n	80024fe <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80024d6:	8bfb      	ldrh	r3, [r7, #30]
 80024d8:	3301      	adds	r3, #1
 80024da:	83fb      	strh	r3, [r7, #30]
 80024dc:	8bfa      	ldrh	r2, [r7, #30]
 80024de:	893b      	ldrh	r3, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3e2      	bcc.n	80024aa <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	e00a      	b.n	80024fe <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	691c      	ldr	r4, [r3, #16]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	7b1b      	ldrb	r3, [r3, #12]
 80024f0:	b298      	uxth	r0, r3
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	b299      	uxth	r1, r3
 80024f6:	893b      	ldrh	r3, [r7, #8]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	47a0      	blx	r4
 80024fc:	4603      	mov	r3, r0
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}

08002506 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002506:	b590      	push	{r4, r7, lr}
 8002508:	b087      	sub	sp, #28
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	461a      	mov	r2, r3
 8002512:	460b      	mov	r3, r1
 8002514:	72fb      	strb	r3, [r7, #11]
 8002516:	4613      	mov	r3, r2
 8002518:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685c      	ldr	r4, [r3, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6898      	ldr	r0, [r3, #8]
 8002522:	893b      	ldrh	r3, [r7, #8]
 8002524:	7af9      	ldrb	r1, [r7, #11]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	47a0      	blx	r4
 800252a:	6178      	str	r0, [r7, #20]
  return ret;
 800252c:	697b      	ldr	r3, [r7, #20]
}
 800252e:	4618      	mov	r0, r3
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}

08002536 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002536:	b590      	push	{r4, r7, lr}
 8002538:	b087      	sub	sp, #28
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	461a      	mov	r2, r3
 8002542:	460b      	mov	r3, r1
 8002544:	72fb      	strb	r3, [r7, #11]
 8002546:	4613      	mov	r3, r2
 8002548:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681c      	ldr	r4, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6898      	ldr	r0, [r3, #8]
 8002552:	893b      	ldrh	r3, [r7, #8]
 8002554:	7af9      	ldrb	r1, [r7, #11]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	47a0      	blx	r4
 800255a:	6178      	str	r0, [r7, #20]
  return ret;
 800255c:	697b      	ldr	r3, [r7, #20]
}
 800255e:	4618      	mov	r0, r3
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd90      	pop	{r4, r7, pc}
	...

08002568 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002594 <lps22hb_from_lsb_to_hpa+0x2c>
 800257e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002582:	eef0 7a66 	vmov.f32	s15, s13
}
 8002586:	eeb0 0a67 	vmov.f32	s0, s15
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	49800000 	.word	0x49800000

08002598 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80025a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80025c8 <lps22hb_from_lsb_to_degc+0x30>
 80025b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025b6:	eef0 7a66 	vmov.f32	s15, s13
}
 80025ba:	eeb0 0a67 	vmov.f32	s0, s15
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	42c80000 	.word	0x42c80000

080025cc <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80025d8:	f107 0208 	add.w	r2, r7, #8
 80025dc:	2301      	movs	r3, #1
 80025de:	2110      	movs	r1, #16
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff90 	bl	8002506 <lps22hb_read_reg>
 80025e6:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	7a3b      	ldrb	r3, [r7, #8]
 80025f8:	f362 0341 	bfi	r3, r2, #1, #1
 80025fc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80025fe:	f107 0208 	add.w	r2, r7, #8
 8002602:	2301      	movs	r3, #1
 8002604:	2110      	movs	r1, #16
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff95 	bl	8002536 <lps22hb_write_reg>
 800260c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002624:	f107 0208 	add.w	r2, r7, #8
 8002628:	2301      	movs	r3, #1
 800262a:	2110      	movs	r1, #16
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff6a 	bl	8002506 <lps22hb_read_reg>
 8002632:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	b2da      	uxtb	r2, r3
 8002642:	7a3b      	ldrb	r3, [r7, #8]
 8002644:	f362 0383 	bfi	r3, r2, #2, #2
 8002648:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800264a:	f107 0208 	add.w	r2, r7, #8
 800264e:	2301      	movs	r3, #1
 8002650:	2110      	movs	r1, #16
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff6f 	bl	8002536 <lps22hb_write_reg>
 8002658:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002670:	f107 0208 	add.w	r2, r7, #8
 8002674:	2301      	movs	r3, #1
 8002676:	2110      	movs	r1, #16
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff44 	bl	8002506 <lps22hb_read_reg>
 800267e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	b2da      	uxtb	r2, r3
 800268e:	7a3b      	ldrb	r3, [r7, #8]
 8002690:	f362 1306 	bfi	r3, r2, #4, #3
 8002694:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002696:	f107 0208 	add.w	r2, r7, #8
 800269a:	2301      	movs	r3, #1
 800269c:	2110      	movs	r1, #16
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff49 	bl	8002536 <lps22hb_write_reg>
 80026a4:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80026ba:	f107 0208 	add.w	r2, r7, #8
 80026be:	2301      	movs	r3, #1
 80026c0:	2110      	movs	r1, #16
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff1f 	bl	8002506 <lps22hb_read_reg>
 80026c8:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 80026ca:	7a3b      	ldrb	r3, [r7, #8]
 80026cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d826      	bhi.n	8002724 <lps22hb_data_rate_get+0x74>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <lps22hb_data_rate_get+0x2c>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080026f5 	.word	0x080026f5
 80026e0:	080026fd 	.word	0x080026fd
 80026e4:	08002705 	.word	0x08002705
 80026e8:	0800270d 	.word	0x0800270d
 80026ec:	08002715 	.word	0x08002715
 80026f0:	0800271d 	.word	0x0800271d
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
      break;
 80026fa:	e017      	b.n	800272c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
      break;
 8002702:	e013      	b.n	800272c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2202      	movs	r2, #2
 8002708:	701a      	strb	r2, [r3, #0]
      break;
 800270a:	e00f      	b.n	800272c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2203      	movs	r2, #3
 8002710:	701a      	strb	r2, [r3, #0]
      break;
 8002712:	e00b      	b.n	800272c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	701a      	strb	r2, [r3, #0]
      break;
 800271a:	e007      	b.n	800272c <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2205      	movs	r2, #5
 8002720:	701a      	strb	r2, [r3, #0]
      break;
 8002722:	e003      	b.n	800272c <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
      break;
 800272a:	bf00      	nop
  }

  return ret;
 800272c:	68fb      	ldr	r3, [r7, #12]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop

08002738 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8002742:	f107 0208 	add.w	r2, r7, #8
 8002746:	2303      	movs	r3, #3
 8002748:	2128      	movs	r1, #40	; 0x28
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fedb 	bl	8002506 <lps22hb_read_reg>
 8002750:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8002752:	7abb      	ldrb	r3, [r7, #10]
 8002754:	461a      	mov	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	7a7a      	ldrb	r2, [r7, #9]
 8002762:	441a      	add	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	7a3a      	ldrb	r2, [r7, #8]
 8002770:	441a      	add	r2, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	021a      	lsls	r2, r3, #8
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	601a      	str	r2, [r3, #0]
  return ret;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8002794:	f107 0208 	add.w	r2, r7, #8
 8002798:	2302      	movs	r3, #2
 800279a:	212b      	movs	r1, #43	; 0x2b
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff feb2 	bl	8002506 <lps22hb_read_reg>
 80027a2:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80027a4:	7a7b      	ldrb	r3, [r7, #9]
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	7a3b      	ldrb	r3, [r7, #8]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4413      	add	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	801a      	strh	r2, [r3, #0]
  return ret;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 80027da:	2301      	movs	r3, #1
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	210f      	movs	r1, #15
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fe90 	bl	8002506 <lps22hb_read_reg>
 80027e6:	60f8      	str	r0, [r7, #12]
  return ret;
 80027e8:	68fb      	ldr	r3, [r7, #12]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 80027fe:	f107 0208 	add.w	r2, r7, #8
 8002802:	2301      	movs	r3, #1
 8002804:	211a      	movs	r1, #26
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fe7d 	bl	8002506 <lps22hb_read_reg>
 800280c:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	7a3b      	ldrb	r3, [r7, #8]
 800281e:	f362 0300 	bfi	r3, r2, #0, #1
 8002822:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002824:	f107 0208 	add.w	r2, r7, #8
 8002828:	2301      	movs	r3, #1
 800282a:	211a      	movs	r1, #26
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fe82 	bl	8002536 <lps22hb_write_reg>
 8002832:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002834:	68fb      	ldr	r3, [r7, #12]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800284a:	f107 0208 	add.w	r2, r7, #8
 800284e:	2301      	movs	r3, #1
 8002850:	2111      	movs	r1, #17
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fe57 	bl	8002506 <lps22hb_read_reg>
 8002858:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	7a3b      	ldrb	r3, [r7, #8]
 800286a:	f362 1304 	bfi	r3, r2, #4, #1
 800286e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002870:	f107 0208 	add.w	r2, r7, #8
 8002874:	2301      	movs	r3, #1
 8002876:	2111      	movs	r1, #17
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fe5c 	bl	8002536 <lps22hb_write_reg>
 800287e:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e04d      	b.n	8002944 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	7b1a      	ldrb	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80028e4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80028ea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e020      	b.n	8002944 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4798      	blx	r3
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e016      	b.n	8002944 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d112      	bne.n	8002944 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002928:	2301      	movs	r3, #1
 800292a:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	461a      	mov	r2, r3
 8002930:	2123      	movs	r1, #35	; 0x23
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fb55 	bl	8002fe2 <LSM303AGR_ACC_Write_Reg>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	e000      	b.n	8002946 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002944:	68fb      	ldr	r3, [r7, #12]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	080037f1 	.word	0x080037f1
 8002954:	08003853 	.word	0x08003853

08002958 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	331c      	adds	r3, #28
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f001 f94a 	bl	8003c00 <lsm303agr_xl_block_data_update_set>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	e02c      	b.n	80029d2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	331c      	adds	r3, #28
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f001 faed 	bl	8003f5e <lsm303agr_xl_fifo_mode_set>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e020      	b.n	80029d2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2205      	movs	r2, #5
 8002994:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	331c      	adds	r3, #28
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 f84e 	bl	8003a40 <lsm303agr_xl_data_rate_set>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e010      	b.n	80029d2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	331c      	adds	r3, #28
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f8c4 	bl	8003b44 <lsm303agr_xl_full_scale_set>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e004      	b.n	80029d2 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f87c 	bl	8002ae0 <LSM303AGR_ACC_Disable>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	e008      	b.n	8002a06 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	331c      	adds	r3, #28
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 fa55 	bl	8003ece <lsm303agr_xl_device_id_get>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	e000      	b.n	8002a32 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2200      	movs	r2, #0
 8002a56:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002a7c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	43c80000 	.word	0x43c80000

08002a98 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e014      	b.n	8002ad8 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f103 021c 	add.w	r2, r3, #28
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f000 ffbf 	bl	8003a40 <lsm303agr_xl_data_rate_set>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8002acc:	e004      	b.n	8002ad8 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e01f      	b.n	8002b36 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f103 021c 	add.w	r2, r3, #28
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	332a      	adds	r3, #42	; 0x2a
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f000 ffc2 	bl	8003a8c <lsm303agr_xl_data_rate_get>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	e010      	b.n	8002b36 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	331c      	adds	r3, #28
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ff90 	bl	8003a40 <lsm303agr_xl_data_rate_set>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e004      	b.n	8002b36 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	331c      	adds	r3, #28
 8002b50:	f107 020b 	add.w	r2, r7, #11
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 ff3e 	bl	80039d8 <lsm303agr_xl_operating_mode_get>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e031      	b.n	8002bcc <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002b68:	7afb      	ldrb	r3, [r7, #11]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d01a      	beq.n	8002ba4 <LSM303AGR_ACC_GetSensitivity+0x66>
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	dc22      	bgt.n	8002bb8 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d00a      	beq.n	8002b90 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002b7a:	e01d      	b.n	8002bb8 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fca8 	bl	80034d4 <LSM303AGR_ACC_GetSensitivityHR>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01a      	beq.n	8002bc0 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	e01d      	b.n	8002bcc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002b90:	6839      	ldr	r1, [r7, #0]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fce4 	bl	8003560 <LSM303AGR_ACC_GetSensitivityNM>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d012      	beq.n	8002bc4 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	e013      	b.n	8002bcc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fd20 	bl	80035ec <LSM303AGR_ACC_GetSensitivityLP>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb6:	e009      	b.n	8002bcc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	60fb      	str	r3, [r7, #12]
      break;
 8002bbe:	e004      	b.n	8002bca <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002bc0:	bf00      	nop
 8002bc2:	e002      	b.n	8002bca <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002bc8:	bf00      	nop
  }

  return ret;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	331c      	adds	r3, #28
 8002be6:	f107 020b 	add.w	r2, r7, #11
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fef3 	bl	80039d8 <lsm303agr_xl_operating_mode_get>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfc:	e09d      	b.n	8002d3a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	331c      	adds	r3, #28
 8002c02:	f107 020a 	add.w	r2, r7, #10
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 ff3f 	bl	8003a8c <lsm303agr_xl_data_rate_get>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295
 8002c18:	e08f      	b.n	8002d3a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d147      	bne.n	8002cb0 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002c20:	7abb      	ldrb	r3, [r7, #10]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d840      	bhi.n	8002ca8 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c55 	.word	0x08002c55
 8002c30:	08002c5f 	.word	0x08002c5f
 8002c34:	08002c69 	.word	0x08002c69
 8002c38:	08002c71 	.word	0x08002c71
 8002c3c:	08002c79 	.word	0x08002c79
 8002c40:	08002c81 	.word	0x08002c81
 8002c44:	08002c89 	.word	0x08002c89
 8002c48:	08002c91 	.word	0x08002c91
 8002c4c:	08002c99 	.word	0x08002c99
 8002c50:	08002ca1 	.word	0x08002ca1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
        break;
 8002c5c:	e06c      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c64:	601a      	str	r2, [r3, #0]
        break;
 8002c66:	e067      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002c6c:	601a      	str	r2, [r3, #0]
        break;
 8002c6e:	e063      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4a35      	ldr	r2, [pc, #212]	; (8002d48 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002c74:	601a      	str	r2, [r3, #0]
        break;
 8002c76:	e05f      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002c7c:	601a      	str	r2, [r3, #0]
        break;
 8002c7e:	e05b      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002c84:	601a      	str	r2, [r3, #0]
        break;
 8002c86:	e057      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002c8c:	601a      	str	r2, [r3, #0]
        break;
 8002c8e:	e053      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002c94:	601a      	str	r2, [r3, #0]
        break;
 8002c96:	e04f      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002c9c:	601a      	str	r2, [r3, #0]
        break;
 8002c9e:	e04b      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002ca4:	601a      	str	r2, [r3, #0]
        break;
 8002ca6:	e047      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	60fb      	str	r3, [r7, #12]
        break;
 8002cae:	e043      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002cb0:	7abb      	ldrb	r3, [r7, #10]
 8002cb2:	2b09      	cmp	r3, #9
 8002cb4:	d83c      	bhi.n	8002d30 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ce5 	.word	0x08002ce5
 8002cc0:	08002cef 	.word	0x08002cef
 8002cc4:	08002cf9 	.word	0x08002cf9
 8002cc8:	08002d01 	.word	0x08002d01
 8002ccc:	08002d09 	.word	0x08002d09
 8002cd0:	08002d11 	.word	0x08002d11
 8002cd4:	08002d19 	.word	0x08002d19
 8002cd8:	08002d21 	.word	0x08002d21
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002d29 	.word	0x08002d29
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
        break;
 8002cec:	e024      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002cf4:	601a      	str	r2, [r3, #0]
        break;
 8002cf6:	e01f      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002cfc:	601a      	str	r2, [r3, #0]
        break;
 8002cfe:	e01b      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002d04:	601a      	str	r2, [r3, #0]
        break;
 8002d06:	e017      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002d0c:	601a      	str	r2, [r3, #0]
        break;
 8002d0e:	e013      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002d14:	601a      	str	r2, [r3, #0]
        break;
 8002d16:	e00f      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002d1c:	601a      	str	r2, [r3, #0]
        break;
 8002d1e:	e00b      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002d24:	601a      	str	r2, [r3, #0]
        break;
 8002d26:	e007      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002d2c:	601a      	str	r2, [r3, #0]
        break;
 8002d2e:	e003      	b.n	8002d38 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	60fb      	str	r3, [r7, #12]
        break;
 8002d36:	bf00      	nop
    }
  }

  return ret;
 8002d38:	68fb      	ldr	r3, [r7, #12]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	41200000 	.word	0x41200000
 8002d48:	41c80000 	.word	0x41c80000
 8002d4c:	42480000 	.word	0x42480000
 8002d50:	42c80000 	.word	0x42c80000
 8002d54:	43480000 	.word	0x43480000
 8002d58:	43c80000 	.word	0x43c80000
 8002d5c:	44ca8000 	.word	0x44ca8000
 8002d60:	45a80000 	.word	0x45a80000
 8002d64:	44a80000 	.word	0x44a80000

08002d68 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d106      	bne.n	8002d8c <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002d7e:	ed97 0a00 	vldr	s0, [r7]
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fc78 	bl	8003678 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	e005      	b.n	8002d98 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002d8c:	ed97 0a00 	vldr	s0, [r7]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fcd3 	bl	800373c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002d96:	4603      	mov	r3, r0
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	331c      	adds	r3, #28
 8002db2:	f107 020b 	add.w	r2, r7, #11
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fee9 	bl	8003b90 <lsm303agr_xl_full_scale_get>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	e023      	b.n	8002e12 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d81b      	bhi.n	8002e08 <LSM303AGR_ACC_GetFullScale+0x68>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002de9 	.word	0x08002de9
 8002ddc:	08002df1 	.word	0x08002df1
 8002de0:	08002df9 	.word	0x08002df9
 8002de4:	08002e01 	.word	0x08002e01
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
      break;
 8002dee:	e00f      	b.n	8002e10 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2204      	movs	r2, #4
 8002df4:	601a      	str	r2, [r3, #0]
      break;
 8002df6:	e00b      	b.n	8002e10 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	601a      	str	r2, [r3, #0]
      break;
 8002dfe:	e007      	b.n	8002e10 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2210      	movs	r2, #16
 8002e04:	601a      	str	r2, [r3, #0]
      break;
 8002e06:	e003      	b.n	8002e10 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0c:	60fb      	str	r3, [r7, #12]
      break;
 8002e0e:	bf00      	nop
  }

  return ret;
 8002e10:	68fb      	ldr	r3, [r7, #12]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop

08002e1c <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	dd0b      	ble.n	8002e44 <LSM303AGR_ACC_SetFullScale+0x28>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	dd06      	ble.n	8002e40 <LSM303AGR_ACC_SetFullScale+0x24>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	dc01      	bgt.n	8002e3c <LSM303AGR_ACC_SetFullScale+0x20>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e004      	b.n	8002e46 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e002      	b.n	8002e46 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002e44:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002e46:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	331c      	adds	r3, #28
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fe77 	bl	8003b44 <lsm303agr_xl_full_scale_set>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e60:	e000      	b.n	8002e64 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	331c      	adds	r3, #28
 8002e82:	f107 020f 	add.w	r2, r7, #15
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fda5 	bl	80039d8 <lsm303agr_xl_operating_mode_get>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	e04a      	b.n	8002f30 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d00c      	beq.n	8002eba <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	dc0e      	bgt.n	8002ec2 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d003      	beq.n	8002eb4 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002eac:	e009      	b.n	8002ec2 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	83fb      	strh	r3, [r7, #30]
      break;
 8002eb2:	e00a      	b.n	8002eca <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002eb4:	2340      	movs	r3, #64	; 0x40
 8002eb6:	83fb      	strh	r3, [r7, #30]
      break;
 8002eb8:	e007      	b.n	8002eca <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ebe:	83fb      	strh	r3, [r7, #30]
      break;
 8002ec0:	e003      	b.n	8002eca <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	61bb      	str	r3, [r7, #24]
      break;
 8002ec8:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d101      	bne.n	8002ed6 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	e02c      	b.n	8002f30 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	331c      	adds	r3, #28
 8002eda:	f107 0210 	add.w	r2, r7, #16
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 feb3 	bl	8003c4c <lsm303agr_acceleration_raw_get>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	e01e      	b.n	8002f30 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002ef2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002efc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f00:	b21a      	sxth	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002f06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f10:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f14:	b21a      	sxth	r2, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002f1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	809a      	strh	r2, [r3, #4]

  return ret;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002f48:	f107 0310 	add.w	r3, r7, #16
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff8c 	bl	8002e6c <LSM303AGR_ACC_GetAxesRaw>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	e03c      	b.n	8002fda <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fde9 	bl	8002b3e <LSM303AGR_ACC_GetSensitivity>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	e030      	b.n	8002fda <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002f78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f90:	ee17 2a90 	vmov	r2, s15
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002f98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fb0:	ee17 2a90 	vmov	r2, s15
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002fb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fd0:	ee17 2a90 	vmov	r2, s15
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	70fb      	strb	r3, [r7, #3]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f103 001c 	add.w	r0, r3, #28
 8002ff8:	1cba      	adds	r2, r7, #2
 8002ffa:	78f9      	ldrb	r1, [r7, #3]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f000 fcd3 	bl	80039a8 <lsm303agr_write_reg>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	e000      	b.n	8003010 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800302c:	f04f 33ff 	mov.w	r3, #4294967295
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e04b      	b.n	80030cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	7b1a      	ldrb	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003070:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8003076:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e01e      	b.n	80030cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4798      	blx	r3
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e014      	b.n	80030cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	331c      	adds	r3, #28
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ff75 	bl	8003faa <lsm303agr_mag_i2c_interface_set>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e000      	b.n	80030ce <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80030cc:	68fb      	ldr	r3, [r7, #12]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	080038b5 	.word	0x080038b5
 80030dc:	08003917 	.word	0x08003917

080030e0 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	331c      	adds	r3, #28
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fe7c 	bl	8003dec <lsm303agr_mag_block_data_update_set>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	e028      	b.n	8003152 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	331c      	adds	r3, #28
 8003104:	2102      	movs	r1, #2
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fdeb 	bl	8003ce2 <lsm303agr_mag_operating_mode_set>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	e01c      	b.n	8003152 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	331c      	adds	r3, #28
 800311c:	2103      	movs	r1, #3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fe05 	bl	8003d2e <lsm303agr_mag_data_rate_set>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	e010      	b.n	8003152 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	331c      	adds	r3, #28
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f000 feeb 	bl	8003f12 <lsm303agr_mag_self_test_set>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e004      	b.n	8003152 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f874 	bl	8003250 <LSM303AGR_MAG_Disable>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	e004      	b.n	800317e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	331c      	adds	r3, #28
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 feaa 	bl	8003ef0 <lsm303agr_mag_device_id_get>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	e000      	b.n	80031aa <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2232      	movs	r2, #50	; 0x32
 80031e6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4a04      	ldr	r2, [pc, #16]	; (800320c <LSM303AGR_MAG_GetCapabilities+0x58>)
 80031fc:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	42c80000 	.word	0x42c80000

08003210 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e010      	b.n	8003248 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	331c      	adds	r3, #28
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fd58 	bl	8003ce2 <lsm303agr_mag_operating_mode_set>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	e004      	b.n	8003248 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e010      	b.n	8003288 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	331c      	adds	r3, #28
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fd38 	bl	8003ce2 <lsm303agr_mag_operating_mode_set>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	e004      	b.n	8003288 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80032a0:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	331c      	adds	r3, #28
 80032c2:	f107 020b 	add.w	r2, r7, #11
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fd57 	bl	8003d7c <lsm303agr_mag_data_rate_get>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	e023      	b.n	8003322 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80032da:	7afb      	ldrb	r3, [r7, #11]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d81b      	bhi.n	8003318 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	08003301 	.word	0x08003301
 80032f0:	08003309 	.word	0x08003309
 80032f4:	08003311 	.word	0x08003311
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80032fc:	601a      	str	r2, [r3, #0]
      break;
 80032fe:	e00f      	b.n	8003320 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003304:	601a      	str	r2, [r3, #0]
      break;
 8003306:	e00b      	b.n	8003320 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 800330c:	601a      	str	r2, [r3, #0]
      break;
 800330e:	e007      	b.n	8003320 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4a09      	ldr	r2, [pc, #36]	; (8003338 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003314:	601a      	str	r2, [r3, #0]
      break;
 8003316:	e003      	b.n	8003320 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003318:	f04f 33ff 	mov.w	r3, #4294967295
 800331c:	60fb      	str	r3, [r7, #12]
      break;
 800331e:	bf00      	nop
  }

  return ret;
 8003320:	68fb      	ldr	r3, [r7, #12]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	41200000 	.word	0x41200000
 8003330:	41a00000 	.word	0x41a00000
 8003334:	42480000 	.word	0x42480000
 8003338:	42c80000 	.word	0x42c80000

0800333c <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003348:	edd7 7a00 	vldr	s15, [r7]
 800334c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003358:	d801      	bhi.n	800335e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800335a:	2300      	movs	r3, #0
 800335c:	e016      	b.n	800338c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800335e:	edd7 7a00 	vldr	s15, [r7]
 8003362:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d801      	bhi.n	8003374 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003370:	2301      	movs	r3, #1
 8003372:	e00b      	b.n	800338c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003374:	edd7 7a00 	vldr	s15, [r7]
 8003378:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80033b4 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d801      	bhi.n	800338a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8003386:	2302      	movs	r3, #2
 8003388:	e000      	b.n	800338c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800338a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 800338c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	331c      	adds	r3, #28
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fcc9 	bl	8003d2e <lsm303agr_mag_data_rate_set>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	e000      	b.n	80033aa <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	42480000 	.word	0x42480000

080033b8 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2232      	movs	r2, #50	; 0x32
 80033c6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	331c      	adds	r3, #28
 80033fc:	f107 0208 	add.w	r2, r7, #8
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fd18 	bl	8003e38 <lsm303agr_magnetic_raw_get>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	e00c      	b.n	800342e <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003414:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800341c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003424:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	331c      	adds	r3, #28
 8003444:	f107 0210 	add.w	r2, r7, #16
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fcf4 	bl	8003e38 <lsm303agr_magnetic_raw_get>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e036      	b.n	80034ca <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4619      	mov	r1, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ff14 	bl	8003290 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003468:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003474:	edd7 7a03 	vldr	s15, [r7, #12]
 8003478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003480:	ee17 2a90 	vmov	r2, s15
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003494:	edd7 7a03 	vldr	s15, [r7, #12]
 8003498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a0:	ee17 2a90 	vmov	r2, s15
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80034a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c0:	ee17 2a90 	vmov	r2, s15
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	331c      	adds	r3, #28
 80034e6:	f107 020b 	add.w	r2, r7, #11
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fb4f 	bl	8003b90 <lsm303agr_xl_full_scale_get>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
 80034fc:	e023      	b.n	8003546 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d81b      	bhi.n	800353c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	0800351d 	.word	0x0800351d
 8003510:	08003525 	.word	0x08003525
 8003514:	0800352d 	.word	0x0800352d
 8003518:	08003535 	.word	0x08003535
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003520:	601a      	str	r2, [r3, #0]
      break;
 8003522:	e00f      	b.n	8003544 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003528:	601a      	str	r2, [r3, #0]
      break;
 800352a:	e00b      	b.n	8003544 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003530:	601a      	str	r2, [r3, #0]
      break;
 8003532:	e007      	b.n	8003544 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003538:	601a      	str	r2, [r3, #0]
      break;
 800353a:	e003      	b.n	8003544 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	60fb      	str	r3, [r7, #12]
      break;
 8003542:	bf00      	nop
  }

  return ret;
 8003544:	68fb      	ldr	r3, [r7, #12]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	3f7ae148 	.word	0x3f7ae148
 8003554:	3ff9999a 	.word	0x3ff9999a
 8003558:	4079999a 	.word	0x4079999a
 800355c:	413b851f 	.word	0x413b851f

08003560 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	331c      	adds	r3, #28
 8003572:	f107 020b 	add.w	r2, r7, #11
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fb09 	bl	8003b90 <lsm303agr_xl_full_scale_get>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	e023      	b.n	80035d2 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d81b      	bhi.n	80035c8 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035b1 	.word	0x080035b1
 80035a0:	080035b9 	.word	0x080035b9
 80035a4:	080035c1 	.word	0x080035c1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80035ac:	601a      	str	r2, [r3, #0]
      break;
 80035ae:	e00f      	b.n	80035d0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80035b4:	601a      	str	r2, [r3, #0]
      break;
 80035b6:	e00b      	b.n	80035d0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80035bc:	601a      	str	r2, [r3, #0]
      break;
 80035be:	e007      	b.n	80035d0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80035c4:	601a      	str	r2, [r3, #0]
      break;
 80035c6:	e003      	b.n	80035d0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
 80035cc:	60fb      	str	r3, [r7, #12]
      break;
 80035ce:	bf00      	nop
  }

  return ret;
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	4079999a 	.word	0x4079999a
 80035e0:	40fa3d71 	.word	0x40fa3d71
 80035e4:	417a147b 	.word	0x417a147b
 80035e8:	423b999a 	.word	0x423b999a

080035ec <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	331c      	adds	r3, #28
 80035fe:	f107 020b 	add.w	r2, r7, #11
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fac3 	bl	8003b90 <lsm303agr_xl_full_scale_get>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003610:	f04f 33ff 	mov.w	r3, #4294967295
 8003614:	e023      	b.n	800365e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003616:	7afb      	ldrb	r3, [r7, #11]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d81b      	bhi.n	8003654 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003635 	.word	0x08003635
 8003628:	0800363d 	.word	0x0800363d
 800362c:	08003645 	.word	0x08003645
 8003630:	0800364d 	.word	0x0800364d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003638:	601a      	str	r2, [r3, #0]
      break;
 800363a:	e00f      	b.n	800365c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4a0b      	ldr	r2, [pc, #44]	; (800366c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003640:	601a      	str	r2, [r3, #0]
      break;
 8003642:	e00b      	b.n	800365c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003648:	601a      	str	r2, [r3, #0]
      break;
 800364a:	e007      	b.n	800365c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003650:	601a      	str	r2, [r3, #0]
      break;
 8003652:	e003      	b.n	800365c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	60fb      	str	r3, [r7, #12]
      break;
 800365a:	bf00      	nop
  }

  return ret;
 800365c:	68fb      	ldr	r3, [r7, #12]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	417a147b 	.word	0x417a147b
 800366c:	41fa147b 	.word	0x41fa147b
 8003670:	427a147b 	.word	0x427a147b
 8003674:	433b947b 	.word	0x433b947b

08003678 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003684:	edd7 7a00 	vldr	s15, [r7]
 8003688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800368c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003694:	d801      	bhi.n	800369a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003696:	2301      	movs	r3, #1
 8003698:	e037      	b.n	800370a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800369a:	edd7 7a00 	vldr	s15, [r7]
 800369e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036aa:	d801      	bhi.n	80036b0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e02c      	b.n	800370a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036b0:	edd7 7a00 	vldr	s15, [r7]
 80036b4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80036b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d801      	bhi.n	80036c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80036c2:	2303      	movs	r3, #3
 80036c4:	e021      	b.n	800370a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036c6:	edd7 7a00 	vldr	s15, [r7]
 80036ca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003730 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80036ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	d801      	bhi.n	80036dc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80036d8:	2304      	movs	r3, #4
 80036da:	e016      	b.n	800370a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036dc:	edd7 7a00 	vldr	s15, [r7]
 80036e0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003734 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80036e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	d801      	bhi.n	80036f2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80036ee:	2305      	movs	r3, #5
 80036f0:	e00b      	b.n	800370a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80036f2:	edd7 7a00 	vldr	s15, [r7]
 80036f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003738 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80036fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	d801      	bhi.n	8003708 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003704:	2306      	movs	r3, #6
 8003706:	e000      	b.n	800370a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003708:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800370a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	331c      	adds	r3, #28
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f993 	bl	8003a40 <lsm303agr_xl_data_rate_set>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	e000      	b.n	8003728 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	42480000 	.word	0x42480000
 8003734:	42c80000 	.word	0x42c80000
 8003738:	43480000 	.word	0x43480000

0800373c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003748:	edd7 7a00 	vldr	s15, [r7]
 800374c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	d801      	bhi.n	800375e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800375a:	2301      	movs	r3, #1
 800375c:	e037      	b.n	80037ce <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800375e:	edd7 7a00 	vldr	s15, [r7]
 8003762:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	d801      	bhi.n	8003774 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003770:	2302      	movs	r3, #2
 8003772:	e02c      	b.n	80037ce <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003774:	edd7 7a00 	vldr	s15, [r7]
 8003778:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800377c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	d801      	bhi.n	800378a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003786:	2303      	movs	r3, #3
 8003788:	e021      	b.n	80037ce <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800378a:	edd7 7a00 	vldr	s15, [r7]
 800378e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80037e4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	d801      	bhi.n	80037a0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 800379c:	2304      	movs	r3, #4
 800379e:	e016      	b.n	80037ce <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037a0:	edd7 7a00 	vldr	s15, [r7]
 80037a4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80037e8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80037a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d801      	bhi.n	80037b6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80037b2:	2305      	movs	r3, #5
 80037b4:	e00b      	b.n	80037ce <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037b6:	edd7 7a00 	vldr	s15, [r7]
 80037ba:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80037be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	d801      	bhi.n	80037cc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80037c8:	2306      	movs	r3, #6
 80037ca:	e000      	b.n	80037ce <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037cc:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	42480000 	.word	0x42480000
 80037e8:	42c80000 	.word	0x42c80000
 80037ec:	43480000 	.word	0x43480000

080037f0 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	461a      	mov	r2, r3
 80037fc:	460b      	mov	r3, r1
 80037fe:	72fb      	strb	r3, [r7, #11]
 8003800:	4613      	mov	r3, r2
 8003802:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10e      	bne.n	800382e <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	695c      	ldr	r4, [r3, #20]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	7b1b      	ldrb	r3, [r3, #12]
 8003818:	b298      	uxth	r0, r3
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003820:	b2db      	uxtb	r3, r3
 8003822:	b299      	uxth	r1, r3
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	47a0      	blx	r4
 800382a:	4603      	mov	r3, r0
 800382c:	e00d      	b.n	800384a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	695c      	ldr	r4, [r3, #20]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	7b1b      	ldrb	r3, [r3, #12]
 8003836:	b298      	uxth	r0, r3
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383e:	b2db      	uxtb	r3, r3
 8003840:	b299      	uxth	r1, r3
 8003842:	893b      	ldrh	r3, [r7, #8]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	47a0      	blx	r4
 8003848:	4603      	mov	r3, r0
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd90      	pop	{r4, r7, pc}

08003852 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003852:	b590      	push	{r4, r7, lr}
 8003854:	b087      	sub	sp, #28
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	461a      	mov	r2, r3
 800385e:	460b      	mov	r3, r1
 8003860:	72fb      	strb	r3, [r7, #11]
 8003862:	4613      	mov	r3, r2
 8003864:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10e      	bne.n	8003890 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	691c      	ldr	r4, [r3, #16]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	7b1b      	ldrb	r3, [r3, #12]
 800387a:	b298      	uxth	r0, r3
 800387c:	7afb      	ldrb	r3, [r7, #11]
 800387e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003882:	b2db      	uxtb	r3, r3
 8003884:	b299      	uxth	r1, r3
 8003886:	893b      	ldrh	r3, [r7, #8]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	47a0      	blx	r4
 800388c:	4603      	mov	r3, r0
 800388e:	e00d      	b.n	80038ac <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	691c      	ldr	r4, [r3, #16]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	7b1b      	ldrb	r3, [r3, #12]
 8003898:	b298      	uxth	r0, r3
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	b299      	uxth	r1, r3
 80038a4:	893b      	ldrh	r3, [r7, #8]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	47a0      	blx	r4
 80038aa:	4603      	mov	r3, r0
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd90      	pop	{r4, r7, pc}

080038b4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	461a      	mov	r2, r3
 80038c0:	460b      	mov	r3, r1
 80038c2:	72fb      	strb	r3, [r7, #11]
 80038c4:	4613      	mov	r3, r2
 80038c6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10e      	bne.n	80038f2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	695c      	ldr	r4, [r3, #20]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	7b1b      	ldrb	r3, [r3, #12]
 80038dc:	b298      	uxth	r0, r3
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	b299      	uxth	r1, r3
 80038e8:	893b      	ldrh	r3, [r7, #8]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	47a0      	blx	r4
 80038ee:	4603      	mov	r3, r0
 80038f0:	e00d      	b.n	800390e <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	695c      	ldr	r4, [r3, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	7b1b      	ldrb	r3, [r3, #12]
 80038fa:	b298      	uxth	r0, r3
 80038fc:	7afb      	ldrb	r3, [r7, #11]
 80038fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003902:	b2db      	uxtb	r3, r3
 8003904:	b299      	uxth	r1, r3
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	47a0      	blx	r4
 800390c:	4603      	mov	r3, r0
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}

08003916 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003916:	b590      	push	{r4, r7, lr}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	461a      	mov	r2, r3
 8003922:	460b      	mov	r3, r1
 8003924:	72fb      	strb	r3, [r7, #11]
 8003926:	4613      	mov	r3, r2
 8003928:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10e      	bne.n	8003954 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	691c      	ldr	r4, [r3, #16]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	7b1b      	ldrb	r3, [r3, #12]
 800393e:	b298      	uxth	r0, r3
 8003940:	7afb      	ldrb	r3, [r7, #11]
 8003942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003946:	b2db      	uxtb	r3, r3
 8003948:	b299      	uxth	r1, r3
 800394a:	893b      	ldrh	r3, [r7, #8]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	47a0      	blx	r4
 8003950:	4603      	mov	r3, r0
 8003952:	e00d      	b.n	8003970 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	691c      	ldr	r4, [r3, #16]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	7b1b      	ldrb	r3, [r3, #12]
 800395c:	b298      	uxth	r0, r3
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003964:	b2db      	uxtb	r3, r3
 8003966:	b299      	uxth	r1, r3
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	47a0      	blx	r4
 800396e:	4603      	mov	r3, r0
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd90      	pop	{r4, r7, pc}

08003978 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	461a      	mov	r2, r3
 8003984:	460b      	mov	r3, r1
 8003986:	72fb      	strb	r3, [r7, #11]
 8003988:	4613      	mov	r3, r2
 800398a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685c      	ldr	r4, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6898      	ldr	r0, [r3, #8]
 8003994:	893b      	ldrh	r3, [r7, #8]
 8003996:	7af9      	ldrb	r1, [r7, #11]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	47a0      	blx	r4
 800399c:	6178      	str	r0, [r7, #20]
  return ret;
 800399e:	697b      	ldr	r3, [r7, #20]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}

080039a8 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	460b      	mov	r3, r1
 80039b6:	72fb      	strb	r3, [r7, #11]
 80039b8:	4613      	mov	r3, r2
 80039ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681c      	ldr	r4, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6898      	ldr	r0, [r3, #8]
 80039c4:	893b      	ldrh	r3, [r7, #8]
 80039c6:	7af9      	ldrb	r1, [r7, #11]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	47a0      	blx	r4
 80039cc:	6178      	str	r0, [r7, #20]
  return ret;
 80039ce:	697b      	ldr	r3, [r7, #20]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}

080039d8 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80039e2:	f107 020c 	add.w	r2, r7, #12
 80039e6:	2301      	movs	r3, #1
 80039e8:	2120      	movs	r1, #32
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ffc4 	bl	8003978 <lsm303agr_read_reg>
 80039f0:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80039f8:	f107 0210 	add.w	r2, r7, #16
 80039fc:	2301      	movs	r3, #1
 80039fe:	2123      	movs	r1, #35	; 0x23
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ffb9 	bl	8003978 <lsm303agr_read_reg>
 8003a06:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003a08:	7b3b      	ldrb	r3, [r7, #12]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e00c      	b.n	8003a36 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003a1c:	7c3b      	ldrb	r3, [r7, #16]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e002      	b.n	8003a36 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003a36:	697b      	ldr	r3, [r7, #20]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003a4c:	f107 0208 	add.w	r2, r7, #8
 8003a50:	2301      	movs	r3, #1
 8003a52:	2120      	movs	r1, #32
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff8f 	bl	8003978 <lsm303agr_read_reg>
 8003a5a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	7a3b      	ldrb	r3, [r7, #8]
 8003a6c:	f362 1307 	bfi	r3, r2, #4, #4
 8003a70:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003a72:	f107 0208 	add.w	r2, r7, #8
 8003a76:	2301      	movs	r3, #1
 8003a78:	2120      	movs	r1, #32
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ff94 	bl	80039a8 <lsm303agr_write_reg>
 8003a80:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003a96:	f107 0208 	add.w	r2, r7, #8
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff6a 	bl	8003978 <lsm303agr_read_reg>
 8003aa4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003aa6:	7a3b      	ldrb	r3, [r7, #8]
 8003aa8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d83e      	bhi.n	8003b30 <lsm303agr_xl_data_rate_get+0xa4>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <lsm303agr_xl_data_rate_get+0x2c>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003af1 	.word	0x08003af1
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003b01 	.word	0x08003b01
 8003acc:	08003b09 	.word	0x08003b09
 8003ad0:	08003b11 	.word	0x08003b11
 8003ad4:	08003b19 	.word	0x08003b19
 8003ad8:	08003b21 	.word	0x08003b21
 8003adc:	08003b29 	.word	0x08003b29
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e027      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
      break;
 8003aee:	e023      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	701a      	strb	r2, [r3, #0]
      break;
 8003af6:	e01f      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2203      	movs	r2, #3
 8003afc:	701a      	strb	r2, [r3, #0]
      break;
 8003afe:	e01b      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2204      	movs	r2, #4
 8003b04:	701a      	strb	r2, [r3, #0]
      break;
 8003b06:	e017      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	e013      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2206      	movs	r2, #6
 8003b14:	701a      	strb	r2, [r3, #0]
      break;
 8003b16:	e00f      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2207      	movs	r2, #7
 8003b1c:	701a      	strb	r2, [r3, #0]
      break;
 8003b1e:	e00b      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2208      	movs	r2, #8
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e007      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2209      	movs	r2, #9
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	e003      	b.n	8003b38 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	bf00      	nop
  }

  return ret;
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop

08003b44 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b50:	f107 0208 	add.w	r2, r7, #8
 8003b54:	2301      	movs	r3, #1
 8003b56:	2123      	movs	r1, #35	; 0x23
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff0d 	bl	8003978 <lsm303agr_read_reg>
 8003b5e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	7a3b      	ldrb	r3, [r7, #8]
 8003b70:	f362 1305 	bfi	r3, r2, #4, #2
 8003b74:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b76:	f107 0208 	add.w	r2, r7, #8
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	2123      	movs	r1, #35	; 0x23
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ff12 	bl	80039a8 <lsm303agr_write_reg>
 8003b84:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b9a:	f107 0208 	add.w	r2, r7, #8
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	2123      	movs	r1, #35	; 0x23
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fee8 	bl	8003978 <lsm303agr_read_reg>
 8003ba8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003baa:	7a3b      	ldrb	r3, [r7, #8]
 8003bac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d81a      	bhi.n	8003bec <lsm303agr_xl_full_scale_get+0x5c>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <lsm303agr_xl_full_scale_get+0x2c>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bd5 	.word	0x08003bd5
 8003bc4:	08003bdd 	.word	0x08003bdd
 8003bc8:	08003be5 	.word	0x08003be5
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
      break;
 8003bd2:	e00f      	b.n	8003bf4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
      break;
 8003bda:	e00b      	b.n	8003bf4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]
      break;
 8003be2:	e007      	b.n	8003bf4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2203      	movs	r2, #3
 8003be8:	701a      	strb	r2, [r3, #0]
      break;
 8003bea:	e003      	b.n	8003bf4 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
      break;
 8003bf2:	bf00      	nop
  }

  return ret;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop

08003c00 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c0c:	f107 0208 	add.w	r2, r7, #8
 8003c10:	2301      	movs	r3, #1
 8003c12:	2123      	movs	r1, #35	; 0x23
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff feaf 	bl	8003978 <lsm303agr_read_reg>
 8003c1a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	7a3b      	ldrb	r3, [r7, #8]
 8003c2c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003c30:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c32:	f107 0208 	add.w	r2, r7, #8
 8003c36:	2301      	movs	r3, #1
 8003c38:	2123      	movs	r1, #35	; 0x23
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff feb4 	bl	80039a8 <lsm303agr_write_reg>
 8003c40:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003c56:	f107 020c 	add.w	r2, r7, #12
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	2128      	movs	r1, #40	; 0x28
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fe8a 	bl	8003978 <lsm303agr_read_reg>
 8003c64:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c66:	7b7b      	ldrb	r3, [r7, #13]
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	7b3b      	ldrb	r3, [r7, #12]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b21a      	sxth	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	b212      	sxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3302      	adds	r3, #2
 8003c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	3302      	adds	r3, #2
 8003cac:	b212      	sxth	r2, r2
 8003cae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003cb0:	7c7a      	ldrb	r2, [r7, #17]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	b212      	sxth	r2, r2
 8003cb8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	7c3b      	ldrb	r3, [r7, #16]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	b212      	sxth	r2, r2
 8003cd6:	801a      	strh	r2, [r3, #0]
  return ret;
 8003cd8:	697b      	ldr	r3, [r7, #20]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003cee:	f107 0208 	add.w	r2, r7, #8
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	2160      	movs	r1, #96	; 0x60
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff fe3e 	bl	8003978 <lsm303agr_read_reg>
 8003cfc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	7a3b      	ldrb	r3, [r7, #8]
 8003d0e:	f362 0301 	bfi	r3, r2, #0, #2
 8003d12:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d14:	f107 0208 	add.w	r2, r7, #8
 8003d18:	2301      	movs	r3, #1
 8003d1a:	2160      	movs	r1, #96	; 0x60
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fe43 	bl	80039a8 <lsm303agr_write_reg>
 8003d22:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003d24:	68fb      	ldr	r3, [r7, #12]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d3a:	f107 0208 	add.w	r2, r7, #8
 8003d3e:	2301      	movs	r3, #1
 8003d40:	2160      	movs	r1, #96	; 0x60
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fe18 	bl	8003978 <lsm303agr_read_reg>
 8003d48:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10f      	bne.n	8003d70 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	7a3b      	ldrb	r3, [r7, #8]
 8003d5a:	f362 0383 	bfi	r3, r2, #2, #2
 8003d5e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d60:	f107 0208 	add.w	r2, r7, #8
 8003d64:	2301      	movs	r3, #1
 8003d66:	2160      	movs	r1, #96	; 0x60
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fe1d 	bl	80039a8 <lsm303agr_write_reg>
 8003d6e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003d70:	68fb      	ldr	r3, [r7, #12]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d86:	f107 0208 	add.w	r2, r7, #8
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	2160      	movs	r1, #96	; 0x60
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fdf2 	bl	8003978 <lsm303agr_read_reg>
 8003d94:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003d96:	7a3b      	ldrb	r3, [r7, #8]
 8003d98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d81a      	bhi.n	8003dd8 <lsm303agr_mag_data_rate_get+0x5c>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <lsm303agr_mag_data_rate_get+0x2c>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dc1 	.word	0x08003dc1
 8003db0:	08003dc9 	.word	0x08003dc9
 8003db4:	08003dd1 	.word	0x08003dd1
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
      break;
 8003dbe:	e00f      	b.n	8003de0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
      break;
 8003dc6:	e00b      	b.n	8003de0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]
      break;
 8003dce:	e007      	b.n	8003de0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	701a      	strb	r2, [r3, #0]
      break;
 8003dd6:	e003      	b.n	8003de0 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
      break;
 8003dde:	bf00      	nop
  }

  return ret;
 8003de0:	68fb      	ldr	r3, [r7, #12]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop

08003dec <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003df8:	f107 0208 	add.w	r2, r7, #8
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	2162      	movs	r1, #98	; 0x62
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff fdb9 	bl	8003978 <lsm303agr_read_reg>
 8003e06:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	7a3b      	ldrb	r3, [r7, #8]
 8003e18:	f362 1304 	bfi	r3, r2, #4, #1
 8003e1c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e1e:	f107 0208 	add.w	r2, r7, #8
 8003e22:	2301      	movs	r3, #1
 8003e24:	2162      	movs	r1, #98	; 0x62
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fdbe 	bl	80039a8 <lsm303agr_write_reg>
 8003e2c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003e42:	f107 020c 	add.w	r2, r7, #12
 8003e46:	2306      	movs	r3, #6
 8003e48:	2168      	movs	r1, #104	; 0x68
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fd94 	bl	8003978 <lsm303agr_read_reg>
 8003e50:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003e52:	7b7b      	ldrb	r3, [r7, #13]
 8003e54:	b21a      	sxth	r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	7b3b      	ldrb	r3, [r7, #12]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b21a      	sxth	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003e74:	7bfa      	ldrb	r2, [r7, #15]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	3302      	adds	r3, #2
 8003e7a:	b212      	sxth	r2, r2
 8003e7c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	3302      	adds	r3, #2
 8003e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	3302      	adds	r3, #2
 8003e98:	b212      	sxth	r2, r2
 8003e9a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003e9c:	7c7a      	ldrb	r2, [r7, #17]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	b212      	sxth	r2, r2
 8003ea4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	7c3b      	ldrb	r3, [r7, #16]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	b212      	sxth	r2, r2
 8003ec2:	801a      	strh	r2, [r3, #0]
  return ret;
 8003ec4:	697b      	ldr	r3, [r7, #20]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003ed8:	2301      	movs	r3, #1
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	210f      	movs	r1, #15
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fd4a 	bl	8003978 <lsm303agr_read_reg>
 8003ee4:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003efa:	2301      	movs	r3, #1
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	214f      	movs	r1, #79	; 0x4f
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fd39 	bl	8003978 <lsm303agr_read_reg>
 8003f06:	60f8      	str	r0, [r7, #12]
  return ret;
 8003f08:	68fb      	ldr	r3, [r7, #12]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003f1e:	f107 0208 	add.w	r2, r7, #8
 8003f22:	2301      	movs	r3, #1
 8003f24:	2162      	movs	r1, #98	; 0x62
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fd26 	bl	8003978 <lsm303agr_read_reg>
 8003f2c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	7a3b      	ldrb	r3, [r7, #8]
 8003f3e:	f362 0341 	bfi	r3, r2, #1, #1
 8003f42:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003f44:	f107 0208 	add.w	r2, r7, #8
 8003f48:	2301      	movs	r3, #1
 8003f4a:	2162      	movs	r1, #98	; 0x62
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fd2b 	bl	80039a8 <lsm303agr_write_reg>
 8003f52:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003f6a:	f107 0208 	add.w	r2, r7, #8
 8003f6e:	2301      	movs	r3, #1
 8003f70:	212e      	movs	r1, #46	; 0x2e
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fd00 	bl	8003978 <lsm303agr_read_reg>
 8003f78:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10f      	bne.n	8003fa0 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	7a3b      	ldrb	r3, [r7, #8]
 8003f8a:	f362 1387 	bfi	r3, r2, #6, #2
 8003f8e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003f90:	f107 0208 	add.w	r2, r7, #8
 8003f94:	2301      	movs	r3, #1
 8003f96:	212e      	movs	r1, #46	; 0x2e
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fd05 	bl	80039a8 <lsm303agr_write_reg>
 8003f9e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003fb6:	f107 0208 	add.w	r2, r7, #8
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2162      	movs	r1, #98	; 0x62
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fcda 	bl	8003978 <lsm303agr_read_reg>
 8003fc4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	7a3b      	ldrb	r3, [r7, #8]
 8003fd6:	f362 1345 	bfi	r3, r2, #5, #1
 8003fda:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003fdc:	f107 0208 	add.w	r2, r7, #8
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	2162      	movs	r1, #98	; 0x62
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fcdf 	bl	80039a8 <lsm303agr_write_reg>
 8003fea:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e04d      	b.n	80040b0 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	7b1a      	ldrb	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a1b      	ldr	r2, [pc, #108]	; (80040bc <LSM6DSL_RegisterBusIO+0xc4>)
 8004050:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <LSM6DSL_RegisterBusIO+0xc8>)
 8004056:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e020      	b.n	80040b0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4798      	blx	r3
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e016      	b.n	80040b0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d112      	bne.n	80040b0 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004094:	230c      	movs	r3, #12
 8004096:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004098:	7afb      	ldrb	r3, [r7, #11]
 800409a:	461a      	mov	r2, r3
 800409c:	2112      	movs	r1, #18
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fd2d 	bl	8004afe <LSM6DSL_Write_Reg>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	08004f6d 	.word	0x08004f6d
 80040c0:	08004fa3 	.word	0x08004fa3

080040c4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	331c      	adds	r3, #28
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fa59 	bl	800558a <lsm6dsl_auto_increment_set>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	e054      	b.n	800418e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	331c      	adds	r3, #28
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f980 	bl	80053f0 <lsm6dsl_block_data_update_set>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	e048      	b.n	800418e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	331c      	adds	r3, #28
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f001 fa67 	bl	80055d6 <lsm6dsl_fifo_mode_set>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	e03c      	b.n	800418e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2204      	movs	r2, #4
 8004118:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	331c      	adds	r3, #28
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f000 ffe6 	bl	80050f4 <lsm6dsl_xl_data_rate_set>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	e02c      	b.n	800418e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	331c      	adds	r3, #28
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ff7c 	bl	8005038 <lsm6dsl_xl_full_scale_set>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
 800414a:	e020      	b.n	800418e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	331c      	adds	r3, #28
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f8c0 	bl	80052e0 <lsm6dsl_gy_data_rate_set>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	e010      	b.n	800418e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	331c      	adds	r3, #28
 8004170:	2106      	movs	r1, #6
 8004172:	4618      	mov	r0, r3
 8004174:	f001 f84c 	bl	8005210 <lsm6dsl_gy_full_scale_set>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	e004      	b.n	800418e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f888 	bl	80042b4 <LSM6DSL_ACC_Disable>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e015      	b.n	80041dc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa9a 	bl	80046ea <LSM6DSL_GYRO_Disable>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80041bc:	f04f 33ff 	mov.w	r3, #4294967295
 80041c0:	e00c      	b.n	80041dc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	331c      	adds	r3, #28
 80041f2:	6839      	ldr	r1, [r7, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 f9b7 	bl	8005568 <lsm6dsl_device_id_get>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295
 8004204:	e000      	b.n	8004208 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2200      	movs	r2, #0
 800422a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2200      	movs	r2, #0
 8004230:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004238:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2210      	movs	r2, #16
 800423e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	4a07      	ldr	r2, [pc, #28]	; (8004268 <LSM6DSL_GetCapabilities+0x58>)
 800424a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4a06      	ldr	r2, [pc, #24]	; (8004268 <LSM6DSL_GetCapabilities+0x58>)
 8004250:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	45d02000 	.word	0x45d02000

0800426c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e014      	b.n	80042ac <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f103 021c 	add.w	r2, r3, #28
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f000 ff2f 	bl	80050f4 <lsm6dsl_xl_data_rate_set>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295
 80042a0:	e004      	b.n	80042ac <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e01f      	b.n	800430a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f103 021c 	add.w	r2, r3, #28
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	332b      	adds	r3, #43	; 0x2b
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 ff32 	bl	8005140 <lsm6dsl_xl_data_rate_get>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	e010      	b.n	800430a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	331c      	adds	r3, #28
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 ff00 	bl	80050f4 <lsm6dsl_xl_data_rate_set>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	e004      	b.n	800430a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	331c      	adds	r3, #28
 8004326:	f107 020b 	add.w	r2, r7, #11
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fea9 	bl	8005084 <lsm6dsl_xl_full_scale_get>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	e023      	b.n	8004386 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d81b      	bhi.n	800437c <LSM6DSL_ACC_GetSensitivity+0x68>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004375 	.word	0x08004375
 8004354:	08004365 	.word	0x08004365
 8004358:	0800436d 	.word	0x0800436d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4a0c      	ldr	r2, [pc, #48]	; (8004390 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004360:	601a      	str	r2, [r3, #0]
      break;
 8004362:	e00f      	b.n	8004384 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004368:	601a      	str	r2, [r3, #0]
      break;
 800436a:	e00b      	b.n	8004384 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004370:	601a      	str	r2, [r3, #0]
      break;
 8004372:	e007      	b.n	8004384 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004378:	601a      	str	r2, [r3, #0]
      break;
 800437a:	e003      	b.n	8004384 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	60fb      	str	r3, [r7, #12]
      break;
 8004382:	bf00      	nop
  }

  return ret;
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	3d79db23 	.word	0x3d79db23
 8004394:	3df9db23 	.word	0x3df9db23
 8004398:	3e79db23 	.word	0x3e79db23
 800439c:	3ef9db23 	.word	0x3ef9db23

080043a0 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	331c      	adds	r3, #28
 80043b2:	f107 020b 	add.w	r2, r7, #11
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fec1 	bl	8005140 <lsm6dsl_xl_data_rate_get>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	e054      	b.n	8004474 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80043ca:	7afb      	ldrb	r3, [r7, #11]
 80043cc:	2b0b      	cmp	r3, #11
 80043ce:	d84c      	bhi.n	800446a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	08004409 	.word	0x08004409
 80043dc:	0800441b 	.word	0x0800441b
 80043e0:	08004423 	.word	0x08004423
 80043e4:	0800442b 	.word	0x0800442b
 80043e8:	08004433 	.word	0x08004433
 80043ec:	0800443b 	.word	0x0800443b
 80043f0:	08004443 	.word	0x08004443
 80043f4:	0800444b 	.word	0x0800444b
 80043f8:	08004453 	.word	0x08004453
 80043fc:	0800445b 	.word	0x0800445b
 8004400:	08004463 	.word	0x08004463
 8004404:	08004413 	.word	0x08004413
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
      break;
 8004410:	e02f      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004416:	601a      	str	r2, [r3, #0]
      break;
 8004418:	e02b      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	4a18      	ldr	r2, [pc, #96]	; (8004480 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800441e:	601a      	str	r2, [r3, #0]
      break;
 8004420:	e027      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004426:	601a      	str	r2, [r3, #0]
      break;
 8004428:	e023      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	4a16      	ldr	r2, [pc, #88]	; (8004488 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800442e:	601a      	str	r2, [r3, #0]
      break;
 8004430:	e01f      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004436:	601a      	str	r2, [r3, #0]
      break;
 8004438:	e01b      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800443e:	601a      	str	r2, [r3, #0]
      break;
 8004440:	e017      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	4a13      	ldr	r2, [pc, #76]	; (8004494 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004446:	601a      	str	r2, [r3, #0]
      break;
 8004448:	e013      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800444e:	601a      	str	r2, [r3, #0]
      break;
 8004450:	e00f      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4a11      	ldr	r2, [pc, #68]	; (800449c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004456:	601a      	str	r2, [r3, #0]
      break;
 8004458:	e00b      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800445e:	601a      	str	r2, [r3, #0]
      break;
 8004460:	e007      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4a0f      	ldr	r2, [pc, #60]	; (80044a4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004466:	601a      	str	r2, [r3, #0]
      break;
 8004468:	e003      	b.n	8004472 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	60fb      	str	r3, [r7, #12]
      break;
 8004470:	bf00      	nop
  }

  return ret;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	3fcccccd 	.word	0x3fcccccd
 8004480:	41480000 	.word	0x41480000
 8004484:	41d00000 	.word	0x41d00000
 8004488:	42500000 	.word	0x42500000
 800448c:	42d00000 	.word	0x42d00000
 8004490:	43500000 	.word	0x43500000
 8004494:	43d00000 	.word	0x43d00000
 8004498:	44504000 	.word	0x44504000
 800449c:	44cf8000 	.word	0x44cf8000
 80044a0:	45502000 	.word	0x45502000
 80044a4:	45d02000 	.word	0x45d02000

080044a8 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d106      	bne.n	80044cc <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80044be:	ed97 0a00 	vldr	s0, [r7]
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fb36 	bl	8004b34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80044c8:	4603      	mov	r3, r0
 80044ca:	e005      	b.n	80044d8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80044cc:	ed97 0a00 	vldr	s0, [r7]
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fbbb 	bl	8004c4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80044d6:	4603      	mov	r3, r0
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	331c      	adds	r3, #28
 80044f2:	f107 020b 	add.w	r2, r7, #11
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fdc3 	bl	8005084 <lsm6dsl_xl_full_scale_get>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004504:	f04f 33ff 	mov.w	r3, #4294967295
 8004508:	e023      	b.n	8004552 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d81b      	bhi.n	8004548 <LSM6DSL_ACC_GetFullScale+0x68>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <LSM6DSL_ACC_GetFullScale+0x38>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	08004529 	.word	0x08004529
 800451c:	08004541 	.word	0x08004541
 8004520:	08004531 	.word	0x08004531
 8004524:	08004539 	.word	0x08004539
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2202      	movs	r2, #2
 800452c:	601a      	str	r2, [r3, #0]
      break;
 800452e:	e00f      	b.n	8004550 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2204      	movs	r2, #4
 8004534:	601a      	str	r2, [r3, #0]
      break;
 8004536:	e00b      	b.n	8004550 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2208      	movs	r2, #8
 800453c:	601a      	str	r2, [r3, #0]
      break;
 800453e:	e007      	b.n	8004550 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2210      	movs	r2, #16
 8004544:	601a      	str	r2, [r3, #0]
      break;
 8004546:	e003      	b.n	8004550 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	60fb      	str	r3, [r7, #12]
      break;
 800454e:	bf00      	nop
  }

  return ret;
 8004550:	68fb      	ldr	r3, [r7, #12]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop

0800455c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b02      	cmp	r3, #2
 800456a:	dd0b      	ble.n	8004584 <LSM6DSL_ACC_SetFullScale+0x28>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b04      	cmp	r3, #4
 8004570:	dd06      	ble.n	8004580 <LSM6DSL_ACC_SetFullScale+0x24>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b08      	cmp	r3, #8
 8004576:	dc01      	bgt.n	800457c <LSM6DSL_ACC_SetFullScale+0x20>
 8004578:	2303      	movs	r3, #3
 800457a:	e004      	b.n	8004586 <LSM6DSL_ACC_SetFullScale+0x2a>
 800457c:	2301      	movs	r3, #1
 800457e:	e002      	b.n	8004586 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004580:	2302      	movs	r3, #2
 8004582:	e000      	b.n	8004586 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004584:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004586:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	331c      	adds	r3, #28
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fd51 	bl	8005038 <lsm6dsl_xl_full_scale_set>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 800459c:	f04f 33ff 	mov.w	r3, #4294967295
 80045a0:	e000      	b.n	80045a4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	331c      	adds	r3, #28
 80045ba:	f107 0208 	add.w	r2, r7, #8
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 ff86 	bl	80054d2 <lsm6dsl_acceleration_raw_get>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
 80045d0:	e00c      	b.n	80045ec <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80045d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80045da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80045e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	331c      	adds	r3, #28
 8004608:	f107 0210 	add.w	r2, r7, #16
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ff5f 	bl	80054d2 <lsm6dsl_acceleration_raw_get>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	e03c      	b.n	800469a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004620:	f107 030c 	add.w	r3, r7, #12
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fe74 	bl	8004314 <LSM6DSL_ACC_GetSensitivity>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	e030      	b.n	800469a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004638:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004644:	edd7 7a03 	vldr	s15, [r7, #12]
 8004648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004650:	ee17 2a90 	vmov	r2, s15
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004658:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004664:	edd7 7a03 	vldr	s15, [r7, #12]
 8004668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004670:	ee17 2a90 	vmov	r2, s15
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004678:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004684:	edd7 7a03 	vldr	s15, [r7, #12]
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004690:	ee17 2a90 	vmov	r2, s15
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e014      	b.n	80046e2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f103 021c 	add.w	r2, r3, #28
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 fe0a 	bl	80052e0 <lsm6dsl_gy_data_rate_set>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	e004      	b.n	80046e2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e01f      	b.n	8004740 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f103 021c 	add.w	r2, r3, #28
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	332c      	adds	r3, #44	; 0x2c
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fe0d 	bl	800532c <lsm6dsl_gy_data_rate_get>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	e010      	b.n	8004740 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	331c      	adds	r3, #28
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fddb 	bl	80052e0 <lsm6dsl_gy_data_rate_set>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	e004      	b.n	8004740 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	331c      	adds	r3, #28
 800475a:	f107 020b 	add.w	r2, r7, #11
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fd7b 	bl	800525c <lsm6dsl_gy_full_scale_get>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	e02d      	b.n	80047ce <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004772:	7afb      	ldrb	r3, [r7, #11]
 8004774:	2b06      	cmp	r3, #6
 8004776:	d825      	bhi.n	80047c4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047a5 	.word	0x080047a5
 8004784:	0800479d 	.word	0x0800479d
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047bd 	.word	0x080047bd
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80047a0:	601a      	str	r2, [r3, #0]
      break;
 80047a2:	e013      	b.n	80047cc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80047a8:	601a      	str	r2, [r3, #0]
      break;
 80047aa:	e00f      	b.n	80047cc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80047b0:	601a      	str	r2, [r3, #0]
      break;
 80047b2:	e00b      	b.n	80047cc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80047b8:	601a      	str	r2, [r3, #0]
      break;
 80047ba:	e007      	b.n	80047cc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80047c0:	601a      	str	r2, [r3, #0]
      break;
 80047c2:	e003      	b.n	80047cc <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	60fb      	str	r3, [r7, #12]
      break;
 80047ca:	bf00      	nop
  }

  return ret;
 80047cc:	68fb      	ldr	r3, [r7, #12]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	408c0000 	.word	0x408c0000
 80047dc:	410c0000 	.word	0x410c0000
 80047e0:	418c0000 	.word	0x418c0000
 80047e4:	420c0000 	.word	0x420c0000
 80047e8:	428c0000 	.word	0x428c0000

080047ec <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	331c      	adds	r3, #28
 80047fe:	f107 020b 	add.w	r2, r7, #11
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fd91 	bl	800532c <lsm6dsl_gy_data_rate_get>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	e04e      	b.n	80048b4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004816:	7afb      	ldrb	r3, [r7, #11]
 8004818:	2b0a      	cmp	r3, #10
 800481a:	d846      	bhi.n	80048aa <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004851 	.word	0x08004851
 8004828:	0800485b 	.word	0x0800485b
 800482c:	08004863 	.word	0x08004863
 8004830:	0800486b 	.word	0x0800486b
 8004834:	08004873 	.word	0x08004873
 8004838:	0800487b 	.word	0x0800487b
 800483c:	08004883 	.word	0x08004883
 8004840:	0800488b 	.word	0x0800488b
 8004844:	08004893 	.word	0x08004893
 8004848:	0800489b 	.word	0x0800489b
 800484c:	080048a3 	.word	0x080048a3
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
      break;
 8004858:	e02b      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800485e:	601a      	str	r2, [r3, #0]
      break;
 8004860:	e027      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004866:	601a      	str	r2, [r3, #0]
      break;
 8004868:	e023      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800486e:	601a      	str	r2, [r3, #0]
      break;
 8004870:	e01f      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004876:	601a      	str	r2, [r3, #0]
      break;
 8004878:	e01b      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800487e:	601a      	str	r2, [r3, #0]
      break;
 8004880:	e017      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	4a12      	ldr	r2, [pc, #72]	; (80048d0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004886:	601a      	str	r2, [r3, #0]
      break;
 8004888:	e013      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800488e:	601a      	str	r2, [r3, #0]
      break;
 8004890:	e00f      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004896:	601a      	str	r2, [r3, #0]
      break;
 8004898:	e00b      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800489e:	601a      	str	r2, [r3, #0]
      break;
 80048a0:	e007      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80048a6:	601a      	str	r2, [r3, #0]
      break;
 80048a8:	e003      	b.n	80048b2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80048aa:	f04f 33ff 	mov.w	r3, #4294967295
 80048ae:	60fb      	str	r3, [r7, #12]
      break;
 80048b0:	bf00      	nop
  }

  return ret;
 80048b2:	68fb      	ldr	r3, [r7, #12]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	41480000 	.word	0x41480000
 80048c0:	41d00000 	.word	0x41d00000
 80048c4:	42500000 	.word	0x42500000
 80048c8:	42d00000 	.word	0x42d00000
 80048cc:	43500000 	.word	0x43500000
 80048d0:	43d00000 	.word	0x43d00000
 80048d4:	44504000 	.word	0x44504000
 80048d8:	44cf8000 	.word	0x44cf8000
 80048dc:	45502000 	.word	0x45502000
 80048e0:	45d02000 	.word	0x45d02000

080048e4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d106      	bne.n	8004908 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80048fa:	ed97 0a00 	vldr	s0, [r7]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa26 	bl	8004d50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004904:	4603      	mov	r3, r0
 8004906:	e005      	b.n	8004914 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004908:	ed97 0a00 	vldr	s0, [r7]
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 faab 	bl	8004e68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004912:	4603      	mov	r3, r0
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	331c      	adds	r3, #28
 800492e:	f107 020b 	add.w	r2, r7, #11
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fc91 	bl	800525c <lsm6dsl_gy_full_scale_get>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004940:	f04f 33ff 	mov.w	r3, #4294967295
 8004944:	e030      	b.n	80049a8 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004946:	7afb      	ldrb	r3, [r7, #11]
 8004948:	2b06      	cmp	r3, #6
 800494a:	d828      	bhi.n	800499e <LSM6DSL_GYRO_GetFullScale+0x82>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004979 	.word	0x08004979
 8004958:	08004971 	.word	0x08004971
 800495c:	08004981 	.word	0x08004981
 8004960:	0800499f 	.word	0x0800499f
 8004964:	0800498b 	.word	0x0800498b
 8004968:	0800499f 	.word	0x0800499f
 800496c:	08004995 	.word	0x08004995
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	227d      	movs	r2, #125	; 0x7d
 8004974:	601a      	str	r2, [r3, #0]
      break;
 8004976:	e016      	b.n	80049a6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	22fa      	movs	r2, #250	; 0xfa
 800497c:	601a      	str	r2, [r3, #0]
      break;
 800497e:	e012      	b.n	80049a6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004986:	601a      	str	r2, [r3, #0]
      break;
 8004988:	e00d      	b.n	80049a6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004990:	601a      	str	r2, [r3, #0]
      break;
 8004992:	e008      	b.n	80049a6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800499a:	601a      	str	r2, [r3, #0]
      break;
 800499c:	e003      	b.n	80049a6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	60fb      	str	r3, [r7, #12]
      break;
 80049a4:	bf00      	nop
  }

  return ret;
 80049a6:	68fb      	ldr	r3, [r7, #12]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b7d      	cmp	r3, #125	; 0x7d
 80049be:	dd12      	ble.n	80049e6 <LSM6DSL_GYRO_SetFullScale+0x36>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2bfa      	cmp	r3, #250	; 0xfa
 80049c4:	dd0d      	ble.n	80049e2 <LSM6DSL_GYRO_SetFullScale+0x32>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049cc:	dd07      	ble.n	80049de <LSM6DSL_GYRO_SetFullScale+0x2e>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049d4:	dc01      	bgt.n	80049da <LSM6DSL_GYRO_SetFullScale+0x2a>
 80049d6:	2304      	movs	r3, #4
 80049d8:	e006      	b.n	80049e8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80049da:	2306      	movs	r3, #6
 80049dc:	e004      	b.n	80049e8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80049de:	2302      	movs	r3, #2
 80049e0:	e002      	b.n	80049e8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <LSM6DSL_GYRO_SetFullScale+0x38>
 80049e6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80049e8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	331c      	adds	r3, #28
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fc0c 	bl	8005210 <lsm6dsl_gy_full_scale_set>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	e000      	b.n	8004a06 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	331c      	adds	r3, #28
 8004a1c:	f107 0208 	add.w	r2, r7, #8
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fd0a 	bl	800543c <lsm6dsl_angular_rate_raw_get>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a32:	e00c      	b.n	8004a4e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004a34:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004a3c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004a44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	331c      	adds	r3, #28
 8004a64:	f107 0210 	add.w	r2, r7, #16
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fce6 	bl	800543c <lsm6dsl_angular_rate_raw_get>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7a:	e03c      	b.n	8004af6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004a7c:	f107 030c 	add.w	r3, r7, #12
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fe60 	bl	8004748 <LSM6DSL_GYRO_GetSensitivity>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a92:	e030      	b.n	8004af6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004a94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aac:	ee17 2a90 	vmov	r2, s15
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004ab4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004acc:	ee17 2a90 	vmov	r2, s15
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004ad4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ae0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aec:	ee17 2a90 	vmov	r2, s15
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	70fb      	strb	r3, [r7, #3]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f103 001c 	add.w	r0, r3, #28
 8004b14:	1cba      	adds	r2, r7, #2
 8004b16:	78f9      	ldrb	r1, [r7, #3]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f000 fa75 	bl	8005008 <lsm6dsl_write_reg>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295
 8004b28:	e000      	b.n	8004b2c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004b40:	edd7 7a00 	vldr	s15, [r7]
 8004b44:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	d801      	bhi.n	8004b56 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e058      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b56:	edd7 7a00 	vldr	s15, [r7]
 8004b5a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b66:	d801      	bhi.n	8004b6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e04d      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b6c:	edd7 7a00 	vldr	s15, [r7]
 8004b70:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004c30 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	d801      	bhi.n	8004b82 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e042      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b82:	edd7 7a00 	vldr	s15, [r7]
 8004b86:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b92:	d801      	bhi.n	8004b98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004b94:	2304      	movs	r3, #4
 8004b96:	e037      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b98:	edd7 7a00 	vldr	s15, [r7]
 8004b9c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004c38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	d801      	bhi.n	8004bae <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004baa:	2305      	movs	r3, #5
 8004bac:	e02c      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bae:	edd7 7a00 	vldr	s15, [r7]
 8004bb2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004c3c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	d801      	bhi.n	8004bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004bc0:	2306      	movs	r3, #6
 8004bc2:	e021      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bc4:	edd7 7a00 	vldr	s15, [r7]
 8004bc8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004c40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d801      	bhi.n	8004bda <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004bd6:	2307      	movs	r3, #7
 8004bd8:	e016      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bda:	edd7 7a00 	vldr	s15, [r7]
 8004bde:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004c44 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bea:	d801      	bhi.n	8004bf0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004bec:	2308      	movs	r3, #8
 8004bee:	e00b      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bf0:	edd7 7a00 	vldr	s15, [r7]
 8004bf4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004c48 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d801      	bhi.n	8004c06 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004c02:	2309      	movs	r3, #9
 8004c04:	e000      	b.n	8004c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c06:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004c08:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	331c      	adds	r3, #28
 8004c0e:	7bfa      	ldrb	r2, [r7, #15]
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fa6e 	bl	80050f4 <lsm6dsl_xl_data_rate_set>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	e000      	b.n	8004c26 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	42500000 	.word	0x42500000
 8004c34:	42d00000 	.word	0x42d00000
 8004c38:	43500000 	.word	0x43500000
 8004c3c:	43d00000 	.word	0x43d00000
 8004c40:	44504000 	.word	0x44504000
 8004c44:	44cf8000 	.word	0x44cf8000
 8004c48:	45502000 	.word	0x45502000

08004c4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004c58:	edd7 7a00 	vldr	s15, [r7]
 8004c5c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	d801      	bhi.n	8004c6e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e058      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c6e:	edd7 7a00 	vldr	s15, [r7]
 8004c72:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7e:	d801      	bhi.n	8004c84 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e04d      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c84:	edd7 7a00 	vldr	s15, [r7]
 8004c88:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004d34 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	d801      	bhi.n	8004c9a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004c96:	2303      	movs	r3, #3
 8004c98:	e042      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c9a:	edd7 7a00 	vldr	s15, [r7]
 8004c9e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	d801      	bhi.n	8004cb0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004cac:	2304      	movs	r3, #4
 8004cae:	e037      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cb0:	edd7 7a00 	vldr	s15, [r7]
 8004cb4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004d3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	d801      	bhi.n	8004cc6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004cc2:	2305      	movs	r3, #5
 8004cc4:	e02c      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cc6:	edd7 7a00 	vldr	s15, [r7]
 8004cca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd6:	d801      	bhi.n	8004cdc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004cd8:	2306      	movs	r3, #6
 8004cda:	e021      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cdc:	edd7 7a00 	vldr	s15, [r7]
 8004ce0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004d44 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cec:	d801      	bhi.n	8004cf2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004cee:	2307      	movs	r3, #7
 8004cf0:	e016      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cf2:	edd7 7a00 	vldr	s15, [r7]
 8004cf6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004d48 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d02:	d801      	bhi.n	8004d08 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004d04:	2308      	movs	r3, #8
 8004d06:	e00b      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d08:	edd7 7a00 	vldr	s15, [r7]
 8004d0c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d18:	d801      	bhi.n	8004d1e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004d1a:	2309      	movs	r3, #9
 8004d1c:	e000      	b.n	8004d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d1e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	42500000 	.word	0x42500000
 8004d38:	42d00000 	.word	0x42d00000
 8004d3c:	43500000 	.word	0x43500000
 8004d40:	43d00000 	.word	0x43d00000
 8004d44:	44504000 	.word	0x44504000
 8004d48:	44cf8000 	.word	0x44cf8000
 8004d4c:	45502000 	.word	0x45502000

08004d50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004d5c:	edd7 7a00 	vldr	s15, [r7]
 8004d60:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6c:	d801      	bhi.n	8004d72 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e058      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d72:	edd7 7a00 	vldr	s15, [r7]
 8004d76:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d82:	d801      	bhi.n	8004d88 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e04d      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d88:	edd7 7a00 	vldr	s15, [r7]
 8004d8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004e4c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d98:	d801      	bhi.n	8004d9e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e042      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d9e:	edd7 7a00 	vldr	s15, [r7]
 8004da2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004e50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dae:	d801      	bhi.n	8004db4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004db0:	2304      	movs	r3, #4
 8004db2:	e037      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004db4:	edd7 7a00 	vldr	s15, [r7]
 8004db8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	d801      	bhi.n	8004dca <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004dc6:	2305      	movs	r3, #5
 8004dc8:	e02c      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004dca:	edd7 7a00 	vldr	s15, [r7]
 8004dce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004e58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	d801      	bhi.n	8004de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004ddc:	2306      	movs	r3, #6
 8004dde:	e021      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004de0:	edd7 7a00 	vldr	s15, [r7]
 8004de4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df0:	d801      	bhi.n	8004df6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004df2:	2307      	movs	r3, #7
 8004df4:	e016      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004df6:	edd7 7a00 	vldr	s15, [r7]
 8004dfa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004e60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e06:	d801      	bhi.n	8004e0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	e00b      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e0c:	edd7 7a00 	vldr	s15, [r7]
 8004e10:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1c:	d801      	bhi.n	8004e22 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004e1e:	2309      	movs	r3, #9
 8004e20:	e000      	b.n	8004e24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e22:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004e24:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	331c      	adds	r3, #28
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fa56 	bl	80052e0 <lsm6dsl_gy_data_rate_set>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3e:	e000      	b.n	8004e42 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	42500000 	.word	0x42500000
 8004e50:	42d00000 	.word	0x42d00000
 8004e54:	43500000 	.word	0x43500000
 8004e58:	43d00000 	.word	0x43d00000
 8004e5c:	44504000 	.word	0x44504000
 8004e60:	44cf8000 	.word	0x44cf8000
 8004e64:	45502000 	.word	0x45502000

08004e68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004e74:	edd7 7a00 	vldr	s15, [r7]
 8004e78:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e84:	d801      	bhi.n	8004e8a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e058      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e8a:	edd7 7a00 	vldr	s15, [r7]
 8004e8e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9a:	d801      	bhi.n	8004ea0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e04d      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ea0:	edd7 7a00 	vldr	s15, [r7]
 8004ea4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004f50 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb0:	d801      	bhi.n	8004eb6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e042      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004eb6:	edd7 7a00 	vldr	s15, [r7]
 8004eba:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f54 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec6:	d801      	bhi.n	8004ecc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	e037      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ecc:	edd7 7a00 	vldr	s15, [r7]
 8004ed0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004f58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004edc:	d801      	bhi.n	8004ee2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004ede:	2305      	movs	r3, #5
 8004ee0:	e02c      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ee2:	edd7 7a00 	vldr	s15, [r7]
 8004ee6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	d801      	bhi.n	8004ef8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004ef4:	2306      	movs	r3, #6
 8004ef6:	e021      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ef8:	edd7 7a00 	vldr	s15, [r7]
 8004efc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004f60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	d801      	bhi.n	8004f0e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004f0a:	2307      	movs	r3, #7
 8004f0c:	e016      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f0e:	edd7 7a00 	vldr	s15, [r7]
 8004f12:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1e:	d801      	bhi.n	8004f24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004f20:	2308      	movs	r3, #8
 8004f22:	e00b      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f24:	edd7 7a00 	vldr	s15, [r7]
 8004f28:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004f68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	d801      	bhi.n	8004f3a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004f36:	2309      	movs	r3, #9
 8004f38:	e000      	b.n	8004f3c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f3a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	42500000 	.word	0x42500000
 8004f54:	42d00000 	.word	0x42d00000
 8004f58:	43500000 	.word	0x43500000
 8004f5c:	43d00000 	.word	0x43d00000
 8004f60:	44504000 	.word	0x44504000
 8004f64:	44cf8000 	.word	0x44cf8000
 8004f68:	45502000 	.word	0x45502000

08004f6c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	461a      	mov	r2, r3
 8004f78:	460b      	mov	r3, r1
 8004f7a:	72fb      	strb	r3, [r7, #11]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	695c      	ldr	r4, [r3, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	7b1b      	ldrb	r3, [r3, #12]
 8004f8c:	b298      	uxth	r0, r3
 8004f8e:	7afb      	ldrb	r3, [r7, #11]
 8004f90:	b299      	uxth	r1, r3
 8004f92:	893b      	ldrh	r3, [r7, #8]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	47a0      	blx	r4
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}

08004fa2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004fa2:	b590      	push	{r4, r7, lr}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	461a      	mov	r2, r3
 8004fae:	460b      	mov	r3, r1
 8004fb0:	72fb      	strb	r3, [r7, #11]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	691c      	ldr	r4, [r3, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	7b1b      	ldrb	r3, [r3, #12]
 8004fc2:	b298      	uxth	r0, r3
 8004fc4:	7afb      	ldrb	r3, [r7, #11]
 8004fc6:	b299      	uxth	r1, r3
 8004fc8:	893b      	ldrh	r3, [r7, #8]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	47a0      	blx	r4
 8004fce:	4603      	mov	r3, r0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd90      	pop	{r4, r7, pc}

08004fd8 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	72fb      	strb	r3, [r7, #11]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685c      	ldr	r4, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6898      	ldr	r0, [r3, #8]
 8004ff4:	893b      	ldrh	r3, [r7, #8]
 8004ff6:	7af9      	ldrb	r1, [r7, #11]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	47a0      	blx	r4
 8004ffc:	6178      	str	r0, [r7, #20]
  return ret;
 8004ffe:	697b      	ldr	r3, [r7, #20]
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}

08005008 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	460b      	mov	r3, r1
 8005016:	72fb      	strb	r3, [r7, #11]
 8005018:	4613      	mov	r3, r2
 800501a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681c      	ldr	r4, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6898      	ldr	r0, [r3, #8]
 8005024:	893b      	ldrh	r3, [r7, #8]
 8005026:	7af9      	ldrb	r1, [r7, #11]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	47a0      	blx	r4
 800502c:	6178      	str	r0, [r7, #20]
  return ret;
 800502e:	697b      	ldr	r3, [r7, #20]
}
 8005030:	4618      	mov	r0, r3
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd90      	pop	{r4, r7, pc}

08005038 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005044:	f107 0208 	add.w	r2, r7, #8
 8005048:	2301      	movs	r3, #1
 800504a:	2110      	movs	r1, #16
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffc3 	bl	8004fd8 <lsm6dsl_read_reg>
 8005052:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10f      	bne.n	800507a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	b2da      	uxtb	r2, r3
 8005062:	7a3b      	ldrb	r3, [r7, #8]
 8005064:	f362 0383 	bfi	r3, r2, #2, #2
 8005068:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800506a:	f107 0208 	add.w	r2, r7, #8
 800506e:	2301      	movs	r3, #1
 8005070:	2110      	movs	r1, #16
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff ffc8 	bl	8005008 <lsm6dsl_write_reg>
 8005078:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800508e:	f107 0208 	add.w	r2, r7, #8
 8005092:	2301      	movs	r3, #1
 8005094:	2110      	movs	r1, #16
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff ff9e 	bl	8004fd8 <lsm6dsl_read_reg>
 800509c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 800509e:	7a3b      	ldrb	r3, [r7, #8]
 80050a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d81a      	bhi.n	80050e0 <lsm6dsl_xl_full_scale_get+0x5c>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <lsm6dsl_xl_full_scale_get+0x2c>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050c9 	.word	0x080050c9
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
      break;
 80050c6:	e00f      	b.n	80050e8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
      break;
 80050ce:	e00b      	b.n	80050e8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2202      	movs	r2, #2
 80050d4:	701a      	strb	r2, [r3, #0]
      break;
 80050d6:	e007      	b.n	80050e8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2203      	movs	r2, #3
 80050dc:	701a      	strb	r2, [r3, #0]
      break;
 80050de:	e003      	b.n	80050e8 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2204      	movs	r2, #4
 80050e4:	701a      	strb	r2, [r3, #0]
      break;
 80050e6:	bf00      	nop
  }

  return ret;
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005100:	f107 0208 	add.w	r2, r7, #8
 8005104:	2301      	movs	r3, #1
 8005106:	2110      	movs	r1, #16
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff65 	bl	8004fd8 <lsm6dsl_read_reg>
 800510e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10f      	bne.n	8005136 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	b2da      	uxtb	r2, r3
 800511e:	7a3b      	ldrb	r3, [r7, #8]
 8005120:	f362 1307 	bfi	r3, r2, #4, #4
 8005124:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005126:	f107 0208 	add.w	r2, r7, #8
 800512a:	2301      	movs	r3, #1
 800512c:	2110      	movs	r1, #16
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff ff6a 	bl	8005008 <lsm6dsl_write_reg>
 8005134:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005136:	68fb      	ldr	r3, [r7, #12]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800514a:	f107 0208 	add.w	r2, r7, #8
 800514e:	2301      	movs	r3, #1
 8005150:	2110      	movs	r1, #16
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff ff40 	bl	8004fd8 <lsm6dsl_read_reg>
 8005158:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800515a:	7a3b      	ldrb	r3, [r7, #8]
 800515c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b0b      	cmp	r3, #11
 8005164:	d84a      	bhi.n	80051fc <lsm6dsl_xl_data_rate_get+0xbc>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <lsm6dsl_xl_data_rate_get+0x2c>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	0800519d 	.word	0x0800519d
 8005170:	080051a5 	.word	0x080051a5
 8005174:	080051ad 	.word	0x080051ad
 8005178:	080051b5 	.word	0x080051b5
 800517c:	080051bd 	.word	0x080051bd
 8005180:	080051c5 	.word	0x080051c5
 8005184:	080051cd 	.word	0x080051cd
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051dd 	.word	0x080051dd
 8005190:	080051e5 	.word	0x080051e5
 8005194:	080051ed 	.word	0x080051ed
 8005198:	080051f5 	.word	0x080051f5
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
      break;
 80051a2:	e02f      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
      break;
 80051aa:	e02b      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2202      	movs	r2, #2
 80051b0:	701a      	strb	r2, [r3, #0]
      break;
 80051b2:	e027      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2203      	movs	r2, #3
 80051b8:	701a      	strb	r2, [r3, #0]
      break;
 80051ba:	e023      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2204      	movs	r2, #4
 80051c0:	701a      	strb	r2, [r3, #0]
      break;
 80051c2:	e01f      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2205      	movs	r2, #5
 80051c8:	701a      	strb	r2, [r3, #0]
      break;
 80051ca:	e01b      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2206      	movs	r2, #6
 80051d0:	701a      	strb	r2, [r3, #0]
      break;
 80051d2:	e017      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2207      	movs	r2, #7
 80051d8:	701a      	strb	r2, [r3, #0]
      break;
 80051da:	e013      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2208      	movs	r2, #8
 80051e0:	701a      	strb	r2, [r3, #0]
      break;
 80051e2:	e00f      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2209      	movs	r2, #9
 80051e8:	701a      	strb	r2, [r3, #0]
      break;
 80051ea:	e00b      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	220a      	movs	r2, #10
 80051f0:	701a      	strb	r2, [r3, #0]
      break;
 80051f2:	e007      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	220b      	movs	r2, #11
 80051f8:	701a      	strb	r2, [r3, #0]
      break;
 80051fa:	e003      	b.n	8005204 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	220c      	movs	r2, #12
 8005200:	701a      	strb	r2, [r3, #0]
      break;
 8005202:	bf00      	nop
  }

  return ret;
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop

08005210 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800521c:	f107 0208 	add.w	r2, r7, #8
 8005220:	2301      	movs	r3, #1
 8005222:	2111      	movs	r1, #17
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fed7 	bl	8004fd8 <lsm6dsl_read_reg>
 800522a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	b2da      	uxtb	r2, r3
 800523a:	7a3b      	ldrb	r3, [r7, #8]
 800523c:	f362 0343 	bfi	r3, r2, #1, #3
 8005240:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005242:	f107 0208 	add.w	r2, r7, #8
 8005246:	2301      	movs	r3, #1
 8005248:	2111      	movs	r1, #17
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fedc 	bl	8005008 <lsm6dsl_write_reg>
 8005250:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005266:	f107 0208 	add.w	r2, r7, #8
 800526a:	2301      	movs	r3, #1
 800526c:	2111      	movs	r1, #17
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff feb2 	bl	8004fd8 <lsm6dsl_read_reg>
 8005274:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8005276:	7a3b      	ldrb	r3, [r7, #8]
 8005278:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b06      	cmp	r3, #6
 8005280:	d824      	bhi.n	80052cc <lsm6dsl_gy_full_scale_get+0x70>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052a5 	.word	0x080052a5
 800528c:	080052ad 	.word	0x080052ad
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052cd 	.word	0x080052cd
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052cd 	.word	0x080052cd
 80052a0:	080052c5 	.word	0x080052c5
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
      break;
 80052aa:	e013      	b.n	80052d4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
      break;
 80052b2:	e00f      	b.n	80052d4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2202      	movs	r2, #2
 80052b8:	701a      	strb	r2, [r3, #0]
      break;
 80052ba:	e00b      	b.n	80052d4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2204      	movs	r2, #4
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e007      	b.n	80052d4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2206      	movs	r2, #6
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e003      	b.n	80052d4 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2207      	movs	r2, #7
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	bf00      	nop
  }

  return ret;
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop

080052e0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80052ec:	f107 0208 	add.w	r2, r7, #8
 80052f0:	2301      	movs	r3, #1
 80052f2:	2111      	movs	r1, #17
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fe6f 	bl	8004fd8 <lsm6dsl_read_reg>
 80052fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	b2da      	uxtb	r2, r3
 800530a:	7a3b      	ldrb	r3, [r7, #8]
 800530c:	f362 1307 	bfi	r3, r2, #4, #4
 8005310:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005312:	f107 0208 	add.w	r2, r7, #8
 8005316:	2301      	movs	r3, #1
 8005318:	2111      	movs	r1, #17
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fe74 	bl	8005008 <lsm6dsl_write_reg>
 8005320:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005322:	68fb      	ldr	r3, [r7, #12]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	2301      	movs	r3, #1
 800533c:	2111      	movs	r1, #17
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe4a 	bl	8004fd8 <lsm6dsl_read_reg>
 8005344:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8005346:	7a3b      	ldrb	r3, [r7, #8]
 8005348:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b0a      	cmp	r3, #10
 8005350:	d844      	bhi.n	80053dc <lsm6dsl_gy_data_rate_get+0xb0>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	08005385 	.word	0x08005385
 800535c:	0800538d 	.word	0x0800538d
 8005360:	08005395 	.word	0x08005395
 8005364:	0800539d 	.word	0x0800539d
 8005368:	080053a5 	.word	0x080053a5
 800536c:	080053ad 	.word	0x080053ad
 8005370:	080053b5 	.word	0x080053b5
 8005374:	080053bd 	.word	0x080053bd
 8005378:	080053c5 	.word	0x080053c5
 800537c:	080053cd 	.word	0x080053cd
 8005380:	080053d5 	.word	0x080053d5
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
      break;
 800538a:	e02b      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
      break;
 8005392:	e027      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2202      	movs	r2, #2
 8005398:	701a      	strb	r2, [r3, #0]
      break;
 800539a:	e023      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2203      	movs	r2, #3
 80053a0:	701a      	strb	r2, [r3, #0]
      break;
 80053a2:	e01f      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2204      	movs	r2, #4
 80053a8:	701a      	strb	r2, [r3, #0]
      break;
 80053aa:	e01b      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2205      	movs	r2, #5
 80053b0:	701a      	strb	r2, [r3, #0]
      break;
 80053b2:	e017      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2206      	movs	r2, #6
 80053b8:	701a      	strb	r2, [r3, #0]
      break;
 80053ba:	e013      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2207      	movs	r2, #7
 80053c0:	701a      	strb	r2, [r3, #0]
      break;
 80053c2:	e00f      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2208      	movs	r2, #8
 80053c8:	701a      	strb	r2, [r3, #0]
      break;
 80053ca:	e00b      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2209      	movs	r2, #9
 80053d0:	701a      	strb	r2, [r3, #0]
      break;
 80053d2:	e007      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	220a      	movs	r2, #10
 80053d8:	701a      	strb	r2, [r3, #0]
      break;
 80053da:	e003      	b.n	80053e4 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	220b      	movs	r2, #11
 80053e0:	701a      	strb	r2, [r3, #0]
      break;
 80053e2:	bf00      	nop
  }

  return ret;
 80053e4:	68fb      	ldr	r3, [r7, #12]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop

080053f0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80053fc:	f107 0208 	add.w	r2, r7, #8
 8005400:	2301      	movs	r3, #1
 8005402:	2112      	movs	r1, #18
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fde7 	bl	8004fd8 <lsm6dsl_read_reg>
 800540a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	7a3b      	ldrb	r3, [r7, #8]
 800541c:	f362 1386 	bfi	r3, r2, #6, #1
 8005420:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005422:	f107 0208 	add.w	r2, r7, #8
 8005426:	2301      	movs	r3, #1
 8005428:	2112      	movs	r1, #18
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fdec 	bl	8005008 <lsm6dsl_write_reg>
 8005430:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005446:	f107 020c 	add.w	r2, r7, #12
 800544a:	2306      	movs	r3, #6
 800544c:	2122      	movs	r1, #34	; 0x22
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fdc2 	bl	8004fd8 <lsm6dsl_read_reg>
 8005454:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005456:	7b7b      	ldrb	r3, [r7, #13]
 8005458:	b21a      	sxth	r2, r3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005464:	b29b      	uxth	r3, r3
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	b29a      	uxth	r2, r3
 800546a:	7b3b      	ldrb	r3, [r7, #12]
 800546c:	b29b      	uxth	r3, r3
 800546e:	4413      	add	r3, r2
 8005470:	b29b      	uxth	r3, r3
 8005472:	b21a      	sxth	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	3302      	adds	r3, #2
 800547e:	b212      	sxth	r2, r2
 8005480:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	3302      	adds	r3, #2
 8005486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800548a:	b29b      	uxth	r3, r3
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b29a      	uxth	r2, r3
 8005490:	7bbb      	ldrb	r3, [r7, #14]
 8005492:	b29b      	uxth	r3, r3
 8005494:	4413      	add	r3, r2
 8005496:	b29a      	uxth	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	3302      	adds	r3, #2
 800549c:	b212      	sxth	r2, r2
 800549e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80054a0:	7c7a      	ldrb	r2, [r7, #17]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	3304      	adds	r3, #4
 80054a6:	b212      	sxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	7c3b      	ldrb	r3, [r7, #16]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	4413      	add	r3, r2
 80054be:	b29a      	uxth	r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	3304      	adds	r3, #4
 80054c4:	b212      	sxth	r2, r2
 80054c6:	801a      	strh	r2, [r3, #0]
  return ret;
 80054c8:	697b      	ldr	r3, [r7, #20]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80054dc:	f107 020c 	add.w	r2, r7, #12
 80054e0:	2306      	movs	r3, #6
 80054e2:	2128      	movs	r1, #40	; 0x28
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fd77 	bl	8004fd8 <lsm6dsl_read_reg>
 80054ea:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80054ec:	7b7b      	ldrb	r3, [r7, #13]
 80054ee:	b21a      	sxth	r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	b29a      	uxth	r2, r3
 8005500:	7b3b      	ldrb	r3, [r7, #12]
 8005502:	b29b      	uxth	r3, r3
 8005504:	4413      	add	r3, r2
 8005506:	b29b      	uxth	r3, r3
 8005508:	b21a      	sxth	r2, r3
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800550e:	7bfa      	ldrb	r2, [r7, #15]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	3302      	adds	r3, #2
 8005514:	b212      	sxth	r2, r2
 8005516:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3302      	adds	r3, #2
 800551c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005520:	b29b      	uxth	r3, r3
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	b29a      	uxth	r2, r3
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	b29b      	uxth	r3, r3
 800552a:	4413      	add	r3, r2
 800552c:	b29a      	uxth	r2, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	3302      	adds	r3, #2
 8005532:	b212      	sxth	r2, r2
 8005534:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005536:	7c7a      	ldrb	r2, [r7, #17]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	3304      	adds	r3, #4
 800553c:	b212      	sxth	r2, r2
 800553e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3304      	adds	r3, #4
 8005544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005548:	b29b      	uxth	r3, r3
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	b29a      	uxth	r2, r3
 800554e:	7c3b      	ldrb	r3, [r7, #16]
 8005550:	b29b      	uxth	r3, r3
 8005552:	4413      	add	r3, r2
 8005554:	b29a      	uxth	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	3304      	adds	r3, #4
 800555a:	b212      	sxth	r2, r2
 800555c:	801a      	strh	r2, [r3, #0]
  return ret;
 800555e:	697b      	ldr	r3, [r7, #20]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005572:	2301      	movs	r3, #1
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	210f      	movs	r1, #15
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fd2d 	bl	8004fd8 <lsm6dsl_read_reg>
 800557e:	60f8      	str	r0, [r7, #12]
  return ret;
 8005580:	68fb      	ldr	r3, [r7, #12]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005596:	f107 0208 	add.w	r2, r7, #8
 800559a:	2301      	movs	r3, #1
 800559c:	2112      	movs	r1, #18
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fd1a 	bl	8004fd8 <lsm6dsl_read_reg>
 80055a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10f      	bne.n	80055cc <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	7a3b      	ldrb	r3, [r7, #8]
 80055b6:	f362 0382 	bfi	r3, r2, #2, #1
 80055ba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80055bc:	f107 0208 	add.w	r2, r7, #8
 80055c0:	2301      	movs	r3, #1
 80055c2:	2112      	movs	r1, #18
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fd1f 	bl	8005008 <lsm6dsl_write_reg>
 80055ca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055cc:	68fb      	ldr	r3, [r7, #12]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80055e2:	f107 0208 	add.w	r2, r7, #8
 80055e6:	2301      	movs	r3, #1
 80055e8:	210a      	movs	r1, #10
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fcf4 	bl	8004fd8 <lsm6dsl_read_reg>
 80055f0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10f      	bne.n	8005618 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	7a3b      	ldrb	r3, [r7, #8]
 8005602:	f362 0302 	bfi	r3, r2, #0, #3
 8005606:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005608:	f107 0208 	add.w	r2, r7, #8
 800560c:	2301      	movs	r3, #1
 800560e:	210a      	movs	r1, #10
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fcf9 	bl	8005008 <lsm6dsl_write_reg>
 8005616:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8005632:	2301      	movs	r3, #1
 8005634:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <IKS01A2_ENV_SENSOR_Init+0x24>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d032      	beq.n	80056ac <IKS01A2_ENV_SENSOR_Init+0x88>
 8005646:	e063      	b.n	8005710 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005648:	6838      	ldr	r0, [r7, #0]
 800564a:	f000 f931 	bl	80058b0 <HTS221_0_Probe>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005654:	f04f 33ff 	mov.w	r3, #4294967295
 8005658:	e098      	b.n	800578c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800565a:	4a4e      	ldr	r2, [pc, #312]	; (8005794 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	494c      	ldr	r1, [pc, #304]	; (8005798 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800566c:	f107 0108 	add.w	r1, r7, #8
 8005670:	4610      	mov	r0, r2
 8005672:	4798      	blx	r3
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800567a:	f06f 0306 	mvn.w	r3, #6
 800567e:	e085      	b.n	800578c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005680:	7a3b      	ldrb	r3, [r7, #8]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d103      	bne.n	800568e <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800568e:	7abb      	ldrb	r3, [r7, #10]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d103      	bne.n	800569c <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800569c:	7a7b      	ldrb	r3, [r7, #9]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d13a      	bne.n	8005718 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	61bb      	str	r3, [r7, #24]
      }
      break;
 80056aa:	e035      	b.n	8005718 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80056ac:	6838      	ldr	r0, [r7, #0]
 80056ae:	f000 f9b9 	bl	8005a24 <LPS22HB_0_Probe>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
 80056bc:	e066      	b.n	800578c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056be:	4a35      	ldr	r2, [pc, #212]	; (8005794 <IKS01A2_ENV_SENSOR_Init+0x170>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4933      	ldr	r1, [pc, #204]	; (8005798 <IKS01A2_ENV_SENSOR_Init+0x174>)
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056d0:	f107 0108 	add.w	r1, r7, #8
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80056de:	f06f 0306 	mvn.w	r3, #6
 80056e2:	e053      	b.n	800578c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80056e4:	7a3b      	ldrb	r3, [r7, #8]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d103      	bne.n	80056f2 <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80056f2:	7abb      	ldrb	r3, [r7, #10]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d103      	bne.n	8005700 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f043 0304 	orr.w	r3, r3, #4
 80056fe:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005700:	7a7b      	ldrb	r3, [r7, #9]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10a      	bne.n	800571c <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f043 0302 	orr.w	r3, r3, #2
 800570c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800570e:	e005      	b.n	800571c <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005710:	f06f 0301 	mvn.w	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005716:	e002      	b.n	800571e <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800571c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	e031      	b.n	800578c <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	e02a      	b.n	8005784 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	4013      	ands	r3, r2
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	429a      	cmp	r2, r3
 8005738:	d11e      	bne.n	8005778 <IKS01A2_ENV_SENSOR_Init+0x154>
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	4013      	ands	r3, r2
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	429a      	cmp	r2, r3
 8005744:	d118      	bne.n	8005778 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <IKS01A2_ENV_SENSOR_Init+0x178>)
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800574e:	4814      	ldr	r0, [pc, #80]	; (80057a0 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4413      	add	r3, r2
 8005758:	440b      	add	r3, r1
 800575a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	490d      	ldr	r1, [pc, #52]	; (8005798 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005768:	4610      	mov	r0, r2
 800576a:	4798      	blx	r3
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005772:	f06f 0304 	mvn.w	r3, #4
 8005776:	e009      	b.n	800578c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3301      	adds	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d9d1      	bls.n	800572e <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800578c:	4618      	mov	r0, r3
 800578e:	3728      	adds	r7, #40	; 0x28
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20000204 	.word	0x20000204
 8005798:	200004b4 	.word	0x200004b4
 800579c:	20000134 	.word	0x20000134
 80057a0:	200001ec 	.word	0x200001ec

080057a4 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d903      	bls.n	80057bc <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80057b4:	f06f 0301 	mvn.w	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e028      	b.n	800580e <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80057bc:	4a16      	ldr	r2, [pc, #88]	; (8005818 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4013      	ands	r3, r2
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d11c      	bne.n	8005808 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80057ce:	4a13      	ldr	r2, [pc, #76]	; (800581c <IKS01A2_ENV_SENSOR_Enable+0x78>)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057d6:	4812      	ldr	r0, [pc, #72]	; (8005820 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4413      	add	r3, r2
 80057e0:	440b      	add	r3, r1
 80057e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	490e      	ldr	r1, [pc, #56]	; (8005824 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057fa:	f06f 0304 	mvn.w	r3, #4
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e005      	b.n	800580e <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e002      	b.n	800580e <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005808:	f06f 0301 	mvn.w	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	2000020c 	.word	0x2000020c
 800581c:	20000134 	.word	0x20000134
 8005820:	200001ec 	.word	0x200001ec
 8005824:	200004b4 	.word	0x200004b4

08005828 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d903      	bls.n	8005842 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800583a:	f06f 0301 	mvn.w	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e029      	b.n	8005896 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4013      	ands	r3, r2
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d11d      	bne.n	8005890 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005854:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800585c:	4812      	ldr	r0, [pc, #72]	; (80058a8 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	4413      	add	r3, r2
 8005866:	440b      	add	r3, r1
 8005868:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	490f      	ldr	r1, [pc, #60]	; (80058ac <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005882:	f06f 0304 	mvn.w	r3, #4
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e005      	b.n	8005896 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e002      	b.n	8005896 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005890:	f06f 0301 	mvn.w	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005896:	697b      	ldr	r3, [r7, #20]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	2000020c 	.word	0x2000020c
 80058a4:	20000134 	.word	0x20000134
 80058a8:	200001ec 	.word	0x200001ec
 80058ac:	200004b4 	.word	0x200004b4

080058b0 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b090      	sub	sp, #64	; 0x40
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80058bc:	2300      	movs	r3, #0
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80058c0:	23bf      	movs	r3, #191	; 0xbf
 80058c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80058c6:	4b49      	ldr	r3, [pc, #292]	; (80059ec <HTS221_0_Probe+0x13c>)
 80058c8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80058ca:	4b49      	ldr	r3, [pc, #292]	; (80059f0 <HTS221_0_Probe+0x140>)
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80058ce:	4b49      	ldr	r3, [pc, #292]	; (80059f4 <HTS221_0_Probe+0x144>)
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80058d2:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <HTS221_0_Probe+0x148>)
 80058d4:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 80058d6:	4b49      	ldr	r3, [pc, #292]	; (80059fc <HTS221_0_Probe+0x14c>)
 80058d8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80058da:	f107 0320 	add.w	r3, r7, #32
 80058de:	4619      	mov	r1, r3
 80058e0:	4847      	ldr	r0, [pc, #284]	; (8005a00 <HTS221_0_Probe+0x150>)
 80058e2:	f7fb fbd7 	bl	8001094 <HTS221_RegisterBusIO>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80058ec:	f06f 0306 	mvn.w	r3, #6
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f2:	e076      	b.n	80059e2 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80058f4:	f107 031f 	add.w	r3, r7, #31
 80058f8:	4619      	mov	r1, r3
 80058fa:	4841      	ldr	r0, [pc, #260]	; (8005a00 <HTS221_0_Probe+0x150>)
 80058fc:	f7fb fc4f 	bl	800119e <HTS221_ReadID>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005906:	f06f 0306 	mvn.w	r3, #6
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590c:	e069      	b.n	80059e2 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800590e:	7ffb      	ldrb	r3, [r7, #31]
 8005910:	2bbc      	cmp	r3, #188	; 0xbc
 8005912:	d003      	beq.n	800591c <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005914:	f06f 0306 	mvn.w	r3, #6
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591a:	e062      	b.n	80059e2 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800591c:	f107 030c 	add.w	r3, r7, #12
 8005920:	4619      	mov	r1, r3
 8005922:	4837      	ldr	r0, [pc, #220]	; (8005a00 <HTS221_0_Probe+0x150>)
 8005924:	f7fb fc52 	bl	80011cc <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005928:	7b3b      	ldrb	r3, [r7, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	7b7b      	ldrb	r3, [r7, #13]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005936:	4313      	orrs	r3, r2
 8005938:	4a32      	ldr	r2, [pc, #200]	; (8005a04 <HTS221_0_Probe+0x154>)
 800593a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <HTS221_0_Probe+0x158>)
 800593e:	4a30      	ldr	r2, [pc, #192]	; (8005a00 <HTS221_0_Probe+0x150>)
 8005940:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005942:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <HTS221_0_Probe+0x15c>)
 8005944:	4a32      	ldr	r2, [pc, #200]	; (8005a10 <HTS221_0_Probe+0x160>)
 8005946:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d11d      	bne.n	800598a <HTS221_0_Probe+0xda>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d018      	beq.n	800598a <HTS221_0_Probe+0xda>
 8005958:	7b3b      	ldrb	r3, [r7, #12]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d115      	bne.n	800598a <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800595e:	4b2d      	ldr	r3, [pc, #180]	; (8005a14 <HTS221_0_Probe+0x164>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4a2d      	ldr	r2, [pc, #180]	; (8005a18 <HTS221_0_Probe+0x168>)
 8005964:	492d      	ldr	r1, [pc, #180]	; (8005a1c <HTS221_0_Probe+0x16c>)
 8005966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800596a:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <HTS221_0_Probe+0x15c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a25      	ldr	r2, [pc, #148]	; (8005a08 <HTS221_0_Probe+0x158>)
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800597e:	f06f 0304 	mvn.w	r3, #4
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005984:	e001      	b.n	800598a <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005986:	2300      	movs	r3, #0
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11d      	bne.n	80059cc <HTS221_0_Probe+0x11c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <HTS221_0_Probe+0x11c>
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d115      	bne.n	80059cc <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <HTS221_0_Probe+0x164>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4a1c      	ldr	r2, [pc, #112]	; (8005a18 <HTS221_0_Probe+0x168>)
 80059a6:	491e      	ldr	r1, [pc, #120]	; (8005a20 <HTS221_0_Probe+0x170>)
 80059a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80059ac:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <HTS221_0_Probe+0x15c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <HTS221_0_Probe+0x158>)
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	4610      	mov	r0, r2
 80059b8:	4798      	blx	r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80059c0:	f06f 0304 	mvn.w	r3, #4
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c6:	e001      	b.n	80059cc <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d107      	bne.n	80059e2 <HTS221_0_Probe+0x132>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059dc:	f06f 0304 	mvn.w	r3, #4
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80059e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3740      	adds	r7, #64	; 0x40
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	08000cc1 	.word	0x08000cc1
 80059f0:	08000d3d 	.word	0x08000d3d
 80059f4:	08000df1 	.word	0x08000df1
 80059f8:	08000d8d 	.word	0x08000d8d
 80059fc:	08000e55 	.word	0x08000e55
 8005a00:	20000214 	.word	0x20000214
 8005a04:	2000020c 	.word	0x2000020c
 8005a08:	200004b4 	.word	0x200004b4
 8005a0c:	20000204 	.word	0x20000204
 8005a10:	20000004 	.word	0x20000004
 8005a14:	20000134 	.word	0x20000134
 8005a18:	200001ec 	.word	0x200001ec
 8005a1c:	20000028 	.word	0x20000028
 8005a20:	20000014 	.word	0x20000014

08005a24 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b090      	sub	sp, #64	; 0x40
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8005a30:	2300      	movs	r3, #0
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8005a34:	23bb      	movs	r3, #187	; 0xbb
 8005a36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005a3a:	4b4a      	ldr	r3, [pc, #296]	; (8005b64 <LPS22HB_0_Probe+0x140>)
 8005a3c:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005a3e:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <LPS22HB_0_Probe+0x144>)
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005a42:	4b4a      	ldr	r3, [pc, #296]	; (8005b6c <LPS22HB_0_Probe+0x148>)
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005a46:	4b4a      	ldr	r3, [pc, #296]	; (8005b70 <LPS22HB_0_Probe+0x14c>)
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005a4a:	4b4a      	ldr	r3, [pc, #296]	; (8005b74 <LPS22HB_0_Probe+0x150>)
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8005a4e:	f107 0320 	add.w	r3, r7, #32
 8005a52:	4619      	mov	r1, r3
 8005a54:	4848      	ldr	r0, [pc, #288]	; (8005b78 <LPS22HB_0_Probe+0x154>)
 8005a56:	f7fc f93b 	bl	8001cd0 <LPS22HB_RegisterBusIO>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a60:	f06f 0306 	mvn.w	r3, #6
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a66:	e078      	b.n	8005b5a <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005a68:	f107 031f 	add.w	r3, r7, #31
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4842      	ldr	r0, [pc, #264]	; (8005b78 <LPS22HB_0_Probe+0x154>)
 8005a70:	f7fc f9d3 	bl	8001e1a <LPS22HB_ReadID>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a7a:	f06f 0306 	mvn.w	r3, #6
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a80:	e06b      	b.n	8005b5a <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	2bb1      	cmp	r3, #177	; 0xb1
 8005a86:	d003      	beq.n	8005a90 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a88:	f06f 0306 	mvn.w	r3, #6
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8e:	e064      	b.n	8005b5a <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005a90:	f107 030c 	add.w	r3, r7, #12
 8005a94:	4619      	mov	r1, r3
 8005a96:	4838      	ldr	r0, [pc, #224]	; (8005b78 <LPS22HB_0_Probe+0x154>)
 8005a98:	f7fc f9d6 	bl	8001e48 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005a9c:	7b3b      	ldrb	r3, [r7, #12]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	7b7b      	ldrb	r3, [r7, #13]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	4a33      	ldr	r2, [pc, #204]	; (8005b7c <LPS22HB_0_Probe+0x158>)
 8005aae:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8005ab0:	4b33      	ldr	r3, [pc, #204]	; (8005b80 <LPS22HB_0_Probe+0x15c>)
 8005ab2:	4a31      	ldr	r2, [pc, #196]	; (8005b78 <LPS22HB_0_Probe+0x154>)
 8005ab4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8005ab6:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <LPS22HB_0_Probe+0x160>)
 8005ab8:	4a33      	ldr	r2, [pc, #204]	; (8005b88 <LPS22HB_0_Probe+0x164>)
 8005aba:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11e      	bne.n	8005b00 <LPS22HB_0_Probe+0xdc>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d019      	beq.n	8005b00 <LPS22HB_0_Probe+0xdc>
 8005acc:	7b3b      	ldrb	r3, [r7, #12]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d116      	bne.n	8005b00 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <LPS22HB_0_Probe+0x168>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4a2e      	ldr	r2, [pc, #184]	; (8005b90 <LPS22HB_0_Probe+0x16c>)
 8005ad8:	3303      	adds	r3, #3
 8005ada:	492e      	ldr	r1, [pc, #184]	; (8005b94 <LPS22HB_0_Probe+0x170>)
 8005adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <LPS22HB_0_Probe+0x160>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <LPS22HB_0_Probe+0x15c>)
 8005ae8:	6852      	ldr	r2, [r2, #4]
 8005aea:	4610      	mov	r0, r2
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005af4:	f06f 0304 	mvn.w	r3, #4
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afa:	e001      	b.n	8005b00 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11e      	bne.n	8005b44 <LPS22HB_0_Probe+0x120>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d019      	beq.n	8005b44 <LPS22HB_0_Probe+0x120>
 8005b10:	7b7b      	ldrb	r3, [r7, #13]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d116      	bne.n	8005b44 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8005b16:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <LPS22HB_0_Probe+0x168>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	4a1d      	ldr	r2, [pc, #116]	; (8005b90 <LPS22HB_0_Probe+0x16c>)
 8005b1c:	3303      	adds	r3, #3
 8005b1e:	491e      	ldr	r1, [pc, #120]	; (8005b98 <LPS22HB_0_Probe+0x174>)
 8005b20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005b24:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <LPS22HB_0_Probe+0x160>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <LPS22HB_0_Probe+0x15c>)
 8005b2c:	6852      	ldr	r2, [r2, #4]
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4798      	blx	r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b38:	f06f 0304 	mvn.w	r3, #4
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3e:	e001      	b.n	8005b44 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d107      	bne.n	8005b5a <LPS22HB_0_Probe+0x136>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b54:	f06f 0304 	mvn.w	r3, #4
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3740      	adds	r7, #64	; 0x40
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	08000cc1 	.word	0x08000cc1
 8005b68:	08000d3d 	.word	0x08000d3d
 8005b6c:	08000df1 	.word	0x08000df1
 8005b70:	08000d8d 	.word	0x08000d8d
 8005b74:	08000e55 	.word	0x08000e55
 8005b78:	20000240 	.word	0x20000240
 8005b7c:	2000020c 	.word	0x2000020c
 8005b80:	200004b4 	.word	0x200004b4
 8005b84:	20000204 	.word	0x20000204
 8005b88:	2000003c 	.word	0x2000003c
 8005b8c:	20000134 	.word	0x20000134
 8005b90:	200001ec 	.word	0x200001ec
 8005b94:	20000060 	.word	0x20000060
 8005b98:	2000004c 	.word	0x2000004c

08005b9c <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08e      	sub	sp, #56	; 0x38
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005baa:	2301      	movs	r3, #1
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d06e      	beq.n	8005c96 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	f200 809d 	bhi.w	8005cfa <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d032      	beq.n	8005c32 <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005bcc:	e095      	b.n	8005cfa <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005bce:	6838      	ldr	r0, [r7, #0]
 8005bd0:	f000 f966 	bl	8005ea0 <LSM6DSL_0_Probe>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	e0cc      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005be0:	4a68      	ldr	r2, [pc, #416]	; (8005d84 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	4967      	ldr	r1, [pc, #412]	; (8005d88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bf2:	f107 010c 	add.w	r1, r7, #12
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4798      	blx	r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c00:	f06f 0306 	mvn.w	r3, #6
 8005c04:	e0b9      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005c06:	7b3b      	ldrb	r3, [r7, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d103      	bne.n	8005c14 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f043 0302 	orr.w	r3, r3, #2
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005c14:	7b7b      	ldrb	r3, [r7, #13]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d103      	bne.n	8005c22 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d16c      	bne.n	8005d02 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	f043 0304 	orr.w	r3, r3, #4
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c30:	e067      	b.n	8005d02 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005c32:	6838      	ldr	r0, [r7, #0]
 8005c34:	f000 f9f0 	bl	8006018 <LSM303AGR_ACC_0_Probe>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c42:	e09a      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005c44:	4a4f      	ldr	r2, [pc, #316]	; (8005d84 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	494e      	ldr	r1, [pc, #312]	; (8005d88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c56:	f107 010c 	add.w	r1, r7, #12
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4798      	blx	r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c64:	f06f 0306 	mvn.w	r3, #6
 8005c68:	e087      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005c6a:	7b3b      	ldrb	r3, [r7, #12]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d103      	bne.n	8005c78 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	f043 0302 	orr.w	r3, r3, #2
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005c78:	7b7b      	ldrb	r3, [r7, #13]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d103      	bne.n	8005c86 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d13c      	bne.n	8005d06 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	f043 0304 	orr.w	r3, r3, #4
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c94:	e037      	b.n	8005d06 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005c96:	6838      	ldr	r0, [r7, #0]
 8005c98:	f000 fa62 	bl	8006160 <LSM303AGR_MAG_0_Probe>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	e068      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005ca8:	4a36      	ldr	r2, [pc, #216]	; (8005d84 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	4935      	ldr	r1, [pc, #212]	; (8005d88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005cba:	f107 010c 	add.w	r1, r7, #12
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005cc8:	f06f 0306 	mvn.w	r3, #6
 8005ccc:	e055      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005cce:	7b3b      	ldrb	r3, [r7, #12]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d103      	bne.n	8005cdc <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	f043 0302 	orr.w	r3, r3, #2
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005cdc:	7b7b      	ldrb	r3, [r7, #13]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d103      	bne.n	8005cea <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	f043 0304 	orr.w	r3, r3, #4
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005cf8:	e007      	b.n	8005d0a <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005cfa:	f06f 0301 	mvn.w	r3, #1
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005d00:	e004      	b.n	8005d0c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005d0a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	e031      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005d16:	2300      	movs	r3, #0
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d1a:	e02a      	b.n	8005d72 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	4013      	ands	r3, r2
 8005d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d11e      	bne.n	8005d66 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d118      	bne.n	8005d66 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005d34:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d3c:	4814      	ldr	r0, [pc, #80]	; (8005d90 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	440b      	add	r3, r1
 8005d48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	490e      	ldr	r1, [pc, #56]	; (8005d88 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d56:	4610      	mov	r0, r2
 8005d58:	4798      	blx	r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005d60:	f06f 0304 	mvn.w	r3, #4
 8005d64:	e009      	b.n	8005d7a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	3301      	adds	r3, #1
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d9d1      	bls.n	8005d1c <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3738      	adds	r7, #56	; 0x38
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000290 	.word	0x20000290
 8005d88:	200004bc 	.word	0x200004bc
 8005d8c:	20000148 	.word	0x20000148
 8005d90:	2000026c 	.word	0x2000026c

08005d94 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d903      	bls.n	8005dac <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005da4:	f06f 0301 	mvn.w	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e028      	b.n	8005dfe <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005dac:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4013      	ands	r3, r2
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d11c      	bne.n	8005df8 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005dbe:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005dc6:	4812      	ldr	r0, [pc, #72]	; (8005e10 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4413      	add	r3, r2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	490e      	ldr	r1, [pc, #56]	; (8005e14 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005de0:	4610      	mov	r0, r2
 8005de2:	4798      	blx	r3
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005dea:	f06f 0304 	mvn.w	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e005      	b.n	8005dfe <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e002      	b.n	8005dfe <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005df8:	f06f 0301 	mvn.w	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	2000029c 	.word	0x2000029c
 8005e0c:	20000148 	.word	0x20000148
 8005e10:	2000026c 	.word	0x2000026c
 8005e14:	200004bc 	.word	0x200004bc

08005e18 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d903      	bls.n	8005e32 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e2a:	f06f 0301 	mvn.w	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e029      	b.n	8005e86 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e32:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d11d      	bne.n	8005e80 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e4c:	4812      	ldr	r0, [pc, #72]	; (8005e98 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	440b      	add	r3, r1
 8005e58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	490f      	ldr	r1, [pc, #60]	; (8005e9c <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e72:	f06f 0304 	mvn.w	r3, #4
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e005      	b.n	8005e86 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e002      	b.n	8005e86 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005e80:	f06f 0301 	mvn.w	r3, #1
 8005e84:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005e86:	697b      	ldr	r3, [r7, #20]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	2000029c 	.word	0x2000029c
 8005e94:	20000148 	.word	0x20000148
 8005e98:	2000026c 	.word	0x2000026c
 8005e9c:	200004bc 	.word	0x200004bc

08005ea0 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b092      	sub	sp, #72	; 0x48
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005eac:	2300      	movs	r3, #0
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005eb0:	23d7      	movs	r3, #215	; 0xd7
 8005eb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005eb6:	4b4a      	ldr	r3, [pc, #296]	; (8005fe0 <LSM6DSL_0_Probe+0x140>)
 8005eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005eba:	4b4a      	ldr	r3, [pc, #296]	; (8005fe4 <LSM6DSL_0_Probe+0x144>)
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005ebe:	4b4a      	ldr	r3, [pc, #296]	; (8005fe8 <LSM6DSL_0_Probe+0x148>)
 8005ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005ec2:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <LSM6DSL_0_Probe+0x14c>)
 8005ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005ec6:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <LSM6DSL_0_Probe+0x150>)
 8005ec8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4848      	ldr	r0, [pc, #288]	; (8005ff4 <LSM6DSL_0_Probe+0x154>)
 8005ed2:	f7fe f891 	bl	8003ff8 <LSM6DSL_RegisterBusIO>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005edc:	f06f 0306 	mvn.w	r3, #6
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee2:	e077      	b.n	8005fd4 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005ee4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4842      	ldr	r0, [pc, #264]	; (8005ff4 <LSM6DSL_0_Probe+0x154>)
 8005eec:	f7fe f97a 	bl	80041e4 <LSM6DSL_ReadID>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ef6:	f06f 0306 	mvn.w	r3, #6
 8005efa:	647b      	str	r3, [r7, #68]	; 0x44
 8005efc:	e06a      	b.n	8005fd4 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f02:	2b6a      	cmp	r3, #106	; 0x6a
 8005f04:	d003      	beq.n	8005f0e <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f06:	f06f 0306 	mvn.w	r3, #6
 8005f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0c:	e062      	b.n	8005fd4 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	4619      	mov	r1, r3
 8005f14:	4837      	ldr	r0, [pc, #220]	; (8005ff4 <LSM6DSL_0_Probe+0x154>)
 8005f16:	f7fe f97b 	bl	8004210 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005f1a:	7a7b      	ldrb	r3, [r7, #9]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	7a3b      	ldrb	r3, [r7, #8]
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	431a      	orrs	r2, r3
 8005f24:	7abb      	ldrb	r3, [r7, #10]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	4a33      	ldr	r2, [pc, #204]	; (8005ff8 <LSM6DSL_0_Probe+0x158>)
 8005f2c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005f2e:	4b33      	ldr	r3, [pc, #204]	; (8005ffc <LSM6DSL_0_Probe+0x15c>)
 8005f30:	4a30      	ldr	r2, [pc, #192]	; (8005ff4 <LSM6DSL_0_Probe+0x154>)
 8005f32:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005f34:	4b32      	ldr	r3, [pc, #200]	; (8006000 <LSM6DSL_0_Probe+0x160>)
 8005f36:	4a33      	ldr	r2, [pc, #204]	; (8006004 <LSM6DSL_0_Probe+0x164>)
 8005f38:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11d      	bne.n	8005f7c <LSM6DSL_0_Probe+0xdc>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <LSM6DSL_0_Probe+0xdc>
 8005f4a:	7a7b      	ldrb	r3, [r7, #9]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d115      	bne.n	8005f7c <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005f50:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <LSM6DSL_0_Probe+0x168>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4a2d      	ldr	r2, [pc, #180]	; (800600c <LSM6DSL_0_Probe+0x16c>)
 8005f56:	492e      	ldr	r1, [pc, #184]	; (8006010 <LSM6DSL_0_Probe+0x170>)
 8005f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005f5c:	4b28      	ldr	r3, [pc, #160]	; (8006000 <LSM6DSL_0_Probe+0x160>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <LSM6DSL_0_Probe+0x15c>)
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	4610      	mov	r0, r2
 8005f68:	4798      	blx	r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f70:	f06f 0304 	mvn.w	r3, #4
 8005f74:	647b      	str	r3, [r7, #68]	; 0x44
 8005f76:	e001      	b.n	8005f7c <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d11d      	bne.n	8005fbe <LSM6DSL_0_Probe+0x11e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d018      	beq.n	8005fbe <LSM6DSL_0_Probe+0x11e>
 8005f8c:	7a3b      	ldrb	r3, [r7, #8]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d115      	bne.n	8005fbe <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <LSM6DSL_0_Probe+0x168>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4a1d      	ldr	r2, [pc, #116]	; (800600c <LSM6DSL_0_Probe+0x16c>)
 8005f98:	491e      	ldr	r1, [pc, #120]	; (8006014 <LSM6DSL_0_Probe+0x174>)
 8005f9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <LSM6DSL_0_Probe+0x160>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	; (8005ffc <LSM6DSL_0_Probe+0x15c>)
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fb2:	f06f 0304 	mvn.w	r3, #4
 8005fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb8:	e001      	b.n	8005fbe <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <LSM6DSL_0_Probe+0x134>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fce:	f06f 0304 	mvn.w	r3, #4
 8005fd2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3748      	adds	r7, #72	; 0x48
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	08000cc1 	.word	0x08000cc1
 8005fe4:	08000d3d 	.word	0x08000d3d
 8005fe8:	08000df1 	.word	0x08000df1
 8005fec:	08000d8d 	.word	0x08000d8d
 8005ff0:	08000e55 	.word	0x08000e55
 8005ff4:	200002a8 	.word	0x200002a8
 8005ff8:	2000029c 	.word	0x2000029c
 8005ffc:	200004bc 	.word	0x200004bc
 8006000:	20000290 	.word	0x20000290
 8006004:	200000dc 	.word	0x200000dc
 8006008:	20000148 	.word	0x20000148
 800600c:	2000026c 	.word	0x2000026c
 8006010:	20000110 	.word	0x20000110
 8006014:	200000ec 	.word	0x200000ec

08006018 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b092      	sub	sp, #72	; 0x48
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006020:	2300      	movs	r3, #0
 8006022:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006024:	2300      	movs	r3, #0
 8006026:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8006028:	2333      	movs	r3, #51	; 0x33
 800602a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800602e:	4b3f      	ldr	r3, [pc, #252]	; (800612c <LSM303AGR_ACC_0_Probe+0x114>)
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006032:	4b3f      	ldr	r3, [pc, #252]	; (8006130 <LSM303AGR_ACC_0_Probe+0x118>)
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006036:	4b3f      	ldr	r3, [pc, #252]	; (8006134 <LSM303AGR_ACC_0_Probe+0x11c>)
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800603a:	4b3f      	ldr	r3, [pc, #252]	; (8006138 <LSM303AGR_ACC_0_Probe+0x120>)
 800603c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800603e:	4b3f      	ldr	r3, [pc, #252]	; (800613c <LSM303AGR_ACC_0_Probe+0x124>)
 8006040:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006046:	4619      	mov	r1, r3
 8006048:	483d      	ldr	r0, [pc, #244]	; (8006140 <LSM303AGR_ACC_0_Probe+0x128>)
 800604a:	f7fc fc1f 	bl	800288c <LSM303AGR_ACC_RegisterBusIO>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006054:	f06f 0306 	mvn.w	r3, #6
 8006058:	647b      	str	r3, [r7, #68]	; 0x44
 800605a:	e062      	b.n	8006122 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800605c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006060:	4619      	mov	r1, r3
 8006062:	4837      	ldr	r0, [pc, #220]	; (8006140 <LSM303AGR_ACC_0_Probe+0x128>)
 8006064:	f7fc fcd3 	bl	8002a0e <LSM303AGR_ACC_ReadID>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800606e:	f06f 0306 	mvn.w	r3, #6
 8006072:	647b      	str	r3, [r7, #68]	; 0x44
 8006074:	e055      	b.n	8006122 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8006076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800607a:	2b33      	cmp	r3, #51	; 0x33
 800607c:	d003      	beq.n	8006086 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800607e:	f06f 0306 	mvn.w	r3, #6
 8006082:	647b      	str	r3, [r7, #68]	; 0x44
 8006084:	e04d      	b.n	8006122 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8006086:	f107 0308 	add.w	r3, r7, #8
 800608a:	4619      	mov	r1, r3
 800608c:	482c      	ldr	r0, [pc, #176]	; (8006140 <LSM303AGR_ACC_0_Probe+0x128>)
 800608e:	f7fc fcd5 	bl	8002a3c <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006092:	7a7b      	ldrb	r3, [r7, #9]
 8006094:	461a      	mov	r2, r3
 8006096:	7a3b      	ldrb	r3, [r7, #8]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800609c:	7abb      	ldrb	r3, [r7, #10]
 800609e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060a0:	4313      	orrs	r3, r2
 80060a2:	4a28      	ldr	r2, [pc, #160]	; (8006144 <LSM303AGR_ACC_0_Probe+0x12c>)
 80060a4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80060a6:	4b28      	ldr	r3, [pc, #160]	; (8006148 <LSM303AGR_ACC_0_Probe+0x130>)
 80060a8:	4a25      	ldr	r2, [pc, #148]	; (8006140 <LSM303AGR_ACC_0_Probe+0x128>)
 80060aa:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80060ac:	4b27      	ldr	r3, [pc, #156]	; (800614c <LSM303AGR_ACC_0_Probe+0x134>)
 80060ae:	4a28      	ldr	r2, [pc, #160]	; (8006150 <LSM303AGR_ACC_0_Probe+0x138>)
 80060b0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80060b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d11e      	bne.n	80060f6 <LSM303AGR_ACC_0_Probe+0xde>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d019      	beq.n	80060f6 <LSM303AGR_ACC_0_Probe+0xde>
 80060c2:	7a3b      	ldrb	r3, [r7, #8]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d116      	bne.n	80060f6 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <LSM303AGR_ACC_0_Probe+0x13c>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	4a22      	ldr	r2, [pc, #136]	; (8006158 <LSM303AGR_ACC_0_Probe+0x140>)
 80060ce:	3303      	adds	r3, #3
 80060d0:	4922      	ldr	r1, [pc, #136]	; (800615c <LSM303AGR_ACC_0_Probe+0x144>)
 80060d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80060d6:	4b1d      	ldr	r3, [pc, #116]	; (800614c <LSM303AGR_ACC_0_Probe+0x134>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1a      	ldr	r2, [pc, #104]	; (8006148 <LSM303AGR_ACC_0_Probe+0x130>)
 80060de:	6852      	ldr	r2, [r2, #4]
 80060e0:	4610      	mov	r0, r2
 80060e2:	4798      	blx	r3
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80060ea:	f06f 0304 	mvn.w	r3, #4
 80060ee:	647b      	str	r3, [r7, #68]	; 0x44
 80060f0:	e001      	b.n	80060f6 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80060f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d107      	bne.n	800610c <LSM303AGR_ACC_0_Probe+0xf4>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006106:	f06f 0304 	mvn.w	r3, #4
 800610a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800610c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <LSM303AGR_ACC_0_Probe+0x10a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800611c:	f06f 0304 	mvn.w	r3, #4
 8006120:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006124:	4618      	mov	r0, r3
 8006126:	3748      	adds	r7, #72	; 0x48
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	08000cc1 	.word	0x08000cc1
 8006130:	08000d3d 	.word	0x08000d3d
 8006134:	08000df1 	.word	0x08000df1
 8006138:	08000d8d 	.word	0x08000d8d
 800613c:	08000e55 	.word	0x08000e55
 8006140:	200002d8 	.word	0x200002d8
 8006144:	2000029c 	.word	0x2000029c
 8006148:	200004bc 	.word	0x200004bc
 800614c:	20000290 	.word	0x20000290
 8006150:	20000074 	.word	0x20000074
 8006154:	20000148 	.word	0x20000148
 8006158:	2000026c 	.word	0x2000026c
 800615c:	20000084 	.word	0x20000084

08006160 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b092      	sub	sp, #72	; 0x48
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006168:	2300      	movs	r3, #0
 800616a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800616c:	2300      	movs	r3, #0
 800616e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006170:	233d      	movs	r3, #61	; 0x3d
 8006172:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006176:	4b3f      	ldr	r3, [pc, #252]	; (8006274 <LSM303AGR_MAG_0_Probe+0x114>)
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800617a:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <LSM303AGR_MAG_0_Probe+0x118>)
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800617e:	4b3f      	ldr	r3, [pc, #252]	; (800627c <LSM303AGR_MAG_0_Probe+0x11c>)
 8006180:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006182:	4b3f      	ldr	r3, [pc, #252]	; (8006280 <LSM303AGR_MAG_0_Probe+0x120>)
 8006184:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006186:	4b3f      	ldr	r3, [pc, #252]	; (8006284 <LSM303AGR_MAG_0_Probe+0x124>)
 8006188:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800618a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800618e:	4619      	mov	r1, r3
 8006190:	483d      	ldr	r0, [pc, #244]	; (8006288 <LSM303AGR_MAG_0_Probe+0x128>)
 8006192:	f7fc ff41 	bl	8003018 <LSM303AGR_MAG_RegisterBusIO>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800619c:	f06f 0306 	mvn.w	r3, #6
 80061a0:	647b      	str	r3, [r7, #68]	; 0x44
 80061a2:	e062      	b.n	800626a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80061a4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80061a8:	4619      	mov	r1, r3
 80061aa:	4837      	ldr	r0, [pc, #220]	; (8006288 <LSM303AGR_MAG_0_Probe+0x128>)
 80061ac:	f7fc ffeb 	bl	8003186 <LSM303AGR_MAG_ReadID>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061b6:	f06f 0306 	mvn.w	r3, #6
 80061ba:	647b      	str	r3, [r7, #68]	; 0x44
 80061bc:	e055      	b.n	800626a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80061be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d003      	beq.n	80061ce <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061c6:	f06f 0306 	mvn.w	r3, #6
 80061ca:	647b      	str	r3, [r7, #68]	; 0x44
 80061cc:	e04d      	b.n	800626a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4619      	mov	r1, r3
 80061d4:	482c      	ldr	r0, [pc, #176]	; (8006288 <LSM303AGR_MAG_0_Probe+0x128>)
 80061d6:	f7fc ffed 	bl	80031b4 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80061da:	7a7b      	ldrb	r3, [r7, #9]
 80061dc:	461a      	mov	r2, r3
 80061de:	7a3b      	ldrb	r3, [r7, #8]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80061e4:	7abb      	ldrb	r3, [r7, #10]
 80061e6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80061e8:	4313      	orrs	r3, r2
 80061ea:	4a28      	ldr	r2, [pc, #160]	; (800628c <LSM303AGR_MAG_0_Probe+0x12c>)
 80061ec:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80061ee:	4b28      	ldr	r3, [pc, #160]	; (8006290 <LSM303AGR_MAG_0_Probe+0x130>)
 80061f0:	4a25      	ldr	r2, [pc, #148]	; (8006288 <LSM303AGR_MAG_0_Probe+0x128>)
 80061f2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80061f4:	4b27      	ldr	r3, [pc, #156]	; (8006294 <LSM303AGR_MAG_0_Probe+0x134>)
 80061f6:	4a28      	ldr	r2, [pc, #160]	; (8006298 <LSM303AGR_MAG_0_Probe+0x138>)
 80061f8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80061fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11e      	bne.n	800623e <LSM303AGR_MAG_0_Probe+0xde>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d019      	beq.n	800623e <LSM303AGR_MAG_0_Probe+0xde>
 800620a:	7abb      	ldrb	r3, [r7, #10]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d116      	bne.n	800623e <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006210:	4b22      	ldr	r3, [pc, #136]	; (800629c <LSM303AGR_MAG_0_Probe+0x13c>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <LSM303AGR_MAG_0_Probe+0x140>)
 8006216:	3306      	adds	r3, #6
 8006218:	4922      	ldr	r1, [pc, #136]	; (80062a4 <LSM303AGR_MAG_0_Probe+0x144>)
 800621a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <LSM303AGR_MAG_0_Probe+0x134>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <LSM303AGR_MAG_0_Probe+0x130>)
 8006226:	6892      	ldr	r2, [r2, #8]
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006232:	f06f 0304 	mvn.w	r3, #4
 8006236:	647b      	str	r3, [r7, #68]	; 0x44
 8006238:	e001      	b.n	800623e <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800623a:	2300      	movs	r3, #0
 800623c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800623e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006240:	2b00      	cmp	r3, #0
 8006242:	d107      	bne.n	8006254 <LSM303AGR_MAG_0_Probe+0xf4>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800624e:	f06f 0304 	mvn.w	r3, #4
 8006252:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <LSM303AGR_MAG_0_Probe+0x10a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006264:	f06f 0304 	mvn.w	r3, #4
 8006268:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800626a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800626c:	4618      	mov	r0, r3
 800626e:	3748      	adds	r7, #72	; 0x48
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	08000cc1 	.word	0x08000cc1
 8006278:	08000d3d 	.word	0x08000d3d
 800627c:	08000df1 	.word	0x08000df1
 8006280:	08000d8d 	.word	0x08000d8d
 8006284:	08000e55 	.word	0x08000e55
 8006288:	20000304 	.word	0x20000304
 800628c:	2000029c 	.word	0x2000029c
 8006290:	200004bc 	.word	0x200004bc
 8006294:	20000290 	.word	0x20000290
 8006298:	200000a8 	.word	0x200000a8
 800629c:	20000148 	.word	0x20000148
 80062a0:	2000026c 	.word	0x2000026c
 80062a4:	200000b8 	.word	0x200000b8

080062a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062b2:	2003      	movs	r0, #3
 80062b4:	f000 f942 	bl	800653c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062b8:	2000      	movs	r0, #0
 80062ba:	f000 f80d 	bl	80062d8 <HAL_InitTick>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	71fb      	strb	r3, [r7, #7]
 80062c8:	e001      	b.n	80062ce <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80062ca:	f7fa fc0b 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80062ce:	79fb      	ldrb	r3, [r7, #7]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80062e4:	4b17      	ldr	r3, [pc, #92]	; (8006344 <HAL_InitTick+0x6c>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d023      	beq.n	8006334 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80062ec:	4b16      	ldr	r3, [pc, #88]	; (8006348 <HAL_InitTick+0x70>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b14      	ldr	r3, [pc, #80]	; (8006344 <HAL_InitTick+0x6c>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f941 	bl	800658a <HAL_SYSTICK_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d809      	bhi.n	8006328 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006314:	2200      	movs	r2, #0
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	f000 f919 	bl	8006552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006320:	4a0a      	ldr	r2, [pc, #40]	; (800634c <HAL_InitTick+0x74>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e007      	b.n	8006338 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
 800632c:	e004      	b.n	8006338 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	e001      	b.n	8006338 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000160 	.word	0x20000160
 8006348:	20000000 	.word	0x20000000
 800634c:	2000015c 	.word	0x2000015c

08006350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_IncTick+0x20>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_IncTick+0x24>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4413      	add	r3, r2
 8006360:	4a04      	ldr	r2, [pc, #16]	; (8006374 <HAL_IncTick+0x24>)
 8006362:	6013      	str	r3, [r2, #0]
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20000160 	.word	0x20000160
 8006374:	200004c8 	.word	0x200004c8

08006378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  return uwTick;
 800637c:	4b03      	ldr	r3, [pc, #12]	; (800638c <HAL_GetTick+0x14>)
 800637e:	681b      	ldr	r3, [r3, #0]
}
 8006380:	4618      	mov	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	200004c8 	.word	0x200004c8

08006390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006398:	f7ff ffee 	bl	8006378 <HAL_GetTick>
 800639c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d005      	beq.n	80063b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <HAL_Delay+0x44>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063b6:	bf00      	nop
 80063b8:	f7ff ffde 	bl	8006378 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d8f7      	bhi.n	80063b8 <HAL_Delay+0x28>
  {
  }
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000160 	.word	0x20000160

080063d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <__NVIC_SetPriorityGrouping+0x44>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063f4:	4013      	ands	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800640a:	4a04      	ldr	r2, [pc, #16]	; (800641c <__NVIC_SetPriorityGrouping+0x44>)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	60d3      	str	r3, [r2, #12]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	e000ed00 	.word	0xe000ed00

08006420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006424:	4b04      	ldr	r3, [pc, #16]	; (8006438 <__NVIC_GetPriorityGrouping+0x18>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	0a1b      	lsrs	r3, r3, #8
 800642a:	f003 0307 	and.w	r3, r3, #7
}
 800642e:	4618      	mov	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	e000ed00 	.word	0xe000ed00

0800643c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	6039      	str	r1, [r7, #0]
 8006446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644c:	2b00      	cmp	r3, #0
 800644e:	db0a      	blt.n	8006466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	490c      	ldr	r1, [pc, #48]	; (8006488 <__NVIC_SetPriority+0x4c>)
 8006456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645a:	0112      	lsls	r2, r2, #4
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	440b      	add	r3, r1
 8006460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006464:	e00a      	b.n	800647c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4908      	ldr	r1, [pc, #32]	; (800648c <__NVIC_SetPriority+0x50>)
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	3b04      	subs	r3, #4
 8006474:	0112      	lsls	r2, r2, #4
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	440b      	add	r3, r1
 800647a:	761a      	strb	r2, [r3, #24]
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000e100 	.word	0xe000e100
 800648c:	e000ed00 	.word	0xe000ed00

08006490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006490:	b480      	push	{r7}
 8006492:	b089      	sub	sp, #36	; 0x24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f1c3 0307 	rsb	r3, r3, #7
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	bf28      	it	cs
 80064ae:	2304      	movcs	r3, #4
 80064b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3304      	adds	r3, #4
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d902      	bls.n	80064c0 <NVIC_EncodePriority+0x30>
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3b03      	subs	r3, #3
 80064be:	e000      	b.n	80064c2 <NVIC_EncodePriority+0x32>
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064c4:	f04f 32ff 	mov.w	r2, #4294967295
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43da      	mvns	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	401a      	ands	r2, r3
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064d8:	f04f 31ff 	mov.w	r1, #4294967295
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	fa01 f303 	lsl.w	r3, r1, r3
 80064e2:	43d9      	mvns	r1, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e8:	4313      	orrs	r3, r2
         );
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3724      	adds	r7, #36	; 0x24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3b01      	subs	r3, #1
 8006504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006508:	d301      	bcc.n	800650e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800650a:	2301      	movs	r3, #1
 800650c:	e00f      	b.n	800652e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800650e:	4a0a      	ldr	r2, [pc, #40]	; (8006538 <SysTick_Config+0x40>)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006516:	210f      	movs	r1, #15
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	f7ff ff8e 	bl	800643c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <SysTick_Config+0x40>)
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006526:	4b04      	ldr	r3, [pc, #16]	; (8006538 <SysTick_Config+0x40>)
 8006528:	2207      	movs	r2, #7
 800652a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	e000e010 	.word	0xe000e010

0800653c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff47 	bl	80063d8 <__NVIC_SetPriorityGrouping>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b086      	sub	sp, #24
 8006556:	af00      	add	r7, sp, #0
 8006558:	4603      	mov	r3, r0
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006564:	f7ff ff5c 	bl	8006420 <__NVIC_GetPriorityGrouping>
 8006568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	6978      	ldr	r0, [r7, #20]
 8006570:	f7ff ff8e 	bl	8006490 <NVIC_EncodePriority>
 8006574:	4602      	mov	r2, r0
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	4611      	mov	r1, r2
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff ff5d 	bl	800643c <__NVIC_SetPriority>
}
 8006582:	bf00      	nop
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff ffb0 	bl	80064f8 <SysTick_Config>
 8006598:	4603      	mov	r3, r0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065b2:	e17f      	b.n	80068b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	2101      	movs	r1, #1
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	fa01 f303 	lsl.w	r3, r1, r3
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8171 	beq.w	80068ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d005      	beq.n	80065e4 <HAL_GPIO_Init+0x40>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d130      	bne.n	8006646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	2203      	movs	r2, #3
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4013      	ands	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800661a:	2201      	movs	r2, #1
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43db      	mvns	r3, r3
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4013      	ands	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	091b      	lsrs	r3, r3, #4
 8006630:	f003 0201 	and.w	r2, r3, #1
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d118      	bne.n	8006684 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006658:	2201      	movs	r2, #1
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	43db      	mvns	r3, r3
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4013      	ands	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	f003 0201 	and.w	r2, r3, #1
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	2b03      	cmp	r3, #3
 800668e:	d017      	beq.n	80066c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	2203      	movs	r2, #3
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4013      	ands	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d123      	bne.n	8006714 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	08da      	lsrs	r2, r3, #3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3208      	adds	r2, #8
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	220f      	movs	r2, #15
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	43db      	mvns	r3, r3
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4013      	ands	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	08da      	lsrs	r2, r3, #3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3208      	adds	r2, #8
 800670e:	6939      	ldr	r1, [r7, #16]
 8006710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	2203      	movs	r2, #3
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	43db      	mvns	r3, r3
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4013      	ands	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f003 0203 	and.w	r2, r3, #3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80ac 	beq.w	80068ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006756:	4b5f      	ldr	r3, [pc, #380]	; (80068d4 <HAL_GPIO_Init+0x330>)
 8006758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675a:	4a5e      	ldr	r2, [pc, #376]	; (80068d4 <HAL_GPIO_Init+0x330>)
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	6613      	str	r3, [r2, #96]	; 0x60
 8006762:	4b5c      	ldr	r3, [pc, #368]	; (80068d4 <HAL_GPIO_Init+0x330>)
 8006764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	60bb      	str	r3, [r7, #8]
 800676c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800676e:	4a5a      	ldr	r2, [pc, #360]	; (80068d8 <HAL_GPIO_Init+0x334>)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	3302      	adds	r3, #2
 8006776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800677a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	220f      	movs	r2, #15
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43db      	mvns	r3, r3
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4013      	ands	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006798:	d025      	beq.n	80067e6 <HAL_GPIO_Init+0x242>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a4f      	ldr	r2, [pc, #316]	; (80068dc <HAL_GPIO_Init+0x338>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01f      	beq.n	80067e2 <HAL_GPIO_Init+0x23e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a4e      	ldr	r2, [pc, #312]	; (80068e0 <HAL_GPIO_Init+0x33c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d019      	beq.n	80067de <HAL_GPIO_Init+0x23a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a4d      	ldr	r2, [pc, #308]	; (80068e4 <HAL_GPIO_Init+0x340>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <HAL_GPIO_Init+0x236>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a4c      	ldr	r2, [pc, #304]	; (80068e8 <HAL_GPIO_Init+0x344>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00d      	beq.n	80067d6 <HAL_GPIO_Init+0x232>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a4b      	ldr	r2, [pc, #300]	; (80068ec <HAL_GPIO_Init+0x348>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d007      	beq.n	80067d2 <HAL_GPIO_Init+0x22e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a4a      	ldr	r2, [pc, #296]	; (80068f0 <HAL_GPIO_Init+0x34c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d101      	bne.n	80067ce <HAL_GPIO_Init+0x22a>
 80067ca:	2306      	movs	r3, #6
 80067cc:	e00c      	b.n	80067e8 <HAL_GPIO_Init+0x244>
 80067ce:	2307      	movs	r3, #7
 80067d0:	e00a      	b.n	80067e8 <HAL_GPIO_Init+0x244>
 80067d2:	2305      	movs	r3, #5
 80067d4:	e008      	b.n	80067e8 <HAL_GPIO_Init+0x244>
 80067d6:	2304      	movs	r3, #4
 80067d8:	e006      	b.n	80067e8 <HAL_GPIO_Init+0x244>
 80067da:	2303      	movs	r3, #3
 80067dc:	e004      	b.n	80067e8 <HAL_GPIO_Init+0x244>
 80067de:	2302      	movs	r3, #2
 80067e0:	e002      	b.n	80067e8 <HAL_GPIO_Init+0x244>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <HAL_GPIO_Init+0x244>
 80067e6:	2300      	movs	r3, #0
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	f002 0203 	and.w	r2, r2, #3
 80067ee:	0092      	lsls	r2, r2, #2
 80067f0:	4093      	lsls	r3, r2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80067f8:	4937      	ldr	r1, [pc, #220]	; (80068d8 <HAL_GPIO_Init+0x334>)
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	089b      	lsrs	r3, r3, #2
 80067fe:	3302      	adds	r3, #2
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006806:	4b3b      	ldr	r3, [pc, #236]	; (80068f4 <HAL_GPIO_Init+0x350>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	43db      	mvns	r3, r3
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4013      	ands	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800682a:	4a32      	ldr	r2, [pc, #200]	; (80068f4 <HAL_GPIO_Init+0x350>)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006830:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <HAL_GPIO_Init+0x350>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	43db      	mvns	r3, r3
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4013      	ands	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006854:	4a27      	ldr	r2, [pc, #156]	; (80068f4 <HAL_GPIO_Init+0x350>)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800685a:	4b26      	ldr	r3, [pc, #152]	; (80068f4 <HAL_GPIO_Init+0x350>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	43db      	mvns	r3, r3
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4013      	ands	r3, r2
 8006868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800687e:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <HAL_GPIO_Init+0x350>)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006884:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <HAL_GPIO_Init+0x350>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	43db      	mvns	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068a8:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <HAL_GPIO_Init+0x350>)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	3301      	adds	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	fa22 f303 	lsr.w	r3, r2, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f47f ae78 	bne.w	80065b4 <HAL_GPIO_Init+0x10>
  }
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40021000 	.word	0x40021000
 80068d8:	40010000 	.word	0x40010000
 80068dc:	48000400 	.word	0x48000400
 80068e0:	48000800 	.word	0x48000800
 80068e4:	48000c00 	.word	0x48000c00
 80068e8:	48001000 	.word	0x48001000
 80068ec:	48001400 	.word	0x48001400
 80068f0:	48001800 	.word	0x48001800
 80068f4:	40010400 	.word	0x40010400

080068f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006906:	e0cd      	b.n	8006aa4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006908:	2201      	movs	r2, #1
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	4013      	ands	r3, r2
 8006914:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80c0 	beq.w	8006a9e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800691e:	4a68      	ldr	r2, [pc, #416]	; (8006ac0 <HAL_GPIO_DeInit+0x1c8>)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	089b      	lsrs	r3, r3, #2
 8006924:	3302      	adds	r3, #2
 8006926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	220f      	movs	r2, #15
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4013      	ands	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006946:	d025      	beq.n	8006994 <HAL_GPIO_DeInit+0x9c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a5e      	ldr	r2, [pc, #376]	; (8006ac4 <HAL_GPIO_DeInit+0x1cc>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d01f      	beq.n	8006990 <HAL_GPIO_DeInit+0x98>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a5d      	ldr	r2, [pc, #372]	; (8006ac8 <HAL_GPIO_DeInit+0x1d0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d019      	beq.n	800698c <HAL_GPIO_DeInit+0x94>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a5c      	ldr	r2, [pc, #368]	; (8006acc <HAL_GPIO_DeInit+0x1d4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_GPIO_DeInit+0x90>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a5b      	ldr	r2, [pc, #364]	; (8006ad0 <HAL_GPIO_DeInit+0x1d8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00d      	beq.n	8006984 <HAL_GPIO_DeInit+0x8c>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a5a      	ldr	r2, [pc, #360]	; (8006ad4 <HAL_GPIO_DeInit+0x1dc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <HAL_GPIO_DeInit+0x88>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a59      	ldr	r2, [pc, #356]	; (8006ad8 <HAL_GPIO_DeInit+0x1e0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d101      	bne.n	800697c <HAL_GPIO_DeInit+0x84>
 8006978:	2306      	movs	r3, #6
 800697a:	e00c      	b.n	8006996 <HAL_GPIO_DeInit+0x9e>
 800697c:	2307      	movs	r3, #7
 800697e:	e00a      	b.n	8006996 <HAL_GPIO_DeInit+0x9e>
 8006980:	2305      	movs	r3, #5
 8006982:	e008      	b.n	8006996 <HAL_GPIO_DeInit+0x9e>
 8006984:	2304      	movs	r3, #4
 8006986:	e006      	b.n	8006996 <HAL_GPIO_DeInit+0x9e>
 8006988:	2303      	movs	r3, #3
 800698a:	e004      	b.n	8006996 <HAL_GPIO_DeInit+0x9e>
 800698c:	2302      	movs	r3, #2
 800698e:	e002      	b.n	8006996 <HAL_GPIO_DeInit+0x9e>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <HAL_GPIO_DeInit+0x9e>
 8006994:	2300      	movs	r3, #0
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	f002 0203 	and.w	r2, r2, #3
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	4093      	lsls	r3, r2
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d132      	bne.n	8006a0c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80069a6:	4b4d      	ldr	r3, [pc, #308]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	43db      	mvns	r3, r3
 80069ae:	494b      	ldr	r1, [pc, #300]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80069b4:	4b49      	ldr	r3, [pc, #292]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	43db      	mvns	r3, r3
 80069bc:	4947      	ldr	r1, [pc, #284]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069be:	4013      	ands	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80069c2:	4b46      	ldr	r3, [pc, #280]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	43db      	mvns	r3, r3
 80069ca:	4944      	ldr	r1, [pc, #272]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80069d0:	4b42      	ldr	r3, [pc, #264]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	43db      	mvns	r3, r3
 80069d8:	4940      	ldr	r1, [pc, #256]	; (8006adc <HAL_GPIO_DeInit+0x1e4>)
 80069da:	4013      	ands	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	220f      	movs	r2, #15
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80069ee:	4a34      	ldr	r2, [pc, #208]	; (8006ac0 <HAL_GPIO_DeInit+0x1c8>)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	089b      	lsrs	r3, r3, #2
 80069f4:	3302      	adds	r3, #2
 80069f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	43da      	mvns	r2, r3
 80069fe:	4830      	ldr	r0, [pc, #192]	; (8006ac0 <HAL_GPIO_DeInit+0x1c8>)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	089b      	lsrs	r3, r3, #2
 8006a04:	400a      	ands	r2, r1
 8006a06:	3302      	adds	r3, #2
 8006a08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	2103      	movs	r1, #3
 8006a16:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	08da      	lsrs	r2, r3, #3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3208      	adds	r2, #8
 8006a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	220f      	movs	r2, #15
 8006a36:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	08d2      	lsrs	r2, r2, #3
 8006a40:	4019      	ands	r1, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3208      	adds	r2, #8
 8006a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	2103      	movs	r1, #3
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	2101      	movs	r1, #1
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	401a      	ands	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	2103      	movs	r1, #3
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	43db      	mvns	r3, r3
 8006a84:	401a      	ands	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	2101      	movs	r1, #1
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	401a      	ands	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f47f af2b 	bne.w	8006908 <HAL_GPIO_DeInit+0x10>
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	48000400 	.word	0x48000400
 8006ac8:	48000800 	.word	0x48000800
 8006acc:	48000c00 	.word	0x48000c00
 8006ad0:	48001000 	.word	0x48001000
 8006ad4:	48001400 	.word	0x48001400
 8006ad8:	48001800 	.word	0x48001800
 8006adc:	40010400 	.word	0x40010400

08006ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	807b      	strh	r3, [r7, #2]
 8006aec:	4613      	mov	r3, r2
 8006aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006af0:	787b      	ldrb	r3, [r7, #1]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006af6:	887a      	ldrh	r2, [r7, #2]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006afc:	e002      	b.n	8006b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006afe:	887a      	ldrh	r2, [r7, #2]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e081      	b.n	8006c26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f8a8 	bl	8006c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2224      	movs	r2, #36	; 0x24
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d107      	bne.n	8006b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b86:	609a      	str	r2, [r3, #8]
 8006b88:	e006      	b.n	8006b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d104      	bne.n	8006baa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69d9      	ldr	r1, [r3, #28]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1a      	ldr	r2, [r3, #32]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e021      	b.n	8006c84 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	; 0x24
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f821 	bl	8006ca0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	817b      	strh	r3, [r7, #10]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	813b      	strh	r3, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	f040 80f9 	bne.w	8006ece <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <HAL_I2C_Mem_Write+0x34>
 8006ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0ed      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_I2C_Mem_Write+0x4e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e0e6      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d0a:	f7ff fb35 	bl	8006378 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	2319      	movs	r3, #25
 8006d16:	2201      	movs	r2, #1
 8006d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fadd 	bl	80072dc <I2C_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0d1      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2221      	movs	r2, #33	; 0x21
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2240      	movs	r2, #64	; 0x40
 8006d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a3a      	ldr	r2, [r7, #32]
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d54:	88f8      	ldrh	r0, [r7, #6]
 8006d56:	893a      	ldrh	r2, [r7, #8]
 8006d58:	8979      	ldrh	r1, [r7, #10]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4603      	mov	r3, r0
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f9ed 	bl	8007144 <I2C_RequestMemoryWrite>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0a9      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2bff      	cmp	r3, #255	; 0xff
 8006d84:	d90e      	bls.n	8006da4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	22ff      	movs	r2, #255	; 0xff
 8006d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	8979      	ldrh	r1, [r7, #10]
 8006d94:	2300      	movs	r3, #0
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fc45 	bl	800762c <I2C_TransferConfig>
 8006da2:	e00f      	b.n	8006dc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	8979      	ldrh	r1, [r7, #10]
 8006db6:	2300      	movs	r3, #0
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 fc34 	bl	800762c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fac7 	bl	800735c <I2C_WaitOnTXISFlagUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e07b      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d034      	beq.n	8006e7c <HAL_I2C_Mem_Write+0x1c8>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d130      	bne.n	8006e7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	2200      	movs	r2, #0
 8006e22:	2180      	movs	r1, #128	; 0x80
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fa59 	bl	80072dc <I2C_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e04d      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2bff      	cmp	r3, #255	; 0xff
 8006e3c:	d90e      	bls.n	8006e5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	22ff      	movs	r2, #255	; 0xff
 8006e42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	8979      	ldrh	r1, [r7, #10]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fbe9 	bl	800762c <I2C_TransferConfig>
 8006e5a:	e00f      	b.n	8006e7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	8979      	ldrh	r1, [r7, #10]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fbd8 	bl	800762c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d19e      	bne.n	8006dc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 faa6 	bl	80073dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e01a      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6859      	ldr	r1, [r3, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <HAL_I2C_Mem_Write+0x224>)
 8006eae:	400b      	ands	r3, r1
 8006eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e000      	b.n	8006ed0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006ece:	2302      	movs	r3, #2
  }
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	fe00e800 	.word	0xfe00e800

08006edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	817b      	strh	r3, [r7, #10]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	813b      	strh	r3, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	f040 80fd 	bne.w	80070fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_I2C_Mem_Read+0x34>
 8006f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0f1      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HAL_I2C_Mem_Read+0x4e>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e0ea      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f32:	f7ff fa21 	bl	8006378 <HAL_GetTick>
 8006f36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	2319      	movs	r3, #25
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f9c9 	bl	80072dc <I2C_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0d5      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2222      	movs	r2, #34	; 0x22
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2240      	movs	r2, #64	; 0x40
 8006f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a3a      	ldr	r2, [r7, #32]
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f7c:	88f8      	ldrh	r0, [r7, #6]
 8006f7e:	893a      	ldrh	r2, [r7, #8]
 8006f80:	8979      	ldrh	r1, [r7, #10]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f92d 	bl	80071ec <I2C_RequestMemoryRead>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0ad      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2bff      	cmp	r3, #255	; 0xff
 8006fac:	d90e      	bls.n	8006fcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	22ff      	movs	r2, #255	; 0xff
 8006fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	8979      	ldrh	r1, [r7, #10]
 8006fbc:	4b52      	ldr	r3, [pc, #328]	; (8007108 <HAL_I2C_Mem_Read+0x22c>)
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 fb31 	bl	800762c <I2C_TransferConfig>
 8006fca:	e00f      	b.n	8006fec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	8979      	ldrh	r1, [r7, #10]
 8006fde:	4b4a      	ldr	r3, [pc, #296]	; (8007108 <HAL_I2C_Mem_Read+0x22c>)
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fb20 	bl	800762c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2104      	movs	r1, #4
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f970 	bl	80072dc <I2C_WaitOnFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e07c      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d034      	beq.n	80070ac <HAL_I2C_Mem_Read+0x1d0>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007046:	2b00      	cmp	r3, #0
 8007048:	d130      	bne.n	80070ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	2200      	movs	r2, #0
 8007052:	2180      	movs	r1, #128	; 0x80
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f941 	bl	80072dc <I2C_WaitOnFlagUntilTimeout>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e04d      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	2bff      	cmp	r3, #255	; 0xff
 800706c:	d90e      	bls.n	800708c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	22ff      	movs	r2, #255	; 0xff
 8007072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007078:	b2da      	uxtb	r2, r3
 800707a:	8979      	ldrh	r1, [r7, #10]
 800707c:	2300      	movs	r3, #0
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fad1 	bl	800762c <I2C_TransferConfig>
 800708a:	e00f      	b.n	80070ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709a:	b2da      	uxtb	r2, r3
 800709c:	8979      	ldrh	r1, [r7, #10]
 800709e:	2300      	movs	r3, #0
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fac0 	bl	800762c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d19a      	bne.n	8006fec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f98e 	bl	80073dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e01a      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2220      	movs	r2, #32
 80070d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6859      	ldr	r1, [r3, #4]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_I2C_Mem_Read+0x230>)
 80070de:	400b      	ands	r3, r1
 80070e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e000      	b.n	8007100 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80070fe:	2302      	movs	r3, #2
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	80002400 	.word	0x80002400
 800710c:	fe00e800 	.word	0xfe00e800

08007110 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800711e:	b2db      	uxtb	r3, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4603      	mov	r3, r0
 8007154:	817b      	strh	r3, [r7, #10]
 8007156:	460b      	mov	r3, r1
 8007158:	813b      	strh	r3, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	b2da      	uxtb	r2, r3
 8007162:	8979      	ldrh	r1, [r7, #10]
 8007164:	4b20      	ldr	r3, [pc, #128]	; (80071e8 <I2C_RequestMemoryWrite+0xa4>)
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fa5d 	bl	800762c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	69b9      	ldr	r1, [r7, #24]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f8f0 	bl	800735c <I2C_WaitOnTXISFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e02c      	b.n	80071e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d105      	bne.n	8007198 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800718c:	893b      	ldrh	r3, [r7, #8]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	629a      	str	r2, [r3, #40]	; 0x28
 8007196:	e015      	b.n	80071c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007198:	893b      	ldrh	r3, [r7, #8]
 800719a:	0a1b      	lsrs	r3, r3, #8
 800719c:	b29b      	uxth	r3, r3
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	69b9      	ldr	r1, [r7, #24]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f8d6 	bl	800735c <I2C_WaitOnTXISFlagUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e012      	b.n	80071e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071ba:	893b      	ldrh	r3, [r7, #8]
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2200      	movs	r2, #0
 80071cc:	2180      	movs	r1, #128	; 0x80
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f884 	bl	80072dc <I2C_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	80002000 	.word	0x80002000

080071ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	4603      	mov	r3, r0
 80071fc:	817b      	strh	r3, [r7, #10]
 80071fe:	460b      	mov	r3, r1
 8007200:	813b      	strh	r3, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	b2da      	uxtb	r2, r3
 800720a:	8979      	ldrh	r1, [r7, #10]
 800720c:	4b20      	ldr	r3, [pc, #128]	; (8007290 <I2C_RequestMemoryRead+0xa4>)
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2300      	movs	r3, #0
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fa0a 	bl	800762c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	69b9      	ldr	r1, [r7, #24]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f89d 	bl	800735c <I2C_WaitOnTXISFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e02c      	b.n	8007286 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d105      	bne.n	800723e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007232:	893b      	ldrh	r3, [r7, #8]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	629a      	str	r2, [r3, #40]	; 0x28
 800723c:	e015      	b.n	800726a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800723e:	893b      	ldrh	r3, [r7, #8]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	b29b      	uxth	r3, r3
 8007244:	b2da      	uxtb	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	69b9      	ldr	r1, [r7, #24]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f883 	bl	800735c <I2C_WaitOnTXISFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e012      	b.n	8007286 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007260:	893b      	ldrh	r3, [r7, #8]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2200      	movs	r2, #0
 8007272:	2140      	movs	r1, #64	; 0x40
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f831 	bl	80072dc <I2C_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	80002000 	.word	0x80002000

08007294 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d103      	bne.n	80072b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d007      	beq.n	80072d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	619a      	str	r2, [r3, #24]
  }
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072ec:	e022      	b.n	8007334 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d01e      	beq.n	8007334 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f6:	f7ff f83f 	bl	8006378 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d302      	bcc.n	800730c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d113      	bne.n	8007334 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007310:	f043 0220 	orr.w	r2, r3, #32
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e00f      	b.n	8007354 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4013      	ands	r3, r2
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	429a      	cmp	r2, r3
 8007342:	bf0c      	ite	eq
 8007344:	2301      	moveq	r3, #1
 8007346:	2300      	movne	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	461a      	mov	r2, r3
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	429a      	cmp	r2, r3
 8007350:	d0cd      	beq.n	80072ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007368:	e02c      	b.n	80073c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f870 	bl	8007454 <I2C_IsErrorOccurred>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e02a      	b.n	80073d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007384:	d01e      	beq.n	80073c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007386:	f7fe fff7 	bl	8006378 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d113      	bne.n	80073c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a0:	f043 0220 	orr.w	r2, r3, #32
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e007      	b.n	80073d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d1cb      	bne.n	800736a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073e8:	e028      	b.n	800743c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f830 	bl	8007454 <I2C_IsErrorOccurred>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e026      	b.n	800744c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073fe:	f7fe ffbb 	bl	8006378 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	d302      	bcc.n	8007414 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d113      	bne.n	800743c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007418:	f043 0220 	orr.w	r2, r3, #32
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e007      	b.n	800744c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b20      	cmp	r3, #32
 8007448:	d1cf      	bne.n	80073ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b00      	cmp	r3, #0
 800747e:	d075      	beq.n	800756c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2210      	movs	r2, #16
 8007486:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007488:	e056      	b.n	8007538 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d052      	beq.n	8007538 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007492:	f7fe ff71 	bl	8006378 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d302      	bcc.n	80074a8 <I2C_IsErrorOccurred+0x54>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d147      	bne.n	8007538 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ca:	d12e      	bne.n	800752a <I2C_IsErrorOccurred+0xd6>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d2:	d02a      	beq.n	800752a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d027      	beq.n	800752a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074e8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80074ea:	f7fe ff45 	bl	8006378 <HAL_GetTick>
 80074ee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074f0:	e01b      	b.n	800752a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80074f2:	f7fe ff41 	bl	8006378 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b19      	cmp	r3, #25
 80074fe:	d914      	bls.n	800752a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b20      	cmp	r3, #32
 8007536:	d1dc      	bne.n	80074f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b20      	cmp	r3, #32
 8007544:	d003      	beq.n	800754e <I2C_IsErrorOccurred+0xfa>
 8007546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800754a:	2b00      	cmp	r3, #0
 800754c:	d09d      	beq.n	800748a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800754e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2220      	movs	r2, #32
 800755c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	f043 0304 	orr.w	r3, r3, #4
 8007564:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	f043 0301 	orr.w	r3, r3, #1
 8007584:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800758e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	f043 0308 	orr.w	r3, r3, #8
 80075a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	f043 0302 	orr.w	r3, r3, #2
 80075c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80075da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01c      	beq.n	800761c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fe56 	bl	8007294 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <I2C_IsErrorOccurred+0x1d4>)
 80075f4:	400b      	ands	r3, r1
 80075f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	431a      	orrs	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800761c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007620:	4618      	mov	r0, r3
 8007622:	3728      	adds	r7, #40	; 0x28
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	fe00e800 	.word	0xfe00e800

0800762c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	607b      	str	r3, [r7, #4]
 8007636:	460b      	mov	r3, r1
 8007638:	817b      	strh	r3, [r7, #10]
 800763a:	4613      	mov	r3, r2
 800763c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800763e:	897b      	ldrh	r3, [r7, #10]
 8007640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007644:	7a7b      	ldrb	r3, [r7, #9]
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800764c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	4313      	orrs	r3, r2
 8007656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800765a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	0d5b      	lsrs	r3, r3, #21
 8007666:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <I2C_TransferConfig+0x60>)
 800766c:	430b      	orrs	r3, r1
 800766e:	43db      	mvns	r3, r3
 8007670:	ea02 0103 	and.w	r1, r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	03ff63ff 	.word	0x03ff63ff

08007690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d138      	bne.n	8007718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e032      	b.n	800771a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2224      	movs	r2, #36	; 0x24
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0201 	bic.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6819      	ldr	r1, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b20      	cmp	r3, #32
 800773a:	d139      	bne.n	80077b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007746:	2302      	movs	r3, #2
 8007748:	e033      	b.n	80077b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2224      	movs	r2, #36	; 0x24
 8007756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0201 	bic.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	e000      	b.n	80077b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077b0:	2302      	movs	r3, #2
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80077c4:	4b04      	ldr	r3, [pc, #16]	; (80077d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40007000 	.word	0x40007000

080077dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ea:	d130      	bne.n	800784e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80077ec:	4b23      	ldr	r3, [pc, #140]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f8:	d038      	beq.n	800786c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80077fa:	4b20      	ldr	r3, [pc, #128]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007802:	4a1e      	ldr	r2, [pc, #120]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007808:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800780a:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2232      	movs	r2, #50	; 0x32
 8007810:	fb02 f303 	mul.w	r3, r2, r3
 8007814:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	0c9b      	lsrs	r3, r3, #18
 800781c:	3301      	adds	r3, #1
 800781e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007820:	e002      	b.n	8007828 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3b01      	subs	r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007828:	4b14      	ldr	r3, [pc, #80]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007834:	d102      	bne.n	800783c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f2      	bne.n	8007822 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007848:	d110      	bne.n	800786c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e00f      	b.n	800786e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785a:	d007      	beq.n	800786c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007864:	4a05      	ldr	r2, [pc, #20]	; (800787c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800786a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40007000 	.word	0x40007000
 8007880:	20000000 	.word	0x20000000
 8007884:	431bde83 	.word	0x431bde83

08007888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e3d4      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800789a:	4ba1      	ldr	r3, [pc, #644]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 030c 	and.w	r3, r3, #12
 80078a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078a4:	4b9e      	ldr	r3, [pc, #632]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0310 	and.w	r3, r3, #16
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80e4 	beq.w	8007a84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <HAL_RCC_OscConfig+0x4a>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b0c      	cmp	r3, #12
 80078c6:	f040 808b 	bne.w	80079e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f040 8087 	bne.w	80079e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80078d2:	4b93      	ldr	r3, [pc, #588]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_RCC_OscConfig+0x62>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e3ac      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1a      	ldr	r2, [r3, #32]
 80078ee:	4b8c      	ldr	r3, [pc, #560]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <HAL_RCC_OscConfig+0x7c>
 80078fa:	4b89      	ldr	r3, [pc, #548]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007902:	e005      	b.n	8007910 <HAL_RCC_OscConfig+0x88>
 8007904:	4b86      	ldr	r3, [pc, #536]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790a:	091b      	lsrs	r3, r3, #4
 800790c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007910:	4293      	cmp	r3, r2
 8007912:	d223      	bcs.n	800795c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fd41 	bl	80083a0 <RCC_SetFlashLatencyFromMSIRange>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e38d      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007928:	4b7d      	ldr	r3, [pc, #500]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a7c      	ldr	r2, [pc, #496]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 800792e:	f043 0308 	orr.w	r3, r3, #8
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	4b7a      	ldr	r3, [pc, #488]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	4977      	ldr	r1, [pc, #476]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007942:	4313      	orrs	r3, r2
 8007944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007946:	4b76      	ldr	r3, [pc, #472]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	4972      	ldr	r1, [pc, #456]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007956:	4313      	orrs	r3, r2
 8007958:	604b      	str	r3, [r1, #4]
 800795a:	e025      	b.n	80079a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800795c:	4b70      	ldr	r3, [pc, #448]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6f      	ldr	r2, [pc, #444]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007962:	f043 0308 	orr.w	r3, r3, #8
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	4b6d      	ldr	r3, [pc, #436]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	496a      	ldr	r1, [pc, #424]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007976:	4313      	orrs	r3, r2
 8007978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800797a:	4b69      	ldr	r3, [pc, #420]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	4965      	ldr	r1, [pc, #404]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 800798a:	4313      	orrs	r3, r2
 800798c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d109      	bne.n	80079a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fd01 	bl	80083a0 <RCC_SetFlashLatencyFromMSIRange>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e34d      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079a8:	f000 fc36 	bl	8008218 <HAL_RCC_GetSysClockFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b5c      	ldr	r3, [pc, #368]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	091b      	lsrs	r3, r3, #4
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	495a      	ldr	r1, [pc, #360]	; (8007b24 <HAL_RCC_OscConfig+0x29c>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	fa22 f303 	lsr.w	r3, r2, r3
 80079c4:	4a58      	ldr	r2, [pc, #352]	; (8007b28 <HAL_RCC_OscConfig+0x2a0>)
 80079c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80079c8:	4b58      	ldr	r3, [pc, #352]	; (8007b2c <HAL_RCC_OscConfig+0x2a4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fc83 	bl	80062d8 <HAL_InitTick>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d052      	beq.n	8007a82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	e331      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d032      	beq.n	8007a4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80079e8:	4b4d      	ldr	r3, [pc, #308]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a4c      	ldr	r2, [pc, #304]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80079f4:	f7fe fcc0 	bl	8006378 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079fc:	f7fe fcbc 	bl	8006378 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e31a      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a0e:	4b44      	ldr	r3, [pc, #272]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f0      	beq.n	80079fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a1a:	4b41      	ldr	r3, [pc, #260]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a40      	ldr	r2, [pc, #256]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a20:	f043 0308 	orr.w	r3, r3, #8
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	4b3e      	ldr	r3, [pc, #248]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	493b      	ldr	r1, [pc, #236]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a38:	4b39      	ldr	r3, [pc, #228]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	4936      	ldr	r1, [pc, #216]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	604b      	str	r3, [r1, #4]
 8007a4c:	e01a      	b.n	8007a84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a4e:	4b34      	ldr	r3, [pc, #208]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a33      	ldr	r2, [pc, #204]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a54:	f023 0301 	bic.w	r3, r3, #1
 8007a58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a5a:	f7fe fc8d 	bl	8006378 <HAL_GetTick>
 8007a5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a60:	e008      	b.n	8007a74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a62:	f7fe fc89 	bl	8006378 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e2e7      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a74:	4b2a      	ldr	r3, [pc, #168]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f0      	bne.n	8007a62 <HAL_RCC_OscConfig+0x1da>
 8007a80:	e000      	b.n	8007a84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d074      	beq.n	8007b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d005      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x21a>
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b0c      	cmp	r3, #12
 8007a9a:	d10e      	bne.n	8007aba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d10b      	bne.n	8007aba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa2:	4b1f      	ldr	r3, [pc, #124]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d064      	beq.n	8007b78 <HAL_RCC_OscConfig+0x2f0>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d160      	bne.n	8007b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e2c4      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac2:	d106      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x24a>
 8007ac4:	4b16      	ldr	r3, [pc, #88]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a15      	ldr	r2, [pc, #84]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	e01d      	b.n	8007b0e <HAL_RCC_OscConfig+0x286>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ada:	d10c      	bne.n	8007af6 <HAL_RCC_OscConfig+0x26e>
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0f      	ldr	r2, [pc, #60]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a0c      	ldr	r2, [pc, #48]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	e00b      	b.n	8007b0e <HAL_RCC_OscConfig+0x286>
 8007af6:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a06      	ldr	r2, [pc, #24]	; (8007b20 <HAL_RCC_OscConfig+0x298>)
 8007b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01c      	beq.n	8007b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b16:	f7fe fc2f 	bl	8006378 <HAL_GetTick>
 8007b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b1c:	e011      	b.n	8007b42 <HAL_RCC_OscConfig+0x2ba>
 8007b1e:	bf00      	nop
 8007b20:	40021000 	.word	0x40021000
 8007b24:	0800a218 	.word	0x0800a218
 8007b28:	20000000 	.word	0x20000000
 8007b2c:	2000015c 	.word	0x2000015c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b30:	f7fe fc22 	bl	8006378 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b64      	cmp	r3, #100	; 0x64
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e280      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b42:	4baf      	ldr	r3, [pc, #700]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0x2a8>
 8007b4e:	e014      	b.n	8007b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b50:	f7fe fc12 	bl	8006378 <HAL_GetTick>
 8007b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b56:	e008      	b.n	8007b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b58:	f7fe fc0e 	bl	8006378 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	2b64      	cmp	r3, #100	; 0x64
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e26c      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b6a:	4ba5      	ldr	r3, [pc, #660]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f0      	bne.n	8007b58 <HAL_RCC_OscConfig+0x2d0>
 8007b76:	e000      	b.n	8007b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d060      	beq.n	8007c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d005      	beq.n	8007b98 <HAL_RCC_OscConfig+0x310>
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	2b0c      	cmp	r3, #12
 8007b90:	d119      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d116      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b98:	4b99      	ldr	r3, [pc, #612]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x328>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e249      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	4b93      	ldr	r3, [pc, #588]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	4990      	ldr	r1, [pc, #576]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bc4:	e040      	b.n	8007c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d023      	beq.n	8007c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bce:	4b8c      	ldr	r3, [pc, #560]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a8b      	ldr	r2, [pc, #556]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bda:	f7fe fbcd 	bl	8006378 <HAL_GetTick>
 8007bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007be0:	e008      	b.n	8007bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007be2:	f7fe fbc9 	bl	8006378 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e227      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bf4:	4b82      	ldr	r3, [pc, #520]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f0      	beq.n	8007be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c00:	4b7f      	ldr	r3, [pc, #508]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	061b      	lsls	r3, r3, #24
 8007c0e:	497c      	ldr	r1, [pc, #496]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	604b      	str	r3, [r1, #4]
 8007c14:	e018      	b.n	8007c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c16:	4b7a      	ldr	r3, [pc, #488]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a79      	ldr	r2, [pc, #484]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c22:	f7fe fba9 	bl	8006378 <HAL_GetTick>
 8007c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c28:	e008      	b.n	8007c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c2a:	f7fe fba5 	bl	8006378 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e203      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c3c:	4b70      	ldr	r3, [pc, #448]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1f0      	bne.n	8007c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d03c      	beq.n	8007cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01c      	beq.n	8007c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c5c:	4b68      	ldr	r3, [pc, #416]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c62:	4a67      	ldr	r2, [pc, #412]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6c:	f7fe fb84 	bl	8006378 <HAL_GetTick>
 8007c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c72:	e008      	b.n	8007c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c74:	f7fe fb80 	bl	8006378 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e1de      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c86:	4b5e      	ldr	r3, [pc, #376]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ef      	beq.n	8007c74 <HAL_RCC_OscConfig+0x3ec>
 8007c94:	e01b      	b.n	8007cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c96:	4b5a      	ldr	r3, [pc, #360]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c9c:	4a58      	ldr	r2, [pc, #352]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca6:	f7fe fb67 	bl	8006378 <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cae:	f7fe fb63 	bl	8006378 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e1c1      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cc0:	4b4f      	ldr	r3, [pc, #316]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1ef      	bne.n	8007cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80a6 	beq.w	8007e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007ce0:	4b47      	ldr	r3, [pc, #284]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10d      	bne.n	8007d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cec:	4b44      	ldr	r3, [pc, #272]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf0:	4a43      	ldr	r2, [pc, #268]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8007cf8:	4b41      	ldr	r3, [pc, #260]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d00:	60bb      	str	r3, [r7, #8]
 8007d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d04:	2301      	movs	r3, #1
 8007d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d08:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <HAL_RCC_OscConfig+0x57c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d118      	bne.n	8007d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d14:	4b3b      	ldr	r3, [pc, #236]	; (8007e04 <HAL_RCC_OscConfig+0x57c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3a      	ldr	r2, [pc, #232]	; (8007e04 <HAL_RCC_OscConfig+0x57c>)
 8007d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d20:	f7fe fb2a 	bl	8006378 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d28:	f7fe fb26 	bl	8006378 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e184      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d3a:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <HAL_RCC_OscConfig+0x57c>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0f0      	beq.n	8007d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d108      	bne.n	8007d60 <HAL_RCC_OscConfig+0x4d8>
 8007d4e:	4b2c      	ldr	r3, [pc, #176]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d54:	4a2a      	ldr	r2, [pc, #168]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d5e:	e024      	b.n	8007daa <HAL_RCC_OscConfig+0x522>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b05      	cmp	r3, #5
 8007d66:	d110      	bne.n	8007d8a <HAL_RCC_OscConfig+0x502>
 8007d68:	4b25      	ldr	r3, [pc, #148]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6e:	4a24      	ldr	r2, [pc, #144]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d70:	f043 0304 	orr.w	r3, r3, #4
 8007d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d78:	4b21      	ldr	r3, [pc, #132]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7e:	4a20      	ldr	r2, [pc, #128]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d88:	e00f      	b.n	8007daa <HAL_RCC_OscConfig+0x522>
 8007d8a:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d90:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d92:	f023 0301 	bic.w	r3, r3, #1
 8007d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d9a:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da0:	4a17      	ldr	r2, [pc, #92]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007da2:	f023 0304 	bic.w	r3, r3, #4
 8007da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d016      	beq.n	8007de0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db2:	f7fe fae1 	bl	8006378 <HAL_GetTick>
 8007db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007db8:	e00a      	b.n	8007dd0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dba:	f7fe fadd 	bl	8006378 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d901      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e139      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <HAL_RCC_OscConfig+0x578>)
 8007dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0ed      	beq.n	8007dba <HAL_RCC_OscConfig+0x532>
 8007dde:	e01a      	b.n	8007e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de0:	f7fe faca 	bl	8006378 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007de6:	e00f      	b.n	8007e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de8:	f7fe fac6 	bl	8006378 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d906      	bls.n	8007e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e122      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
 8007dfe:	bf00      	nop
 8007e00:	40021000 	.word	0x40021000
 8007e04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e08:	4b90      	ldr	r3, [pc, #576]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e8      	bne.n	8007de8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e16:	7ffb      	ldrb	r3, [r7, #31]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d105      	bne.n	8007e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e1c:	4b8b      	ldr	r3, [pc, #556]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	4a8a      	ldr	r2, [pc, #552]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8108 	beq.w	8008042 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	f040 80d0 	bne.w	8007fdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007e3c:	4b83      	ldr	r3, [pc, #524]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f003 0203 	and.w	r2, r3, #3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d130      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d127      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d11f      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e7c:	2a07      	cmp	r2, #7
 8007e7e:	bf14      	ite	ne
 8007e80:	2201      	movne	r2, #1
 8007e82:	2200      	moveq	r2, #0
 8007e84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d113      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	3b01      	subs	r3, #1
 8007e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d109      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d06e      	beq.n	8007f90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b0c      	cmp	r3, #12
 8007eb6:	d069      	beq.n	8007f8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007eb8:	4b64      	ldr	r3, [pc, #400]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d105      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007ec4:	4b61      	ldr	r3, [pc, #388]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0b7      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007ed4:	4b5d      	ldr	r3, [pc, #372]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5c      	ldr	r2, [pc, #368]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ede:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ee0:	f7fe fa4a 	bl	8006378 <HAL_GetTick>
 8007ee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ee8:	f7fe fa46 	bl	8006378 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e0a4      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007efa:	4b54      	ldr	r3, [pc, #336]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f06:	4b51      	ldr	r3, [pc, #324]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	4b51      	ldr	r3, [pc, #324]	; (8008050 <HAL_RCC_OscConfig+0x7c8>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f16:	3a01      	subs	r2, #1
 8007f18:	0112      	lsls	r2, r2, #4
 8007f1a:	4311      	orrs	r1, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f20:	0212      	lsls	r2, r2, #8
 8007f22:	4311      	orrs	r1, r2
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f28:	0852      	lsrs	r2, r2, #1
 8007f2a:	3a01      	subs	r2, #1
 8007f2c:	0552      	lsls	r2, r2, #21
 8007f2e:	4311      	orrs	r1, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f34:	0852      	lsrs	r2, r2, #1
 8007f36:	3a01      	subs	r2, #1
 8007f38:	0652      	lsls	r2, r2, #25
 8007f3a:	4311      	orrs	r1, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f40:	0912      	lsrs	r2, r2, #4
 8007f42:	0452      	lsls	r2, r2, #17
 8007f44:	430a      	orrs	r2, r1
 8007f46:	4941      	ldr	r1, [pc, #260]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007f4c:	4b3f      	ldr	r3, [pc, #252]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a3e      	ldr	r2, [pc, #248]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f58:	4b3c      	ldr	r3, [pc, #240]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	4a3b      	ldr	r2, [pc, #236]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f64:	f7fe fa08 	bl	8006378 <HAL_GetTick>
 8007f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f6a:	e008      	b.n	8007f7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f6c:	f7fe fa04 	bl	8006378 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e062      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f7e:	4b33      	ldr	r3, [pc, #204]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f0      	beq.n	8007f6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f8a:	e05a      	b.n	8008042 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e059      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f90:	4b2e      	ldr	r3, [pc, #184]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d152      	bne.n	8008042 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007f9c:	4b2b      	ldr	r3, [pc, #172]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a2a      	ldr	r2, [pc, #168]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fa8:	4b28      	ldr	r3, [pc, #160]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	4a27      	ldr	r2, [pc, #156]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fb4:	f7fe f9e0 	bl	8006378 <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fbc:	f7fe f9dc 	bl	8006378 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e03a      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fce:	4b1f      	ldr	r3, [pc, #124]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0f0      	beq.n	8007fbc <HAL_RCC_OscConfig+0x734>
 8007fda:	e032      	b.n	8008042 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b0c      	cmp	r3, #12
 8007fe0:	d02d      	beq.n	800803e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a19      	ldr	r2, [pc, #100]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007fee:	4b17      	ldr	r3, [pc, #92]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ffa:	4b14      	ldr	r3, [pc, #80]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8008000:	f023 0303 	bic.w	r3, r3, #3
 8008004:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	4a10      	ldr	r2, [pc, #64]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 800800c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008014:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008016:	f7fe f9af 	bl	8006378 <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800801c:	e008      	b.n	8008030 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800801e:	f7fe f9ab 	bl	8006378 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e009      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <HAL_RCC_OscConfig+0x7c4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f0      	bne.n	800801e <HAL_RCC_OscConfig+0x796>
 800803c:	e001      	b.n	8008042 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	40021000 	.word	0x40021000
 8008050:	f99d808c 	.word	0xf99d808c

08008054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e0c8      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008068:	4b66      	ldr	r3, [pc, #408]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d910      	bls.n	8008098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008076:	4b63      	ldr	r3, [pc, #396]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f023 0207 	bic.w	r2, r3, #7
 800807e:	4961      	ldr	r1, [pc, #388]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	4313      	orrs	r3, r2
 8008084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008086:	4b5f      	ldr	r3, [pc, #380]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d001      	beq.n	8008098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e0b0      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d04c      	beq.n	800813e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d107      	bne.n	80080bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080ac:	4b56      	ldr	r3, [pc, #344]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d121      	bne.n	80080fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e09e      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d107      	bne.n	80080d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080c4:	4b50      	ldr	r3, [pc, #320]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d115      	bne.n	80080fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e092      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d107      	bne.n	80080ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080dc:	4b4a      	ldr	r3, [pc, #296]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e086      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080ec:	4b46      	ldr	r3, [pc, #280]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e07e      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80080fc:	4b42      	ldr	r3, [pc, #264]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f023 0203 	bic.w	r2, r3, #3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	493f      	ldr	r1, [pc, #252]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 800810a:	4313      	orrs	r3, r2
 800810c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800810e:	f7fe f933 	bl	8006378 <HAL_GetTick>
 8008112:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008114:	e00a      	b.n	800812c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008116:	f7fe f92f 	bl	8006378 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	f241 3288 	movw	r2, #5000	; 0x1388
 8008124:	4293      	cmp	r3, r2
 8008126:	d901      	bls.n	800812c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e066      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800812c:	4b36      	ldr	r3, [pc, #216]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 020c 	and.w	r2, r3, #12
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	429a      	cmp	r2, r3
 800813c:	d1eb      	bne.n	8008116 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d008      	beq.n	800815c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800814a:	4b2f      	ldr	r3, [pc, #188]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	492c      	ldr	r1, [pc, #176]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 8008158:	4313      	orrs	r3, r2
 800815a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800815c:	4b29      	ldr	r3, [pc, #164]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d210      	bcs.n	800818c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800816a:	4b26      	ldr	r3, [pc, #152]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f023 0207 	bic.w	r2, r3, #7
 8008172:	4924      	ldr	r1, [pc, #144]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	4313      	orrs	r3, r2
 8008178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800817a:	4b22      	ldr	r3, [pc, #136]	; (8008204 <HAL_RCC_ClockConfig+0x1b0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d001      	beq.n	800818c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e036      	b.n	80081fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008198:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	4918      	ldr	r1, [pc, #96]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	4910      	ldr	r1, [pc, #64]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081ca:	f000 f825 	bl	8008218 <HAL_RCC_GetSysClockFreq>
 80081ce:	4602      	mov	r2, r0
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <HAL_RCC_ClockConfig+0x1b4>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	490c      	ldr	r1, [pc, #48]	; (800820c <HAL_RCC_ClockConfig+0x1b8>)
 80081dc:	5ccb      	ldrb	r3, [r1, r3]
 80081de:	f003 031f 	and.w	r3, r3, #31
 80081e2:	fa22 f303 	lsr.w	r3, r2, r3
 80081e6:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <HAL_RCC_ClockConfig+0x1bc>)
 80081e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80081ea:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <HAL_RCC_ClockConfig+0x1c0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fe f872 	bl	80062d8 <HAL_InitTick>
 80081f4:	4603      	mov	r3, r0
 80081f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80081f8:	7afb      	ldrb	r3, [r7, #11]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	40022000 	.word	0x40022000
 8008208:	40021000 	.word	0x40021000
 800820c:	0800a218 	.word	0x0800a218
 8008210:	20000000 	.word	0x20000000
 8008214:	2000015c 	.word	0x2000015c

08008218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008218:	b480      	push	{r7}
 800821a:	b089      	sub	sp, #36	; 0x24
 800821c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	61fb      	str	r3, [r7, #28]
 8008222:	2300      	movs	r3, #0
 8008224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008226:	4b3e      	ldr	r3, [pc, #248]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 030c 	and.w	r3, r3, #12
 800822e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008230:	4b3b      	ldr	r3, [pc, #236]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <HAL_RCC_GetSysClockFreq+0x34>
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d121      	bne.n	800828a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d11e      	bne.n	800828a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800824c:	4b34      	ldr	r3, [pc, #208]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0308 	and.w	r3, r3, #8
 8008254:	2b00      	cmp	r3, #0
 8008256:	d107      	bne.n	8008268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008258:	4b31      	ldr	r3, [pc, #196]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 800825a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	e005      	b.n	8008274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008268:	4b2d      	ldr	r3, [pc, #180]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	091b      	lsrs	r3, r3, #4
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008274:	4a2b      	ldr	r2, [pc, #172]	; (8008324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800827c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10d      	bne.n	80082a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008288:	e00a      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b04      	cmp	r3, #4
 800828e:	d102      	bne.n	8008296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008290:	4b25      	ldr	r3, [pc, #148]	; (8008328 <HAL_RCC_GetSysClockFreq+0x110>)
 8008292:	61bb      	str	r3, [r7, #24]
 8008294:	e004      	b.n	80082a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d101      	bne.n	80082a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800829c:	4b23      	ldr	r3, [pc, #140]	; (800832c <HAL_RCC_GetSysClockFreq+0x114>)
 800829e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b0c      	cmp	r3, #12
 80082a4:	d134      	bne.n	8008310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80082a6:	4b1e      	ldr	r3, [pc, #120]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d003      	beq.n	80082be <HAL_RCC_GetSysClockFreq+0xa6>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d003      	beq.n	80082c4 <HAL_RCC_GetSysClockFreq+0xac>
 80082bc:	e005      	b.n	80082ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <HAL_RCC_GetSysClockFreq+0x110>)
 80082c0:	617b      	str	r3, [r7, #20]
      break;
 80082c2:	e005      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80082c4:	4b19      	ldr	r3, [pc, #100]	; (800832c <HAL_RCC_GetSysClockFreq+0x114>)
 80082c6:	617b      	str	r3, [r7, #20]
      break;
 80082c8:	e002      	b.n	80082d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	617b      	str	r3, [r7, #20]
      break;
 80082ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082d0:	4b13      	ldr	r3, [pc, #76]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	091b      	lsrs	r3, r3, #4
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	3301      	adds	r3, #1
 80082dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80082de:	4b10      	ldr	r3, [pc, #64]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	fb02 f203 	mul.w	r2, r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <HAL_RCC_GetSysClockFreq+0x108>)
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	0e5b      	lsrs	r3, r3, #25
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	3301      	adds	r3, #1
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	fbb2 f3f3 	udiv	r3, r2, r3
 800830e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008310:	69bb      	ldr	r3, [r7, #24]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3724      	adds	r7, #36	; 0x24
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40021000 	.word	0x40021000
 8008324:	0800a230 	.word	0x0800a230
 8008328:	00f42400 	.word	0x00f42400
 800832c:	007a1200 	.word	0x007a1200

08008330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008334:	4b03      	ldr	r3, [pc, #12]	; (8008344 <HAL_RCC_GetHCLKFreq+0x14>)
 8008336:	681b      	ldr	r3, [r3, #0]
}
 8008338:	4618      	mov	r0, r3
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20000000 	.word	0x20000000

08008348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800834c:	f7ff fff0 	bl	8008330 <HAL_RCC_GetHCLKFreq>
 8008350:	4602      	mov	r2, r0
 8008352:	4b06      	ldr	r3, [pc, #24]	; (800836c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	0a1b      	lsrs	r3, r3, #8
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	4904      	ldr	r1, [pc, #16]	; (8008370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800835e:	5ccb      	ldrb	r3, [r1, r3]
 8008360:	f003 031f 	and.w	r3, r3, #31
 8008364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008368:	4618      	mov	r0, r3
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40021000 	.word	0x40021000
 8008370:	0800a228 	.word	0x0800a228

08008374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008378:	f7ff ffda 	bl	8008330 <HAL_RCC_GetHCLKFreq>
 800837c:	4602      	mov	r2, r0
 800837e:	4b06      	ldr	r3, [pc, #24]	; (8008398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	0adb      	lsrs	r3, r3, #11
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	4904      	ldr	r1, [pc, #16]	; (800839c <HAL_RCC_GetPCLK2Freq+0x28>)
 800838a:	5ccb      	ldrb	r3, [r1, r3]
 800838c:	f003 031f 	and.w	r3, r3, #31
 8008390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008394:	4618      	mov	r0, r3
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40021000 	.word	0x40021000
 800839c:	0800a228 	.word	0x0800a228

080083a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80083ac:	4b2a      	ldr	r3, [pc, #168]	; (8008458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80083b8:	f7ff fa02 	bl	80077c0 <HAL_PWREx_GetVoltageRange>
 80083bc:	6178      	str	r0, [r7, #20]
 80083be:	e014      	b.n	80083ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80083c0:	4b25      	ldr	r3, [pc, #148]	; (8008458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c4:	4a24      	ldr	r2, [pc, #144]	; (8008458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ca:	6593      	str	r3, [r2, #88]	; 0x58
 80083cc:	4b22      	ldr	r3, [pc, #136]	; (8008458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80083d8:	f7ff f9f2 	bl	80077c0 <HAL_PWREx_GetVoltageRange>
 80083dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80083de:	4b1e      	ldr	r3, [pc, #120]	; (8008458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e2:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f0:	d10b      	bne.n	800840a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b80      	cmp	r3, #128	; 0x80
 80083f6:	d919      	bls.n	800842c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2ba0      	cmp	r3, #160	; 0xa0
 80083fc:	d902      	bls.n	8008404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80083fe:	2302      	movs	r3, #2
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	e013      	b.n	800842c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008404:	2301      	movs	r3, #1
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	e010      	b.n	800842c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b80      	cmp	r3, #128	; 0x80
 800840e:	d902      	bls.n	8008416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008410:	2303      	movs	r3, #3
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	e00a      	b.n	800842c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b80      	cmp	r3, #128	; 0x80
 800841a:	d102      	bne.n	8008422 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800841c:	2302      	movs	r3, #2
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	e004      	b.n	800842c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b70      	cmp	r3, #112	; 0x70
 8008426:	d101      	bne.n	800842c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008428:	2301      	movs	r3, #1
 800842a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800842c:	4b0b      	ldr	r3, [pc, #44]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f023 0207 	bic.w	r2, r3, #7
 8008434:	4909      	ldr	r1, [pc, #36]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800843c:	4b07      	ldr	r3, [pc, #28]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	429a      	cmp	r2, r3
 8008448:	d001      	beq.n	800844e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40021000 	.word	0x40021000
 800845c:	40022000 	.word	0x40022000

08008460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008468:	2300      	movs	r3, #0
 800846a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800846c:	2300      	movs	r3, #0
 800846e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008478:	2b00      	cmp	r3, #0
 800847a:	d041      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008484:	d02a      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800848a:	d824      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800848c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008490:	d008      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008496:	d81e      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800849c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a0:	d010      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084a2:	e018      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80084a4:	4b86      	ldr	r3, [pc, #536]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	4a85      	ldr	r2, [pc, #532]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80084b0:	e015      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3304      	adds	r3, #4
 80084b6:	2100      	movs	r1, #0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fabb 	bl	8008a34 <RCCEx_PLLSAI1_Config>
 80084be:	4603      	mov	r3, r0
 80084c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80084c2:	e00c      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3320      	adds	r3, #32
 80084c8:	2100      	movs	r1, #0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fba6 	bl	8008c1c <RCCEx_PLLSAI2_Config>
 80084d0:	4603      	mov	r3, r0
 80084d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80084d4:	e003      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	74fb      	strb	r3, [r7, #19]
      break;
 80084da:	e000      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80084dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084de:	7cfb      	ldrb	r3, [r7, #19]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10b      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084e4:	4b76      	ldr	r3, [pc, #472]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f2:	4973      	ldr	r1, [pc, #460]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80084fa:	e001      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	7cfb      	ldrb	r3, [r7, #19]
 80084fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d041      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008510:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008514:	d02a      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008516:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800851a:	d824      	bhi.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800851c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008520:	d008      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008526:	d81e      	bhi.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800852c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008530:	d010      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008532:	e018      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008534:	4b62      	ldr	r3, [pc, #392]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	4a61      	ldr	r2, [pc, #388]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800853a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800853e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008540:	e015      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3304      	adds	r3, #4
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fa73 	bl	8008a34 <RCCEx_PLLSAI1_Config>
 800854e:	4603      	mov	r3, r0
 8008550:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008552:	e00c      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3320      	adds	r3, #32
 8008558:	2100      	movs	r1, #0
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fb5e 	bl	8008c1c <RCCEx_PLLSAI2_Config>
 8008560:	4603      	mov	r3, r0
 8008562:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008564:	e003      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	74fb      	strb	r3, [r7, #19]
      break;
 800856a:	e000      	b.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800856c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800856e:	7cfb      	ldrb	r3, [r7, #19]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10b      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008574:	4b52      	ldr	r3, [pc, #328]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008582:	494f      	ldr	r1, [pc, #316]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800858a:	e001      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858c:	7cfb      	ldrb	r3, [r7, #19]
 800858e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80a0 	beq.w	80086de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800859e:	2300      	movs	r3, #0
 80085a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80085a2:	4b47      	ldr	r3, [pc, #284]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00d      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085b8:	4b41      	ldr	r3, [pc, #260]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085bc:	4a40      	ldr	r2, [pc, #256]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c2:	6593      	str	r3, [r2, #88]	; 0x58
 80085c4:	4b3e      	ldr	r3, [pc, #248]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085cc:	60bb      	str	r3, [r7, #8]
 80085ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085d0:	2301      	movs	r3, #1
 80085d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085d4:	4b3b      	ldr	r3, [pc, #236]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a3a      	ldr	r2, [pc, #232]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80085da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085e0:	f7fd feca 	bl	8006378 <HAL_GetTick>
 80085e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80085e6:	e009      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085e8:	f7fd fec6 	bl	8006378 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d902      	bls.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	74fb      	strb	r3, [r7, #19]
        break;
 80085fa:	e005      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80085fc:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0ef      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008608:	7cfb      	ldrb	r3, [r7, #19]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d15c      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800860e:	4b2c      	ldr	r3, [pc, #176]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008618:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01f      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	429a      	cmp	r2, r3
 800862a:	d019      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800862c:	4b24      	ldr	r3, [pc, #144]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008638:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863e:	4a20      	ldr	r2, [pc, #128]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008648:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864e:	4a1c      	ldr	r2, [pc, #112]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008658:	4a19      	ldr	r2, [pc, #100]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866a:	f7fd fe85 	bl	8006378 <HAL_GetTick>
 800866e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008670:	e00b      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008672:	f7fd fe81 	bl	8006378 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008680:	4293      	cmp	r3, r2
 8008682:	d902      	bls.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	74fb      	strb	r3, [r7, #19]
            break;
 8008688:	e006      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800868a:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800868c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0ec      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008698:	7cfb      	ldrb	r3, [r7, #19]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800869e:	4b08      	ldr	r3, [pc, #32]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ae:	4904      	ldr	r1, [pc, #16]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80086b6:	e009      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086b8:	7cfb      	ldrb	r3, [r7, #19]
 80086ba:	74bb      	strb	r3, [r7, #18]
 80086bc:	e006      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80086be:	bf00      	nop
 80086c0:	40021000 	.word	0x40021000
 80086c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c8:	7cfb      	ldrb	r3, [r7, #19]
 80086ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086cc:	7c7b      	ldrb	r3, [r7, #17]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d105      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086d2:	4b9e      	ldr	r3, [pc, #632]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d6:	4a9d      	ldr	r2, [pc, #628]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086ea:	4b98      	ldr	r3, [pc, #608]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f0:	f023 0203 	bic.w	r2, r3, #3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	4994      	ldr	r1, [pc, #592]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00a      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800870c:	4b8f      	ldr	r3, [pc, #572]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800870e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008712:	f023 020c 	bic.w	r2, r3, #12
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	498c      	ldr	r1, [pc, #560]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800871c:	4313      	orrs	r3, r2
 800871e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800872e:	4b87      	ldr	r3, [pc, #540]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008734:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873c:	4983      	ldr	r1, [pc, #524]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00a      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008750:	4b7e      	ldr	r3, [pc, #504]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008756:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875e:	497b      	ldr	r1, [pc, #492]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008760:	4313      	orrs	r3, r2
 8008762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0310 	and.w	r3, r3, #16
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008772:	4b76      	ldr	r3, [pc, #472]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008780:	4972      	ldr	r1, [pc, #456]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008782:	4313      	orrs	r3, r2
 8008784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0320 	and.w	r3, r3, #32
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008794:	4b6d      	ldr	r3, [pc, #436]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a2:	496a      	ldr	r1, [pc, #424]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087b6:	4b65      	ldr	r3, [pc, #404]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c4:	4961      	ldr	r1, [pc, #388]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087d8:	4b5c      	ldr	r3, [pc, #368]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e6:	4959      	ldr	r1, [pc, #356]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087fa:	4b54      	ldr	r3, [pc, #336]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008800:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008808:	4950      	ldr	r1, [pc, #320]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800880a:	4313      	orrs	r3, r2
 800880c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800881c:	4b4b      	ldr	r3, [pc, #300]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800881e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008822:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882a:	4948      	ldr	r1, [pc, #288]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800882c:	4313      	orrs	r3, r2
 800882e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800883e:	4b43      	ldr	r3, [pc, #268]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884c:	493f      	ldr	r1, [pc, #252]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d028      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008860:	4b3a      	ldr	r3, [pc, #232]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886e:	4937      	ldr	r1, [pc, #220]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008870:	4313      	orrs	r3, r2
 8008872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800887e:	d106      	bne.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008880:	4b32      	ldr	r3, [pc, #200]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	4a31      	ldr	r2, [pc, #196]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800888a:	60d3      	str	r3, [r2, #12]
 800888c:	e011      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008896:	d10c      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3304      	adds	r3, #4
 800889c:	2101      	movs	r1, #1
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f8c8 	bl	8008a34 <RCCEx_PLLSAI1_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80088a8:	7cfb      	ldrb	r3, [r7, #19]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80088ae:	7cfb      	ldrb	r3, [r7, #19]
 80088b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d028      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088be:	4b23      	ldr	r3, [pc, #140]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088cc:	491f      	ldr	r1, [pc, #124]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088dc:	d106      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088de:	4b1b      	ldr	r3, [pc, #108]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	4a1a      	ldr	r2, [pc, #104]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088e8:	60d3      	str	r3, [r2, #12]
 80088ea:	e011      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088f4:	d10c      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3304      	adds	r3, #4
 80088fa:	2101      	movs	r1, #1
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f899 	bl	8008a34 <RCCEx_PLLSAI1_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008906:	7cfb      	ldrb	r3, [r7, #19]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800890c:	7cfb      	ldrb	r3, [r7, #19]
 800890e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d02b      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800892a:	4908      	ldr	r1, [pc, #32]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800892c:	4313      	orrs	r3, r2
 800892e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800893a:	d109      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800893c:	4b03      	ldr	r3, [pc, #12]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	4a02      	ldr	r2, [pc, #8]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008946:	60d3      	str	r3, [r2, #12]
 8008948:	e014      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800894a:	bf00      	nop
 800894c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008958:	d10c      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3304      	adds	r3, #4
 800895e:	2101      	movs	r1, #1
 8008960:	4618      	mov	r0, r3
 8008962:	f000 f867 	bl	8008a34 <RCCEx_PLLSAI1_Config>
 8008966:	4603      	mov	r3, r0
 8008968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800896a:	7cfb      	ldrb	r3, [r7, #19]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008970:	7cfb      	ldrb	r3, [r7, #19]
 8008972:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d02f      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008980:	4b2b      	ldr	r3, [pc, #172]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008986:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800898e:	4928      	ldr	r1, [pc, #160]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008990:	4313      	orrs	r3, r2
 8008992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800899a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899e:	d10d      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3304      	adds	r3, #4
 80089a4:	2102      	movs	r1, #2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 f844 	bl	8008a34 <RCCEx_PLLSAI1_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089b0:	7cfb      	ldrb	r3, [r7, #19]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d014      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80089b6:	7cfb      	ldrb	r3, [r7, #19]
 80089b8:	74bb      	strb	r3, [r7, #18]
 80089ba:	e011      	b.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c4:	d10c      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3320      	adds	r3, #32
 80089ca:	2102      	movs	r1, #2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f925 	bl	8008c1c <RCCEx_PLLSAI2_Config>
 80089d2:	4603      	mov	r3, r0
 80089d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089d6:	7cfb      	ldrb	r3, [r7, #19]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80089dc:	7cfb      	ldrb	r3, [r7, #19]
 80089de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00a      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089ec:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80089ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089fa:	490d      	ldr	r1, [pc, #52]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a1e:	4904      	ldr	r1, [pc, #16]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008a26:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40021000 	.word	0x40021000

08008a34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008a42:	4b75      	ldr	r3, [pc, #468]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d018      	beq.n	8008a80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008a4e:	4b72      	ldr	r3, [pc, #456]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f003 0203 	and.w	r2, r3, #3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d10d      	bne.n	8008a7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
       ||
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008a66:	4b6c      	ldr	r3, [pc, #432]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	091b      	lsrs	r3, r3, #4
 8008a6c:	f003 0307 	and.w	r3, r3, #7
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
       ||
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d047      	beq.n	8008b0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]
 8008a7e:	e044      	b.n	8008b0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d018      	beq.n	8008aba <RCCEx_PLLSAI1_Config+0x86>
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d825      	bhi.n	8008ad8 <RCCEx_PLLSAI1_Config+0xa4>
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d002      	beq.n	8008a96 <RCCEx_PLLSAI1_Config+0x62>
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d009      	beq.n	8008aa8 <RCCEx_PLLSAI1_Config+0x74>
 8008a94:	e020      	b.n	8008ad8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a96:	4b60      	ldr	r3, [pc, #384]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d11d      	bne.n	8008ade <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008aa6:	e01a      	b.n	8008ade <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008aa8:	4b5b      	ldr	r3, [pc, #364]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d116      	bne.n	8008ae2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ab8:	e013      	b.n	8008ae2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008aba:	4b57      	ldr	r3, [pc, #348]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10f      	bne.n	8008ae6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008ac6:	4b54      	ldr	r3, [pc, #336]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ad6:	e006      	b.n	8008ae6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	73fb      	strb	r3, [r7, #15]
      break;
 8008adc:	e004      	b.n	8008ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008ade:	bf00      	nop
 8008ae0:	e002      	b.n	8008ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008ae2:	bf00      	nop
 8008ae4:	e000      	b.n	8008ae8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008ae6:	bf00      	nop
    }

    if(status == HAL_OK)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10d      	bne.n	8008b0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008aee:	4b4a      	ldr	r3, [pc, #296]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6819      	ldr	r1, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	430b      	orrs	r3, r1
 8008b04:	4944      	ldr	r1, [pc, #272]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d17d      	bne.n	8008c0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008b10:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a40      	ldr	r2, [pc, #256]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b1c:	f7fd fc2c 	bl	8006378 <HAL_GetTick>
 8008b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b22:	e009      	b.n	8008b38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b24:	f7fd fc28 	bl	8006378 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d902      	bls.n	8008b38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	73fb      	strb	r3, [r7, #15]
        break;
 8008b36:	e005      	b.n	8008b44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b38:	4b37      	ldr	r3, [pc, #220]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1ef      	bne.n	8008b24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d160      	bne.n	8008c0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d111      	bne.n	8008b74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b50:	4b31      	ldr	r3, [pc, #196]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6892      	ldr	r2, [r2, #8]
 8008b60:	0211      	lsls	r1, r2, #8
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	68d2      	ldr	r2, [r2, #12]
 8008b66:	0912      	lsrs	r2, r2, #4
 8008b68:	0452      	lsls	r2, r2, #17
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	492a      	ldr	r1, [pc, #168]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	610b      	str	r3, [r1, #16]
 8008b72:	e027      	b.n	8008bc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d112      	bne.n	8008ba0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b7a:	4b27      	ldr	r3, [pc, #156]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008b82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6892      	ldr	r2, [r2, #8]
 8008b8a:	0211      	lsls	r1, r2, #8
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6912      	ldr	r2, [r2, #16]
 8008b90:	0852      	lsrs	r2, r2, #1
 8008b92:	3a01      	subs	r2, #1
 8008b94:	0552      	lsls	r2, r2, #21
 8008b96:	430a      	orrs	r2, r1
 8008b98:	491f      	ldr	r1, [pc, #124]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	610b      	str	r3, [r1, #16]
 8008b9e:	e011      	b.n	8008bc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ba0:	4b1d      	ldr	r3, [pc, #116]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ba8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6892      	ldr	r2, [r2, #8]
 8008bb0:	0211      	lsls	r1, r2, #8
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6952      	ldr	r2, [r2, #20]
 8008bb6:	0852      	lsrs	r2, r2, #1
 8008bb8:	3a01      	subs	r2, #1
 8008bba:	0652      	lsls	r2, r2, #25
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	4916      	ldr	r1, [pc, #88]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008bc4:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a13      	ldr	r2, [pc, #76]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bd0:	f7fd fbd2 	bl	8006378 <HAL_GetTick>
 8008bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008bd6:	e009      	b.n	8008bec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008bd8:	f7fd fbce 	bl	8006378 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d902      	bls.n	8008bec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	73fb      	strb	r3, [r7, #15]
          break;
 8008bea:	e005      	b.n	8008bf8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0ef      	beq.n	8008bd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008bfe:	4b06      	ldr	r3, [pc, #24]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c00:	691a      	ldr	r2, [r3, #16]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	4904      	ldr	r1, [pc, #16]	; (8008c18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	40021000 	.word	0x40021000

08008c1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c2a:	4b6a      	ldr	r3, [pc, #424]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d018      	beq.n	8008c68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008c36:	4b67      	ldr	r3, [pc, #412]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f003 0203 	and.w	r2, r3, #3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d10d      	bne.n	8008c62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
       ||
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008c4e:	4b61      	ldr	r3, [pc, #388]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	091b      	lsrs	r3, r3, #4
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
       ||
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d047      	beq.n	8008cf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	73fb      	strb	r3, [r7, #15]
 8008c66:	e044      	b.n	8008cf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	d018      	beq.n	8008ca2 <RCCEx_PLLSAI2_Config+0x86>
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d825      	bhi.n	8008cc0 <RCCEx_PLLSAI2_Config+0xa4>
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d002      	beq.n	8008c7e <RCCEx_PLLSAI2_Config+0x62>
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d009      	beq.n	8008c90 <RCCEx_PLLSAI2_Config+0x74>
 8008c7c:	e020      	b.n	8008cc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008c7e:	4b55      	ldr	r3, [pc, #340]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d11d      	bne.n	8008cc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c8e:	e01a      	b.n	8008cc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c90:	4b50      	ldr	r3, [pc, #320]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d116      	bne.n	8008cca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ca0:	e013      	b.n	8008cca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008ca2:	4b4c      	ldr	r3, [pc, #304]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10f      	bne.n	8008cce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008cae:	4b49      	ldr	r3, [pc, #292]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cbe:	e006      	b.n	8008cce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc4:	e004      	b.n	8008cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008cce:	bf00      	nop
    }

    if(status == HAL_OK)
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008cd6:	4b3f      	ldr	r3, [pc, #252]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6819      	ldr	r1, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	430b      	orrs	r3, r1
 8008cec:	4939      	ldr	r1, [pc, #228]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d167      	bne.n	8008dc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008cf8:	4b36      	ldr	r3, [pc, #216]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a35      	ldr	r2, [pc, #212]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d04:	f7fd fb38 	bl	8006378 <HAL_GetTick>
 8008d08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d0a:	e009      	b.n	8008d20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d0c:	f7fd fb34 	bl	8006378 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d902      	bls.n	8008d20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8008d1e:	e005      	b.n	8008d2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d20:	4b2c      	ldr	r3, [pc, #176]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1ef      	bne.n	8008d0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d14a      	bne.n	8008dc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d111      	bne.n	8008d5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d38:	4b26      	ldr	r3, [pc, #152]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6892      	ldr	r2, [r2, #8]
 8008d48:	0211      	lsls	r1, r2, #8
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	68d2      	ldr	r2, [r2, #12]
 8008d4e:	0912      	lsrs	r2, r2, #4
 8008d50:	0452      	lsls	r2, r2, #17
 8008d52:	430a      	orrs	r2, r1
 8008d54:	491f      	ldr	r1, [pc, #124]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	614b      	str	r3, [r1, #20]
 8008d5a:	e011      	b.n	8008d80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d5c:	4b1d      	ldr	r3, [pc, #116]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	6892      	ldr	r2, [r2, #8]
 8008d6c:	0211      	lsls	r1, r2, #8
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6912      	ldr	r2, [r2, #16]
 8008d72:	0852      	lsrs	r2, r2, #1
 8008d74:	3a01      	subs	r2, #1
 8008d76:	0652      	lsls	r2, r2, #25
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	4916      	ldr	r1, [pc, #88]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008d80:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8c:	f7fd faf4 	bl	8006378 <HAL_GetTick>
 8008d90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008d92:	e009      	b.n	8008da8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d94:	f7fd faf0 	bl	8006378 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d902      	bls.n	8008da8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	73fb      	strb	r3, [r7, #15]
          break;
 8008da6:	e005      	b.n	8008db4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008da8:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0ef      	beq.n	8008d94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008dba:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008dbc:	695a      	ldr	r2, [r3, #20]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	40021000 	.word	0x40021000

08008dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e040      	b.n	8008e6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7f7 fe96 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2224      	movs	r2, #36	; 0x24
 8008e04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f8c0 	bl	8008f9c <UART_SetConfig>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e022      	b.n	8008e6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fb3e 	bl	80094b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fbc5 	bl	80095f4 <UART_CheckIdleState>
 8008e6a:	4603      	mov	r3, r0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	f040 8082 	bne.w	8008f92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <HAL_UART_Transmit+0x26>
 8008e94:	88fb      	ldrh	r3, [r7, #6]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e07a      	b.n	8008f94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d101      	bne.n	8008eac <HAL_UART_Transmit+0x38>
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	e073      	b.n	8008f94 <HAL_UART_Transmit+0x120>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2221      	movs	r2, #33	; 0x21
 8008ec0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ec2:	f7fd fa59 	bl	8006378 <HAL_GetTick>
 8008ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	88fa      	ldrh	r2, [r7, #6]
 8008ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	88fa      	ldrh	r2, [r7, #6]
 8008ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee0:	d108      	bne.n	8008ef4 <HAL_UART_Transmit+0x80>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d104      	bne.n	8008ef4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	e003      	b.n	8008efc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008f04:	e02d      	b.n	8008f62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2180      	movs	r1, #128	; 0x80
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 fbb8 	bl	8009686 <UART_WaitOnFlagUntilTimeout>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e039      	b.n	8008f94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10b      	bne.n	8008f3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	881a      	ldrh	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f32:	b292      	uxth	r2, r2
 8008f34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	3302      	adds	r3, #2
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	e008      	b.n	8008f50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	b292      	uxth	r2, r2
 8008f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1cb      	bne.n	8008f06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2200      	movs	r2, #0
 8008f76:	2140      	movs	r1, #64	; 0x40
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fb84 	bl	8009686 <UART_WaitOnFlagUntilTimeout>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e005      	b.n	8008f94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e000      	b.n	8008f94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008f92:	2302      	movs	r3, #2
  }
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f9c:	b5b0      	push	{r4, r5, r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	4bad      	ldr	r3, [pc, #692]	; (800927c <UART_SetConfig+0x2e0>)
 8008fc8:	4013      	ands	r3, r2
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	69f9      	ldr	r1, [r7, #28]
 8008fd0:	430b      	orrs	r3, r1
 8008fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4aa2      	ldr	r2, [pc, #648]	; (8009280 <UART_SetConfig+0x2e4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d004      	beq.n	8009004 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	69fa      	ldr	r2, [r7, #28]
 8009000:	4313      	orrs	r3, r2
 8009002:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	430a      	orrs	r2, r1
 8009016:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a99      	ldr	r2, [pc, #612]	; (8009284 <UART_SetConfig+0x2e8>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d121      	bne.n	8009066 <UART_SetConfig+0xca>
 8009022:	4b99      	ldr	r3, [pc, #612]	; (8009288 <UART_SetConfig+0x2ec>)
 8009024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	2b03      	cmp	r3, #3
 800902e:	d817      	bhi.n	8009060 <UART_SetConfig+0xc4>
 8009030:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <UART_SetConfig+0x9c>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009049 	.word	0x08009049
 800903c:	08009055 	.word	0x08009055
 8009040:	0800904f 	.word	0x0800904f
 8009044:	0800905b 	.word	0x0800905b
 8009048:	2301      	movs	r3, #1
 800904a:	76fb      	strb	r3, [r7, #27]
 800904c:	e0e7      	b.n	800921e <UART_SetConfig+0x282>
 800904e:	2302      	movs	r3, #2
 8009050:	76fb      	strb	r3, [r7, #27]
 8009052:	e0e4      	b.n	800921e <UART_SetConfig+0x282>
 8009054:	2304      	movs	r3, #4
 8009056:	76fb      	strb	r3, [r7, #27]
 8009058:	e0e1      	b.n	800921e <UART_SetConfig+0x282>
 800905a:	2308      	movs	r3, #8
 800905c:	76fb      	strb	r3, [r7, #27]
 800905e:	e0de      	b.n	800921e <UART_SetConfig+0x282>
 8009060:	2310      	movs	r3, #16
 8009062:	76fb      	strb	r3, [r7, #27]
 8009064:	e0db      	b.n	800921e <UART_SetConfig+0x282>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a88      	ldr	r2, [pc, #544]	; (800928c <UART_SetConfig+0x2f0>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d132      	bne.n	80090d6 <UART_SetConfig+0x13a>
 8009070:	4b85      	ldr	r3, [pc, #532]	; (8009288 <UART_SetConfig+0x2ec>)
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009076:	f003 030c 	and.w	r3, r3, #12
 800907a:	2b0c      	cmp	r3, #12
 800907c:	d828      	bhi.n	80090d0 <UART_SetConfig+0x134>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0xe8>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	080090b9 	.word	0x080090b9
 8009088:	080090d1 	.word	0x080090d1
 800908c:	080090d1 	.word	0x080090d1
 8009090:	080090d1 	.word	0x080090d1
 8009094:	080090c5 	.word	0x080090c5
 8009098:	080090d1 	.word	0x080090d1
 800909c:	080090d1 	.word	0x080090d1
 80090a0:	080090d1 	.word	0x080090d1
 80090a4:	080090bf 	.word	0x080090bf
 80090a8:	080090d1 	.word	0x080090d1
 80090ac:	080090d1 	.word	0x080090d1
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090cb 	.word	0x080090cb
 80090b8:	2300      	movs	r3, #0
 80090ba:	76fb      	strb	r3, [r7, #27]
 80090bc:	e0af      	b.n	800921e <UART_SetConfig+0x282>
 80090be:	2302      	movs	r3, #2
 80090c0:	76fb      	strb	r3, [r7, #27]
 80090c2:	e0ac      	b.n	800921e <UART_SetConfig+0x282>
 80090c4:	2304      	movs	r3, #4
 80090c6:	76fb      	strb	r3, [r7, #27]
 80090c8:	e0a9      	b.n	800921e <UART_SetConfig+0x282>
 80090ca:	2308      	movs	r3, #8
 80090cc:	76fb      	strb	r3, [r7, #27]
 80090ce:	e0a6      	b.n	800921e <UART_SetConfig+0x282>
 80090d0:	2310      	movs	r3, #16
 80090d2:	76fb      	strb	r3, [r7, #27]
 80090d4:	e0a3      	b.n	800921e <UART_SetConfig+0x282>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a6d      	ldr	r2, [pc, #436]	; (8009290 <UART_SetConfig+0x2f4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d120      	bne.n	8009122 <UART_SetConfig+0x186>
 80090e0:	4b69      	ldr	r3, [pc, #420]	; (8009288 <UART_SetConfig+0x2ec>)
 80090e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090ea:	2b30      	cmp	r3, #48	; 0x30
 80090ec:	d013      	beq.n	8009116 <UART_SetConfig+0x17a>
 80090ee:	2b30      	cmp	r3, #48	; 0x30
 80090f0:	d814      	bhi.n	800911c <UART_SetConfig+0x180>
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d009      	beq.n	800910a <UART_SetConfig+0x16e>
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d810      	bhi.n	800911c <UART_SetConfig+0x180>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <UART_SetConfig+0x168>
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d006      	beq.n	8009110 <UART_SetConfig+0x174>
 8009102:	e00b      	b.n	800911c <UART_SetConfig+0x180>
 8009104:	2300      	movs	r3, #0
 8009106:	76fb      	strb	r3, [r7, #27]
 8009108:	e089      	b.n	800921e <UART_SetConfig+0x282>
 800910a:	2302      	movs	r3, #2
 800910c:	76fb      	strb	r3, [r7, #27]
 800910e:	e086      	b.n	800921e <UART_SetConfig+0x282>
 8009110:	2304      	movs	r3, #4
 8009112:	76fb      	strb	r3, [r7, #27]
 8009114:	e083      	b.n	800921e <UART_SetConfig+0x282>
 8009116:	2308      	movs	r3, #8
 8009118:	76fb      	strb	r3, [r7, #27]
 800911a:	e080      	b.n	800921e <UART_SetConfig+0x282>
 800911c:	2310      	movs	r3, #16
 800911e:	76fb      	strb	r3, [r7, #27]
 8009120:	e07d      	b.n	800921e <UART_SetConfig+0x282>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a5b      	ldr	r2, [pc, #364]	; (8009294 <UART_SetConfig+0x2f8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d120      	bne.n	800916e <UART_SetConfig+0x1d2>
 800912c:	4b56      	ldr	r3, [pc, #344]	; (8009288 <UART_SetConfig+0x2ec>)
 800912e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009132:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009136:	2bc0      	cmp	r3, #192	; 0xc0
 8009138:	d013      	beq.n	8009162 <UART_SetConfig+0x1c6>
 800913a:	2bc0      	cmp	r3, #192	; 0xc0
 800913c:	d814      	bhi.n	8009168 <UART_SetConfig+0x1cc>
 800913e:	2b80      	cmp	r3, #128	; 0x80
 8009140:	d009      	beq.n	8009156 <UART_SetConfig+0x1ba>
 8009142:	2b80      	cmp	r3, #128	; 0x80
 8009144:	d810      	bhi.n	8009168 <UART_SetConfig+0x1cc>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <UART_SetConfig+0x1b4>
 800914a:	2b40      	cmp	r3, #64	; 0x40
 800914c:	d006      	beq.n	800915c <UART_SetConfig+0x1c0>
 800914e:	e00b      	b.n	8009168 <UART_SetConfig+0x1cc>
 8009150:	2300      	movs	r3, #0
 8009152:	76fb      	strb	r3, [r7, #27]
 8009154:	e063      	b.n	800921e <UART_SetConfig+0x282>
 8009156:	2302      	movs	r3, #2
 8009158:	76fb      	strb	r3, [r7, #27]
 800915a:	e060      	b.n	800921e <UART_SetConfig+0x282>
 800915c:	2304      	movs	r3, #4
 800915e:	76fb      	strb	r3, [r7, #27]
 8009160:	e05d      	b.n	800921e <UART_SetConfig+0x282>
 8009162:	2308      	movs	r3, #8
 8009164:	76fb      	strb	r3, [r7, #27]
 8009166:	e05a      	b.n	800921e <UART_SetConfig+0x282>
 8009168:	2310      	movs	r3, #16
 800916a:	76fb      	strb	r3, [r7, #27]
 800916c:	e057      	b.n	800921e <UART_SetConfig+0x282>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a49      	ldr	r2, [pc, #292]	; (8009298 <UART_SetConfig+0x2fc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d125      	bne.n	80091c4 <UART_SetConfig+0x228>
 8009178:	4b43      	ldr	r3, [pc, #268]	; (8009288 <UART_SetConfig+0x2ec>)
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009186:	d017      	beq.n	80091b8 <UART_SetConfig+0x21c>
 8009188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800918c:	d817      	bhi.n	80091be <UART_SetConfig+0x222>
 800918e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009192:	d00b      	beq.n	80091ac <UART_SetConfig+0x210>
 8009194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009198:	d811      	bhi.n	80091be <UART_SetConfig+0x222>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <UART_SetConfig+0x20a>
 800919e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a2:	d006      	beq.n	80091b2 <UART_SetConfig+0x216>
 80091a4:	e00b      	b.n	80091be <UART_SetConfig+0x222>
 80091a6:	2300      	movs	r3, #0
 80091a8:	76fb      	strb	r3, [r7, #27]
 80091aa:	e038      	b.n	800921e <UART_SetConfig+0x282>
 80091ac:	2302      	movs	r3, #2
 80091ae:	76fb      	strb	r3, [r7, #27]
 80091b0:	e035      	b.n	800921e <UART_SetConfig+0x282>
 80091b2:	2304      	movs	r3, #4
 80091b4:	76fb      	strb	r3, [r7, #27]
 80091b6:	e032      	b.n	800921e <UART_SetConfig+0x282>
 80091b8:	2308      	movs	r3, #8
 80091ba:	76fb      	strb	r3, [r7, #27]
 80091bc:	e02f      	b.n	800921e <UART_SetConfig+0x282>
 80091be:	2310      	movs	r3, #16
 80091c0:	76fb      	strb	r3, [r7, #27]
 80091c2:	e02c      	b.n	800921e <UART_SetConfig+0x282>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a2d      	ldr	r2, [pc, #180]	; (8009280 <UART_SetConfig+0x2e4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d125      	bne.n	800921a <UART_SetConfig+0x27e>
 80091ce:	4b2e      	ldr	r3, [pc, #184]	; (8009288 <UART_SetConfig+0x2ec>)
 80091d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091dc:	d017      	beq.n	800920e <UART_SetConfig+0x272>
 80091de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091e2:	d817      	bhi.n	8009214 <UART_SetConfig+0x278>
 80091e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e8:	d00b      	beq.n	8009202 <UART_SetConfig+0x266>
 80091ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ee:	d811      	bhi.n	8009214 <UART_SetConfig+0x278>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <UART_SetConfig+0x260>
 80091f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091f8:	d006      	beq.n	8009208 <UART_SetConfig+0x26c>
 80091fa:	e00b      	b.n	8009214 <UART_SetConfig+0x278>
 80091fc:	2300      	movs	r3, #0
 80091fe:	76fb      	strb	r3, [r7, #27]
 8009200:	e00d      	b.n	800921e <UART_SetConfig+0x282>
 8009202:	2302      	movs	r3, #2
 8009204:	76fb      	strb	r3, [r7, #27]
 8009206:	e00a      	b.n	800921e <UART_SetConfig+0x282>
 8009208:	2304      	movs	r3, #4
 800920a:	76fb      	strb	r3, [r7, #27]
 800920c:	e007      	b.n	800921e <UART_SetConfig+0x282>
 800920e:	2308      	movs	r3, #8
 8009210:	76fb      	strb	r3, [r7, #27]
 8009212:	e004      	b.n	800921e <UART_SetConfig+0x282>
 8009214:	2310      	movs	r3, #16
 8009216:	76fb      	strb	r3, [r7, #27]
 8009218:	e001      	b.n	800921e <UART_SetConfig+0x282>
 800921a:	2310      	movs	r3, #16
 800921c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a17      	ldr	r2, [pc, #92]	; (8009280 <UART_SetConfig+0x2e4>)
 8009224:	4293      	cmp	r3, r2
 8009226:	f040 8087 	bne.w	8009338 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800922a:	7efb      	ldrb	r3, [r7, #27]
 800922c:	2b08      	cmp	r3, #8
 800922e:	d837      	bhi.n	80092a0 <UART_SetConfig+0x304>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <UART_SetConfig+0x29c>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	0800925d 	.word	0x0800925d
 800923c:	080092a1 	.word	0x080092a1
 8009240:	08009265 	.word	0x08009265
 8009244:	080092a1 	.word	0x080092a1
 8009248:	0800926b 	.word	0x0800926b
 800924c:	080092a1 	.word	0x080092a1
 8009250:	080092a1 	.word	0x080092a1
 8009254:	080092a1 	.word	0x080092a1
 8009258:	08009273 	.word	0x08009273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800925c:	f7ff f874 	bl	8008348 <HAL_RCC_GetPCLK1Freq>
 8009260:	6178      	str	r0, [r7, #20]
        break;
 8009262:	e022      	b.n	80092aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <UART_SetConfig+0x300>)
 8009266:	617b      	str	r3, [r7, #20]
        break;
 8009268:	e01f      	b.n	80092aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926a:	f7fe ffd5 	bl	8008218 <HAL_RCC_GetSysClockFreq>
 800926e:	6178      	str	r0, [r7, #20]
        break;
 8009270:	e01b      	b.n	80092aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009276:	617b      	str	r3, [r7, #20]
        break;
 8009278:	e017      	b.n	80092aa <UART_SetConfig+0x30e>
 800927a:	bf00      	nop
 800927c:	efff69f3 	.word	0xefff69f3
 8009280:	40008000 	.word	0x40008000
 8009284:	40013800 	.word	0x40013800
 8009288:	40021000 	.word	0x40021000
 800928c:	40004400 	.word	0x40004400
 8009290:	40004800 	.word	0x40004800
 8009294:	40004c00 	.word	0x40004c00
 8009298:	40005000 	.word	0x40005000
 800929c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	76bb      	strb	r3, [r7, #26]
        break;
 80092a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80f1 	beq.w	8009494 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	4613      	mov	r3, r2
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	4413      	add	r3, r2
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d305      	bcc.n	80092ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d902      	bls.n	80092d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	76bb      	strb	r3, [r7, #26]
 80092d2:	e0df      	b.n	8009494 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f04f 0100 	mov.w	r1, #0
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	020b      	lsls	r3, r1, #8
 80092e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092ea:	0202      	lsls	r2, r0, #8
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	6849      	ldr	r1, [r1, #4]
 80092f0:	0849      	lsrs	r1, r1, #1
 80092f2:	4608      	mov	r0, r1
 80092f4:	f04f 0100 	mov.w	r1, #0
 80092f8:	1814      	adds	r4, r2, r0
 80092fa:	eb43 0501 	adc.w	r5, r3, r1
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	461a      	mov	r2, r3
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	4620      	mov	r0, r4
 800930a:	4629      	mov	r1, r5
 800930c:	f7f6 ffb8 	bl	8000280 <__aeabi_uldivmod>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4613      	mov	r3, r2
 8009316:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800931e:	d308      	bcc.n	8009332 <UART_SetConfig+0x396>
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009326:	d204      	bcs.n	8009332 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	60da      	str	r2, [r3, #12]
 8009330:	e0b0      	b.n	8009494 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	76bb      	strb	r3, [r7, #26]
 8009336:	e0ad      	b.n	8009494 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009340:	d15b      	bne.n	80093fa <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8009342:	7efb      	ldrb	r3, [r7, #27]
 8009344:	2b08      	cmp	r3, #8
 8009346:	d828      	bhi.n	800939a <UART_SetConfig+0x3fe>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <UART_SetConfig+0x3b4>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	08009375 	.word	0x08009375
 8009354:	0800937d 	.word	0x0800937d
 8009358:	08009385 	.word	0x08009385
 800935c:	0800939b 	.word	0x0800939b
 8009360:	0800938b 	.word	0x0800938b
 8009364:	0800939b 	.word	0x0800939b
 8009368:	0800939b 	.word	0x0800939b
 800936c:	0800939b 	.word	0x0800939b
 8009370:	08009393 	.word	0x08009393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009374:	f7fe ffe8 	bl	8008348 <HAL_RCC_GetPCLK1Freq>
 8009378:	6178      	str	r0, [r7, #20]
        break;
 800937a:	e013      	b.n	80093a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800937c:	f7fe fffa 	bl	8008374 <HAL_RCC_GetPCLK2Freq>
 8009380:	6178      	str	r0, [r7, #20]
        break;
 8009382:	e00f      	b.n	80093a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009384:	4b49      	ldr	r3, [pc, #292]	; (80094ac <UART_SetConfig+0x510>)
 8009386:	617b      	str	r3, [r7, #20]
        break;
 8009388:	e00c      	b.n	80093a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800938a:	f7fe ff45 	bl	8008218 <HAL_RCC_GetSysClockFreq>
 800938e:	6178      	str	r0, [r7, #20]
        break;
 8009390:	e008      	b.n	80093a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009396:	617b      	str	r3, [r7, #20]
        break;
 8009398:	e004      	b.n	80093a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	76bb      	strb	r3, [r7, #26]
        break;
 80093a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d074      	beq.n	8009494 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	005a      	lsls	r2, r3, #1
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	085b      	lsrs	r3, r3, #1
 80093b4:	441a      	add	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80093be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b0f      	cmp	r3, #15
 80093c4:	d916      	bls.n	80093f4 <UART_SetConfig+0x458>
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093cc:	d212      	bcs.n	80093f4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	f023 030f 	bic.w	r3, r3, #15
 80093d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	085b      	lsrs	r3, r3, #1
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	89fa      	ldrh	r2, [r7, #14]
 80093f0:	60da      	str	r2, [r3, #12]
 80093f2:	e04f      	b.n	8009494 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	76bb      	strb	r3, [r7, #26]
 80093f8:	e04c      	b.n	8009494 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093fa:	7efb      	ldrb	r3, [r7, #27]
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d828      	bhi.n	8009452 <UART_SetConfig+0x4b6>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <UART_SetConfig+0x46c>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	0800942d 	.word	0x0800942d
 800940c:	08009435 	.word	0x08009435
 8009410:	0800943d 	.word	0x0800943d
 8009414:	08009453 	.word	0x08009453
 8009418:	08009443 	.word	0x08009443
 800941c:	08009453 	.word	0x08009453
 8009420:	08009453 	.word	0x08009453
 8009424:	08009453 	.word	0x08009453
 8009428:	0800944b 	.word	0x0800944b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800942c:	f7fe ff8c 	bl	8008348 <HAL_RCC_GetPCLK1Freq>
 8009430:	6178      	str	r0, [r7, #20]
        break;
 8009432:	e013      	b.n	800945c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009434:	f7fe ff9e 	bl	8008374 <HAL_RCC_GetPCLK2Freq>
 8009438:	6178      	str	r0, [r7, #20]
        break;
 800943a:	e00f      	b.n	800945c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800943c:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <UART_SetConfig+0x510>)
 800943e:	617b      	str	r3, [r7, #20]
        break;
 8009440:	e00c      	b.n	800945c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009442:	f7fe fee9 	bl	8008218 <HAL_RCC_GetSysClockFreq>
 8009446:	6178      	str	r0, [r7, #20]
        break;
 8009448:	e008      	b.n	800945c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800944a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944e:	617b      	str	r3, [r7, #20]
        break;
 8009450:	e004      	b.n	800945c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	76bb      	strb	r3, [r7, #26]
        break;
 800945a:	bf00      	nop
    }

    if (pclk != 0U)
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d018      	beq.n	8009494 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	085a      	lsrs	r2, r3, #1
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	441a      	add	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	fbb2 f3f3 	udiv	r3, r2, r3
 8009474:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b0f      	cmp	r3, #15
 800947a:	d909      	bls.n	8009490 <UART_SetConfig+0x4f4>
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009482:	d205      	bcs.n	8009490 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	b29a      	uxth	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	e001      	b.n	8009494 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80094a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3720      	adds	r7, #32
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bdb0      	pop	{r4, r5, r7, pc}
 80094aa:	bf00      	nop
 80094ac:	00f42400 	.word	0x00f42400

080094b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00a      	beq.n	800951e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01a      	beq.n	80095c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ae:	d10a      	bne.n	80095c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	605a      	str	r2, [r3, #4]
  }
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af02      	add	r7, sp, #8
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009604:	f7fc feb8 	bl	8006378 <HAL_GetTick>
 8009608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0308 	and.w	r3, r3, #8
 8009614:	2b08      	cmp	r3, #8
 8009616:	d10e      	bne.n	8009636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f82d 	bl	8009686 <UART_WaitOnFlagUntilTimeout>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e023      	b.n	800967e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b04      	cmp	r3, #4
 8009642:	d10e      	bne.n	8009662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f817 	bl	8009686 <UART_WaitOnFlagUntilTimeout>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e00d      	b.n	800967e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2220      	movs	r2, #32
 8009666:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b09c      	sub	sp, #112	; 0x70
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	603b      	str	r3, [r7, #0]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009696:	e0a5      	b.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800969a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969e:	f000 80a1 	beq.w	80097e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096a2:	f7fc fe69 	bl	8006378 <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d302      	bcc.n	80096b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80096b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d13e      	bne.n	8009736 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096cc:	667b      	str	r3, [r7, #100]	; 0x64
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	461a      	mov	r2, r3
 80096d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80096e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e6      	bne.n	80096b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	f023 0301 	bic.w	r3, r3, #1
 8009700:	663b      	str	r3, [r7, #96]	; 0x60
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3308      	adds	r3, #8
 8009708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800970a:	64ba      	str	r2, [r7, #72]	; 0x48
 800970c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e5      	bne.n	80096ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2220      	movs	r2, #32
 8009722:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e067      	b.n	8009806 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d04f      	beq.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800974e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009752:	d147      	bne.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800975c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800977c:	637b      	str	r3, [r7, #52]	; 0x34
 800977e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e6      	bne.n	800975e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3308      	adds	r3, #8
 8009796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	613b      	str	r3, [r7, #16]
   return(result);
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f023 0301 	bic.w	r3, r3, #1
 80097a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3308      	adds	r3, #8
 80097ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097b0:	623a      	str	r2, [r7, #32]
 80097b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	69f9      	ldr	r1, [r7, #28]
 80097b6:	6a3a      	ldr	r2, [r7, #32]
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e5      	bne.n	8009790 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2220      	movs	r2, #32
 80097c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2220      	movs	r2, #32
 80097ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e010      	b.n	8009806 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	69da      	ldr	r2, [r3, #28]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	4013      	ands	r3, r2
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	bf0c      	ite	eq
 80097f4:	2301      	moveq	r3, #1
 80097f6:	2300      	movne	r3, #0
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	461a      	mov	r2, r3
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	429a      	cmp	r2, r3
 8009800:	f43f af4a 	beq.w	8009698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3770      	adds	r7, #112	; 0x70
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <__errno>:
 8009810:	4b01      	ldr	r3, [pc, #4]	; (8009818 <__errno+0x8>)
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	20000164 	.word	0x20000164

0800981c <__libc_init_array>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	4d0d      	ldr	r5, [pc, #52]	; (8009854 <__libc_init_array+0x38>)
 8009820:	4c0d      	ldr	r4, [pc, #52]	; (8009858 <__libc_init_array+0x3c>)
 8009822:	1b64      	subs	r4, r4, r5
 8009824:	10a4      	asrs	r4, r4, #2
 8009826:	2600      	movs	r6, #0
 8009828:	42a6      	cmp	r6, r4
 800982a:	d109      	bne.n	8009840 <__libc_init_array+0x24>
 800982c:	4d0b      	ldr	r5, [pc, #44]	; (800985c <__libc_init_array+0x40>)
 800982e:	4c0c      	ldr	r4, [pc, #48]	; (8009860 <__libc_init_array+0x44>)
 8009830:	f000 fc4e 	bl	800a0d0 <_init>
 8009834:	1b64      	subs	r4, r4, r5
 8009836:	10a4      	asrs	r4, r4, #2
 8009838:	2600      	movs	r6, #0
 800983a:	42a6      	cmp	r6, r4
 800983c:	d105      	bne.n	800984a <__libc_init_array+0x2e>
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	f855 3b04 	ldr.w	r3, [r5], #4
 8009844:	4798      	blx	r3
 8009846:	3601      	adds	r6, #1
 8009848:	e7ee      	b.n	8009828 <__libc_init_array+0xc>
 800984a:	f855 3b04 	ldr.w	r3, [r5], #4
 800984e:	4798      	blx	r3
 8009850:	3601      	adds	r6, #1
 8009852:	e7f2      	b.n	800983a <__libc_init_array+0x1e>
 8009854:	0800a29c 	.word	0x0800a29c
 8009858:	0800a29c 	.word	0x0800a29c
 800985c:	0800a29c 	.word	0x0800a29c
 8009860:	0800a2a0 	.word	0x0800a2a0

08009864 <memset>:
 8009864:	4402      	add	r2, r0
 8009866:	4603      	mov	r3, r0
 8009868:	4293      	cmp	r3, r2
 800986a:	d100      	bne.n	800986e <memset+0xa>
 800986c:	4770      	bx	lr
 800986e:	f803 1b01 	strb.w	r1, [r3], #1
 8009872:	e7f9      	b.n	8009868 <memset+0x4>

08009874 <siprintf>:
 8009874:	b40e      	push	{r1, r2, r3}
 8009876:	b500      	push	{lr}
 8009878:	b09c      	sub	sp, #112	; 0x70
 800987a:	ab1d      	add	r3, sp, #116	; 0x74
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	9006      	str	r0, [sp, #24]
 8009880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009884:	4809      	ldr	r0, [pc, #36]	; (80098ac <siprintf+0x38>)
 8009886:	9107      	str	r1, [sp, #28]
 8009888:	9104      	str	r1, [sp, #16]
 800988a:	4909      	ldr	r1, [pc, #36]	; (80098b0 <siprintf+0x3c>)
 800988c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009890:	9105      	str	r1, [sp, #20]
 8009892:	6800      	ldr	r0, [r0, #0]
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	a902      	add	r1, sp, #8
 8009898:	f000 f868 	bl	800996c <_svfiprintf_r>
 800989c:	9b02      	ldr	r3, [sp, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	b01c      	add	sp, #112	; 0x70
 80098a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a8:	b003      	add	sp, #12
 80098aa:	4770      	bx	lr
 80098ac:	20000164 	.word	0x20000164
 80098b0:	ffff0208 	.word	0xffff0208

080098b4 <__ssputs_r>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	688e      	ldr	r6, [r1, #8]
 80098ba:	429e      	cmp	r6, r3
 80098bc:	4682      	mov	sl, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	4690      	mov	r8, r2
 80098c2:	461f      	mov	r7, r3
 80098c4:	d838      	bhi.n	8009938 <__ssputs_r+0x84>
 80098c6:	898a      	ldrh	r2, [r1, #12]
 80098c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098cc:	d032      	beq.n	8009934 <__ssputs_r+0x80>
 80098ce:	6825      	ldr	r5, [r4, #0]
 80098d0:	6909      	ldr	r1, [r1, #16]
 80098d2:	eba5 0901 	sub.w	r9, r5, r1
 80098d6:	6965      	ldr	r5, [r4, #20]
 80098d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e0:	3301      	adds	r3, #1
 80098e2:	444b      	add	r3, r9
 80098e4:	106d      	asrs	r5, r5, #1
 80098e6:	429d      	cmp	r5, r3
 80098e8:	bf38      	it	cc
 80098ea:	461d      	movcc	r5, r3
 80098ec:	0553      	lsls	r3, r2, #21
 80098ee:	d531      	bpl.n	8009954 <__ssputs_r+0xa0>
 80098f0:	4629      	mov	r1, r5
 80098f2:	f000 fb47 	bl	8009f84 <_malloc_r>
 80098f6:	4606      	mov	r6, r0
 80098f8:	b950      	cbnz	r0, 8009910 <__ssputs_r+0x5c>
 80098fa:	230c      	movs	r3, #12
 80098fc:	f8ca 3000 	str.w	r3, [sl]
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	f04f 30ff 	mov.w	r0, #4294967295
 800990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009910:	6921      	ldr	r1, [r4, #16]
 8009912:	464a      	mov	r2, r9
 8009914:	f000 fabe 	bl	8009e94 <memcpy>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	6126      	str	r6, [r4, #16]
 8009926:	6165      	str	r5, [r4, #20]
 8009928:	444e      	add	r6, r9
 800992a:	eba5 0509 	sub.w	r5, r5, r9
 800992e:	6026      	str	r6, [r4, #0]
 8009930:	60a5      	str	r5, [r4, #8]
 8009932:	463e      	mov	r6, r7
 8009934:	42be      	cmp	r6, r7
 8009936:	d900      	bls.n	800993a <__ssputs_r+0x86>
 8009938:	463e      	mov	r6, r7
 800993a:	4632      	mov	r2, r6
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	4641      	mov	r1, r8
 8009940:	f000 fab6 	bl	8009eb0 <memmove>
 8009944:	68a3      	ldr	r3, [r4, #8]
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	1b9b      	subs	r3, r3, r6
 800994a:	4432      	add	r2, r6
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	6022      	str	r2, [r4, #0]
 8009950:	2000      	movs	r0, #0
 8009952:	e7db      	b.n	800990c <__ssputs_r+0x58>
 8009954:	462a      	mov	r2, r5
 8009956:	f000 fb6f 	bl	800a038 <_realloc_r>
 800995a:	4606      	mov	r6, r0
 800995c:	2800      	cmp	r0, #0
 800995e:	d1e1      	bne.n	8009924 <__ssputs_r+0x70>
 8009960:	6921      	ldr	r1, [r4, #16]
 8009962:	4650      	mov	r0, sl
 8009964:	f000 fabe 	bl	8009ee4 <_free_r>
 8009968:	e7c7      	b.n	80098fa <__ssputs_r+0x46>
	...

0800996c <_svfiprintf_r>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	4698      	mov	r8, r3
 8009972:	898b      	ldrh	r3, [r1, #12]
 8009974:	061b      	lsls	r3, r3, #24
 8009976:	b09d      	sub	sp, #116	; 0x74
 8009978:	4607      	mov	r7, r0
 800997a:	460d      	mov	r5, r1
 800997c:	4614      	mov	r4, r2
 800997e:	d50e      	bpl.n	800999e <_svfiprintf_r+0x32>
 8009980:	690b      	ldr	r3, [r1, #16]
 8009982:	b963      	cbnz	r3, 800999e <_svfiprintf_r+0x32>
 8009984:	2140      	movs	r1, #64	; 0x40
 8009986:	f000 fafd 	bl	8009f84 <_malloc_r>
 800998a:	6028      	str	r0, [r5, #0]
 800998c:	6128      	str	r0, [r5, #16]
 800998e:	b920      	cbnz	r0, 800999a <_svfiprintf_r+0x2e>
 8009990:	230c      	movs	r3, #12
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	e0d1      	b.n	8009b3e <_svfiprintf_r+0x1d2>
 800999a:	2340      	movs	r3, #64	; 0x40
 800999c:	616b      	str	r3, [r5, #20]
 800999e:	2300      	movs	r3, #0
 80099a0:	9309      	str	r3, [sp, #36]	; 0x24
 80099a2:	2320      	movs	r3, #32
 80099a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ac:	2330      	movs	r3, #48	; 0x30
 80099ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b58 <_svfiprintf_r+0x1ec>
 80099b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099b6:	f04f 0901 	mov.w	r9, #1
 80099ba:	4623      	mov	r3, r4
 80099bc:	469a      	mov	sl, r3
 80099be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c2:	b10a      	cbz	r2, 80099c8 <_svfiprintf_r+0x5c>
 80099c4:	2a25      	cmp	r2, #37	; 0x25
 80099c6:	d1f9      	bne.n	80099bc <_svfiprintf_r+0x50>
 80099c8:	ebba 0b04 	subs.w	fp, sl, r4
 80099cc:	d00b      	beq.n	80099e6 <_svfiprintf_r+0x7a>
 80099ce:	465b      	mov	r3, fp
 80099d0:	4622      	mov	r2, r4
 80099d2:	4629      	mov	r1, r5
 80099d4:	4638      	mov	r0, r7
 80099d6:	f7ff ff6d 	bl	80098b4 <__ssputs_r>
 80099da:	3001      	adds	r0, #1
 80099dc:	f000 80aa 	beq.w	8009b34 <_svfiprintf_r+0x1c8>
 80099e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e2:	445a      	add	r2, fp
 80099e4:	9209      	str	r2, [sp, #36]	; 0x24
 80099e6:	f89a 3000 	ldrb.w	r3, [sl]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 80a2 	beq.w	8009b34 <_svfiprintf_r+0x1c8>
 80099f0:	2300      	movs	r3, #0
 80099f2:	f04f 32ff 	mov.w	r2, #4294967295
 80099f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099fa:	f10a 0a01 	add.w	sl, sl, #1
 80099fe:	9304      	str	r3, [sp, #16]
 8009a00:	9307      	str	r3, [sp, #28]
 8009a02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a06:	931a      	str	r3, [sp, #104]	; 0x68
 8009a08:	4654      	mov	r4, sl
 8009a0a:	2205      	movs	r2, #5
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	4851      	ldr	r0, [pc, #324]	; (8009b58 <_svfiprintf_r+0x1ec>)
 8009a12:	f7f6 fbe5 	bl	80001e0 <memchr>
 8009a16:	9a04      	ldr	r2, [sp, #16]
 8009a18:	b9d8      	cbnz	r0, 8009a52 <_svfiprintf_r+0xe6>
 8009a1a:	06d0      	lsls	r0, r2, #27
 8009a1c:	bf44      	itt	mi
 8009a1e:	2320      	movmi	r3, #32
 8009a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a24:	0711      	lsls	r1, r2, #28
 8009a26:	bf44      	itt	mi
 8009a28:	232b      	movmi	r3, #43	; 0x2b
 8009a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a32:	2b2a      	cmp	r3, #42	; 0x2a
 8009a34:	d015      	beq.n	8009a62 <_svfiprintf_r+0xf6>
 8009a36:	9a07      	ldr	r2, [sp, #28]
 8009a38:	4654      	mov	r4, sl
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f04f 0c0a 	mov.w	ip, #10
 8009a40:	4621      	mov	r1, r4
 8009a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a46:	3b30      	subs	r3, #48	; 0x30
 8009a48:	2b09      	cmp	r3, #9
 8009a4a:	d94e      	bls.n	8009aea <_svfiprintf_r+0x17e>
 8009a4c:	b1b0      	cbz	r0, 8009a7c <_svfiprintf_r+0x110>
 8009a4e:	9207      	str	r2, [sp, #28]
 8009a50:	e014      	b.n	8009a7c <_svfiprintf_r+0x110>
 8009a52:	eba0 0308 	sub.w	r3, r0, r8
 8009a56:	fa09 f303 	lsl.w	r3, r9, r3
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	46a2      	mov	sl, r4
 8009a60:	e7d2      	b.n	8009a08 <_svfiprintf_r+0x9c>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	1d19      	adds	r1, r3, #4
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	9103      	str	r1, [sp, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfbb      	ittet	lt
 8009a6e:	425b      	neglt	r3, r3
 8009a70:	f042 0202 	orrlt.w	r2, r2, #2
 8009a74:	9307      	strge	r3, [sp, #28]
 8009a76:	9307      	strlt	r3, [sp, #28]
 8009a78:	bfb8      	it	lt
 8009a7a:	9204      	strlt	r2, [sp, #16]
 8009a7c:	7823      	ldrb	r3, [r4, #0]
 8009a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a80:	d10c      	bne.n	8009a9c <_svfiprintf_r+0x130>
 8009a82:	7863      	ldrb	r3, [r4, #1]
 8009a84:	2b2a      	cmp	r3, #42	; 0x2a
 8009a86:	d135      	bne.n	8009af4 <_svfiprintf_r+0x188>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	9203      	str	r2, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bfb8      	it	lt
 8009a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a98:	3402      	adds	r4, #2
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b68 <_svfiprintf_r+0x1fc>
 8009aa0:	7821      	ldrb	r1, [r4, #0]
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	f7f6 fb9b 	bl	80001e0 <memchr>
 8009aaa:	b140      	cbz	r0, 8009abe <_svfiprintf_r+0x152>
 8009aac:	2340      	movs	r3, #64	; 0x40
 8009aae:	eba0 000a 	sub.w	r0, r0, sl
 8009ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ab6:	9b04      	ldr	r3, [sp, #16]
 8009ab8:	4303      	orrs	r3, r0
 8009aba:	3401      	adds	r4, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac2:	4826      	ldr	r0, [pc, #152]	; (8009b5c <_svfiprintf_r+0x1f0>)
 8009ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ac8:	2206      	movs	r2, #6
 8009aca:	f7f6 fb89 	bl	80001e0 <memchr>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d038      	beq.n	8009b44 <_svfiprintf_r+0x1d8>
 8009ad2:	4b23      	ldr	r3, [pc, #140]	; (8009b60 <_svfiprintf_r+0x1f4>)
 8009ad4:	bb1b      	cbnz	r3, 8009b1e <_svfiprintf_r+0x1b2>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	3307      	adds	r3, #7
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	3308      	adds	r3, #8
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	4433      	add	r3, r6
 8009ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae8:	e767      	b.n	80099ba <_svfiprintf_r+0x4e>
 8009aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aee:	460c      	mov	r4, r1
 8009af0:	2001      	movs	r0, #1
 8009af2:	e7a5      	b.n	8009a40 <_svfiprintf_r+0xd4>
 8009af4:	2300      	movs	r3, #0
 8009af6:	3401      	adds	r4, #1
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	4619      	mov	r1, r3
 8009afc:	f04f 0c0a 	mov.w	ip, #10
 8009b00:	4620      	mov	r0, r4
 8009b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b06:	3a30      	subs	r2, #48	; 0x30
 8009b08:	2a09      	cmp	r2, #9
 8009b0a:	d903      	bls.n	8009b14 <_svfiprintf_r+0x1a8>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0c5      	beq.n	8009a9c <_svfiprintf_r+0x130>
 8009b10:	9105      	str	r1, [sp, #20]
 8009b12:	e7c3      	b.n	8009a9c <_svfiprintf_r+0x130>
 8009b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b18:	4604      	mov	r4, r0
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7f0      	b.n	8009b00 <_svfiprintf_r+0x194>
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <_svfiprintf_r+0x1f8>)
 8009b26:	a904      	add	r1, sp, #16
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f3af 8000 	nop.w
 8009b2e:	1c42      	adds	r2, r0, #1
 8009b30:	4606      	mov	r6, r0
 8009b32:	d1d6      	bne.n	8009ae2 <_svfiprintf_r+0x176>
 8009b34:	89ab      	ldrh	r3, [r5, #12]
 8009b36:	065b      	lsls	r3, r3, #25
 8009b38:	f53f af2c 	bmi.w	8009994 <_svfiprintf_r+0x28>
 8009b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b3e:	b01d      	add	sp, #116	; 0x74
 8009b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b44:	ab03      	add	r3, sp, #12
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	462a      	mov	r2, r5
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <_svfiprintf_r+0x1f8>)
 8009b4c:	a904      	add	r1, sp, #16
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f000 f87a 	bl	8009c48 <_printf_i>
 8009b54:	e7eb      	b.n	8009b2e <_svfiprintf_r+0x1c2>
 8009b56:	bf00      	nop
 8009b58:	0800a260 	.word	0x0800a260
 8009b5c:	0800a26a 	.word	0x0800a26a
 8009b60:	00000000 	.word	0x00000000
 8009b64:	080098b5 	.word	0x080098b5
 8009b68:	0800a266 	.word	0x0800a266

08009b6c <_printf_common>:
 8009b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b70:	4616      	mov	r6, r2
 8009b72:	4699      	mov	r9, r3
 8009b74:	688a      	ldr	r2, [r1, #8]
 8009b76:	690b      	ldr	r3, [r1, #16]
 8009b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	bfb8      	it	lt
 8009b80:	4613      	movlt	r3, r2
 8009b82:	6033      	str	r3, [r6, #0]
 8009b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b88:	4607      	mov	r7, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b10a      	cbz	r2, 8009b92 <_printf_common+0x26>
 8009b8e:	3301      	adds	r3, #1
 8009b90:	6033      	str	r3, [r6, #0]
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	0699      	lsls	r1, r3, #26
 8009b96:	bf42      	ittt	mi
 8009b98:	6833      	ldrmi	r3, [r6, #0]
 8009b9a:	3302      	addmi	r3, #2
 8009b9c:	6033      	strmi	r3, [r6, #0]
 8009b9e:	6825      	ldr	r5, [r4, #0]
 8009ba0:	f015 0506 	ands.w	r5, r5, #6
 8009ba4:	d106      	bne.n	8009bb4 <_printf_common+0x48>
 8009ba6:	f104 0a19 	add.w	sl, r4, #25
 8009baa:	68e3      	ldr	r3, [r4, #12]
 8009bac:	6832      	ldr	r2, [r6, #0]
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	42ab      	cmp	r3, r5
 8009bb2:	dc26      	bgt.n	8009c02 <_printf_common+0x96>
 8009bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bb8:	1e13      	subs	r3, r2, #0
 8009bba:	6822      	ldr	r2, [r4, #0]
 8009bbc:	bf18      	it	ne
 8009bbe:	2301      	movne	r3, #1
 8009bc0:	0692      	lsls	r2, r2, #26
 8009bc2:	d42b      	bmi.n	8009c1c <_printf_common+0xb0>
 8009bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc8:	4649      	mov	r1, r9
 8009bca:	4638      	mov	r0, r7
 8009bcc:	47c0      	blx	r8
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d01e      	beq.n	8009c10 <_printf_common+0xa4>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	68e5      	ldr	r5, [r4, #12]
 8009bd6:	6832      	ldr	r2, [r6, #0]
 8009bd8:	f003 0306 	and.w	r3, r3, #6
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	bf08      	it	eq
 8009be0:	1aad      	subeq	r5, r5, r2
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	6922      	ldr	r2, [r4, #16]
 8009be6:	bf0c      	ite	eq
 8009be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bec:	2500      	movne	r5, #0
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	bfc4      	itt	gt
 8009bf2:	1a9b      	subgt	r3, r3, r2
 8009bf4:	18ed      	addgt	r5, r5, r3
 8009bf6:	2600      	movs	r6, #0
 8009bf8:	341a      	adds	r4, #26
 8009bfa:	42b5      	cmp	r5, r6
 8009bfc:	d11a      	bne.n	8009c34 <_printf_common+0xc8>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e008      	b.n	8009c14 <_printf_common+0xa8>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4652      	mov	r2, sl
 8009c06:	4649      	mov	r1, r9
 8009c08:	4638      	mov	r0, r7
 8009c0a:	47c0      	blx	r8
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d103      	bne.n	8009c18 <_printf_common+0xac>
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c18:	3501      	adds	r5, #1
 8009c1a:	e7c6      	b.n	8009baa <_printf_common+0x3e>
 8009c1c:	18e1      	adds	r1, r4, r3
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	2030      	movs	r0, #48	; 0x30
 8009c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c26:	4422      	add	r2, r4
 8009c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c30:	3302      	adds	r3, #2
 8009c32:	e7c7      	b.n	8009bc4 <_printf_common+0x58>
 8009c34:	2301      	movs	r3, #1
 8009c36:	4622      	mov	r2, r4
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	47c0      	blx	r8
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d0e6      	beq.n	8009c10 <_printf_common+0xa4>
 8009c42:	3601      	adds	r6, #1
 8009c44:	e7d9      	b.n	8009bfa <_printf_common+0x8e>
	...

08009c48 <_printf_i>:
 8009c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	4691      	mov	r9, r2
 8009c50:	7e27      	ldrb	r7, [r4, #24]
 8009c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c54:	2f78      	cmp	r7, #120	; 0x78
 8009c56:	4680      	mov	r8, r0
 8009c58:	469a      	mov	sl, r3
 8009c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c5e:	d807      	bhi.n	8009c70 <_printf_i+0x28>
 8009c60:	2f62      	cmp	r7, #98	; 0x62
 8009c62:	d80a      	bhi.n	8009c7a <_printf_i+0x32>
 8009c64:	2f00      	cmp	r7, #0
 8009c66:	f000 80d8 	beq.w	8009e1a <_printf_i+0x1d2>
 8009c6a:	2f58      	cmp	r7, #88	; 0x58
 8009c6c:	f000 80a3 	beq.w	8009db6 <_printf_i+0x16e>
 8009c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c78:	e03a      	b.n	8009cf0 <_printf_i+0xa8>
 8009c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c7e:	2b15      	cmp	r3, #21
 8009c80:	d8f6      	bhi.n	8009c70 <_printf_i+0x28>
 8009c82:	a001      	add	r0, pc, #4	; (adr r0, 8009c88 <_printf_i+0x40>)
 8009c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c88:	08009ce1 	.word	0x08009ce1
 8009c8c:	08009cf5 	.word	0x08009cf5
 8009c90:	08009c71 	.word	0x08009c71
 8009c94:	08009c71 	.word	0x08009c71
 8009c98:	08009c71 	.word	0x08009c71
 8009c9c:	08009c71 	.word	0x08009c71
 8009ca0:	08009cf5 	.word	0x08009cf5
 8009ca4:	08009c71 	.word	0x08009c71
 8009ca8:	08009c71 	.word	0x08009c71
 8009cac:	08009c71 	.word	0x08009c71
 8009cb0:	08009c71 	.word	0x08009c71
 8009cb4:	08009e01 	.word	0x08009e01
 8009cb8:	08009d25 	.word	0x08009d25
 8009cbc:	08009de3 	.word	0x08009de3
 8009cc0:	08009c71 	.word	0x08009c71
 8009cc4:	08009c71 	.word	0x08009c71
 8009cc8:	08009e23 	.word	0x08009e23
 8009ccc:	08009c71 	.word	0x08009c71
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009c71 	.word	0x08009c71
 8009cd8:	08009c71 	.word	0x08009c71
 8009cdc:	08009deb 	.word	0x08009deb
 8009ce0:	680b      	ldr	r3, [r1, #0]
 8009ce2:	1d1a      	adds	r2, r3, #4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	600a      	str	r2, [r1, #0]
 8009ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e0a3      	b.n	8009e3c <_printf_i+0x1f4>
 8009cf4:	6825      	ldr	r5, [r4, #0]
 8009cf6:	6808      	ldr	r0, [r1, #0]
 8009cf8:	062e      	lsls	r6, r5, #24
 8009cfa:	f100 0304 	add.w	r3, r0, #4
 8009cfe:	d50a      	bpl.n	8009d16 <_printf_i+0xce>
 8009d00:	6805      	ldr	r5, [r0, #0]
 8009d02:	600b      	str	r3, [r1, #0]
 8009d04:	2d00      	cmp	r5, #0
 8009d06:	da03      	bge.n	8009d10 <_printf_i+0xc8>
 8009d08:	232d      	movs	r3, #45	; 0x2d
 8009d0a:	426d      	negs	r5, r5
 8009d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d10:	485e      	ldr	r0, [pc, #376]	; (8009e8c <_printf_i+0x244>)
 8009d12:	230a      	movs	r3, #10
 8009d14:	e019      	b.n	8009d4a <_printf_i+0x102>
 8009d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d1a:	6805      	ldr	r5, [r0, #0]
 8009d1c:	600b      	str	r3, [r1, #0]
 8009d1e:	bf18      	it	ne
 8009d20:	b22d      	sxthne	r5, r5
 8009d22:	e7ef      	b.n	8009d04 <_printf_i+0xbc>
 8009d24:	680b      	ldr	r3, [r1, #0]
 8009d26:	6825      	ldr	r5, [r4, #0]
 8009d28:	1d18      	adds	r0, r3, #4
 8009d2a:	6008      	str	r0, [r1, #0]
 8009d2c:	0628      	lsls	r0, r5, #24
 8009d2e:	d501      	bpl.n	8009d34 <_printf_i+0xec>
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	e002      	b.n	8009d3a <_printf_i+0xf2>
 8009d34:	0669      	lsls	r1, r5, #25
 8009d36:	d5fb      	bpl.n	8009d30 <_printf_i+0xe8>
 8009d38:	881d      	ldrh	r5, [r3, #0]
 8009d3a:	4854      	ldr	r0, [pc, #336]	; (8009e8c <_printf_i+0x244>)
 8009d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d3e:	bf0c      	ite	eq
 8009d40:	2308      	moveq	r3, #8
 8009d42:	230a      	movne	r3, #10
 8009d44:	2100      	movs	r1, #0
 8009d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d4a:	6866      	ldr	r6, [r4, #4]
 8009d4c:	60a6      	str	r6, [r4, #8]
 8009d4e:	2e00      	cmp	r6, #0
 8009d50:	bfa2      	ittt	ge
 8009d52:	6821      	ldrge	r1, [r4, #0]
 8009d54:	f021 0104 	bicge.w	r1, r1, #4
 8009d58:	6021      	strge	r1, [r4, #0]
 8009d5a:	b90d      	cbnz	r5, 8009d60 <_printf_i+0x118>
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	d04d      	beq.n	8009dfc <_printf_i+0x1b4>
 8009d60:	4616      	mov	r6, r2
 8009d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d66:	fb03 5711 	mls	r7, r3, r1, r5
 8009d6a:	5dc7      	ldrb	r7, [r0, r7]
 8009d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d70:	462f      	mov	r7, r5
 8009d72:	42bb      	cmp	r3, r7
 8009d74:	460d      	mov	r5, r1
 8009d76:	d9f4      	bls.n	8009d62 <_printf_i+0x11a>
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d10b      	bne.n	8009d94 <_printf_i+0x14c>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	07df      	lsls	r7, r3, #31
 8009d80:	d508      	bpl.n	8009d94 <_printf_i+0x14c>
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	6861      	ldr	r1, [r4, #4]
 8009d86:	4299      	cmp	r1, r3
 8009d88:	bfde      	ittt	le
 8009d8a:	2330      	movle	r3, #48	; 0x30
 8009d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d94:	1b92      	subs	r2, r2, r6
 8009d96:	6122      	str	r2, [r4, #16]
 8009d98:	f8cd a000 	str.w	sl, [sp]
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	aa03      	add	r2, sp, #12
 8009da0:	4621      	mov	r1, r4
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7ff fee2 	bl	8009b6c <_printf_common>
 8009da8:	3001      	adds	r0, #1
 8009daa:	d14c      	bne.n	8009e46 <_printf_i+0x1fe>
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	b004      	add	sp, #16
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	4835      	ldr	r0, [pc, #212]	; (8009e8c <_printf_i+0x244>)
 8009db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	680e      	ldr	r6, [r1, #0]
 8009dc0:	061f      	lsls	r7, r3, #24
 8009dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009dc6:	600e      	str	r6, [r1, #0]
 8009dc8:	d514      	bpl.n	8009df4 <_printf_i+0x1ac>
 8009dca:	07d9      	lsls	r1, r3, #31
 8009dcc:	bf44      	itt	mi
 8009dce:	f043 0320 	orrmi.w	r3, r3, #32
 8009dd2:	6023      	strmi	r3, [r4, #0]
 8009dd4:	b91d      	cbnz	r5, 8009dde <_printf_i+0x196>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	f023 0320 	bic.w	r3, r3, #32
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	2310      	movs	r3, #16
 8009de0:	e7b0      	b.n	8009d44 <_printf_i+0xfc>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	f043 0320 	orr.w	r3, r3, #32
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	2378      	movs	r3, #120	; 0x78
 8009dec:	4828      	ldr	r0, [pc, #160]	; (8009e90 <_printf_i+0x248>)
 8009dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009df2:	e7e3      	b.n	8009dbc <_printf_i+0x174>
 8009df4:	065e      	lsls	r6, r3, #25
 8009df6:	bf48      	it	mi
 8009df8:	b2ad      	uxthmi	r5, r5
 8009dfa:	e7e6      	b.n	8009dca <_printf_i+0x182>
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	e7bb      	b.n	8009d78 <_printf_i+0x130>
 8009e00:	680b      	ldr	r3, [r1, #0]
 8009e02:	6826      	ldr	r6, [r4, #0]
 8009e04:	6960      	ldr	r0, [r4, #20]
 8009e06:	1d1d      	adds	r5, r3, #4
 8009e08:	600d      	str	r5, [r1, #0]
 8009e0a:	0635      	lsls	r5, r6, #24
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	d501      	bpl.n	8009e14 <_printf_i+0x1cc>
 8009e10:	6018      	str	r0, [r3, #0]
 8009e12:	e002      	b.n	8009e1a <_printf_i+0x1d2>
 8009e14:	0671      	lsls	r1, r6, #25
 8009e16:	d5fb      	bpl.n	8009e10 <_printf_i+0x1c8>
 8009e18:	8018      	strh	r0, [r3, #0]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	4616      	mov	r6, r2
 8009e20:	e7ba      	b.n	8009d98 <_printf_i+0x150>
 8009e22:	680b      	ldr	r3, [r1, #0]
 8009e24:	1d1a      	adds	r2, r3, #4
 8009e26:	600a      	str	r2, [r1, #0]
 8009e28:	681e      	ldr	r6, [r3, #0]
 8009e2a:	6862      	ldr	r2, [r4, #4]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7f6 f9d6 	bl	80001e0 <memchr>
 8009e34:	b108      	cbz	r0, 8009e3a <_printf_i+0x1f2>
 8009e36:	1b80      	subs	r0, r0, r6
 8009e38:	6060      	str	r0, [r4, #4]
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	6123      	str	r3, [r4, #16]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e44:	e7a8      	b.n	8009d98 <_printf_i+0x150>
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	4632      	mov	r2, r6
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	47d0      	blx	sl
 8009e50:	3001      	adds	r0, #1
 8009e52:	d0ab      	beq.n	8009dac <_printf_i+0x164>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	079b      	lsls	r3, r3, #30
 8009e58:	d413      	bmi.n	8009e82 <_printf_i+0x23a>
 8009e5a:	68e0      	ldr	r0, [r4, #12]
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	4298      	cmp	r0, r3
 8009e60:	bfb8      	it	lt
 8009e62:	4618      	movlt	r0, r3
 8009e64:	e7a4      	b.n	8009db0 <_printf_i+0x168>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4632      	mov	r2, r6
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	47d0      	blx	sl
 8009e70:	3001      	adds	r0, #1
 8009e72:	d09b      	beq.n	8009dac <_printf_i+0x164>
 8009e74:	3501      	adds	r5, #1
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	9903      	ldr	r1, [sp, #12]
 8009e7a:	1a5b      	subs	r3, r3, r1
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dcf2      	bgt.n	8009e66 <_printf_i+0x21e>
 8009e80:	e7eb      	b.n	8009e5a <_printf_i+0x212>
 8009e82:	2500      	movs	r5, #0
 8009e84:	f104 0619 	add.w	r6, r4, #25
 8009e88:	e7f5      	b.n	8009e76 <_printf_i+0x22e>
 8009e8a:	bf00      	nop
 8009e8c:	0800a271 	.word	0x0800a271
 8009e90:	0800a282 	.word	0x0800a282

08009e94 <memcpy>:
 8009e94:	440a      	add	r2, r1
 8009e96:	4291      	cmp	r1, r2
 8009e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e9c:	d100      	bne.n	8009ea0 <memcpy+0xc>
 8009e9e:	4770      	bx	lr
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eaa:	4291      	cmp	r1, r2
 8009eac:	d1f9      	bne.n	8009ea2 <memcpy+0xe>
 8009eae:	bd10      	pop	{r4, pc}

08009eb0 <memmove>:
 8009eb0:	4288      	cmp	r0, r1
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	eb01 0402 	add.w	r4, r1, r2
 8009eb8:	d902      	bls.n	8009ec0 <memmove+0x10>
 8009eba:	4284      	cmp	r4, r0
 8009ebc:	4623      	mov	r3, r4
 8009ebe:	d807      	bhi.n	8009ed0 <memmove+0x20>
 8009ec0:	1e43      	subs	r3, r0, #1
 8009ec2:	42a1      	cmp	r1, r4
 8009ec4:	d008      	beq.n	8009ed8 <memmove+0x28>
 8009ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ece:	e7f8      	b.n	8009ec2 <memmove+0x12>
 8009ed0:	4402      	add	r2, r0
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	428a      	cmp	r2, r1
 8009ed6:	d100      	bne.n	8009eda <memmove+0x2a>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ee2:	e7f7      	b.n	8009ed4 <memmove+0x24>

08009ee4 <_free_r>:
 8009ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ee6:	2900      	cmp	r1, #0
 8009ee8:	d048      	beq.n	8009f7c <_free_r+0x98>
 8009eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eee:	9001      	str	r0, [sp, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ef6:	bfb8      	it	lt
 8009ef8:	18e4      	addlt	r4, r4, r3
 8009efa:	f000 f8d3 	bl	800a0a4 <__malloc_lock>
 8009efe:	4a20      	ldr	r2, [pc, #128]	; (8009f80 <_free_r+0x9c>)
 8009f00:	9801      	ldr	r0, [sp, #4]
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	4615      	mov	r5, r2
 8009f06:	b933      	cbnz	r3, 8009f16 <_free_r+0x32>
 8009f08:	6063      	str	r3, [r4, #4]
 8009f0a:	6014      	str	r4, [r2, #0]
 8009f0c:	b003      	add	sp, #12
 8009f0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f12:	f000 b8cd 	b.w	800a0b0 <__malloc_unlock>
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	d90b      	bls.n	8009f32 <_free_r+0x4e>
 8009f1a:	6821      	ldr	r1, [r4, #0]
 8009f1c:	1862      	adds	r2, r4, r1
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	bf04      	itt	eq
 8009f22:	681a      	ldreq	r2, [r3, #0]
 8009f24:	685b      	ldreq	r3, [r3, #4]
 8009f26:	6063      	str	r3, [r4, #4]
 8009f28:	bf04      	itt	eq
 8009f2a:	1852      	addeq	r2, r2, r1
 8009f2c:	6022      	streq	r2, [r4, #0]
 8009f2e:	602c      	str	r4, [r5, #0]
 8009f30:	e7ec      	b.n	8009f0c <_free_r+0x28>
 8009f32:	461a      	mov	r2, r3
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	b10b      	cbz	r3, 8009f3c <_free_r+0x58>
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d9fa      	bls.n	8009f32 <_free_r+0x4e>
 8009f3c:	6811      	ldr	r1, [r2, #0]
 8009f3e:	1855      	adds	r5, r2, r1
 8009f40:	42a5      	cmp	r5, r4
 8009f42:	d10b      	bne.n	8009f5c <_free_r+0x78>
 8009f44:	6824      	ldr	r4, [r4, #0]
 8009f46:	4421      	add	r1, r4
 8009f48:	1854      	adds	r4, r2, r1
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	6011      	str	r1, [r2, #0]
 8009f4e:	d1dd      	bne.n	8009f0c <_free_r+0x28>
 8009f50:	681c      	ldr	r4, [r3, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	6053      	str	r3, [r2, #4]
 8009f56:	4421      	add	r1, r4
 8009f58:	6011      	str	r1, [r2, #0]
 8009f5a:	e7d7      	b.n	8009f0c <_free_r+0x28>
 8009f5c:	d902      	bls.n	8009f64 <_free_r+0x80>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	6003      	str	r3, [r0, #0]
 8009f62:	e7d3      	b.n	8009f0c <_free_r+0x28>
 8009f64:	6825      	ldr	r5, [r4, #0]
 8009f66:	1961      	adds	r1, r4, r5
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	bf04      	itt	eq
 8009f6c:	6819      	ldreq	r1, [r3, #0]
 8009f6e:	685b      	ldreq	r3, [r3, #4]
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	bf04      	itt	eq
 8009f74:	1949      	addeq	r1, r1, r5
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	6054      	str	r4, [r2, #4]
 8009f7a:	e7c7      	b.n	8009f0c <_free_r+0x28>
 8009f7c:	b003      	add	sp, #12
 8009f7e:	bd30      	pop	{r4, r5, pc}
 8009f80:	20000330 	.word	0x20000330

08009f84 <_malloc_r>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	1ccd      	adds	r5, r1, #3
 8009f88:	f025 0503 	bic.w	r5, r5, #3
 8009f8c:	3508      	adds	r5, #8
 8009f8e:	2d0c      	cmp	r5, #12
 8009f90:	bf38      	it	cc
 8009f92:	250c      	movcc	r5, #12
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	4606      	mov	r6, r0
 8009f98:	db01      	blt.n	8009f9e <_malloc_r+0x1a>
 8009f9a:	42a9      	cmp	r1, r5
 8009f9c:	d903      	bls.n	8009fa6 <_malloc_r+0x22>
 8009f9e:	230c      	movs	r3, #12
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa6:	f000 f87d 	bl	800a0a4 <__malloc_lock>
 8009faa:	4921      	ldr	r1, [pc, #132]	; (800a030 <_malloc_r+0xac>)
 8009fac:	680a      	ldr	r2, [r1, #0]
 8009fae:	4614      	mov	r4, r2
 8009fb0:	b99c      	cbnz	r4, 8009fda <_malloc_r+0x56>
 8009fb2:	4f20      	ldr	r7, [pc, #128]	; (800a034 <_malloc_r+0xb0>)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	b923      	cbnz	r3, 8009fc2 <_malloc_r+0x3e>
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f000 f862 	bl	800a084 <_sbrk_r>
 8009fc0:	6038      	str	r0, [r7, #0]
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f000 f85d 	bl	800a084 <_sbrk_r>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	d123      	bne.n	800a016 <_malloc_r+0x92>
 8009fce:	230c      	movs	r3, #12
 8009fd0:	6033      	str	r3, [r6, #0]
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f000 f86c 	bl	800a0b0 <__malloc_unlock>
 8009fd8:	e7e3      	b.n	8009fa2 <_malloc_r+0x1e>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	1b5b      	subs	r3, r3, r5
 8009fde:	d417      	bmi.n	800a010 <_malloc_r+0x8c>
 8009fe0:	2b0b      	cmp	r3, #11
 8009fe2:	d903      	bls.n	8009fec <_malloc_r+0x68>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	441c      	add	r4, r3
 8009fe8:	6025      	str	r5, [r4, #0]
 8009fea:	e004      	b.n	8009ff6 <_malloc_r+0x72>
 8009fec:	6863      	ldr	r3, [r4, #4]
 8009fee:	42a2      	cmp	r2, r4
 8009ff0:	bf0c      	ite	eq
 8009ff2:	600b      	streq	r3, [r1, #0]
 8009ff4:	6053      	strne	r3, [r2, #4]
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f000 f85a 	bl	800a0b0 <__malloc_unlock>
 8009ffc:	f104 000b 	add.w	r0, r4, #11
 800a000:	1d23      	adds	r3, r4, #4
 800a002:	f020 0007 	bic.w	r0, r0, #7
 800a006:	1ac2      	subs	r2, r0, r3
 800a008:	d0cc      	beq.n	8009fa4 <_malloc_r+0x20>
 800a00a:	1a1b      	subs	r3, r3, r0
 800a00c:	50a3      	str	r3, [r4, r2]
 800a00e:	e7c9      	b.n	8009fa4 <_malloc_r+0x20>
 800a010:	4622      	mov	r2, r4
 800a012:	6864      	ldr	r4, [r4, #4]
 800a014:	e7cc      	b.n	8009fb0 <_malloc_r+0x2c>
 800a016:	1cc4      	adds	r4, r0, #3
 800a018:	f024 0403 	bic.w	r4, r4, #3
 800a01c:	42a0      	cmp	r0, r4
 800a01e:	d0e3      	beq.n	8009fe8 <_malloc_r+0x64>
 800a020:	1a21      	subs	r1, r4, r0
 800a022:	4630      	mov	r0, r6
 800a024:	f000 f82e 	bl	800a084 <_sbrk_r>
 800a028:	3001      	adds	r0, #1
 800a02a:	d1dd      	bne.n	8009fe8 <_malloc_r+0x64>
 800a02c:	e7cf      	b.n	8009fce <_malloc_r+0x4a>
 800a02e:	bf00      	nop
 800a030:	20000330 	.word	0x20000330
 800a034:	20000334 	.word	0x20000334

0800a038 <_realloc_r>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	4607      	mov	r7, r0
 800a03c:	4614      	mov	r4, r2
 800a03e:	460e      	mov	r6, r1
 800a040:	b921      	cbnz	r1, 800a04c <_realloc_r+0x14>
 800a042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a046:	4611      	mov	r1, r2
 800a048:	f7ff bf9c 	b.w	8009f84 <_malloc_r>
 800a04c:	b922      	cbnz	r2, 800a058 <_realloc_r+0x20>
 800a04e:	f7ff ff49 	bl	8009ee4 <_free_r>
 800a052:	4625      	mov	r5, r4
 800a054:	4628      	mov	r0, r5
 800a056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a058:	f000 f830 	bl	800a0bc <_malloc_usable_size_r>
 800a05c:	42a0      	cmp	r0, r4
 800a05e:	d20f      	bcs.n	800a080 <_realloc_r+0x48>
 800a060:	4621      	mov	r1, r4
 800a062:	4638      	mov	r0, r7
 800a064:	f7ff ff8e 	bl	8009f84 <_malloc_r>
 800a068:	4605      	mov	r5, r0
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d0f2      	beq.n	800a054 <_realloc_r+0x1c>
 800a06e:	4631      	mov	r1, r6
 800a070:	4622      	mov	r2, r4
 800a072:	f7ff ff0f 	bl	8009e94 <memcpy>
 800a076:	4631      	mov	r1, r6
 800a078:	4638      	mov	r0, r7
 800a07a:	f7ff ff33 	bl	8009ee4 <_free_r>
 800a07e:	e7e9      	b.n	800a054 <_realloc_r+0x1c>
 800a080:	4635      	mov	r5, r6
 800a082:	e7e7      	b.n	800a054 <_realloc_r+0x1c>

0800a084 <_sbrk_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4d06      	ldr	r5, [pc, #24]	; (800a0a0 <_sbrk_r+0x1c>)
 800a088:	2300      	movs	r3, #0
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f6 ff8e 	bl	8000fb0 <_sbrk>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_sbrk_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_sbrk_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	200004cc 	.word	0x200004cc

0800a0a4 <__malloc_lock>:
 800a0a4:	4801      	ldr	r0, [pc, #4]	; (800a0ac <__malloc_lock+0x8>)
 800a0a6:	f000 b811 	b.w	800a0cc <__retarget_lock_acquire_recursive>
 800a0aa:	bf00      	nop
 800a0ac:	200004d4 	.word	0x200004d4

0800a0b0 <__malloc_unlock>:
 800a0b0:	4801      	ldr	r0, [pc, #4]	; (800a0b8 <__malloc_unlock+0x8>)
 800a0b2:	f000 b80c 	b.w	800a0ce <__retarget_lock_release_recursive>
 800a0b6:	bf00      	nop
 800a0b8:	200004d4 	.word	0x200004d4

0800a0bc <_malloc_usable_size_r>:
 800a0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c0:	1f18      	subs	r0, r3, #4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bfbc      	itt	lt
 800a0c6:	580b      	ldrlt	r3, [r1, r0]
 800a0c8:	18c0      	addlt	r0, r0, r3
 800a0ca:	4770      	bx	lr

0800a0cc <__retarget_lock_acquire_recursive>:
 800a0cc:	4770      	bx	lr

0800a0ce <__retarget_lock_release_recursive>:
 800a0ce:	4770      	bx	lr

0800a0d0 <_init>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr

0800a0dc <_fini>:
 800a0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0de:	bf00      	nop
 800a0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e2:	bc08      	pop	{r3}
 800a0e4:	469e      	mov	lr, r3
 800a0e6:	4770      	bx	lr
