
test_3_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f2c  08009f2c  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f34  08009f34  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08009f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001c8  0800a104  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800a104  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033aea  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db7  00000000  00000000  00053ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00057aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002318  00000000  00000000  00059f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a7b  00000000  00000000  0005c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1a9  00000000  00000000  00084cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b13  00000000  00000000  000a0e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019996f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a098  00000000  00000000  001999c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e8c 	.word	0x08009e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08009e8c 	.word	0x08009e8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fd71 	bl	8006064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f87b 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f92b 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f8f9 	bl	8000780 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800058e:	f000 f8c7 	bl	8000720 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_GYRO)==HAL_OK){
 8000592:	2101      	movs	r1, #1
 8000594:	2000      	movs	r0, #0
 8000596:	f005 f9df 	bl	8005958 <IKS01A2_MOTION_SENSOR_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <main+0x30>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_GYRO);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2000      	movs	r0, #0
 80005a4:	f005 fad4 	bl	8005b50 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO)==HAL_OK){
 80005a8:	2102      	movs	r1, #2
 80005aa:	2001      	movs	r0, #1
 80005ac:	f005 f9d4 	bl	8005958 <IKS01A2_MOTION_SENSOR_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <main+0x46>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80005b6:	2102      	movs	r1, #2
 80005b8:	2001      	movs	r0, #1
 80005ba:	f005 fac9 	bl	8005b50 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_TEMPERATURE)==HAL_OK){
 80005be:	2101      	movs	r1, #1
 80005c0:	2000      	movs	r0, #0
 80005c2:	f004 ff0d 	bl	80053e0 <IKS01A2_ENV_SENSOR_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d103      	bne.n	80005d4 <main+0x5c>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_TEMPERATURE);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f004 ffc6 	bl	8005560 <IKS01A2_ENV_SENSOR_Enable>
  }
  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_HUMIDITY)==HAL_OK){
 80005d4:	2104      	movs	r1, #4
 80005d6:	2000      	movs	r0, #0
 80005d8:	f004 ff02 	bl	80053e0 <IKS01A2_ENV_SENSOR_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d103      	bne.n	80005ea <main+0x72>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_HUMIDITY);
 80005e2:	2104      	movs	r1, #4
 80005e4:	2000      	movs	r0, #0
 80005e6:	f004 ffbb 	bl	8005560 <IKS01A2_ENV_SENSOR_Enable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(500);
 80005ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ee:	f005 fdad 	bl	800614c <HAL_Delay>

	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <main+0xec>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	2000      	movs	r0, #0
 80005f8:	f004 fff4 	bl	80055e4 <IKS01A2_ENV_SENSOR_GetValue>
	  HAL_Delay(100);
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f005 fda5 	bl	800614c <HAL_Delay>
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_HUMIDITY, &data_humidity);
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <main+0xf0>)
 8000604:	2104      	movs	r1, #4
 8000606:	2000      	movs	r0, #0
 8000608:	f004 ffec 	bl	80055e4 <IKS01A2_ENV_SENSOR_GetValue>
	  HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f005 fd9d 	bl	800614c <HAL_Delay>
	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO, &data_axe_acc);
 8000612:	4a16      	ldr	r2, [pc, #88]	; (800066c <main+0xf4>)
 8000614:	2102      	movs	r1, #2
 8000616:	2001      	movs	r0, #1
 8000618:	f005 fadc 	bl	8005bd4 <IKS01A2_MOTION_SENSOR_GetAxes>
	  HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f005 fd95 	bl	800614c <HAL_Delay>
	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0,MOTION_GYRO, &data_axe_gyro);
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <main+0xf8>)
 8000624:	2101      	movs	r1, #1
 8000626:	2000      	movs	r0, #0
 8000628:	f005 fad4 	bl	8005bd4 <IKS01A2_MOTION_SENSOR_GetAxes>
		// buf[1]=&data_axe_acc;
		  sprintf((char*)buf,"hello %u\r\n",(unsigned int)data);
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <main+0xec>)
 800062e:	edd3 7a00 	vldr	s15, [r3]
 8000632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	ee17 2a90 	vmov	r2, s15
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <main+0xfc>)
 800063e:	4618      	mov	r0, r3
 8000640:	f008 fff6 	bl	8009630 <siprintf>
		 // strcpy((char*)buf,"Hello! \r\n");
		  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fdc2 	bl	80001d0 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	1d39      	adds	r1, r7, #4
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0x100>)
 8000658:	f008 faea 	bl	8008c30 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f005 fd75 	bl	800614c <HAL_Delay>
	  HAL_Delay(500);
 8000662:	e7c2      	b.n	80005ea <main+0x72>
 8000664:	20000348 	.word	0x20000348
 8000668:	20000338 	.word	0x20000338
 800066c:	200003d4 	.word	0x200003d4
 8000670:	2000033c 	.word	0x2000033c
 8000674:	08009ea4 	.word	0x08009ea4
 8000678:	200003e0 	.word	0x200003e0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	; 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f008 ffc8 	bl	8009620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a2:	f006 ff79 	bl	8007598 <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f000 f8f2 	bl	8000894 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 ffb0 	bl	8007644 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ea:	f000 f8d3 	bl	8000894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f007 fb82 	bl	8007e10 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f8bf 	bl	8000894 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_UART4_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_UART4_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_UART4_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_UART4_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_UART4_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_UART4_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_UART4_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_UART4_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_UART4_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_UART4_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_UART4_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_UART4_Init+0x58>)
 8000764:	f008 fa16 	bl	8008b94 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f891 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000034c 	.word	0x2000034c
 800077c:	40004c00 	.word	0x40004c00

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007c4:	f008 f9e6 	bl	8008b94 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f861 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200003e0 	.word	0x200003e0
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_GPIO_Init+0xac>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <MX_GPIO_Init+0xac>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_GPIO_Init+0xac>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_GPIO_Init+0xac>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a1e      	ldr	r2, [pc, #120]	; (800088c <MX_GPIO_Init+0xac>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xac>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xac>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_GPIO_Init+0xac>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_GPIO_Init+0xac>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f006 f829 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000850:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <MX_GPIO_Init+0xb0>)
 8000862:	f005 fd7d 	bl	8006360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086e:	2301      	movs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f005 fd6e 	bl	8006360 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	48000800 	.word	0x48000800

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x44>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	; 0x60
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x44>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0ae      	sub	sp, #184	; 0xb8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	2288      	movs	r2, #136	; 0x88
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f008 fe89 	bl	8009620 <memset>
  if(huart->Instance==UART4)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a42      	ldr	r2, [pc, #264]	; (8000a1c <HAL_UART_MspInit+0x134>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d13c      	bne.n	8000992 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000918:	2308      	movs	r3, #8
 800091a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800091c:	2300      	movs	r3, #0
 800091e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4618      	mov	r0, r3
 8000926:	f007 fc79 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000930:	f7ff ffb0 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <HAL_UART_MspInit+0x138>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000938:	4a39      	ldr	r2, [pc, #228]	; (8000a20 <HAL_UART_MspInit+0x138>)
 800093a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800093e:	6593      	str	r3, [r2, #88]	; 0x58
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <HAL_UART_MspInit+0x138>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <HAL_UART_MspInit+0x138>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	4a33      	ldr	r2, [pc, #204]	; (8000a20 <HAL_UART_MspInit+0x138>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000958:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <HAL_UART_MspInit+0x138>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000964:	2303      	movs	r3, #3
 8000966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800097c:	2308      	movs	r3, #8
 800097e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f005 fce8 	bl	8006360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000990:	e040      	b.n	8000a14 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_UART_MspInit+0x13c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13b      	bne.n	8000a14 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4618      	mov	r0, r3
 80009aa:	f007 fc37 	bl	800821c <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80009b4:	f7ff ff6e 	bl	8000894 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0x138>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x138>)
 80009be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c2:	6593      	str	r3, [r2, #88]	; 0x58
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_UART_MspInit+0x138>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_UART_MspInit+0x138>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <HAL_UART_MspInit+0x138>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_UART_MspInit+0x138>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e8:	230c      	movs	r3, #12
 80009ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a00:	2307      	movs	r3, #7
 8000a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f005 fca6 	bl	8006360 <HAL_GPIO_Init>
}
 8000a14:	bf00      	nop
 8000a16:	37b8      	adds	r7, #184	; 0xb8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004c00 	.word	0x40004c00
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40004400 	.word	0x40004400

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f005 fb4a 	bl	800610c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <BSP_I2C1_Init+0x70>)
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <BSP_I2C1_Init+0x74>)
 8000a8a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <BSP_I2C1_Init+0x78>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	4918      	ldr	r1, [pc, #96]	; (8000af4 <BSP_I2C1_Init+0x78>)
 8000a94:	600a      	str	r2, [r1, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d122      	bne.n	8000ae0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <BSP_I2C1_Init+0x70>)
 8000a9c:	f006 fa16 	bl	8006ecc <HAL_I2C_GetState>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d11c      	bne.n	8000ae0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <BSP_I2C1_Init+0x70>)
 8000aa8:	f000 f8fe 	bl	8000ca8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d116      	bne.n	8000ae0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <BSP_I2C1_Init+0x70>)
 8000ab4:	f000 f8b4 	bl	8000c20 <MX_I2C1_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000abe:	f06f 0307 	mvn.w	r3, #7
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	e00c      	b.n	8000ae0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <BSP_I2C1_Init+0x70>)
 8000aca:	f006 fcbf 	bl	800744c <HAL_I2CEx_ConfigAnalogFilter>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000ad4:	f06f 0307 	mvn.w	r3, #7
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	e001      	b.n	8000ae0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000464 	.word	0x20000464
 8000af0:	40005400 	.word	0x40005400
 8000af4:	200001e4 	.word	0x200001e4

08000af8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <BSP_I2C1_DeInit+0x48>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d014      	beq.n	8000b34 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <BSP_I2C1_DeInit+0x48>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <BSP_I2C1_DeInit+0x48>)
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <BSP_I2C1_DeInit+0x48>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10b      	bne.n	8000b34 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <BSP_I2C1_DeInit+0x4c>)
 8000b1e:	f000 f909 	bl	8000d34 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <BSP_I2C1_DeInit+0x4c>)
 8000b24:	f005 ff61 	bl	80069ea <HAL_I2C_DeInit>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000b2e:	f06f 0307 	mvn.w	r3, #7
 8000b32:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001e4 	.word	0x200001e4
 8000b44:	20000464 	.word	0x20000464

08000b48 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	60ba      	str	r2, [r7, #8]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4603      	mov	r3, r0
 8000b54:	81fb      	strh	r3, [r7, #14]
 8000b56:	460b      	mov	r3, r1
 8000b58:	81bb      	strh	r3, [r7, #12]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000b62:	89ba      	ldrh	r2, [r7, #12]
 8000b64:	89f9      	ldrh	r1, [r7, #14]
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	9302      	str	r3, [sp, #8]
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2301      	movs	r3, #1
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <BSP_I2C1_WriteReg+0x60>)
 8000b78:	f005 ff7a 	bl	8006a70 <HAL_I2C_Mem_Write>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00c      	beq.n	8000b9c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <BSP_I2C1_WriteReg+0x60>)
 8000b84:	f006 f9b0 	bl	8006ee8 <HAL_I2C_GetError>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d103      	bne.n	8000b96 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000b8e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e002      	b.n	8000b9c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000b96:	f06f 0303 	mvn.w	r3, #3
 8000b9a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000b9c:	697b      	ldr	r3, [r7, #20]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000464 	.word	0x20000464

08000bac <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af04      	add	r7, sp, #16
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	81fb      	strh	r3, [r7, #14]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	81bb      	strh	r3, [r7, #12]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000bc6:	89ba      	ldrh	r2, [r7, #12]
 8000bc8:	89f9      	ldrh	r1, [r7, #14]
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <BSP_I2C1_ReadReg+0x60>)
 8000bdc:	f006 f85c 	bl	8006c98 <HAL_I2C_Mem_Read>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00c      	beq.n	8000c00 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000be6:	4809      	ldr	r0, [pc, #36]	; (8000c0c <BSP_I2C1_ReadReg+0x60>)
 8000be8:	f006 f97e 	bl	8006ee8 <HAL_I2C_GetError>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d103      	bne.n	8000bfa <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000bf2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e002      	b.n	8000c00 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000bfa:	f06f 0303 	mvn.w	r3, #3
 8000bfe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000c00:	697b      	ldr	r3, [r7, #20]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000464 	.word	0x20000464

08000c10 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c14:	f005 fa8e 	bl	8006134 <HAL_GetTick>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <MX_I2C1_Init+0x80>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <MX_I2C1_Init+0x84>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f005 fe32 	bl	80068cc <HAL_I2C_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f006 fbe9 	bl	800744c <HAL_I2CEx_ConfigAnalogFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f006 fc2b 	bl	80074e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	10909cec 	.word	0x10909cec

08000ca8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <I2C1_MspInit+0x84>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <I2C1_MspInit+0x84>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <I2C1_MspInit+0x84>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cce:	2312      	movs	r3, #18
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4812      	ldr	r0, [pc, #72]	; (8000d30 <I2C1_MspInit+0x88>)
 8000ce6:	f005 fb3b 	bl	8006360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <I2C1_MspInit+0x88>)
 8000d08:	f005 fb2a 	bl	8006360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <I2C1_MspInit+0x84>)
 8000d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <I2C1_MspInit+0x84>)
 8000d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d16:	6593      	str	r3, [r2, #88]	; 0x58
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <I2C1_MspInit+0x84>)
 8000d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000400 	.word	0x48000400

08000d34 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <I2C1_MspDeInit+0x30>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <I2C1_MspDeInit+0x30>)
 8000d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d46:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4c:	4806      	ldr	r0, [pc, #24]	; (8000d68 <I2C1_MspDeInit+0x34>)
 8000d4e:	f005 fcb1 	bl	80066b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d56:	4804      	ldr	r0, [pc, #16]	; (8000d68 <I2C1_MspDeInit+0x34>)
 8000d58:	f005 fcac 	bl	80066b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f008 fc16 	bl	80095cc <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20018000 	.word	0x20018000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	200001e8 	.word	0x200001e8
 8000dd4:	200004d8 	.word	0x200004d8

08000dd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e00:	f7ff ffea 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f008 fbd5 	bl	80095d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2e:	f7ff fba3 	bl	8000578 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000e40:	08009f3c 	.word	0x08009f3c
  ldr r2, =_sbss
 8000e44:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000e48:	200004d8 	.word	0x200004d8

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d103      	bne.n	8000e68 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e030      	b.n	8000eca <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	7b1a      	ldrb	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HTS221_RegisterBusIO+0x84>)
 8000ea4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HTS221_RegisterBusIO+0x88>)
 8000eaa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4798      	blx	r3
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	e002      	b.n	8000eca <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08001507 	.word	0x08001507
 8000ed8:	08001569 	.word	0x08001569

08000edc <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d108      	bne.n	8000f00 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 faa4 	bl	800143c <HTS221_Initialize>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e004      	b.n	8000f0a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d111      	bne.n	8000f48 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f878 	bl	800101a <HTS221_HUM_Disable>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	e00d      	b.n	8000f52 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f95f 	bl	80011fa <HTS221_TEMP_Disable>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e004      	b.n	8000f52 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	331c      	adds	r3, #28
 8000f68:	6839      	ldr	r1, [r7, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fc28 	bl	80017c0 <hts221_device_id_get>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e000      	b.n	8000f7e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2201      	movs	r2, #1
 8000f96:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HTS221_GetCapabilities+0x44>)
 8000fae:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HTS221_GetCapabilities+0x44>)
 8000fb4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	41480000 	.word	0x41480000

08000fd0 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e015      	b.n	8001012 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10b      	bne.n	8001008 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	331c      	adds	r3, #28
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fbf3 	bl	80017e2 <hts221_power_on_set>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e004      	b.n	8001012 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	e015      	b.n	800105c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10b      	bne.n	8001052 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	331c      	adds	r3, #28
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fbce 	bl	80017e2 <hts221_power_on_set>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	e004      	b.n	800105c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f96f 	bl	8001354 <HTS221_GetOutputDataRate>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800108c:	ed97 0a00 	vldr	s0, [r7]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f9a3 	bl	80013dc <HTS221_SetOutputDataRate>
 8001096:	4603      	mov	r3, r0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	331c      	adds	r3, #28
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fc58 	bl	800196a <hts221_hum_adc_point_0_get>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	e06b      	b.n	800119e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f103 021c 	add.w	r2, r3, #28
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	3304      	adds	r3, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f000 fbaa 	bl	800182e <hts221_hum_rh_point_0_get>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	e05b      	b.n	800119e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f103 021c 	add.w	r2, r3, #28
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	3308      	adds	r3, #8
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f000 fc5c 	bl	80019b2 <hts221_hum_adc_point_1_get>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	e04b      	b.n	800119e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f103 021c 	add.w	r2, r3, #28
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	330c      	adds	r3, #12
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f000 fba8 	bl	800186a <hts221_hum_rh_point_1_get>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	e03b      	b.n	800119e <HTS221_HUM_GetHumidity+0xfe>
 8001126:	2300      	movs	r3, #0
 8001128:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	331c      	adds	r3, #28
 800112e:	f107 021c 	add.w	r2, r7, #28
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fafd 	bl	8001734 <hts221_humidity_raw_get>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	e02b      	b.n	800119e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8001146:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f99a 	bl	8001494 <Linear_Interpolation>
 8001160:	eef0 7a40 	vmov.f32	s15, s0
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d503      	bpl.n	8001182 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80011a8 <HTS221_HUM_GetHumidity+0x108>
 800118c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	dd02      	ble.n	800119c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HTS221_HUM_GetHumidity+0x10c>)
 800119a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	42c80000 	.word	0x42c80000
 80011ac:	42c80000 	.word	0x42c80000

080011b0 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e015      	b.n	80011f2 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10b      	bne.n	80011e8 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	331c      	adds	r3, #28
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fb03 	bl	80017e2 <hts221_power_on_set>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e004      	b.n	80011f2 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	e015      	b.n	800123c <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10b      	bne.n	8001232 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	331c      	adds	r3, #28
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fade 	bl	80017e2 <hts221_power_on_set>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e004      	b.n	800123c <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f87f 	bl	8001354 <HTS221_GetOutputDataRate>
 8001256:	4603      	mov	r3, r0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800126c:	ed97 0a00 	vldr	s0, [r7]
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f8b3 	bl	80013dc <HTS221_SetOutputDataRate>
 8001276:	4603      	mov	r3, r0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	331c      	adds	r3, #28
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fbb0 	bl	80019fa <hts221_temp_adc_point_0_get>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	e052      	b.n	800134c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 021c 	add.w	r2, r3, #28
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	3304      	adds	r3, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f000 faf6 	bl	80018a6 <hts221_temp_deg_point_0_get>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	e042      	b.n	800134c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f103 021c 	add.w	r2, r3, #28
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	3308      	adds	r3, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	4610      	mov	r0, r2
 80012d6:	f000 fbb4 	bl	8001a42 <hts221_temp_adc_point_1_get>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	e032      	b.n	800134c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f103 021c 	add.w	r2, r3, #28
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	330c      	adds	r3, #12
 80012f2:	4619      	mov	r1, r3
 80012f4:	4610      	mov	r0, r2
 80012f6:	f000 fb07 	bl	8001908 <hts221_temp_deg_point_1_get>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e022      	b.n	800134c <HTS221_TEMP_GetTemperature+0xcc>
 8001306:	2300      	movs	r3, #0
 8001308:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	331c      	adds	r3, #28
 800130e:	f107 021c 	add.w	r2, r7, #28
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fa30 	bl	800177a <hts221_temperature_raw_get>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	e012      	b.n	800134c <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001326:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f8aa 	bl	8001494 <Linear_Interpolation>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	331c      	adds	r3, #28
 8001366:	f107 020b 	add.w	r2, r7, #11
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f983 	bl	8001678 <hts221_data_rate_get>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	e025      	b.n	80013ca <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800137e:	7afb      	ldrb	r3, [r7, #11]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d81d      	bhi.n	80013c0 <HTS221_GetOutputDataRate+0x6c>
 8001384:	a201      	add	r2, pc, #4	; (adr r2, 800138c <HTS221_GetOutputDataRate+0x38>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013a7 	.word	0x080013a7
 8001394:	080013b1 	.word	0x080013b1
 8001398:	080013b9 	.word	0x080013b9
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
      break;
 80013a4:	e010      	b.n	80013c8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ac:	601a      	str	r2, [r3, #0]
      break;
 80013ae:	e00b      	b.n	80013c8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HTS221_GetOutputDataRate+0x80>)
 80013b4:	601a      	str	r2, [r3, #0]
      break;
 80013b6:	e007      	b.n	80013c8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HTS221_GetOutputDataRate+0x84>)
 80013bc:	601a      	str	r2, [r3, #0]
      break;
 80013be:	e003      	b.n	80013c8 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	60fb      	str	r3, [r7, #12]
      break;
 80013c6:	bf00      	nop
  }

  return ret;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40e00000 	.word	0x40e00000
 80013d8:	41480000 	.word	0x41480000

080013dc <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80013e8:	edd7 7a00 	vldr	s15, [r7]
 80013ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	d801      	bhi.n	80013fe <HTS221_SetOutputDataRate+0x22>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00b      	b.n	8001416 <HTS221_SetOutputDataRate+0x3a>
 80013fe:	edd7 7a00 	vldr	s15, [r7]
 8001402:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	d801      	bhi.n	8001414 <HTS221_SetOutputDataRate+0x38>
 8001410:	2302      	movs	r3, #2
 8001412:	e000      	b.n	8001416 <HTS221_SetOutputDataRate+0x3a>
 8001414:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8001416:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	331c      	adds	r3, #28
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f902 	bl	800162a <hts221_data_rate_set>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	e000      	b.n	8001434 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	331c      	adds	r3, #28
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f9c9 	bl	80017e2 <hts221_power_on_set>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e017      	b.n	800148c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	331c      	adds	r3, #28
 8001460:	2101      	movs	r1, #1
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f940 	bl	80016e8 <hts221_block_data_update_set>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e00b      	b.n	800148c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8001474:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffaf 	bl	80013dc <HTS221_SetOutputDataRate>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	e000      	b.n	800148c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b0:	edd7 7a00 	vldr	s15, [r7]
 80014b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	ed93 6a00 	vldr	s12, [r3]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f4:	eef0 7a66 	vmov.f32	s15, s13
}
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	461a      	mov	r2, r3
 8001512:	460b      	mov	r3, r1
 8001514:	72fb      	strb	r3, [r7, #11]
 8001516:	4613      	mov	r3, r2
 8001518:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10e      	bne.n	8001544 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	695c      	ldr	r4, [r3, #20]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	7b1b      	ldrb	r3, [r3, #12]
 800152e:	b298      	uxth	r0, r3
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001536:	b2db      	uxtb	r3, r3
 8001538:	b299      	uxth	r1, r3
 800153a:	893b      	ldrh	r3, [r7, #8]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	47a0      	blx	r4
 8001540:	4603      	mov	r3, r0
 8001542:	e00d      	b.n	8001560 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	695c      	ldr	r4, [r3, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	7b1b      	ldrb	r3, [r3, #12]
 800154c:	b298      	uxth	r0, r3
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001554:	b2db      	uxtb	r3, r3
 8001556:	b299      	uxth	r1, r3
 8001558:	893b      	ldrh	r3, [r7, #8]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	47a0      	blx	r4
 800155e:	4603      	mov	r3, r0
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}

08001568 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	72fb      	strb	r3, [r7, #11]
 8001578:	4613      	mov	r3, r2
 800157a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10e      	bne.n	80015a6 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	691c      	ldr	r4, [r3, #16]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	7b1b      	ldrb	r3, [r3, #12]
 8001590:	b298      	uxth	r0, r3
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001598:	b2db      	uxtb	r3, r3
 800159a:	b299      	uxth	r1, r3
 800159c:	893b      	ldrh	r3, [r7, #8]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	47a0      	blx	r4
 80015a2:	4603      	mov	r3, r0
 80015a4:	e00d      	b.n	80015c2 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	691c      	ldr	r4, [r3, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	7b1b      	ldrb	r3, [r3, #12]
 80015ae:	b298      	uxth	r0, r3
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	b299      	uxth	r1, r3
 80015ba:	893b      	ldrh	r3, [r7, #8]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	47a0      	blx	r4
 80015c0:	4603      	mov	r3, r0
  }
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}

080015ca <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80015ca:	b590      	push	{r4, r7, lr}
 80015cc:	b087      	sub	sp, #28
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	461a      	mov	r2, r3
 80015d6:	460b      	mov	r3, r1
 80015d8:	72fb      	strb	r3, [r7, #11]
 80015da:	4613      	mov	r3, r2
 80015dc:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	685c      	ldr	r4, [r3, #4]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6898      	ldr	r0, [r3, #8]
 80015e6:	893b      	ldrh	r3, [r7, #8]
 80015e8:	7af9      	ldrb	r1, [r7, #11]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	47a0      	blx	r4
 80015ee:	6178      	str	r0, [r7, #20]
  return ret;
 80015f0:	697b      	ldr	r3, [r7, #20]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}

080015fa <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b087      	sub	sp, #28
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	461a      	mov	r2, r3
 8001606:	460b      	mov	r3, r1
 8001608:	72fb      	strb	r3, [r7, #11]
 800160a:	4613      	mov	r3, r2
 800160c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681c      	ldr	r4, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6898      	ldr	r0, [r3, #8]
 8001616:	893b      	ldrh	r3, [r7, #8]
 8001618:	7af9      	ldrb	r1, [r7, #11]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	47a0      	blx	r4
 800161e:	6178      	str	r0, [r7, #20]
  return ret;
 8001620:	697b      	ldr	r3, [r7, #20]
}
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}

0800162a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001636:	f107 0208 	add.w	r2, r7, #8
 800163a:	2301      	movs	r3, #1
 800163c:	2120      	movs	r1, #32
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffc3 	bl	80015ca <hts221_read_reg>
 8001644:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10f      	bne.n	800166c <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	7a3b      	ldrb	r3, [r7, #8]
 8001656:	f362 0301 	bfi	r3, r2, #0, #2
 800165a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800165c:	f107 0208 	add.w	r2, r7, #8
 8001660:	2301      	movs	r3, #1
 8001662:	2120      	movs	r1, #32
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffc8 	bl	80015fa <hts221_write_reg>
 800166a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800166c:	68fb      	ldr	r3, [r7, #12]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001682:	f107 0208 	add.w	r2, r7, #8
 8001686:	2301      	movs	r3, #1
 8001688:	2120      	movs	r1, #32
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff9d 	bl	80015ca <hts221_read_reg>
 8001690:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8001692:	7a3b      	ldrb	r3, [r7, #8]
 8001694:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d81a      	bhi.n	80016d4 <hts221_data_rate_get+0x5c>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <hts221_data_rate_get+0x2c>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	080016bd 	.word	0x080016bd
 80016ac:	080016c5 	.word	0x080016c5
 80016b0:	080016cd 	.word	0x080016cd
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
      break;
 80016ba:	e00f      	b.n	80016dc <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
      break;
 80016c2:	e00b      	b.n	80016dc <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
      break;
 80016ca:	e007      	b.n	80016dc <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2203      	movs	r2, #3
 80016d0:	701a      	strb	r2, [r3, #0]
      break;
 80016d2:	e003      	b.n	80016dc <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2204      	movs	r2, #4
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	bf00      	nop
  }

  return ret;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop

080016e8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80016f4:	f107 0208 	add.w	r2, r7, #8
 80016f8:	2301      	movs	r3, #1
 80016fa:	2120      	movs	r1, #32
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff64 	bl	80015ca <hts221_read_reg>
 8001702:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	7a3b      	ldrb	r3, [r7, #8]
 8001714:	f362 0382 	bfi	r3, r2, #2, #1
 8001718:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800171a:	f107 0208 	add.w	r2, r7, #8
 800171e:	2301      	movs	r3, #1
 8001720:	2120      	movs	r1, #32
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff69 	bl	80015fa <hts221_write_reg>
 8001728:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800173e:	f107 0208 	add.w	r2, r7, #8
 8001742:	2302      	movs	r3, #2
 8001744:	2128      	movs	r1, #40	; 0x28
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff3f 	bl	80015ca <hts221_read_reg>
 800174c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800174e:	7a7b      	ldrb	r3, [r7, #9]
 8001750:	b21a      	sxth	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	b29b      	uxth	r3, r3
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b29a      	uxth	r2, r3
 8001762:	7a3b      	ldrb	r3, [r7, #8]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4413      	add	r3, r2
 8001768:	b29b      	uxth	r3, r3
 800176a:	b21a      	sxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]
  return ret;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8001784:	f107 0208 	add.w	r2, r7, #8
 8001788:	2302      	movs	r3, #2
 800178a:	212a      	movs	r1, #42	; 0x2a
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff1c 	bl	80015ca <hts221_read_reg>
 8001792:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	b21a      	sxth	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	7a3b      	ldrb	r3, [r7, #8]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	801a      	strh	r2, [r3, #0]
  return ret;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80017ca:	2301      	movs	r3, #1
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	210f      	movs	r1, #15
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fefa 	bl	80015ca <hts221_read_reg>
 80017d6:	60f8      	str	r0, [r7, #12]
  return ret;
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017ee:	f107 0208 	add.w	r2, r7, #8
 80017f2:	2301      	movs	r3, #1
 80017f4:	2120      	movs	r1, #32
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fee7 	bl	80015ca <hts221_read_reg>
 80017fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10f      	bne.n	8001824 <hts221_power_on_set+0x42>
    reg.pd = val;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	7a3b      	ldrb	r3, [r7, #8]
 800180e:	f362 13c7 	bfi	r3, r2, #7, #1
 8001812:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001814:	f107 0208 	add.w	r2, r7, #8
 8001818:	2301      	movs	r3, #1
 800181a:	2120      	movs	r1, #32
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff feec 	bl	80015fa <hts221_write_reg>
 8001822:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001824:	68fb      	ldr	r3, [r7, #12]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001838:	f107 020b 	add.w	r2, r7, #11
 800183c:	2301      	movs	r3, #1
 800183e:	2130      	movs	r1, #48	; 0x30
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fec2 	bl	80015ca <hts221_read_reg>
 8001846:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001852:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001874:	f107 020b 	add.w	r2, r7, #11
 8001878:	2301      	movs	r3, #1
 800187a:	2131      	movs	r1, #49	; 0x31
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fea4 	bl	80015ca <hts221_read_reg>
 8001882:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800188e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80018b0:	f107 020f 	add.w	r2, r7, #15
 80018b4:	2301      	movs	r3, #1
 80018b6:	2132      	movs	r1, #50	; 0x32
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fe86 	bl	80015ca <hts221_read_reg>
 80018be:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d11b      	bne.n	80018fe <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80018c6:	f107 0210 	add.w	r2, r7, #16
 80018ca:	2301      	movs	r3, #1
 80018cc:	2135      	movs	r1, #53	; 0x35
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fe7b 	bl	80015ca <hts221_read_reg>
 80018d4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80018d6:	7c3b      	ldrb	r3, [r7, #16]
 80018d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80018e0:	7cfb      	ldrb	r3, [r7, #19]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	4413      	add	r3, r2
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80018fe:	697b      	ldr	r3, [r7, #20]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001912:	f107 020f 	add.w	r2, r7, #15
 8001916:	2301      	movs	r3, #1
 8001918:	2133      	movs	r1, #51	; 0x33
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fe55 	bl	80015ca <hts221_read_reg>
 8001920:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d11b      	bne.n	8001960 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001928:	f107 0210 	add.w	r2, r7, #16
 800192c:	2301      	movs	r3, #1
 800192e:	2135      	movs	r1, #53	; 0x35
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fe4a 	bl	80015ca <hts221_read_reg>
 8001936:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001938:	7c3b      	ldrb	r3, [r7, #16]
 800193a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001942:	7cfb      	ldrb	r3, [r7, #19]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	4413      	add	r3, r2
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001952:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001960:	697b      	ldr	r3, [r7, #20]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001974:	f107 0208 	add.w	r2, r7, #8
 8001978:	2302      	movs	r3, #2
 800197a:	2136      	movs	r1, #54	; 0x36
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fe24 	bl	80015ca <hts221_read_reg>
 8001982:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001984:	7a7b      	ldrb	r3, [r7, #9]
 8001986:	b29b      	uxth	r3, r3
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b29a      	uxth	r2, r3
 800198c:	7a3b      	ldrb	r3, [r7, #8]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001996:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80019bc:	f107 0208 	add.w	r2, r7, #8
 80019c0:	2302      	movs	r3, #2
 80019c2:	213a      	movs	r1, #58	; 0x3a
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fe00 	bl	80015ca <hts221_read_reg>
 80019ca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80019cc:	7a7b      	ldrb	r3, [r7, #9]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	7a3b      	ldrb	r3, [r7, #8]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80019de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019f0:	68fb      	ldr	r3, [r7, #12]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001a04:	f107 0208 	add.w	r2, r7, #8
 8001a08:	2302      	movs	r3, #2
 8001a0a:	213c      	movs	r1, #60	; 0x3c
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fddc 	bl	80015ca <hts221_read_reg>
 8001a12:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001a14:	7a7b      	ldrb	r3, [r7, #9]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	7a3b      	ldrb	r3, [r7, #8]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001a26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001a38:	68fb      	ldr	r3, [r7, #12]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001a4c:	f107 0208 	add.w	r2, r7, #8
 8001a50:	2302      	movs	r3, #2
 8001a52:	213e      	movs	r1, #62	; 0x3e
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fdb8 	bl	80015ca <hts221_read_reg>
 8001a5a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001a5c:	7a7b      	ldrb	r3, [r7, #9]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	7a3b      	ldrb	r3, [r7, #8]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001a6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001a80:	68fb      	ldr	r3, [r7, #12]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e04d      	b.n	8001b44 <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7b1a      	ldrb	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <LPS22HB_RegisterBusIO+0xc4>)
 8001ae4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <LPS22HB_RegisterBusIO+0xc8>)
 8001aea:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e020      	b.n	8001b44 <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4798      	blx	r3
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e016      	b.n	8001b44 <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d112      	bne.n	8001b44 <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2110      	movs	r1, #16
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f9df 	bl	8001ef6 <LPS22HB_Write_Reg>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	080021b7 	.word	0x080021b7
 8001b54:	0800223d 	.word	0x0800223d

08001b58 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d108      	bne.n	8001b7c <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 faca 	bl	8002104 <LPS22HB_Initialize>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e004      	b.n	8001b86 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d111      	bne.n	8001bc4 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f877 	bl	8001c94 <LPS22HB_PRESS_Disable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb0:	e00d      	b.n	8001bce <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f918 	bl	8001de8 <LPS22HB_TEMP_Disable>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e004      	b.n	8001bce <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	331c      	adds	r3, #28
 8001be4:	6839      	ldr	r1, [r7, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fcd0 	bl	800258c <lps22hb_device_id_get>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e000      	b.n	8001bfa <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2201      	movs	r2, #1
 8001c18:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <LPS22HB_GetCapabilities+0x44>)
 8001c32:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <LPS22HB_GetCapabilities+0x44>)
 8001c38:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	42960000 	.word	0x42960000

08001c4c <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e014      	b.n	8001c8c <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 021c 	add.w	r2, r3, #28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4610      	mov	r0, r2
 8001c72:	f000 fbd5 	bl	8002420 <lps22hb_data_rate_set>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	e004      	b.n	8001c8c <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e024      	b.n	8001cf4 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d11a      	bne.n	8001cea <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f103 021c 	add.w	r2, r3, #28
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	332b      	adds	r3, #43	; 0x2b
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f000 fbd3 	bl	800246c <lps22hb_data_rate_get>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	e010      	b.n	8001cf4 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	331c      	adds	r3, #28
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fba1 	bl	8002420 <lps22hb_data_rate_set>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	e004      	b.n	8001cf4 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f90f 	bl	8001f2c <LPS22HB_GetOutputDataRate>
 8001d0e:	4603      	mov	r3, r0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d106      	bne.n	8001d3c <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001d2e:	ed97 0a00 	vldr	s0, [r7]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f94e 	bl	8001fd4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	e005      	b.n	8001d48 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001d3c:	ed97 0a00 	vldr	s0, [r7]
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f99f 	bl	8002084 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001d46:	4603      	mov	r3, r0
  }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2204      	movs	r2, #4
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f007 fc5c 	bl	8009620 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	331c      	adds	r3, #28
 8001d6c:	f107 020c 	add.w	r2, r7, #12
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fbbe 	bl	80024f4 <lps22hb_pressure_raw_get>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 facc 	bl	8002324 <lps22hb_from_lsb_to_hpa>
 8001d8c:	eef0 7a40 	vmov.f32	s15, s0
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e014      	b.n	8001de0 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f103 021c 	add.w	r2, r3, #28
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	f000 fb2b 	bl	8002420 <lps22hb_data_rate_set>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e004      	b.n	8001de0 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e024      	b.n	8001e48 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11a      	bne.n	8001e3e <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f103 021c 	add.w	r2, r3, #28
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	332b      	adds	r3, #43	; 0x2b
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f000 fb29 	bl	800246c <lps22hb_data_rate_get>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	e010      	b.n	8001e48 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	331c      	adds	r3, #28
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 faf7 	bl	8002420 <lps22hb_data_rate_set>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	e004      	b.n	8001e48 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f865 	bl	8001f2c <LPS22HB_GetOutputDataRate>
 8001e62:	4603      	mov	r3, r0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d106      	bne.n	8001e90 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e82:	ed97 0a00 	vldr	s0, [r7]
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8a4 	bl	8001fd4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	e005      	b.n	8001e9c <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e90:	ed97 0a00 	vldr	s0, [r7]
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8f5 	bl	8002084 <LPS22HB_SetOutputDataRate_When_Disabled>
 8001e9a:	4603      	mov	r3, r0
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f007 fbb2 	bl	8009620 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	331c      	adds	r3, #28
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fb3d 	bl	8002546 <lps22hb_temperature_raw_get>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	e00a      	b.n	8001eee <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8001ed8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fa39 	bl	8002354 <lps22hb_from_lsb_to_degc>
 8001ee2:	eef0 7a40 	vmov.f32	s15, s0
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
 8001f02:	4613      	mov	r3, r2
 8001f04:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f103 001c 	add.w	r0, r3, #28
 8001f0c:	1cba      	adds	r2, r7, #2
 8001f0e:	78f9      	ldrb	r1, [r7, #3]
 8001f10:	2301      	movs	r3, #1
 8001f12:	f000 f9ee 	bl	80022f2 <lps22hb_write_reg>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f20:	e000      	b.n	8001f24 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	331c      	adds	r3, #28
 8001f3e:	f107 020b 	add.w	r2, r7, #11
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fa91 	bl	800246c <lps22hb_data_rate_get>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	e031      	b.n	8001fba <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d829      	bhi.n	8001fb0 <LPS22HB_GetOutputDataRate+0x84>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <LPS22HB_GetOutputDataRate+0x38>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f7d 	.word	0x08001f7d
 8001f68:	08001f87 	.word	0x08001f87
 8001f6c:	08001f91 	.word	0x08001f91
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	08001fa1 	.word	0x08001fa1
 8001f78:	08001fa9 	.word	0x08001fa9
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
      break;
 8001f84:	e018      	b.n	8001fb8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f8c:	601a      	str	r2, [r3, #0]
      break;
 8001f8e:	e013      	b.n	8001fb8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <LPS22HB_GetOutputDataRate+0x98>)
 8001f94:	601a      	str	r2, [r3, #0]
      break;
 8001f96:	e00f      	b.n	8001fb8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LPS22HB_GetOutputDataRate+0x9c>)
 8001f9c:	601a      	str	r2, [r3, #0]
      break;
 8001f9e:	e00b      	b.n	8001fb8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <LPS22HB_GetOutputDataRate+0xa0>)
 8001fa4:	601a      	str	r2, [r3, #0]
      break;
 8001fa6:	e007      	b.n	8001fb8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <LPS22HB_GetOutputDataRate+0xa4>)
 8001fac:	601a      	str	r2, [r3, #0]
      break;
 8001fae:	e003      	b.n	8001fb8 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	60fb      	str	r3, [r7, #12]
      break;
 8001fb6:	bf00      	nop
  }

  return ret;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	41200000 	.word	0x41200000
 8001fc8:	41c80000 	.word	0x41c80000
 8001fcc:	42480000 	.word	0x42480000
 8001fd0:	42960000 	.word	0x42960000

08001fd4 <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8001fe0:	edd7 7a00 	vldr	s15, [r7]
 8001fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	d801      	bhi.n	8001ff6 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e021      	b.n	800203a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8001ff6:	edd7 7a00 	vldr	s15, [r7]
 8001ffa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002006:	d801      	bhi.n	800200c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8002008:	2302      	movs	r3, #2
 800200a:	e016      	b.n	800203a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800200c:	edd7 7a00 	vldr	s15, [r7]
 8002010:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	d801      	bhi.n	8002022 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 800201e:	2303      	movs	r3, #3
 8002020:	e00b      	b.n	800203a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002022:	edd7 7a00 	vldr	s15, [r7]
 8002026:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002080 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 800202a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	d801      	bhi.n	8002038 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8002034:	2304      	movs	r3, #4
 8002036:	e000      	b.n	800203a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002038:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800203a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	331c      	adds	r3, #28
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f9eb 	bl	8002420 <lps22hb_data_rate_set>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
 8002054:	e00f      	b.n	8002076 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f103 021c 	add.w	r2, r3, #28
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	332b      	adds	r3, #43	; 0x2b
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 fa02 	bl	800246c <lps22hb_data_rate_get>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	e000      	b.n	8002076 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	42480000 	.word	0x42480000

08002084 <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002090:	edd7 7a00 	vldr	s15, [r7]
 8002094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d801      	bhi.n	80020a6 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e021      	b.n	80020ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80020a6:	edd7 7a00 	vldr	s15, [r7]
 80020aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	d801      	bhi.n	80020bc <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e016      	b.n	80020ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80020bc:	edd7 7a00 	vldr	s15, [r7]
 80020c0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80020c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020cc:	d801      	bhi.n	80020d2 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e00b      	b.n	80020ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80020d2:	edd7 7a00 	vldr	s15, [r7]
 80020d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002100 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80020da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d801      	bhi.n	80020e8 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e000      	b.n	80020ea <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80020e8:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	42480000 	.word	0x42480000

08002104 <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	331c      	adds	r3, #28
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fa4b 	bl	80025ae <lps22hb_low_power_set>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e044      	b.n	80021ae <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	331c      	adds	r3, #28
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f978 	bl	8002420 <lps22hb_data_rate_set>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e038      	b.n	80021ae <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	331c      	adds	r3, #28
 8002140:	2102      	movs	r1, #2
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f946 	bl	80023d4 <lps22hb_low_pass_filter_mode_set>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	e02c      	b.n	80021ae <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	331c      	adds	r3, #28
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f914 	bl	8002388 <lps22hb_block_data_update_set>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e020      	b.n	80021ae <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	331c      	adds	r3, #28
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fa3d 	bl	80025fa <lps22hb_auto_add_inc_set>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00e      	beq.n	80021a4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e010      	b.n	80021ae <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	331c      	adds	r3, #28
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fa31 	bl	80025fa <lps22hb_auto_add_inc_set>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e004      	b.n	80021ae <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b089      	sub	sp, #36	; 0x24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	461a      	mov	r2, r3
 80021c2:	460b      	mov	r3, r1
 80021c4:	72fb      	strb	r3, [r7, #11]
 80021c6:	4613      	mov	r3, r2
 80021c8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	83fb      	strh	r3, [r7, #30]
 80021de:	e018      	b.n	8002212 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	695c      	ldr	r4, [r3, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	7b1b      	ldrb	r3, [r3, #12]
 80021e8:	b298      	uxth	r0, r3
 80021ea:	7afb      	ldrb	r3, [r7, #11]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	8bfb      	ldrh	r3, [r7, #30]
 80021f0:	4413      	add	r3, r2
 80021f2:	b299      	uxth	r1, r3
 80021f4:	8bfb      	ldrh	r3, [r7, #30]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	441a      	add	r2, r3
 80021fa:	2301      	movs	r3, #1
 80021fc:	47a0      	blx	r4
 80021fe:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e013      	b.n	8002234 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800220c:	8bfb      	ldrh	r3, [r7, #30]
 800220e:	3301      	adds	r3, #1
 8002210:	83fb      	strh	r3, [r7, #30]
 8002212:	8bfa      	ldrh	r2, [r7, #30]
 8002214:	893b      	ldrh	r3, [r7, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	d3e2      	bcc.n	80021e0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	e00a      	b.n	8002234 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	695c      	ldr	r4, [r3, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	7b1b      	ldrb	r3, [r3, #12]
 8002226:	b298      	uxth	r0, r3
 8002228:	7afb      	ldrb	r3, [r7, #11]
 800222a:	b299      	uxth	r1, r3
 800222c:	893b      	ldrh	r3, [r7, #8]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	47a0      	blx	r4
 8002232:	4603      	mov	r3, r0
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3724      	adds	r7, #36	; 0x24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd90      	pop	{r4, r7, pc}

0800223c <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	461a      	mov	r2, r3
 8002248:	460b      	mov	r3, r1
 800224a:	72fb      	strb	r3, [r7, #11]
 800224c:	4613      	mov	r3, r2
 800224e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d121      	bne.n	80022a4 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	83fb      	strh	r3, [r7, #30]
 8002264:	e018      	b.n	8002298 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	691c      	ldr	r4, [r3, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	7b1b      	ldrb	r3, [r3, #12]
 800226e:	b298      	uxth	r0, r3
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	b29a      	uxth	r2, r3
 8002274:	8bfb      	ldrh	r3, [r7, #30]
 8002276:	4413      	add	r3, r2
 8002278:	b299      	uxth	r1, r3
 800227a:	8bfb      	ldrh	r3, [r7, #30]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	441a      	add	r2, r3
 8002280:	2301      	movs	r3, #1
 8002282:	47a0      	blx	r4
 8002284:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	e013      	b.n	80022ba <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	3301      	adds	r3, #1
 8002296:	83fb      	strh	r3, [r7, #30]
 8002298:	8bfa      	ldrh	r2, [r7, #30]
 800229a:	893b      	ldrh	r3, [r7, #8]
 800229c:	429a      	cmp	r2, r3
 800229e:	d3e2      	bcc.n	8002266 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	e00a      	b.n	80022ba <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	691c      	ldr	r4, [r3, #16]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	7b1b      	ldrb	r3, [r3, #12]
 80022ac:	b298      	uxth	r0, r3
 80022ae:	7afb      	ldrb	r3, [r7, #11]
 80022b0:	b299      	uxth	r1, r3
 80022b2:	893b      	ldrh	r3, [r7, #8]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	47a0      	blx	r4
 80022b8:	4603      	mov	r3, r0
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}

080022c2 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80022c2:	b590      	push	{r4, r7, lr}
 80022c4:	b087      	sub	sp, #28
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	461a      	mov	r2, r3
 80022ce:	460b      	mov	r3, r1
 80022d0:	72fb      	strb	r3, [r7, #11]
 80022d2:	4613      	mov	r3, r2
 80022d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685c      	ldr	r4, [r3, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6898      	ldr	r0, [r3, #8]
 80022de:	893b      	ldrh	r3, [r7, #8]
 80022e0:	7af9      	ldrb	r1, [r7, #11]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	47a0      	blx	r4
 80022e6:	6178      	str	r0, [r7, #20]
  return ret;
 80022e8:	697b      	ldr	r3, [r7, #20]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}

080022f2 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80022f2:	b590      	push	{r4, r7, lr}
 80022f4:	b087      	sub	sp, #28
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	461a      	mov	r2, r3
 80022fe:	460b      	mov	r3, r1
 8002300:	72fb      	strb	r3, [r7, #11]
 8002302:	4613      	mov	r3, r2
 8002304:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681c      	ldr	r4, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6898      	ldr	r0, [r3, #8]
 800230e:	893b      	ldrh	r3, [r7, #8]
 8002310:	7af9      	ldrb	r1, [r7, #11]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	47a0      	blx	r4
 8002316:	6178      	str	r0, [r7, #20]
  return ret;
 8002318:	697b      	ldr	r3, [r7, #20]
}
 800231a:	4618      	mov	r0, r3
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
	...

08002324 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002336:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002350 <lps22hb_from_lsb_to_hpa+0x2c>
 800233a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800233e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002342:	eeb0 0a67 	vmov.f32	s0, s15
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	49800000 	.word	0x49800000

08002354 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 800235e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002384 <lps22hb_from_lsb_to_degc+0x30>
 800236e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002372:	eef0 7a66 	vmov.f32	s15, s13
}
 8002376:	eeb0 0a67 	vmov.f32	s0, s15
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	42c80000 	.word	0x42c80000

08002388 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002394:	f107 0208 	add.w	r2, r7, #8
 8002398:	2301      	movs	r3, #1
 800239a:	2110      	movs	r1, #16
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff90 	bl	80022c2 <lps22hb_read_reg>
 80023a2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	7a3b      	ldrb	r3, [r7, #8]
 80023b4:	f362 0341 	bfi	r3, r2, #1, #1
 80023b8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80023ba:	f107 0208 	add.w	r2, r7, #8
 80023be:	2301      	movs	r3, #1
 80023c0:	2110      	movs	r1, #16
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff95 	bl	80022f2 <lps22hb_write_reg>
 80023c8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80023e0:	f107 0208 	add.w	r2, r7, #8
 80023e4:	2301      	movs	r3, #1
 80023e6:	2110      	movs	r1, #16
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff6a 	bl	80022c2 <lps22hb_read_reg>
 80023ee:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	7a3b      	ldrb	r3, [r7, #8]
 8002400:	f362 0383 	bfi	r3, r2, #2, #2
 8002404:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002406:	f107 0208 	add.w	r2, r7, #8
 800240a:	2301      	movs	r3, #1
 800240c:	2110      	movs	r1, #16
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff6f 	bl	80022f2 <lps22hb_write_reg>
 8002414:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800242c:	f107 0208 	add.w	r2, r7, #8
 8002430:	2301      	movs	r3, #1
 8002432:	2110      	movs	r1, #16
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff44 	bl	80022c2 <lps22hb_read_reg>
 800243a:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10f      	bne.n	8002462 <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	b2da      	uxtb	r2, r3
 800244a:	7a3b      	ldrb	r3, [r7, #8]
 800244c:	f362 1306 	bfi	r3, r2, #4, #3
 8002450:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002452:	f107 0208 	add.w	r2, r7, #8
 8002456:	2301      	movs	r3, #1
 8002458:	2110      	movs	r1, #16
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff49 	bl	80022f2 <lps22hb_write_reg>
 8002460:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002476:	f107 0208 	add.w	r2, r7, #8
 800247a:	2301      	movs	r3, #1
 800247c:	2110      	movs	r1, #16
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff1f 	bl	80022c2 <lps22hb_read_reg>
 8002484:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 8002486:	7a3b      	ldrb	r3, [r7, #8]
 8002488:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b05      	cmp	r3, #5
 8002490:	d826      	bhi.n	80024e0 <lps22hb_data_rate_get+0x74>
 8002492:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <lps22hb_data_rate_get+0x2c>)
 8002494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002498:	080024b1 	.word	0x080024b1
 800249c:	080024b9 	.word	0x080024b9
 80024a0:	080024c1 	.word	0x080024c1
 80024a4:	080024c9 	.word	0x080024c9
 80024a8:	080024d1 	.word	0x080024d1
 80024ac:	080024d9 	.word	0x080024d9
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
      break;
 80024b6:	e017      	b.n	80024e8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
      break;
 80024be:	e013      	b.n	80024e8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
      break;
 80024c6:	e00f      	b.n	80024e8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2203      	movs	r2, #3
 80024cc:	701a      	strb	r2, [r3, #0]
      break;
 80024ce:	e00b      	b.n	80024e8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2204      	movs	r2, #4
 80024d4:	701a      	strb	r2, [r3, #0]
      break;
 80024d6:	e007      	b.n	80024e8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2205      	movs	r2, #5
 80024dc:	701a      	strb	r2, [r3, #0]
      break;
 80024de:	e003      	b.n	80024e8 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
      break;
 80024e6:	bf00      	nop
  }

  return ret;
 80024e8:	68fb      	ldr	r3, [r7, #12]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop

080024f4 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 80024fe:	f107 0208 	add.w	r2, r7, #8
 8002502:	2303      	movs	r3, #3
 8002504:	2128      	movs	r1, #40	; 0x28
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fedb 	bl	80022c2 <lps22hb_read_reg>
 800250c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800250e:	7abb      	ldrb	r3, [r7, #10]
 8002510:	461a      	mov	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	7a7a      	ldrb	r2, [r7, #9]
 800251e:	441a      	add	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	7a3a      	ldrb	r2, [r7, #8]
 800252c:	441a      	add	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	021a      	lsls	r2, r3, #8
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	601a      	str	r2, [r3, #0]
  return ret;
 800253c:	68fb      	ldr	r3, [r7, #12]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8002550:	f107 0208 	add.w	r2, r7, #8
 8002554:	2302      	movs	r3, #2
 8002556:	212b      	movs	r1, #43	; 0x2b
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff feb2 	bl	80022c2 <lps22hb_read_reg>
 800255e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8002560:	7a7b      	ldrb	r3, [r7, #9]
 8002562:	b21a      	sxth	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800256e:	b29b      	uxth	r3, r3
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	b29a      	uxth	r2, r3
 8002574:	7a3b      	ldrb	r3, [r7, #8]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4413      	add	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	b21a      	sxth	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	801a      	strh	r2, [r3, #0]
  return ret;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8002596:	2301      	movs	r3, #1
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	210f      	movs	r1, #15
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fe90 	bl	80022c2 <lps22hb_read_reg>
 80025a2:	60f8      	str	r0, [r7, #12]
  return ret;
 80025a4:	68fb      	ldr	r3, [r7, #12]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 80025ba:	f107 0208 	add.w	r2, r7, #8
 80025be:	2301      	movs	r3, #1
 80025c0:	211a      	movs	r1, #26
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fe7d 	bl	80022c2 <lps22hb_read_reg>
 80025c8:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	7a3b      	ldrb	r3, [r7, #8]
 80025da:	f362 0300 	bfi	r3, r2, #0, #1
 80025de:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 80025e0:	f107 0208 	add.w	r2, r7, #8
 80025e4:	2301      	movs	r3, #1
 80025e6:	211a      	movs	r1, #26
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fe82 	bl	80022f2 <lps22hb_write_reg>
 80025ee:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80025f0:	68fb      	ldr	r3, [r7, #12]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002606:	f107 0208 	add.w	r2, r7, #8
 800260a:	2301      	movs	r3, #1
 800260c:	2111      	movs	r1, #17
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fe57 	bl	80022c2 <lps22hb_read_reg>
 8002614:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10f      	bne.n	800263c <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	7a3b      	ldrb	r3, [r7, #8]
 8002626:	f362 1304 	bfi	r3, r2, #4, #1
 800262a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800262c:	f107 0208 	add.w	r2, r7, #8
 8002630:	2301      	movs	r3, #1
 8002632:	2111      	movs	r1, #17
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fe5c 	bl	80022f2 <lps22hb_write_reg>
 800263a:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800263c:	68fb      	ldr	r3, [r7, #12]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	e04d      	b.n	8002700 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	7b1a      	ldrb	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a1b      	ldr	r2, [pc, #108]	; (800270c <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80026a0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1a      	ldr	r2, [pc, #104]	; (8002710 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80026a6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e020      	b.n	8002700 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4798      	blx	r3
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e016      	b.n	8002700 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d112      	bne.n	8002700 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10d      	bne.n	8002700 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80026e4:	2301      	movs	r3, #1
 80026e6:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	461a      	mov	r2, r3
 80026ec:	2123      	movs	r1, #35	; 0x23
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fb55 	bl	8002d9e <LSM303AGR_ACC_Write_Reg>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	e000      	b.n	8002702 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002700:	68fb      	ldr	r3, [r7, #12]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	080035ad 	.word	0x080035ad
 8002710:	0800360f 	.word	0x0800360f

08002714 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	331c      	adds	r3, #28
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f001 f94a 	bl	80039bc <lsm303agr_xl_block_data_update_set>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e02c      	b.n	800278e <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	331c      	adds	r3, #28
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f001 faed 	bl	8003d1a <lsm303agr_xl_fifo_mode_set>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e020      	b.n	800278e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2205      	movs	r2, #5
 8002750:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	331c      	adds	r3, #28
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f001 f84e 	bl	80037fc <lsm303agr_xl_data_rate_set>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e010      	b.n	800278e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	331c      	adds	r3, #28
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f001 f8c4 	bl	8003900 <lsm303agr_xl_full_scale_set>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e004      	b.n	800278e <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f87c 	bl	800289c <LSM303AGR_ACC_Disable>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e008      	b.n	80027c2 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	331c      	adds	r3, #28
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 fa55 	bl	8003c8a <lsm303agr_xl_device_id_get>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ea:	e000      	b.n	80027ee <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2210      	movs	r2, #16
 8002824:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4a06      	ldr	r2, [pc, #24]	; (8002850 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002838:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	43c80000 	.word	0x43c80000

08002854 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e014      	b.n	8002894 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f103 021c 	add.w	r2, r3, #28
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f000 ffbf 	bl	80037fc <lsm303agr_xl_data_rate_set>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	e004      	b.n	8002894 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e01f      	b.n	80028f2 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f103 021c 	add.w	r2, r3, #28
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	332a      	adds	r3, #42	; 0x2a
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 ffc2 	bl	8003848 <lsm303agr_xl_data_rate_get>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e010      	b.n	80028f2 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	331c      	adds	r3, #28
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 ff90 	bl	80037fc <lsm303agr_xl_data_rate_set>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e004      	b.n	80028f2 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	331c      	adds	r3, #28
 800290c:	f107 020b 	add.w	r2, r7, #11
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 ff3e 	bl	8003794 <lsm303agr_xl_operating_mode_get>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	e031      	b.n	8002988 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d01a      	beq.n	8002960 <LSM303AGR_ACC_GetSensitivity+0x66>
 800292a:	2b02      	cmp	r3, #2
 800292c:	dc22      	bgt.n	8002974 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002932:	2b01      	cmp	r3, #1
 8002934:	d00a      	beq.n	800294c <LSM303AGR_ACC_GetSensitivity+0x52>
 8002936:	e01d      	b.n	8002974 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fca8 	bl	8003290 <LSM303AGR_ACC_GetSensitivityHR>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01a      	beq.n	800297c <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e01d      	b.n	8002988 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fce4 	bl	800331c <LSM303AGR_ACC_GetSensitivityNM>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	e013      	b.n	8002988 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fd20 	bl	80033a8 <LSM303AGR_ACC_GetSensitivityLP>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	e009      	b.n	8002988 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	60fb      	str	r3, [r7, #12]
      break;
 800297a:	e004      	b.n	8002986 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800297c:	bf00      	nop
 800297e:	e002      	b.n	8002986 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002980:	bf00      	nop
 8002982:	e000      	b.n	8002986 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002984:	bf00      	nop
  }

  return ret;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	331c      	adds	r3, #28
 80029a2:	f107 020b 	add.w	r2, r7, #11
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fef3 	bl	8003794 <lsm303agr_xl_operating_mode_get>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
 80029b8:	e09d      	b.n	8002af6 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	331c      	adds	r3, #28
 80029be:	f107 020a 	add.w	r2, r7, #10
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 ff3f 	bl	8003848 <lsm303agr_xl_data_rate_get>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	e08f      	b.n	8002af6 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80029d6:	7afb      	ldrb	r3, [r7, #11]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d147      	bne.n	8002a6c <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 80029dc:	7abb      	ldrb	r3, [r7, #10]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d840      	bhi.n	8002a64 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	08002a11 	.word	0x08002a11
 80029ec:	08002a1b 	.word	0x08002a1b
 80029f0:	08002a25 	.word	0x08002a25
 80029f4:	08002a2d 	.word	0x08002a2d
 80029f8:	08002a35 	.word	0x08002a35
 80029fc:	08002a3d 	.word	0x08002a3d
 8002a00:	08002a45 	.word	0x08002a45
 8002a04:	08002a4d 	.word	0x08002a4d
 8002a08:	08002a55 	.word	0x08002a55
 8002a0c:	08002a5d 	.word	0x08002a5d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
        break;
 8002a18:	e06c      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a20:	601a      	str	r2, [r3, #0]
        break;
 8002a22:	e067      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4a36      	ldr	r2, [pc, #216]	; (8002b00 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002a28:	601a      	str	r2, [r3, #0]
        break;
 8002a2a:	e063      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002a30:	601a      	str	r2, [r3, #0]
        break;
 8002a32:	e05f      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4a34      	ldr	r2, [pc, #208]	; (8002b08 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002a38:	601a      	str	r2, [r3, #0]
        break;
 8002a3a:	e05b      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4a33      	ldr	r2, [pc, #204]	; (8002b0c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002a40:	601a      	str	r2, [r3, #0]
        break;
 8002a42:	e057      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4a32      	ldr	r2, [pc, #200]	; (8002b10 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002a48:	601a      	str	r2, [r3, #0]
        break;
 8002a4a:	e053      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4a31      	ldr	r2, [pc, #196]	; (8002b14 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002a50:	601a      	str	r2, [r3, #0]
        break;
 8002a52:	e04f      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002a58:	601a      	str	r2, [r3, #0]
        break;
 8002a5a:	e04b      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002a60:	601a      	str	r2, [r3, #0]
        break;
 8002a62:	e047      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e043      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002a6c:	7abb      	ldrb	r3, [r7, #10]
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	d83c      	bhi.n	8002aec <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002aa1 	.word	0x08002aa1
 8002a7c:	08002aab 	.word	0x08002aab
 8002a80:	08002ab5 	.word	0x08002ab5
 8002a84:	08002abd 	.word	0x08002abd
 8002a88:	08002ac5 	.word	0x08002ac5
 8002a8c:	08002acd 	.word	0x08002acd
 8002a90:	08002ad5 	.word	0x08002ad5
 8002a94:	08002add 	.word	0x08002add
 8002a98:	08002aed 	.word	0x08002aed
 8002a9c:	08002ae5 	.word	0x08002ae5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
        break;
 8002aa8:	e024      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ab0:	601a      	str	r2, [r3, #0]
        break;
 8002ab2:	e01f      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002ab8:	601a      	str	r2, [r3, #0]
        break;
 8002aba:	e01b      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002ac0:	601a      	str	r2, [r3, #0]
        break;
 8002ac2:	e017      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002ac8:	601a      	str	r2, [r3, #0]
        break;
 8002aca:	e013      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002ad0:	601a      	str	r2, [r3, #0]
        break;
 8002ad2:	e00f      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002ad8:	601a      	str	r2, [r3, #0]
        break;
 8002ada:	e00b      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002ae0:	601a      	str	r2, [r3, #0]
        break;
 8002ae2:	e007      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002ae8:	601a      	str	r2, [r3, #0]
        break;
 8002aea:	e003      	b.n	8002af4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	60fb      	str	r3, [r7, #12]
        break;
 8002af2:	bf00      	nop
    }
  }

  return ret;
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	41200000 	.word	0x41200000
 8002b04:	41c80000 	.word	0x41c80000
 8002b08:	42480000 	.word	0x42480000
 8002b0c:	42c80000 	.word	0x42c80000
 8002b10:	43480000 	.word	0x43480000
 8002b14:	43c80000 	.word	0x43c80000
 8002b18:	44ca8000 	.word	0x44ca8000
 8002b1c:	45a80000 	.word	0x45a80000
 8002b20:	44a80000 	.word	0x44a80000

08002b24 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d106      	bne.n	8002b48 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002b3a:	ed97 0a00 	vldr	s0, [r7]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fc78 	bl	8003434 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	e005      	b.n	8002b54 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002b48:	ed97 0a00 	vldr	s0, [r7]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fcd3 	bl	80034f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002b52:	4603      	mov	r3, r0
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	331c      	adds	r3, #28
 8002b6e:	f107 020b 	add.w	r2, r7, #11
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fee9 	bl	800394c <lsm303agr_xl_full_scale_get>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	e023      	b.n	8002bce <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d81b      	bhi.n	8002bc4 <LSM303AGR_ACC_GetFullScale+0x68>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bad 	.word	0x08002bad
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002bbd 	.word	0x08002bbd
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	601a      	str	r2, [r3, #0]
      break;
 8002baa:	e00f      	b.n	8002bcc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	601a      	str	r2, [r3, #0]
      break;
 8002bb2:	e00b      	b.n	8002bcc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	601a      	str	r2, [r3, #0]
      break;
 8002bba:	e007      	b.n	8002bcc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	601a      	str	r2, [r3, #0]
      break;
 8002bc2:	e003      	b.n	8002bcc <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	60fb      	str	r3, [r7, #12]
      break;
 8002bca:	bf00      	nop
  }

  return ret;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop

08002bd8 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	dd0b      	ble.n	8002c00 <LSM303AGR_ACC_SetFullScale+0x28>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	dd06      	ble.n	8002bfc <LSM303AGR_ACC_SetFullScale+0x24>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	dc01      	bgt.n	8002bf8 <LSM303AGR_ACC_SetFullScale+0x20>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e004      	b.n	8002c02 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e002      	b.n	8002c02 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002c00:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002c02:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	331c      	adds	r3, #28
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fe77 	bl	8003900 <lsm303agr_xl_full_scale_set>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	e000      	b.n	8002c20 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	331c      	adds	r3, #28
 8002c3e:	f107 020f 	add.w	r2, r7, #15
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fda5 	bl	8003794 <lsm303agr_xl_operating_mode_get>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	e04a      	b.n	8002cec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d00c      	beq.n	8002c76 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	dc0e      	bgt.n	8002c7e <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d003      	beq.n	8002c70 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002c68:	e009      	b.n	8002c7e <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	83fb      	strh	r3, [r7, #30]
      break;
 8002c6e:	e00a      	b.n	8002c86 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002c70:	2340      	movs	r3, #64	; 0x40
 8002c72:	83fb      	strh	r3, [r7, #30]
      break;
 8002c74:	e007      	b.n	8002c86 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	83fb      	strh	r3, [r7, #30]
      break;
 8002c7c:	e003      	b.n	8002c86 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	61bb      	str	r3, [r7, #24]
      break;
 8002c84:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d101      	bne.n	8002c92 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	e02c      	b.n	8002cec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	331c      	adds	r3, #28
 8002c96:	f107 0210 	add.w	r2, r7, #16
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 feb3 	bl	8003a08 <lsm303agr_acceleration_raw_get>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	e01e      	b.n	8002cec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002cae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002cb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002cc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ccc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cd0:	b21a      	sxth	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002cd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ce4:	b21a      	sxth	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	809a      	strh	r2, [r3, #4]

  return ret;
 8002cea:	69bb      	ldr	r3, [r7, #24]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ff8c 	bl	8002c28 <LSM303AGR_ACC_GetAxesRaw>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	e03c      	b.n	8002d96 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fde9 	bl	80028fa <LSM303AGR_ACC_GetSensitivity>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	e030      	b.n	8002d96 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002d34:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4c:	ee17 2a90 	vmov	r2, s15
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002d54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d58:	ee07 3a90 	vmov	s15, r3
 8002d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6c:	ee17 2a90 	vmov	r2, s15
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002d74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d8c:	ee17 2a90 	vmov	r2, s15
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70fb      	strb	r3, [r7, #3]
 8002daa:	4613      	mov	r3, r2
 8002dac:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f103 001c 	add.w	r0, r3, #28
 8002db4:	1cba      	adds	r2, r7, #2
 8002db6:	78f9      	ldrb	r1, [r7, #3]
 8002db8:	2301      	movs	r3, #1
 8002dba:	f000 fcd3 	bl	8003764 <lsm303agr_write_reg>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	e000      	b.n	8002dcc <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e04b      	b.n	8002e88 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	7b1a      	ldrb	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002e2c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002e32:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e01e      	b.n	8002e88 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4798      	blx	r3
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e014      	b.n	8002e88 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10b      	bne.n	8002e88 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	331c      	adds	r3, #28
 8002e74:	2101      	movs	r1, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 ff75 	bl	8003d66 <lsm303agr_mag_i2c_interface_set>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e000      	b.n	8002e8a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002e88:	68fb      	ldr	r3, [r7, #12]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	08003671 	.word	0x08003671
 8002e98:	080036d3 	.word	0x080036d3

08002e9c <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	331c      	adds	r3, #28
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fe7c 	bl	8003ba8 <lsm303agr_mag_block_data_update_set>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	e028      	b.n	8002f0e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	331c      	adds	r3, #28
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fdeb 	bl	8003a9e <lsm303agr_mag_operating_mode_set>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e01c      	b.n	8002f0e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	331c      	adds	r3, #28
 8002ed8:	2103      	movs	r1, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fe05 	bl	8003aea <lsm303agr_mag_data_rate_set>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	e010      	b.n	8002f0e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	331c      	adds	r3, #28
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 feeb 	bl	8003cce <lsm303agr_mag_self_test_set>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e004      	b.n	8002f0e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f874 	bl	800300c <LSM303AGR_MAG_Disable>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e004      	b.n	8002f3a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	331c      	adds	r3, #28
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 feaa 	bl	8003cac <lsm303agr_mag_device_id_get>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	e000      	b.n	8002f66 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2232      	movs	r2, #50	; 0x32
 8002fa2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002fb8:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	42c80000 	.word	0x42c80000

08002fcc <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e010      	b.n	8003004 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	331c      	adds	r3, #28
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fd58 	bl	8003a9e <lsm303agr_mag_operating_mode_set>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff8:	e004      	b.n	8003004 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e010      	b.n	8003044 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	331c      	adds	r3, #28
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fd38 	bl	8003a9e <lsm303agr_mag_operating_mode_set>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
 8003038:	e004      	b.n	8003044 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800305c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	331c      	adds	r3, #28
 800307e:	f107 020b 	add.w	r2, r7, #11
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fd57 	bl	8003b38 <lsm303agr_mag_data_rate_get>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	e023      	b.n	80030de <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d81b      	bhi.n	80030d4 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 800309c:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030b5 	.word	0x080030b5
 80030a8:	080030bd 	.word	0x080030bd
 80030ac:	080030c5 	.word	0x080030c5
 80030b0:	080030cd 	.word	0x080030cd
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80030b8:	601a      	str	r2, [r3, #0]
      break;
 80030ba:	e00f      	b.n	80030dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80030c0:	601a      	str	r2, [r3, #0]
      break;
 80030c2:	e00b      	b.n	80030dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80030c8:	601a      	str	r2, [r3, #0]
      break;
 80030ca:	e007      	b.n	80030dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80030d0:	601a      	str	r2, [r3, #0]
      break;
 80030d2:	e003      	b.n	80030dc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	60fb      	str	r3, [r7, #12]
      break;
 80030da:	bf00      	nop
  }

  return ret;
 80030dc:	68fb      	ldr	r3, [r7, #12]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	41200000 	.word	0x41200000
 80030ec:	41a00000 	.word	0x41a00000
 80030f0:	42480000 	.word	0x42480000
 80030f4:	42c80000 	.word	0x42c80000

080030f8 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003104:	edd7 7a00 	vldr	s15, [r7]
 8003108:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800310c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003114:	d801      	bhi.n	800311a <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8003116:	2300      	movs	r3, #0
 8003118:	e016      	b.n	8003148 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800311a:	edd7 7a00 	vldr	s15, [r7]
 800311e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d801      	bhi.n	8003130 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 800312c:	2301      	movs	r3, #1
 800312e:	e00b      	b.n	8003148 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003130:	edd7 7a00 	vldr	s15, [r7]
 8003134:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003170 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	d801      	bhi.n	8003146 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8003142:	2302      	movs	r3, #2
 8003144:	e000      	b.n	8003148 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003146:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003148:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	331c      	adds	r3, #28
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fcc9 	bl	8003aea <lsm303agr_mag_data_rate_set>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	e000      	b.n	8003166 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	42480000 	.word	0x42480000

08003174 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2232      	movs	r2, #50	; 0x32
 8003182:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	331c      	adds	r3, #28
 80031b8:	f107 0208 	add.w	r2, r7, #8
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fd18 	bl	8003bf4 <lsm303agr_magnetic_raw_get>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
 80031ce:	e00c      	b.n	80031ea <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80031d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80031d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80031e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	331c      	adds	r3, #28
 8003200:	f107 0210 	add.w	r2, r7, #16
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fcf4 	bl	8003bf4 <lsm303agr_magnetic_raw_get>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	e036      	b.n	8003286 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ff14 	bl	800304c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003224:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003230:	edd7 7a03 	vldr	s15, [r7, #12]
 8003234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323c:	ee17 2a90 	vmov	r2, s15
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003244:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003250:	edd7 7a03 	vldr	s15, [r7, #12]
 8003254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800325c:	ee17 2a90 	vmov	r2, s15
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003264:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003270:	edd7 7a03 	vldr	s15, [r7, #12]
 8003274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327c:	ee17 2a90 	vmov	r2, s15
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	331c      	adds	r3, #28
 80032a2:	f107 020b 	add.w	r2, r7, #11
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fb4f 	bl	800394c <lsm303agr_xl_full_scale_get>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80032b4:	f04f 33ff 	mov.w	r3, #4294967295
 80032b8:	e023      	b.n	8003302 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d81b      	bhi.n	80032f8 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032d9 	.word	0x080032d9
 80032cc:	080032e1 	.word	0x080032e1
 80032d0:	080032e9 	.word	0x080032e9
 80032d4:	080032f1 	.word	0x080032f1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80032dc:	601a      	str	r2, [r3, #0]
      break;
 80032de:	e00f      	b.n	8003300 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80032e4:	601a      	str	r2, [r3, #0]
      break;
 80032e6:	e00b      	b.n	8003300 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80032ec:	601a      	str	r2, [r3, #0]
      break;
 80032ee:	e007      	b.n	8003300 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80032f4:	601a      	str	r2, [r3, #0]
      break;
 80032f6:	e003      	b.n	8003300 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	60fb      	str	r3, [r7, #12]
      break;
 80032fe:	bf00      	nop
  }

  return ret;
 8003300:	68fb      	ldr	r3, [r7, #12]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	3f7ae148 	.word	0x3f7ae148
 8003310:	3ff9999a 	.word	0x3ff9999a
 8003314:	4079999a 	.word	0x4079999a
 8003318:	413b851f 	.word	0x413b851f

0800331c <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	331c      	adds	r3, #28
 800332e:	f107 020b 	add.w	r2, r7, #11
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fb09 	bl	800394c <lsm303agr_xl_full_scale_get>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
 8003344:	e023      	b.n	800338e <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d81b      	bhi.n	8003384 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003365 	.word	0x08003365
 8003358:	0800336d 	.word	0x0800336d
 800335c:	08003375 	.word	0x08003375
 8003360:	0800337d 	.word	0x0800337d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003368:	601a      	str	r2, [r3, #0]
      break;
 800336a:	e00f      	b.n	800338c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	4a0b      	ldr	r2, [pc, #44]	; (800339c <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003370:	601a      	str	r2, [r3, #0]
      break;
 8003372:	e00b      	b.n	800338c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003378:	601a      	str	r2, [r3, #0]
      break;
 800337a:	e007      	b.n	800338c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003380:	601a      	str	r2, [r3, #0]
      break;
 8003382:	e003      	b.n	800338c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295
 8003388:	60fb      	str	r3, [r7, #12]
      break;
 800338a:	bf00      	nop
  }

  return ret;
 800338c:	68fb      	ldr	r3, [r7, #12]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	4079999a 	.word	0x4079999a
 800339c:	40fa3d71 	.word	0x40fa3d71
 80033a0:	417a147b 	.word	0x417a147b
 80033a4:	423b999a 	.word	0x423b999a

080033a8 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	331c      	adds	r3, #28
 80033ba:	f107 020b 	add.w	r2, r7, #11
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fac3 	bl	800394c <lsm303agr_xl_full_scale_get>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	e023      	b.n	800341a <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80033d2:	7afb      	ldrb	r3, [r7, #11]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d81b      	bhi.n	8003410 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	080033f9 	.word	0x080033f9
 80033e8:	08003401 	.word	0x08003401
 80033ec:	08003409 	.word	0x08003409
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80033f4:	601a      	str	r2, [r3, #0]
      break;
 80033f6:	e00f      	b.n	8003418 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80033fc:	601a      	str	r2, [r3, #0]
      break;
 80033fe:	e00b      	b.n	8003418 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003404:	601a      	str	r2, [r3, #0]
      break;
 8003406:	e007      	b.n	8003418 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4a09      	ldr	r2, [pc, #36]	; (8003430 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 800340c:	601a      	str	r2, [r3, #0]
      break;
 800340e:	e003      	b.n	8003418 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	60fb      	str	r3, [r7, #12]
      break;
 8003416:	bf00      	nop
  }

  return ret;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	417a147b 	.word	0x417a147b
 8003428:	41fa147b 	.word	0x41fa147b
 800342c:	427a147b 	.word	0x427a147b
 8003430:	433b947b 	.word	0x433b947b

08003434 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003440:	edd7 7a00 	vldr	s15, [r7]
 8003444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003450:	d801      	bhi.n	8003456 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003452:	2301      	movs	r3, #1
 8003454:	e037      	b.n	80034c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003456:	edd7 7a00 	vldr	s15, [r7]
 800345a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800345e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	d801      	bhi.n	800346c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003468:	2302      	movs	r3, #2
 800346a:	e02c      	b.n	80034c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800346c:	edd7 7a00 	vldr	s15, [r7]
 8003470:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d801      	bhi.n	8003482 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800347e:	2303      	movs	r3, #3
 8003480:	e021      	b.n	80034c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003482:	edd7 7a00 	vldr	s15, [r7]
 8003486:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80034ec <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 800348a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	d801      	bhi.n	8003498 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003494:	2304      	movs	r3, #4
 8003496:	e016      	b.n	80034c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003498:	edd7 7a00 	vldr	s15, [r7]
 800349c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80034f0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d801      	bhi.n	80034ae <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80034aa:	2305      	movs	r3, #5
 80034ac:	e00b      	b.n	80034c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80034ae:	edd7 7a00 	vldr	s15, [r7]
 80034b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80034f4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80034b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	d801      	bhi.n	80034c4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80034c0:	2306      	movs	r3, #6
 80034c2:	e000      	b.n	80034c6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80034c4:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80034c6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	331c      	adds	r3, #28
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f993 	bl	80037fc <lsm303agr_xl_data_rate_set>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	e000      	b.n	80034e4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	42480000 	.word	0x42480000
 80034f0:	42c80000 	.word	0x42c80000
 80034f4:	43480000 	.word	0x43480000

080034f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003504:	edd7 7a00 	vldr	s15, [r7]
 8003508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800350c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d801      	bhi.n	800351a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003516:	2301      	movs	r3, #1
 8003518:	e037      	b.n	800358a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800351a:	edd7 7a00 	vldr	s15, [r7]
 800351e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	d801      	bhi.n	8003530 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800352c:	2302      	movs	r3, #2
 800352e:	e02c      	b.n	800358a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003530:	edd7 7a00 	vldr	s15, [r7]
 8003534:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d801      	bhi.n	8003546 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003542:	2303      	movs	r3, #3
 8003544:	e021      	b.n	800358a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003546:	edd7 7a00 	vldr	s15, [r7]
 800354a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80035a0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800354e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003556:	d801      	bhi.n	800355c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003558:	2304      	movs	r3, #4
 800355a:	e016      	b.n	800358a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800355c:	edd7 7a00 	vldr	s15, [r7]
 8003560:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80035a4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	d801      	bhi.n	8003572 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800356e:	2305      	movs	r3, #5
 8003570:	e00b      	b.n	800358a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003572:	edd7 7a00 	vldr	s15, [r7]
 8003576:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80035a8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800357a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	d801      	bhi.n	8003588 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003584:	2306      	movs	r3, #6
 8003586:	e000      	b.n	800358a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003588:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	42480000 	.word	0x42480000
 80035a4:	42c80000 	.word	0x42c80000
 80035a8:	43480000 	.word	0x43480000

080035ac <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	460b      	mov	r3, r1
 80035ba:	72fb      	strb	r3, [r7, #11]
 80035bc:	4613      	mov	r3, r2
 80035be:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10e      	bne.n	80035ea <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	695c      	ldr	r4, [r3, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	7b1b      	ldrb	r3, [r3, #12]
 80035d4:	b298      	uxth	r0, r3
 80035d6:	7afb      	ldrb	r3, [r7, #11]
 80035d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	b299      	uxth	r1, r3
 80035e0:	893b      	ldrh	r3, [r7, #8]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	47a0      	blx	r4
 80035e6:	4603      	mov	r3, r0
 80035e8:	e00d      	b.n	8003606 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	695c      	ldr	r4, [r3, #20]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	7b1b      	ldrb	r3, [r3, #12]
 80035f2:	b298      	uxth	r0, r3
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	b299      	uxth	r1, r3
 80035fe:	893b      	ldrh	r3, [r7, #8]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	47a0      	blx	r4
 8003604:	4603      	mov	r3, r0
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}

0800360e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800360e:	b590      	push	{r4, r7, lr}
 8003610:	b087      	sub	sp, #28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	461a      	mov	r2, r3
 800361a:	460b      	mov	r3, r1
 800361c:	72fb      	strb	r3, [r7, #11]
 800361e:	4613      	mov	r3, r2
 8003620:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10e      	bne.n	800364c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	691c      	ldr	r4, [r3, #16]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	7b1b      	ldrb	r3, [r3, #12]
 8003636:	b298      	uxth	r0, r3
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800363e:	b2db      	uxtb	r3, r3
 8003640:	b299      	uxth	r1, r3
 8003642:	893b      	ldrh	r3, [r7, #8]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	47a0      	blx	r4
 8003648:	4603      	mov	r3, r0
 800364a:	e00d      	b.n	8003668 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	691c      	ldr	r4, [r3, #16]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	7b1b      	ldrb	r3, [r3, #12]
 8003654:	b298      	uxth	r0, r3
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800365c:	b2db      	uxtb	r3, r3
 800365e:	b299      	uxth	r1, r3
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	47a0      	blx	r4
 8003666:	4603      	mov	r3, r0
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}

08003670 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	461a      	mov	r2, r3
 800367c:	460b      	mov	r3, r1
 800367e:	72fb      	strb	r3, [r7, #11]
 8003680:	4613      	mov	r3, r2
 8003682:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10e      	bne.n	80036ae <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	695c      	ldr	r4, [r3, #20]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	7b1b      	ldrb	r3, [r3, #12]
 8003698:	b298      	uxth	r0, r3
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	b299      	uxth	r1, r3
 80036a4:	893b      	ldrh	r3, [r7, #8]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	47a0      	blx	r4
 80036aa:	4603      	mov	r3, r0
 80036ac:	e00d      	b.n	80036ca <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	695c      	ldr	r4, [r3, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	7b1b      	ldrb	r3, [r3, #12]
 80036b6:	b298      	uxth	r0, r3
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	b299      	uxth	r1, r3
 80036c2:	893b      	ldrh	r3, [r7, #8]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	47a0      	blx	r4
 80036c8:	4603      	mov	r3, r0
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd90      	pop	{r4, r7, pc}

080036d2 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036d2:	b590      	push	{r4, r7, lr}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	461a      	mov	r2, r3
 80036de:	460b      	mov	r3, r1
 80036e0:	72fb      	strb	r3, [r7, #11]
 80036e2:	4613      	mov	r3, r2
 80036e4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10e      	bne.n	8003710 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	691c      	ldr	r4, [r3, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	7b1b      	ldrb	r3, [r3, #12]
 80036fa:	b298      	uxth	r0, r3
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003702:	b2db      	uxtb	r3, r3
 8003704:	b299      	uxth	r1, r3
 8003706:	893b      	ldrh	r3, [r7, #8]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	47a0      	blx	r4
 800370c:	4603      	mov	r3, r0
 800370e:	e00d      	b.n	800372c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	691c      	ldr	r4, [r3, #16]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	7b1b      	ldrb	r3, [r3, #12]
 8003718:	b298      	uxth	r0, r3
 800371a:	7afb      	ldrb	r3, [r7, #11]
 800371c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003720:	b2db      	uxtb	r3, r3
 8003722:	b299      	uxth	r1, r3
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	47a0      	blx	r4
 800372a:	4603      	mov	r3, r0
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	460b      	mov	r3, r1
 8003742:	72fb      	strb	r3, [r7, #11]
 8003744:	4613      	mov	r3, r2
 8003746:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685c      	ldr	r4, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6898      	ldr	r0, [r3, #8]
 8003750:	893b      	ldrh	r3, [r7, #8]
 8003752:	7af9      	ldrb	r1, [r7, #11]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	47a0      	blx	r4
 8003758:	6178      	str	r0, [r7, #20]
  return ret;
 800375a:	697b      	ldr	r3, [r7, #20]
}
 800375c:	4618      	mov	r0, r3
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}

08003764 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	72fb      	strb	r3, [r7, #11]
 8003774:	4613      	mov	r3, r2
 8003776:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6898      	ldr	r0, [r3, #8]
 8003780:	893b      	ldrh	r3, [r7, #8]
 8003782:	7af9      	ldrb	r1, [r7, #11]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	47a0      	blx	r4
 8003788:	6178      	str	r0, [r7, #20]
  return ret;
 800378a:	697b      	ldr	r3, [r7, #20]
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd90      	pop	{r4, r7, pc}

08003794 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800379e:	f107 020c 	add.w	r2, r7, #12
 80037a2:	2301      	movs	r3, #1
 80037a4:	2120      	movs	r1, #32
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffc4 	bl	8003734 <lsm303agr_read_reg>
 80037ac:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80037b4:	f107 0210 	add.w	r2, r7, #16
 80037b8:	2301      	movs	r3, #1
 80037ba:	2123      	movs	r1, #35	; 0x23
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ffb9 	bl	8003734 <lsm303agr_read_reg>
 80037c2:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 80037c4:	7b3b      	ldrb	r3, [r7, #12]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e00c      	b.n	80037f2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 80037d8:	7c3b      	ldrb	r3, [r7, #16]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80037f2:	697b      	ldr	r3, [r7, #20]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003808:	f107 0208 	add.w	r2, r7, #8
 800380c:	2301      	movs	r3, #1
 800380e:	2120      	movs	r1, #32
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff8f 	bl	8003734 <lsm303agr_read_reg>
 8003816:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	b2da      	uxtb	r2, r3
 8003826:	7a3b      	ldrb	r3, [r7, #8]
 8003828:	f362 1307 	bfi	r3, r2, #4, #4
 800382c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800382e:	f107 0208 	add.w	r2, r7, #8
 8003832:	2301      	movs	r3, #1
 8003834:	2120      	movs	r1, #32
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ff94 	bl	8003764 <lsm303agr_write_reg>
 800383c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003852:	f107 0208 	add.w	r2, r7, #8
 8003856:	2301      	movs	r3, #1
 8003858:	2120      	movs	r1, #32
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff6a 	bl	8003734 <lsm303agr_read_reg>
 8003860:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003862:	7a3b      	ldrb	r3, [r7, #8]
 8003864:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b09      	cmp	r3, #9
 800386c:	d83e      	bhi.n	80038ec <lsm303agr_xl_data_rate_get+0xa4>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <lsm303agr_xl_data_rate_get+0x2c>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	0800389d 	.word	0x0800389d
 8003878:	080038a5 	.word	0x080038a5
 800387c:	080038ad 	.word	0x080038ad
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080038bd 	.word	0x080038bd
 8003888:	080038c5 	.word	0x080038c5
 800388c:	080038cd 	.word	0x080038cd
 8003890:	080038d5 	.word	0x080038d5
 8003894:	080038dd 	.word	0x080038dd
 8003898:	080038e5 	.word	0x080038e5
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
      break;
 80038a2:	e027      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
      break;
 80038aa:	e023      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2202      	movs	r2, #2
 80038b0:	701a      	strb	r2, [r3, #0]
      break;
 80038b2:	e01f      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2203      	movs	r2, #3
 80038b8:	701a      	strb	r2, [r3, #0]
      break;
 80038ba:	e01b      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2204      	movs	r2, #4
 80038c0:	701a      	strb	r2, [r3, #0]
      break;
 80038c2:	e017      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2205      	movs	r2, #5
 80038c8:	701a      	strb	r2, [r3, #0]
      break;
 80038ca:	e013      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2206      	movs	r2, #6
 80038d0:	701a      	strb	r2, [r3, #0]
      break;
 80038d2:	e00f      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2207      	movs	r2, #7
 80038d8:	701a      	strb	r2, [r3, #0]
      break;
 80038da:	e00b      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2208      	movs	r2, #8
 80038e0:	701a      	strb	r2, [r3, #0]
      break;
 80038e2:	e007      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2209      	movs	r2, #9
 80038e8:	701a      	strb	r2, [r3, #0]
      break;
 80038ea:	e003      	b.n	80038f4 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
      break;
 80038f2:	bf00      	nop
  }

  return ret;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop

08003900 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800390c:	f107 0208 	add.w	r2, r7, #8
 8003910:	2301      	movs	r3, #1
 8003912:	2123      	movs	r1, #35	; 0x23
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff0d 	bl	8003734 <lsm303agr_read_reg>
 800391a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10f      	bne.n	8003942 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	b2da      	uxtb	r2, r3
 800392a:	7a3b      	ldrb	r3, [r7, #8]
 800392c:	f362 1305 	bfi	r3, r2, #4, #2
 8003930:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003932:	f107 0208 	add.w	r2, r7, #8
 8003936:	2301      	movs	r3, #1
 8003938:	2123      	movs	r1, #35	; 0x23
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ff12 	bl	8003764 <lsm303agr_write_reg>
 8003940:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003956:	f107 0208 	add.w	r2, r7, #8
 800395a:	2301      	movs	r3, #1
 800395c:	2123      	movs	r1, #35	; 0x23
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fee8 	bl	8003734 <lsm303agr_read_reg>
 8003964:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003966:	7a3b      	ldrb	r3, [r7, #8]
 8003968:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b03      	cmp	r3, #3
 8003970:	d81a      	bhi.n	80039a8 <lsm303agr_xl_full_scale_get+0x5c>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <lsm303agr_xl_full_scale_get+0x2c>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	08003989 	.word	0x08003989
 800397c:	08003991 	.word	0x08003991
 8003980:	08003999 	.word	0x08003999
 8003984:	080039a1 	.word	0x080039a1
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
      break;
 800398e:	e00f      	b.n	80039b0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
      break;
 8003996:	e00b      	b.n	80039b0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	701a      	strb	r2, [r3, #0]
      break;
 800399e:	e007      	b.n	80039b0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2203      	movs	r2, #3
 80039a4:	701a      	strb	r2, [r3, #0]
      break;
 80039a6:	e003      	b.n	80039b0 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
      break;
 80039ae:	bf00      	nop
  }

  return ret;
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop

080039bc <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80039c8:	f107 0208 	add.w	r2, r7, #8
 80039cc:	2301      	movs	r3, #1
 80039ce:	2123      	movs	r1, #35	; 0x23
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff feaf 	bl	8003734 <lsm303agr_read_reg>
 80039d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10f      	bne.n	80039fe <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	7a3b      	ldrb	r3, [r7, #8]
 80039e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80039ec:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80039ee:	f107 0208 	add.w	r2, r7, #8
 80039f2:	2301      	movs	r3, #1
 80039f4:	2123      	movs	r1, #35	; 0x23
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff feb4 	bl	8003764 <lsm303agr_write_reg>
 80039fc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003a12:	f107 020c 	add.w	r2, r7, #12
 8003a16:	2306      	movs	r3, #6
 8003a18:	2128      	movs	r1, #40	; 0x28
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fe8a 	bl	8003734 <lsm303agr_read_reg>
 8003a20:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003a22:	7b7b      	ldrb	r3, [r7, #13]
 8003a24:	b21a      	sxth	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	7b3b      	ldrb	r3, [r7, #12]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b21a      	sxth	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	b212      	sxth	r2, r2
 8003a4c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	3302      	adds	r3, #2
 8003a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	7bbb      	ldrb	r3, [r7, #14]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	3302      	adds	r3, #2
 8003a68:	b212      	sxth	r2, r2
 8003a6a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003a6c:	7c7a      	ldrb	r2, [r7, #17]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	3304      	adds	r3, #4
 8003a72:	b212      	sxth	r2, r2
 8003a74:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	7c3b      	ldrb	r3, [r7, #16]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	b212      	sxth	r2, r2
 8003a92:	801a      	strh	r2, [r3, #0]
  return ret;
 8003a94:	697b      	ldr	r3, [r7, #20]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003aaa:	f107 0208 	add.w	r2, r7, #8
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2160      	movs	r1, #96	; 0x60
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fe3e 	bl	8003734 <lsm303agr_read_reg>
 8003ab8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	7a3b      	ldrb	r3, [r7, #8]
 8003aca:	f362 0301 	bfi	r3, r2, #0, #2
 8003ace:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003ad0:	f107 0208 	add.w	r2, r7, #8
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	2160      	movs	r1, #96	; 0x60
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fe43 	bl	8003764 <lsm303agr_write_reg>
 8003ade:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003af6:	f107 0208 	add.w	r2, r7, #8
 8003afa:	2301      	movs	r3, #1
 8003afc:	2160      	movs	r1, #96	; 0x60
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fe18 	bl	8003734 <lsm303agr_read_reg>
 8003b04:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10f      	bne.n	8003b2c <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	7a3b      	ldrb	r3, [r7, #8]
 8003b16:	f362 0383 	bfi	r3, r2, #2, #2
 8003b1a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003b1c:	f107 0208 	add.w	r2, r7, #8
 8003b20:	2301      	movs	r3, #1
 8003b22:	2160      	movs	r1, #96	; 0x60
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fe1d 	bl	8003764 <lsm303agr_write_reg>
 8003b2a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003b42:	f107 0208 	add.w	r2, r7, #8
 8003b46:	2301      	movs	r3, #1
 8003b48:	2160      	movs	r1, #96	; 0x60
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fdf2 	bl	8003734 <lsm303agr_read_reg>
 8003b50:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003b52:	7a3b      	ldrb	r3, [r7, #8]
 8003b54:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d81a      	bhi.n	8003b94 <lsm303agr_mag_data_rate_get+0x5c>
 8003b5e:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <lsm303agr_mag_data_rate_get+0x2c>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b7d 	.word	0x08003b7d
 8003b6c:	08003b85 	.word	0x08003b85
 8003b70:	08003b8d 	.word	0x08003b8d
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
      break;
 8003b7a:	e00f      	b.n	8003b9c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
      break;
 8003b82:	e00b      	b.n	8003b9c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2202      	movs	r2, #2
 8003b88:	701a      	strb	r2, [r3, #0]
      break;
 8003b8a:	e007      	b.n	8003b9c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	701a      	strb	r2, [r3, #0]
      break;
 8003b92:	e003      	b.n	8003b9c <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
      break;
 8003b9a:	bf00      	nop
  }

  return ret;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop

08003ba8 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003bb4:	f107 0208 	add.w	r2, r7, #8
 8003bb8:	2301      	movs	r3, #1
 8003bba:	2162      	movs	r1, #98	; 0x62
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fdb9 	bl	8003734 <lsm303agr_read_reg>
 8003bc2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	7a3b      	ldrb	r3, [r7, #8]
 8003bd4:	f362 1304 	bfi	r3, r2, #4, #1
 8003bd8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003bda:	f107 0208 	add.w	r2, r7, #8
 8003bde:	2301      	movs	r3, #1
 8003be0:	2162      	movs	r1, #98	; 0x62
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fdbe 	bl	8003764 <lsm303agr_write_reg>
 8003be8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003bea:	68fb      	ldr	r3, [r7, #12]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003bfe:	f107 020c 	add.w	r2, r7, #12
 8003c02:	2306      	movs	r3, #6
 8003c04:	2168      	movs	r1, #104	; 0x68
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fd94 	bl	8003734 <lsm303agr_read_reg>
 8003c0c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c0e:	7b7b      	ldrb	r3, [r7, #13]
 8003c10:	b21a      	sxth	r2, r3
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	7b3b      	ldrb	r3, [r7, #12]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	3302      	adds	r3, #2
 8003c36:	b212      	sxth	r2, r2
 8003c38:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	3302      	adds	r3, #2
 8003c54:	b212      	sxth	r2, r2
 8003c56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c58:	7c7a      	ldrb	r2, [r7, #17]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	b212      	sxth	r2, r2
 8003c60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3304      	adds	r3, #4
 8003c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	7c3b      	ldrb	r3, [r7, #16]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	b212      	sxth	r2, r2
 8003c7e:	801a      	strh	r2, [r3, #0]
  return ret;
 8003c80:	697b      	ldr	r3, [r7, #20]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003c94:	2301      	movs	r3, #1
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	210f      	movs	r1, #15
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fd4a 	bl	8003734 <lsm303agr_read_reg>
 8003ca0:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	214f      	movs	r1, #79	; 0x4f
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff fd39 	bl	8003734 <lsm303agr_read_reg>
 8003cc2:	60f8      	str	r0, [r7, #12]
  return ret;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003cda:	f107 0208 	add.w	r2, r7, #8
 8003cde:	2301      	movs	r3, #1
 8003ce0:	2162      	movs	r1, #98	; 0x62
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fd26 	bl	8003734 <lsm303agr_read_reg>
 8003ce8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10f      	bne.n	8003d10 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	7a3b      	ldrb	r3, [r7, #8]
 8003cfa:	f362 0341 	bfi	r3, r2, #1, #1
 8003cfe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d00:	f107 0208 	add.w	r2, r7, #8
 8003d04:	2301      	movs	r3, #1
 8003d06:	2162      	movs	r1, #98	; 0x62
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fd2b 	bl	8003764 <lsm303agr_write_reg>
 8003d0e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003d10:	68fb      	ldr	r3, [r7, #12]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003d26:	f107 0208 	add.w	r2, r7, #8
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	212e      	movs	r1, #46	; 0x2e
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fd00 	bl	8003734 <lsm303agr_read_reg>
 8003d34:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10f      	bne.n	8003d5c <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	7a3b      	ldrb	r3, [r7, #8]
 8003d46:	f362 1387 	bfi	r3, r2, #6, #2
 8003d4a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003d4c:	f107 0208 	add.w	r2, r7, #8
 8003d50:	2301      	movs	r3, #1
 8003d52:	212e      	movs	r1, #46	; 0x2e
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fd05 	bl	8003764 <lsm303agr_write_reg>
 8003d5a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d72:	f107 0208 	add.w	r2, r7, #8
 8003d76:	2301      	movs	r3, #1
 8003d78:	2162      	movs	r1, #98	; 0x62
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fcda 	bl	8003734 <lsm303agr_read_reg>
 8003d80:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	7a3b      	ldrb	r3, [r7, #8]
 8003d92:	f362 1345 	bfi	r3, r2, #5, #1
 8003d96:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d98:	f107 0208 	add.w	r2, r7, #8
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2162      	movs	r1, #98	; 0x62
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fcdf 	bl	8003764 <lsm303agr_write_reg>
 8003da6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003da8:	68fb      	ldr	r3, [r7, #12]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e04d      	b.n	8003e6c <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	7b1a      	ldrb	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <LSM6DSL_RegisterBusIO+0xc4>)
 8003e0c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <LSM6DSL_RegisterBusIO+0xc8>)
 8003e12:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e020      	b.n	8003e6c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4798      	blx	r3
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e016      	b.n	8003e6c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d112      	bne.n	8003e6c <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10d      	bne.n	8003e6c <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003e50:	230c      	movs	r3, #12
 8003e52:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003e54:	7afb      	ldrb	r3, [r7, #11]
 8003e56:	461a      	mov	r2, r3
 8003e58:	2112      	movs	r1, #18
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fd2d 	bl	80048ba <LSM6DSL_Write_Reg>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	08004d29 	.word	0x08004d29
 8003e7c:	08004d5f 	.word	0x08004d5f

08003e80 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	331c      	adds	r3, #28
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 fa59 	bl	8005346 <lsm6dsl_auto_increment_set>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	e054      	b.n	8003f4a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	331c      	adds	r3, #28
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f980 	bl	80051ac <lsm6dsl_block_data_update_set>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	e048      	b.n	8003f4a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	331c      	adds	r3, #28
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 fa67 	bl	8005392 <lsm6dsl_fifo_mode_set>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ece:	e03c      	b.n	8003f4a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	331c      	adds	r3, #28
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ffe6 	bl	8004eb0 <lsm6dsl_xl_data_rate_set>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	e02c      	b.n	8003f4a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	331c      	adds	r3, #28
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 ff7c 	bl	8004df4 <lsm6dsl_xl_full_scale_set>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295
 8003f06:	e020      	b.n	8003f4a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	331c      	adds	r3, #28
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 f8c0 	bl	800509c <lsm6dsl_gy_data_rate_set>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	e010      	b.n	8003f4a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	331c      	adds	r3, #28
 8003f2c:	2106      	movs	r1, #6
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 f84c 	bl	8004fcc <lsm6dsl_gy_full_scale_set>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3e:	e004      	b.n	8003f4a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f888 	bl	8004070 <LSM6DSL_ACC_Disable>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	e015      	b.n	8003f98 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa9a 	bl	80044a6 <LSM6DSL_GYRO_Disable>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e00c      	b.n	8003f98 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	331c      	adds	r3, #28
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 f9b7 	bl	8005324 <lsm6dsl_device_id_get>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	e000      	b.n	8003fc4 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ff4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <LSM6DSL_GetCapabilities+0x58>)
 8004006:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4a06      	ldr	r2, [pc, #24]	; (8004024 <LSM6DSL_GetCapabilities+0x58>)
 800400c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	45d02000 	.word	0x45d02000

08004028 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e014      	b.n	8004068 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f103 021c 	add.w	r2, r3, #28
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f000 ff2f 	bl	8004eb0 <lsm6dsl_xl_data_rate_set>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004058:	f04f 33ff 	mov.w	r3, #4294967295
 800405c:	e004      	b.n	8004068 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e01f      	b.n	80040c6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f103 021c 	add.w	r2, r3, #28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	332b      	adds	r3, #43	; 0x2b
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 ff32 	bl	8004efc <lsm6dsl_xl_data_rate_get>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	e010      	b.n	80040c6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	331c      	adds	r3, #28
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 ff00 	bl	8004eb0 <lsm6dsl_xl_data_rate_set>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ba:	e004      	b.n	80040c6 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	331c      	adds	r3, #28
 80040e2:	f107 020b 	add.w	r2, r7, #11
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fea9 	bl	8004e40 <lsm6dsl_xl_full_scale_get>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	e023      	b.n	8004142 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80040fa:	7afb      	ldrb	r3, [r7, #11]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d81b      	bhi.n	8004138 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	08004119 	.word	0x08004119
 800410c:	08004131 	.word	0x08004131
 8004110:	08004121 	.word	0x08004121
 8004114:	08004129 	.word	0x08004129
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	4a0c      	ldr	r2, [pc, #48]	; (800414c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 800411c:	601a      	str	r2, [r3, #0]
      break;
 800411e:	e00f      	b.n	8004140 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004124:	601a      	str	r2, [r3, #0]
      break;
 8004126:	e00b      	b.n	8004140 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <LSM6DSL_ACC_GetSensitivity+0x84>)
 800412c:	601a      	str	r2, [r3, #0]
      break;
 800412e:	e007      	b.n	8004140 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004134:	601a      	str	r2, [r3, #0]
      break;
 8004136:	e003      	b.n	8004140 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	60fb      	str	r3, [r7, #12]
      break;
 800413e:	bf00      	nop
  }

  return ret;
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	3d79db23 	.word	0x3d79db23
 8004150:	3df9db23 	.word	0x3df9db23
 8004154:	3e79db23 	.word	0x3e79db23
 8004158:	3ef9db23 	.word	0x3ef9db23

0800415c <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	331c      	adds	r3, #28
 800416e:	f107 020b 	add.w	r2, r7, #11
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fec1 	bl	8004efc <lsm6dsl_xl_data_rate_get>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	e054      	b.n	8004230 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	2b0b      	cmp	r3, #11
 800418a:	d84c      	bhi.n	8004226 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041c5 	.word	0x080041c5
 8004198:	080041d7 	.word	0x080041d7
 800419c:	080041df 	.word	0x080041df
 80041a0:	080041e7 	.word	0x080041e7
 80041a4:	080041ef 	.word	0x080041ef
 80041a8:	080041f7 	.word	0x080041f7
 80041ac:	080041ff 	.word	0x080041ff
 80041b0:	08004207 	.word	0x08004207
 80041b4:	0800420f 	.word	0x0800420f
 80041b8:	08004217 	.word	0x08004217
 80041bc:	0800421f 	.word	0x0800421f
 80041c0:	080041cf 	.word	0x080041cf
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
      break;
 80041cc:	e02f      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	4a19      	ldr	r2, [pc, #100]	; (8004238 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80041d2:	601a      	str	r2, [r3, #0]
      break;
 80041d4:	e02b      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80041da:	601a      	str	r2, [r3, #0]
      break;
 80041dc:	e027      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	4a17      	ldr	r2, [pc, #92]	; (8004240 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80041e2:	601a      	str	r2, [r3, #0]
      break;
 80041e4:	e023      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80041ea:	601a      	str	r2, [r3, #0]
      break;
 80041ec:	e01f      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80041f2:	601a      	str	r2, [r3, #0]
      break;
 80041f4:	e01b      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80041fa:	601a      	str	r2, [r3, #0]
      break;
 80041fc:	e017      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004202:	601a      	str	r2, [r3, #0]
      break;
 8004204:	e013      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	4a12      	ldr	r2, [pc, #72]	; (8004254 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800420a:	601a      	str	r2, [r3, #0]
      break;
 800420c:	e00f      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	4a11      	ldr	r2, [pc, #68]	; (8004258 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004212:	601a      	str	r2, [r3, #0]
      break;
 8004214:	e00b      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	4a10      	ldr	r2, [pc, #64]	; (800425c <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800421a:	601a      	str	r2, [r3, #0]
      break;
 800421c:	e007      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004222:	601a      	str	r2, [r3, #0]
      break;
 8004224:	e003      	b.n	800422e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
 800422a:	60fb      	str	r3, [r7, #12]
      break;
 800422c:	bf00      	nop
  }

  return ret;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	3fcccccd 	.word	0x3fcccccd
 800423c:	41480000 	.word	0x41480000
 8004240:	41d00000 	.word	0x41d00000
 8004244:	42500000 	.word	0x42500000
 8004248:	42d00000 	.word	0x42d00000
 800424c:	43500000 	.word	0x43500000
 8004250:	43d00000 	.word	0x43d00000
 8004254:	44504000 	.word	0x44504000
 8004258:	44cf8000 	.word	0x44cf8000
 800425c:	45502000 	.word	0x45502000
 8004260:	45d02000 	.word	0x45d02000

08004264 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004276:	2b01      	cmp	r3, #1
 8004278:	d106      	bne.n	8004288 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800427a:	ed97 0a00 	vldr	s0, [r7]
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb36 	bl	80048f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004284:	4603      	mov	r3, r0
 8004286:	e005      	b.n	8004294 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004288:	ed97 0a00 	vldr	s0, [r7]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fbbb 	bl	8004a08 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004292:	4603      	mov	r3, r0
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	331c      	adds	r3, #28
 80042ae:	f107 020b 	add.w	r2, r7, #11
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fdc3 	bl	8004e40 <lsm6dsl_xl_full_scale_get>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
 80042c4:	e023      	b.n	800430e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d81b      	bhi.n	8004304 <LSM6DSL_ACC_GetFullScale+0x68>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <LSM6DSL_ACC_GetFullScale+0x38>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042f5 	.word	0x080042f5
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2202      	movs	r2, #2
 80042e8:	601a      	str	r2, [r3, #0]
      break;
 80042ea:	e00f      	b.n	800430c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2204      	movs	r2, #4
 80042f0:	601a      	str	r2, [r3, #0]
      break;
 80042f2:	e00b      	b.n	800430c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2208      	movs	r2, #8
 80042f8:	601a      	str	r2, [r3, #0]
      break;
 80042fa:	e007      	b.n	800430c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2210      	movs	r2, #16
 8004300:	601a      	str	r2, [r3, #0]
      break;
 8004302:	e003      	b.n	800430c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004304:	f04f 33ff 	mov.w	r3, #4294967295
 8004308:	60fb      	str	r3, [r7, #12]
      break;
 800430a:	bf00      	nop
  }

  return ret;
 800430c:	68fb      	ldr	r3, [r7, #12]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop

08004318 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b02      	cmp	r3, #2
 8004326:	dd0b      	ble.n	8004340 <LSM6DSL_ACC_SetFullScale+0x28>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b04      	cmp	r3, #4
 800432c:	dd06      	ble.n	800433c <LSM6DSL_ACC_SetFullScale+0x24>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b08      	cmp	r3, #8
 8004332:	dc01      	bgt.n	8004338 <LSM6DSL_ACC_SetFullScale+0x20>
 8004334:	2303      	movs	r3, #3
 8004336:	e004      	b.n	8004342 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004338:	2301      	movs	r3, #1
 800433a:	e002      	b.n	8004342 <LSM6DSL_ACC_SetFullScale+0x2a>
 800433c:	2302      	movs	r3, #2
 800433e:	e000      	b.n	8004342 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004340:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004342:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	331c      	adds	r3, #28
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fd51 	bl	8004df4 <lsm6dsl_xl_full_scale_set>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004358:	f04f 33ff 	mov.w	r3, #4294967295
 800435c:	e000      	b.n	8004360 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	331c      	adds	r3, #28
 8004376:	f107 0208 	add.w	r2, r7, #8
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 ff86 	bl	800528e <lsm6dsl_acceleration_raw_get>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004388:	f04f 33ff 	mov.w	r3, #4294967295
 800438c:	e00c      	b.n	80043a8 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800438e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004396:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800439e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	331c      	adds	r3, #28
 80043c4:	f107 0210 	add.w	r2, r7, #16
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 ff5f 	bl	800528e <lsm6dsl_acceleration_raw_get>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	e03c      	b.n	8004456 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80043dc:	f107 030c 	add.w	r3, r7, #12
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff fe74 	bl	80040d0 <LSM6DSL_ACC_GetSensitivity>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e030      	b.n	8004456 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80043f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004400:	edd7 7a03 	vldr	s15, [r7, #12]
 8004404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800440c:	ee17 2a90 	vmov	r2, s15
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004414:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004420:	edd7 7a03 	vldr	s15, [r7, #12]
 8004424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800442c:	ee17 2a90 	vmov	r2, s15
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004434:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004440:	edd7 7a03 	vldr	s15, [r7, #12]
 8004444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800444c:	ee17 2a90 	vmov	r2, s15
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e014      	b.n	800449e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f103 021c 	add.w	r2, r3, #28
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f000 fe0a 	bl	800509c <lsm6dsl_gy_data_rate_set>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	e004      	b.n	800449e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e01f      	b.n	80044fc <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f103 021c 	add.w	r2, r3, #28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	332c      	adds	r3, #44	; 0x2c
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f000 fe0d 	bl	80050e8 <lsm6dsl_gy_data_rate_get>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
 80044d8:	e010      	b.n	80044fc <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	331c      	adds	r3, #28
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fddb 	bl	800509c <lsm6dsl_gy_data_rate_set>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80044ec:	f04f 33ff 	mov.w	r3, #4294967295
 80044f0:	e004      	b.n	80044fc <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	331c      	adds	r3, #28
 8004516:	f107 020b 	add.w	r2, r7, #11
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fd7b 	bl	8005018 <lsm6dsl_gy_full_scale_get>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004528:	f04f 33ff 	mov.w	r3, #4294967295
 800452c:	e02d      	b.n	800458a <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800452e:	7afb      	ldrb	r3, [r7, #11]
 8004530:	2b06      	cmp	r3, #6
 8004532:	d825      	bhi.n	8004580 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004534:	a201      	add	r2, pc, #4	; (adr r2, 800453c <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004561 	.word	0x08004561
 8004540:	08004559 	.word	0x08004559
 8004544:	08004569 	.word	0x08004569
 8004548:	08004581 	.word	0x08004581
 800454c:	08004571 	.word	0x08004571
 8004550:	08004581 	.word	0x08004581
 8004554:	08004579 	.word	0x08004579
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 800455c:	601a      	str	r2, [r3, #0]
      break;
 800455e:	e013      	b.n	8004588 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004564:	601a      	str	r2, [r3, #0]
      break;
 8004566:	e00f      	b.n	8004588 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4a0c      	ldr	r2, [pc, #48]	; (800459c <LSM6DSL_GYRO_GetSensitivity+0x98>)
 800456c:	601a      	str	r2, [r3, #0]
      break;
 800456e:	e00b      	b.n	8004588 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4a0b      	ldr	r2, [pc, #44]	; (80045a0 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004574:	601a      	str	r2, [r3, #0]
      break;
 8004576:	e007      	b.n	8004588 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 800457c:	601a      	str	r2, [r3, #0]
      break;
 800457e:	e003      	b.n	8004588 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004580:	f04f 33ff 	mov.w	r3, #4294967295
 8004584:	60fb      	str	r3, [r7, #12]
      break;
 8004586:	bf00      	nop
  }

  return ret;
 8004588:	68fb      	ldr	r3, [r7, #12]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	408c0000 	.word	0x408c0000
 8004598:	410c0000 	.word	0x410c0000
 800459c:	418c0000 	.word	0x418c0000
 80045a0:	420c0000 	.word	0x420c0000
 80045a4:	428c0000 	.word	0x428c0000

080045a8 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	331c      	adds	r3, #28
 80045ba:	f107 020b 	add.w	r2, r7, #11
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fd91 	bl	80050e8 <lsm6dsl_gy_data_rate_get>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
 80045d0:	e04e      	b.n	8004670 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80045d2:	7afb      	ldrb	r3, [r7, #11]
 80045d4:	2b0a      	cmp	r3, #10
 80045d6:	d846      	bhi.n	8004666 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	08004617 	.word	0x08004617
 80045e8:	0800461f 	.word	0x0800461f
 80045ec:	08004627 	.word	0x08004627
 80045f0:	0800462f 	.word	0x0800462f
 80045f4:	08004637 	.word	0x08004637
 80045f8:	0800463f 	.word	0x0800463f
 80045fc:	08004647 	.word	0x08004647
 8004600:	0800464f 	.word	0x0800464f
 8004604:	08004657 	.word	0x08004657
 8004608:	0800465f 	.word	0x0800465f
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
      break;
 8004614:	e02b      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800461a:	601a      	str	r2, [r3, #0]
      break;
 800461c:	e027      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	4a16      	ldr	r2, [pc, #88]	; (800467c <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004622:	601a      	str	r2, [r3, #0]
      break;
 8004624:	e023      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800462a:	601a      	str	r2, [r3, #0]
      break;
 800462c:	e01f      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004632:	601a      	str	r2, [r3, #0]
      break;
 8004634:	e01b      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800463a:	601a      	str	r2, [r3, #0]
      break;
 800463c:	e017      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004642:	601a      	str	r2, [r3, #0]
      break;
 8004644:	e013      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4a11      	ldr	r2, [pc, #68]	; (8004690 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800464a:	601a      	str	r2, [r3, #0]
      break;
 800464c:	e00f      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4a10      	ldr	r2, [pc, #64]	; (8004694 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004652:	601a      	str	r2, [r3, #0]
      break;
 8004654:	e00b      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4a0f      	ldr	r2, [pc, #60]	; (8004698 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800465a:	601a      	str	r2, [r3, #0]
      break;
 800465c:	e007      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	4a0e      	ldr	r2, [pc, #56]	; (800469c <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004662:	601a      	str	r2, [r3, #0]
      break;
 8004664:	e003      	b.n	800466e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	60fb      	str	r3, [r7, #12]
      break;
 800466c:	bf00      	nop
  }

  return ret;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	41480000 	.word	0x41480000
 800467c:	41d00000 	.word	0x41d00000
 8004680:	42500000 	.word	0x42500000
 8004684:	42d00000 	.word	0x42d00000
 8004688:	43500000 	.word	0x43500000
 800468c:	43d00000 	.word	0x43d00000
 8004690:	44504000 	.word	0x44504000
 8004694:	44cf8000 	.word	0x44cf8000
 8004698:	45502000 	.word	0x45502000
 800469c:	45d02000 	.word	0x45d02000

080046a0 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d106      	bne.n	80046c4 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80046b6:	ed97 0a00 	vldr	s0, [r7]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa26 	bl	8004b0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80046c0:	4603      	mov	r3, r0
 80046c2:	e005      	b.n	80046d0 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80046c4:	ed97 0a00 	vldr	s0, [r7]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 faab 	bl	8004c24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80046ce:	4603      	mov	r3, r0
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	331c      	adds	r3, #28
 80046ea:	f107 020b 	add.w	r2, r7, #11
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fc91 	bl	8005018 <lsm6dsl_gy_full_scale_get>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	e030      	b.n	8004764 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004702:	7afb      	ldrb	r3, [r7, #11]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d828      	bhi.n	800475a <LSM6DSL_GYRO_GetFullScale+0x82>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004735 	.word	0x08004735
 8004714:	0800472d 	.word	0x0800472d
 8004718:	0800473d 	.word	0x0800473d
 800471c:	0800475b 	.word	0x0800475b
 8004720:	08004747 	.word	0x08004747
 8004724:	0800475b 	.word	0x0800475b
 8004728:	08004751 	.word	0x08004751
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	227d      	movs	r2, #125	; 0x7d
 8004730:	601a      	str	r2, [r3, #0]
      break;
 8004732:	e016      	b.n	8004762 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	22fa      	movs	r2, #250	; 0xfa
 8004738:	601a      	str	r2, [r3, #0]
      break;
 800473a:	e012      	b.n	8004762 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004742:	601a      	str	r2, [r3, #0]
      break;
 8004744:	e00d      	b.n	8004762 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800474c:	601a      	str	r2, [r3, #0]
      break;
 800474e:	e008      	b.n	8004762 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004756:	601a      	str	r2, [r3, #0]
      break;
 8004758:	e003      	b.n	8004762 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
 800475e:	60fb      	str	r3, [r7, #12]
      break;
 8004760:	bf00      	nop
  }

  return ret;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b7d      	cmp	r3, #125	; 0x7d
 800477a:	dd12      	ble.n	80047a2 <LSM6DSL_GYRO_SetFullScale+0x36>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2bfa      	cmp	r3, #250	; 0xfa
 8004780:	dd0d      	ble.n	800479e <LSM6DSL_GYRO_SetFullScale+0x32>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004788:	dd07      	ble.n	800479a <LSM6DSL_GYRO_SetFullScale+0x2e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004790:	dc01      	bgt.n	8004796 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004792:	2304      	movs	r3, #4
 8004794:	e006      	b.n	80047a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004796:	2306      	movs	r3, #6
 8004798:	e004      	b.n	80047a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800479a:	2302      	movs	r3, #2
 800479c:	e002      	b.n	80047a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800479e:	2300      	movs	r3, #0
 80047a0:	e000      	b.n	80047a4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80047a2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80047a4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	331c      	adds	r3, #28
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fc0c 	bl	8004fcc <lsm6dsl_gy_full_scale_set>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295
 80047be:	e000      	b.n	80047c2 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	331c      	adds	r3, #28
 80047d8:	f107 0208 	add.w	r2, r7, #8
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fd0a 	bl	80051f8 <lsm6dsl_angular_rate_raw_get>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295
 80047ee:	e00c      	b.n	800480a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80047f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80047f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004800:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	331c      	adds	r3, #28
 8004820:	f107 0210 	add.w	r2, r7, #16
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fce6 	bl	80051f8 <lsm6dsl_angular_rate_raw_get>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
 8004836:	e03c      	b.n	80048b2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004838:	f107 030c 	add.w	r3, r7, #12
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fe60 	bl	8004504 <LSM6DSL_GYRO_GetSensitivity>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	e030      	b.n	80048b2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004850:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800485c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004868:	ee17 2a90 	vmov	r2, s15
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004870:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800487c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004888:	ee17 2a90 	vmov	r2, s15
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004890:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800489c:	edd7 7a03 	vldr	s15, [r7, #12]
 80048a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048a8:	ee17 2a90 	vmov	r2, s15
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	70fb      	strb	r3, [r7, #3]
 80048c6:	4613      	mov	r3, r2
 80048c8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f103 001c 	add.w	r0, r3, #28
 80048d0:	1cba      	adds	r2, r7, #2
 80048d2:	78f9      	ldrb	r1, [r7, #3]
 80048d4:	2301      	movs	r3, #1
 80048d6:	f000 fa75 	bl	8004dc4 <lsm6dsl_write_reg>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	e000      	b.n	80048e8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80048fc:	edd7 7a00 	vldr	s15, [r7]
 8004900:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490c:	d801      	bhi.n	8004912 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800490e:	2301      	movs	r3, #1
 8004910:	e058      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004912:	edd7 7a00 	vldr	s15, [r7]
 8004916:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800491a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	d801      	bhi.n	8004928 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004924:	2302      	movs	r3, #2
 8004926:	e04d      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004928:	edd7 7a00 	vldr	s15, [r7]
 800492c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80049ec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d801      	bhi.n	800493e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800493a:	2303      	movs	r3, #3
 800493c:	e042      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800493e:	edd7 7a00 	vldr	s15, [r7]
 8004942:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80049f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494e:	d801      	bhi.n	8004954 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004950:	2304      	movs	r3, #4
 8004952:	e037      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004954:	edd7 7a00 	vldr	s15, [r7]
 8004958:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80049f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800495c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	d801      	bhi.n	800496a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004966:	2305      	movs	r3, #5
 8004968:	e02c      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800496a:	edd7 7a00 	vldr	s15, [r7]
 800496e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80049f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	d801      	bhi.n	8004980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800497c:	2306      	movs	r3, #6
 800497e:	e021      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004980:	edd7 7a00 	vldr	s15, [r7]
 8004984:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80049fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	d801      	bhi.n	8004996 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004992:	2307      	movs	r3, #7
 8004994:	e016      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004996:	edd7 7a00 	vldr	s15, [r7]
 800499a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004a00 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800499e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	d801      	bhi.n	80049ac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80049a8:	2308      	movs	r3, #8
 80049aa:	e00b      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80049ac:	edd7 7a00 	vldr	s15, [r7]
 80049b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a04 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80049b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049bc:	d801      	bhi.n	80049c2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80049be:	2309      	movs	r3, #9
 80049c0:	e000      	b.n	80049c4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80049c2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80049c4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	331c      	adds	r3, #28
 80049ca:	7bfa      	ldrb	r2, [r7, #15]
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fa6e 	bl	8004eb0 <lsm6dsl_xl_data_rate_set>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80049da:	f04f 33ff 	mov.w	r3, #4294967295
 80049de:	e000      	b.n	80049e2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	42500000 	.word	0x42500000
 80049f0:	42d00000 	.word	0x42d00000
 80049f4:	43500000 	.word	0x43500000
 80049f8:	43d00000 	.word	0x43d00000
 80049fc:	44504000 	.word	0x44504000
 8004a00:	44cf8000 	.word	0x44cf8000
 8004a04:	45502000 	.word	0x45502000

08004a08 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004a14:	edd7 7a00 	vldr	s15, [r7]
 8004a18:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a24:	d801      	bhi.n	8004a2a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e058      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a2a:	edd7 7a00 	vldr	s15, [r7]
 8004a2e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3a:	d801      	bhi.n	8004a40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e04d      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a40:	edd7 7a00 	vldr	s15, [r7]
 8004a44:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004af0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a50:	d801      	bhi.n	8004a56 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004a52:	2303      	movs	r3, #3
 8004a54:	e042      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a56:	edd7 7a00 	vldr	s15, [r7]
 8004a5a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004af4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a66:	d801      	bhi.n	8004a6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	e037      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a6c:	edd7 7a00 	vldr	s15, [r7]
 8004a70:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004af8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7c:	d801      	bhi.n	8004a82 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004a7e:	2305      	movs	r3, #5
 8004a80:	e02c      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a82:	edd7 7a00 	vldr	s15, [r7]
 8004a86:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004afc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a92:	d801      	bhi.n	8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004a94:	2306      	movs	r3, #6
 8004a96:	e021      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a98:	edd7 7a00 	vldr	s15, [r7]
 8004a9c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004b00 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa8:	d801      	bhi.n	8004aae <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004aaa:	2307      	movs	r3, #7
 8004aac:	e016      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004aae:	edd7 7a00 	vldr	s15, [r7]
 8004ab2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b04 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004abe:	d801      	bhi.n	8004ac4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	e00b      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ac4:	edd7 7a00 	vldr	s15, [r7]
 8004ac8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004b08 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad4:	d801      	bhi.n	8004ada <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004ad6:	2309      	movs	r3, #9
 8004ad8:	e000      	b.n	8004adc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ada:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	42500000 	.word	0x42500000
 8004af4:	42d00000 	.word	0x42d00000
 8004af8:	43500000 	.word	0x43500000
 8004afc:	43d00000 	.word	0x43d00000
 8004b00:	44504000 	.word	0x44504000
 8004b04:	44cf8000 	.word	0x44cf8000
 8004b08:	45502000 	.word	0x45502000

08004b0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004b18:	edd7 7a00 	vldr	s15, [r7]
 8004b1c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	d801      	bhi.n	8004b2e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e058      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b2e:	edd7 7a00 	vldr	s15, [r7]
 8004b32:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3e:	d801      	bhi.n	8004b44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e04d      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b44:	edd7 7a00 	vldr	s15, [r7]
 8004b48:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004c08 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b54:	d801      	bhi.n	8004b5a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004b56:	2303      	movs	r3, #3
 8004b58:	e042      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b5a:	edd7 7a00 	vldr	s15, [r7]
 8004b5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004c0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6a:	d801      	bhi.n	8004b70 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	e037      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b70:	edd7 7a00 	vldr	s15, [r7]
 8004b74:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004c10 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	d801      	bhi.n	8004b86 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e02c      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b86:	edd7 7a00 	vldr	s15, [r7]
 8004b8a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004c14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b96:	d801      	bhi.n	8004b9c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004b98:	2306      	movs	r3, #6
 8004b9a:	e021      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b9c:	edd7 7a00 	vldr	s15, [r7]
 8004ba0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004c18 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bac:	d801      	bhi.n	8004bb2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004bae:	2307      	movs	r3, #7
 8004bb0:	e016      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004bb2:	edd7 7a00 	vldr	s15, [r7]
 8004bb6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004c1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	d801      	bhi.n	8004bc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	e00b      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004bc8:	edd7 7a00 	vldr	s15, [r7]
 8004bcc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004c20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd8:	d801      	bhi.n	8004bde <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004bda:	2309      	movs	r3, #9
 8004bdc:	e000      	b.n	8004be0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004bde:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004be0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	331c      	adds	r3, #28
 8004be6:	7bfa      	ldrb	r2, [r7, #15]
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa56 	bl	800509c <lsm6dsl_gy_data_rate_set>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	e000      	b.n	8004bfe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	42500000 	.word	0x42500000
 8004c0c:	42d00000 	.word	0x42d00000
 8004c10:	43500000 	.word	0x43500000
 8004c14:	43d00000 	.word	0x43d00000
 8004c18:	44504000 	.word	0x44504000
 8004c1c:	44cf8000 	.word	0x44cf8000
 8004c20:	45502000 	.word	0x45502000

08004c24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004c30:	edd7 7a00 	vldr	s15, [r7]
 8004c34:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c40:	d801      	bhi.n	8004c46 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e058      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c46:	edd7 7a00 	vldr	s15, [r7]
 8004c4a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c56:	d801      	bhi.n	8004c5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e04d      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c5c:	edd7 7a00 	vldr	s15, [r7]
 8004c60:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004d0c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6c:	d801      	bhi.n	8004c72 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e042      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c72:	edd7 7a00 	vldr	s15, [r7]
 8004c76:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d10 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c82:	d801      	bhi.n	8004c88 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004c84:	2304      	movs	r3, #4
 8004c86:	e037      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c88:	edd7 7a00 	vldr	s15, [r7]
 8004c8c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004d14 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c98:	d801      	bhi.n	8004c9e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004c9a:	2305      	movs	r3, #5
 8004c9c:	e02c      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c9e:	edd7 7a00 	vldr	s15, [r7]
 8004ca2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d18 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	d801      	bhi.n	8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	e021      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004cb4:	edd7 7a00 	vldr	s15, [r7]
 8004cb8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004d1c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	d801      	bhi.n	8004cca <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004cc6:	2307      	movs	r3, #7
 8004cc8:	e016      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004cca:	edd7 7a00 	vldr	s15, [r7]
 8004cce:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004d20 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cda:	d801      	bhi.n	8004ce0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	e00b      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ce0:	edd7 7a00 	vldr	s15, [r7]
 8004ce4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004d24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf0:	d801      	bhi.n	8004cf6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004cf2:	2309      	movs	r3, #9
 8004cf4:	e000      	b.n	8004cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004cf6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	42500000 	.word	0x42500000
 8004d10:	42d00000 	.word	0x42d00000
 8004d14:	43500000 	.word	0x43500000
 8004d18:	43d00000 	.word	0x43d00000
 8004d1c:	44504000 	.word	0x44504000
 8004d20:	44cf8000 	.word	0x44cf8000
 8004d24:	45502000 	.word	0x45502000

08004d28 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	461a      	mov	r2, r3
 8004d34:	460b      	mov	r3, r1
 8004d36:	72fb      	strb	r3, [r7, #11]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	695c      	ldr	r4, [r3, #20]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	7b1b      	ldrb	r3, [r3, #12]
 8004d48:	b298      	uxth	r0, r3
 8004d4a:	7afb      	ldrb	r3, [r7, #11]
 8004d4c:	b299      	uxth	r1, r3
 8004d4e:	893b      	ldrh	r3, [r7, #8]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	47a0      	blx	r4
 8004d54:	4603      	mov	r3, r0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}

08004d5e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d5e:	b590      	push	{r4, r7, lr}
 8004d60:	b087      	sub	sp, #28
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	72fb      	strb	r3, [r7, #11]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	691c      	ldr	r4, [r3, #16]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	7b1b      	ldrb	r3, [r3, #12]
 8004d7e:	b298      	uxth	r0, r3
 8004d80:	7afb      	ldrb	r3, [r7, #11]
 8004d82:	b299      	uxth	r1, r3
 8004d84:	893b      	ldrh	r3, [r7, #8]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	47a0      	blx	r4
 8004d8a:	4603      	mov	r3, r0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd90      	pop	{r4, r7, pc}

08004d94 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	460b      	mov	r3, r1
 8004da2:	72fb      	strb	r3, [r7, #11]
 8004da4:	4613      	mov	r3, r2
 8004da6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685c      	ldr	r4, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6898      	ldr	r0, [r3, #8]
 8004db0:	893b      	ldrh	r3, [r7, #8]
 8004db2:	7af9      	ldrb	r1, [r7, #11]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	47a0      	blx	r4
 8004db8:	6178      	str	r0, [r7, #20]
  return ret;
 8004dba:	697b      	ldr	r3, [r7, #20]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd90      	pop	{r4, r7, pc}

08004dc4 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	72fb      	strb	r3, [r7, #11]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681c      	ldr	r4, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6898      	ldr	r0, [r3, #8]
 8004de0:	893b      	ldrh	r3, [r7, #8]
 8004de2:	7af9      	ldrb	r1, [r7, #11]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	47a0      	blx	r4
 8004de8:	6178      	str	r0, [r7, #20]
  return ret;
 8004dea:	697b      	ldr	r3, [r7, #20]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}

08004df4 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e00:	f107 0208 	add.w	r2, r7, #8
 8004e04:	2301      	movs	r3, #1
 8004e06:	2110      	movs	r1, #16
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff ffc3 	bl	8004d94 <lsm6dsl_read_reg>
 8004e0e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	7a3b      	ldrb	r3, [r7, #8]
 8004e20:	f362 0383 	bfi	r3, r2, #2, #2
 8004e24:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e26:	f107 0208 	add.w	r2, r7, #8
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2110      	movs	r1, #16
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ffc8 	bl	8004dc4 <lsm6dsl_write_reg>
 8004e34:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004e36:	68fb      	ldr	r3, [r7, #12]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e4a:	f107 0208 	add.w	r2, r7, #8
 8004e4e:	2301      	movs	r3, #1
 8004e50:	2110      	movs	r1, #16
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff ff9e 	bl	8004d94 <lsm6dsl_read_reg>
 8004e58:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004e5a:	7a3b      	ldrb	r3, [r7, #8]
 8004e5c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d81a      	bhi.n	8004e9c <lsm6dsl_xl_full_scale_get+0x5c>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <lsm6dsl_xl_full_scale_get+0x2c>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e7d 	.word	0x08004e7d
 8004e70:	08004e85 	.word	0x08004e85
 8004e74:	08004e8d 	.word	0x08004e8d
 8004e78:	08004e95 	.word	0x08004e95
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
      break;
 8004e82:	e00f      	b.n	8004ea4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
      break;
 8004e8a:	e00b      	b.n	8004ea4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	701a      	strb	r2, [r3, #0]
      break;
 8004e92:	e007      	b.n	8004ea4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2203      	movs	r2, #3
 8004e98:	701a      	strb	r2, [r3, #0]
      break;
 8004e9a:	e003      	b.n	8004ea4 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	701a      	strb	r2, [r3, #0]
      break;
 8004ea2:	bf00      	nop
  }

  return ret;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop

08004eb0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004ebc:	f107 0208 	add.w	r2, r7, #8
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	2110      	movs	r1, #16
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff65 	bl	8004d94 <lsm6dsl_read_reg>
 8004eca:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004ed2:	78fb      	ldrb	r3, [r7, #3]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	7a3b      	ldrb	r3, [r7, #8]
 8004edc:	f362 1307 	bfi	r3, r2, #4, #4
 8004ee0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004ee2:	f107 0208 	add.w	r2, r7, #8
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	2110      	movs	r1, #16
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff6a 	bl	8004dc4 <lsm6dsl_write_reg>
 8004ef0:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004f06:	f107 0208 	add.w	r2, r7, #8
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	2110      	movs	r1, #16
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ff40 	bl	8004d94 <lsm6dsl_read_reg>
 8004f14:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004f16:	7a3b      	ldrb	r3, [r7, #8]
 8004f18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b0b      	cmp	r3, #11
 8004f20:	d84a      	bhi.n	8004fb8 <lsm6dsl_xl_data_rate_get+0xbc>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f59 	.word	0x08004f59
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f71 	.word	0x08004f71
 8004f38:	08004f79 	.word	0x08004f79
 8004f3c:	08004f81 	.word	0x08004f81
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004f91 	.word	0x08004f91
 8004f48:	08004f99 	.word	0x08004f99
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004fa9 	.word	0x08004fa9
 8004f54:	08004fb1 	.word	0x08004fb1
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e02f      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e02b      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	701a      	strb	r2, [r3, #0]
      break;
 8004f6e:	e027      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2203      	movs	r2, #3
 8004f74:	701a      	strb	r2, [r3, #0]
      break;
 8004f76:	e023      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	701a      	strb	r2, [r3, #0]
      break;
 8004f7e:	e01f      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2205      	movs	r2, #5
 8004f84:	701a      	strb	r2, [r3, #0]
      break;
 8004f86:	e01b      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2206      	movs	r2, #6
 8004f8c:	701a      	strb	r2, [r3, #0]
      break;
 8004f8e:	e017      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2207      	movs	r2, #7
 8004f94:	701a      	strb	r2, [r3, #0]
      break;
 8004f96:	e013      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	701a      	strb	r2, [r3, #0]
      break;
 8004f9e:	e00f      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2209      	movs	r2, #9
 8004fa4:	701a      	strb	r2, [r3, #0]
      break;
 8004fa6:	e00b      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	220a      	movs	r2, #10
 8004fac:	701a      	strb	r2, [r3, #0]
      break;
 8004fae:	e007      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	220b      	movs	r2, #11
 8004fb4:	701a      	strb	r2, [r3, #0]
      break;
 8004fb6:	e003      	b.n	8004fc0 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	220c      	movs	r2, #12
 8004fbc:	701a      	strb	r2, [r3, #0]
      break;
 8004fbe:	bf00      	nop
  }

  return ret;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop

08004fcc <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004fd8:	f107 0208 	add.w	r2, r7, #8
 8004fdc:	2301      	movs	r3, #1
 8004fde:	2111      	movs	r1, #17
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fed7 	bl	8004d94 <lsm6dsl_read_reg>
 8004fe6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	7a3b      	ldrb	r3, [r7, #8]
 8004ff8:	f362 0343 	bfi	r3, r2, #1, #3
 8004ffc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	2301      	movs	r3, #1
 8005004:	2111      	movs	r1, #17
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fedc 	bl	8004dc4 <lsm6dsl_write_reg>
 800500c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005022:	f107 0208 	add.w	r2, r7, #8
 8005026:	2301      	movs	r3, #1
 8005028:	2111      	movs	r1, #17
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff feb2 	bl	8004d94 <lsm6dsl_read_reg>
 8005030:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8005032:	7a3b      	ldrb	r3, [r7, #8]
 8005034:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b06      	cmp	r3, #6
 800503c:	d824      	bhi.n	8005088 <lsm6dsl_gy_full_scale_get+0x70>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005061 	.word	0x08005061
 8005048:	08005069 	.word	0x08005069
 800504c:	08005071 	.word	0x08005071
 8005050:	08005089 	.word	0x08005089
 8005054:	08005079 	.word	0x08005079
 8005058:	08005089 	.word	0x08005089
 800505c:	08005081 	.word	0x08005081
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
      break;
 8005066:	e013      	b.n	8005090 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
      break;
 800506e:	e00f      	b.n	8005090 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2202      	movs	r2, #2
 8005074:	701a      	strb	r2, [r3, #0]
      break;
 8005076:	e00b      	b.n	8005090 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2204      	movs	r2, #4
 800507c:	701a      	strb	r2, [r3, #0]
      break;
 800507e:	e007      	b.n	8005090 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2206      	movs	r2, #6
 8005084:	701a      	strb	r2, [r3, #0]
      break;
 8005086:	e003      	b.n	8005090 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2207      	movs	r2, #7
 800508c:	701a      	strb	r2, [r3, #0]
      break;
 800508e:	bf00      	nop
  }

  return ret;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop

0800509c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80050a8:	f107 0208 	add.w	r2, r7, #8
 80050ac:	2301      	movs	r3, #1
 80050ae:	2111      	movs	r1, #17
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fe6f 	bl	8004d94 <lsm6dsl_read_reg>
 80050b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	7a3b      	ldrb	r3, [r7, #8]
 80050c8:	f362 1307 	bfi	r3, r2, #4, #4
 80050cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80050ce:	f107 0208 	add.w	r2, r7, #8
 80050d2:	2301      	movs	r3, #1
 80050d4:	2111      	movs	r1, #17
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fe74 	bl	8004dc4 <lsm6dsl_write_reg>
 80050dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050de:	68fb      	ldr	r3, [r7, #12]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80050f2:	f107 0208 	add.w	r2, r7, #8
 80050f6:	2301      	movs	r3, #1
 80050f8:	2111      	movs	r1, #17
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fe4a 	bl	8004d94 <lsm6dsl_read_reg>
 8005100:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8005102:	7a3b      	ldrb	r3, [r7, #8]
 8005104:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b0a      	cmp	r3, #10
 800510c:	d844      	bhi.n	8005198 <lsm6dsl_gy_data_rate_get+0xb0>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005141 	.word	0x08005141
 8005118:	08005149 	.word	0x08005149
 800511c:	08005151 	.word	0x08005151
 8005120:	08005159 	.word	0x08005159
 8005124:	08005161 	.word	0x08005161
 8005128:	08005169 	.word	0x08005169
 800512c:	08005171 	.word	0x08005171
 8005130:	08005179 	.word	0x08005179
 8005134:	08005181 	.word	0x08005181
 8005138:	08005189 	.word	0x08005189
 800513c:	08005191 	.word	0x08005191
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
      break;
 8005146:	e02b      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
      break;
 800514e:	e027      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2202      	movs	r2, #2
 8005154:	701a      	strb	r2, [r3, #0]
      break;
 8005156:	e023      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2203      	movs	r2, #3
 800515c:	701a      	strb	r2, [r3, #0]
      break;
 800515e:	e01f      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2204      	movs	r2, #4
 8005164:	701a      	strb	r2, [r3, #0]
      break;
 8005166:	e01b      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2205      	movs	r2, #5
 800516c:	701a      	strb	r2, [r3, #0]
      break;
 800516e:	e017      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2206      	movs	r2, #6
 8005174:	701a      	strb	r2, [r3, #0]
      break;
 8005176:	e013      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2207      	movs	r2, #7
 800517c:	701a      	strb	r2, [r3, #0]
      break;
 800517e:	e00f      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2208      	movs	r2, #8
 8005184:	701a      	strb	r2, [r3, #0]
      break;
 8005186:	e00b      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2209      	movs	r2, #9
 800518c:	701a      	strb	r2, [r3, #0]
      break;
 800518e:	e007      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	220a      	movs	r2, #10
 8005194:	701a      	strb	r2, [r3, #0]
      break;
 8005196:	e003      	b.n	80051a0 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	220b      	movs	r2, #11
 800519c:	701a      	strb	r2, [r3, #0]
      break;
 800519e:	bf00      	nop
  }

  return ret;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop

080051ac <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80051b8:	f107 0208 	add.w	r2, r7, #8
 80051bc:	2301      	movs	r3, #1
 80051be:	2112      	movs	r1, #18
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fde7 	bl	8004d94 <lsm6dsl_read_reg>
 80051c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10f      	bne.n	80051ee <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	7a3b      	ldrb	r3, [r7, #8]
 80051d8:	f362 1386 	bfi	r3, r2, #6, #1
 80051dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80051de:	f107 0208 	add.w	r2, r7, #8
 80051e2:	2301      	movs	r3, #1
 80051e4:	2112      	movs	r1, #18
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff fdec 	bl	8004dc4 <lsm6dsl_write_reg>
 80051ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005202:	f107 020c 	add.w	r2, r7, #12
 8005206:	2306      	movs	r3, #6
 8005208:	2122      	movs	r1, #34	; 0x22
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fdc2 	bl	8004d94 <lsm6dsl_read_reg>
 8005210:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005212:	7b7b      	ldrb	r3, [r7, #13]
 8005214:	b21a      	sxth	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005220:	b29b      	uxth	r3, r3
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	b29a      	uxth	r2, r3
 8005226:	7b3b      	ldrb	r3, [r7, #12]
 8005228:	b29b      	uxth	r3, r3
 800522a:	4413      	add	r3, r2
 800522c:	b29b      	uxth	r3, r3
 800522e:	b21a      	sxth	r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	3302      	adds	r3, #2
 800523a:	b212      	sxth	r2, r2
 800523c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	3302      	adds	r3, #2
 8005242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005246:	b29b      	uxth	r3, r3
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	b29a      	uxth	r2, r3
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	b29b      	uxth	r3, r3
 8005250:	4413      	add	r3, r2
 8005252:	b29a      	uxth	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	3302      	adds	r3, #2
 8005258:	b212      	sxth	r2, r2
 800525a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800525c:	7c7a      	ldrb	r2, [r7, #17]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	3304      	adds	r3, #4
 8005262:	b212      	sxth	r2, r2
 8005264:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	3304      	adds	r3, #4
 800526a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800526e:	b29b      	uxth	r3, r3
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	b29a      	uxth	r2, r3
 8005274:	7c3b      	ldrb	r3, [r7, #16]
 8005276:	b29b      	uxth	r3, r3
 8005278:	4413      	add	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	3304      	adds	r3, #4
 8005280:	b212      	sxth	r2, r2
 8005282:	801a      	strh	r2, [r3, #0]
  return ret;
 8005284:	697b      	ldr	r3, [r7, #20]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005298:	f107 020c 	add.w	r2, r7, #12
 800529c:	2306      	movs	r3, #6
 800529e:	2128      	movs	r1, #40	; 0x28
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fd77 	bl	8004d94 <lsm6dsl_read_reg>
 80052a6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80052a8:	7b7b      	ldrb	r3, [r7, #13]
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	7b3b      	ldrb	r3, [r7, #12]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	b21a      	sxth	r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	3302      	adds	r3, #2
 80052d0:	b212      	sxth	r2, r2
 80052d2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	3302      	adds	r3, #2
 80052d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4413      	add	r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	3302      	adds	r3, #2
 80052ee:	b212      	sxth	r2, r2
 80052f0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80052f2:	7c7a      	ldrb	r2, [r7, #17]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	3304      	adds	r3, #4
 80052f8:	b212      	sxth	r2, r2
 80052fa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	3304      	adds	r3, #4
 8005300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005304:	b29b      	uxth	r3, r3
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	b29a      	uxth	r2, r3
 800530a:	7c3b      	ldrb	r3, [r7, #16]
 800530c:	b29b      	uxth	r3, r3
 800530e:	4413      	add	r3, r2
 8005310:	b29a      	uxth	r2, r3
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	3304      	adds	r3, #4
 8005316:	b212      	sxth	r2, r2
 8005318:	801a      	strh	r2, [r3, #0]
  return ret;
 800531a:	697b      	ldr	r3, [r7, #20]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800532e:	2301      	movs	r3, #1
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	210f      	movs	r1, #15
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fd2d 	bl	8004d94 <lsm6dsl_read_reg>
 800533a:	60f8      	str	r0, [r7, #12]
  return ret;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	460b      	mov	r3, r1
 8005350:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005352:	f107 0208 	add.w	r2, r7, #8
 8005356:	2301      	movs	r3, #1
 8005358:	2112      	movs	r1, #18
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fd1a 	bl	8004d94 <lsm6dsl_read_reg>
 8005360:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10f      	bne.n	8005388 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	b2da      	uxtb	r2, r3
 8005370:	7a3b      	ldrb	r3, [r7, #8]
 8005372:	f362 0382 	bfi	r3, r2, #2, #1
 8005376:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005378:	f107 0208 	add.w	r2, r7, #8
 800537c:	2301      	movs	r3, #1
 800537e:	2112      	movs	r1, #18
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff fd1f 	bl	8004dc4 <lsm6dsl_write_reg>
 8005386:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800539e:	f107 0208 	add.w	r2, r7, #8
 80053a2:	2301      	movs	r3, #1
 80053a4:	210a      	movs	r1, #10
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fcf4 	bl	8004d94 <lsm6dsl_read_reg>
 80053ac:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10f      	bne.n	80053d4 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	7a3b      	ldrb	r3, [r7, #8]
 80053be:	f362 0302 	bfi	r3, r2, #0, #3
 80053c2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80053c4:	f107 0208 	add.w	r2, r7, #8
 80053c8:	2301      	movs	r3, #1
 80053ca:	210a      	movs	r1, #10
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff fcf9 	bl	8004dc4 <lsm6dsl_write_reg>
 80053d2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80053d4:	68fb      	ldr	r3, [r7, #12]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <IKS01A2_ENV_SENSOR_Init+0x24>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d032      	beq.n	8005468 <IKS01A2_ENV_SENSOR_Init+0x88>
 8005402:	e063      	b.n	80054cc <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8005404:	6838      	ldr	r0, [r7, #0]
 8005406:	f000 f931 	bl	800566c <HTS221_0_Probe>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005410:	f04f 33ff 	mov.w	r3, #4294967295
 8005414:	e098      	b.n	8005548 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005416:	4a4e      	ldr	r2, [pc, #312]	; (8005550 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	494c      	ldr	r1, [pc, #304]	; (8005554 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005428:	f107 0108 	add.w	r1, r7, #8
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005436:	f06f 0306 	mvn.w	r3, #6
 800543a:	e085      	b.n	8005548 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800543c:	7a3b      	ldrb	r3, [r7, #8]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d103      	bne.n	800544a <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800544a:	7abb      	ldrb	r3, [r7, #10]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d103      	bne.n	8005458 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f043 0304 	orr.w	r3, r3, #4
 8005456:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005458:	7a7b      	ldrb	r3, [r7, #9]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d13a      	bne.n	80054d4 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005466:	e035      	b.n	80054d4 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	f000 f9b9 	bl	80057e0 <LPS22HB_0_Probe>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 8005474:	f04f 33ff 	mov.w	r3, #4294967295
 8005478:	e066      	b.n	8005548 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800547a:	4a35      	ldr	r2, [pc, #212]	; (8005550 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4933      	ldr	r1, [pc, #204]	; (8005554 <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800548c:	f107 0108 	add.w	r1, r7, #8
 8005490:	4610      	mov	r0, r2
 8005492:	4798      	blx	r3
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800549a:	f06f 0306 	mvn.w	r3, #6
 800549e:	e053      	b.n	8005548 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80054a0:	7a3b      	ldrb	r3, [r7, #8]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d103      	bne.n	80054ae <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80054ae:	7abb      	ldrb	r3, [r7, #10]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d103      	bne.n	80054bc <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f043 0304 	orr.w	r3, r3, #4
 80054ba:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80054bc:	7a7b      	ldrb	r3, [r7, #9]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10a      	bne.n	80054d8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f043 0302 	orr.w	r3, r3, #2
 80054c8:	61bb      	str	r3, [r7, #24]
      }
      break;
 80054ca:	e005      	b.n	80054d8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80054cc:	f06f 0301 	mvn.w	r3, #1
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80054d2:	e002      	b.n	80054da <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 80054d8:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	e031      	b.n	8005548 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	e02a      	b.n	8005540 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	4013      	ands	r3, r2
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d11e      	bne.n	8005534 <IKS01A2_ENV_SENSOR_Init+0x154>
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	4013      	ands	r3, r2
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d118      	bne.n	8005534 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8005502:	4a15      	ldr	r2, [pc, #84]	; (8005558 <IKS01A2_ENV_SENSOR_Init+0x178>)
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800550a:	4814      	ldr	r0, [pc, #80]	; (800555c <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4413      	add	r3, r2
 8005514:	440b      	add	r3, r1
 8005516:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	490d      	ldr	r1, [pc, #52]	; (8005554 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800552e:	f06f 0304 	mvn.w	r3, #4
 8005532:	e009      	b.n	8005548 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3301      	adds	r3, #1
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b02      	cmp	r3, #2
 8005544:	d9d1      	bls.n	80054ea <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	; 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000204 	.word	0x20000204
 8005554:	200004b0 	.word	0x200004b0
 8005558:	20000134 	.word	0x20000134
 800555c:	200001ec 	.word	0x200001ec

08005560 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d903      	bls.n	8005578 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005570:	f06f 0301 	mvn.w	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e028      	b.n	80055ca <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005578:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	4013      	ands	r3, r2
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d11c      	bne.n	80055c4 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005592:	4812      	ldr	r0, [pc, #72]	; (80055dc <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	440b      	add	r3, r1
 800559e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	490e      	ldr	r1, [pc, #56]	; (80055e0 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055b6:	f06f 0304 	mvn.w	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e005      	b.n	80055ca <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e002      	b.n	80055ca <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80055c4:	f06f 0301 	mvn.w	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80055ca:	68fb      	ldr	r3, [r7, #12]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	2000020c 	.word	0x2000020c
 80055d8:	20000134 	.word	0x20000134
 80055dc:	200001ec 	.word	0x200001ec
 80055e0:	200004b0 	.word	0x200004b0

080055e4 <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d903      	bls.n	80055fe <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055f6:	f06f 0301 	mvn.w	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e029      	b.n	8005652 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80055fe:	4a17      	ldr	r2, [pc, #92]	; (800565c <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4013      	ands	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d11d      	bne.n	800564c <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005610:	4a13      	ldr	r2, [pc, #76]	; (8005660 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005618:	4812      	ldr	r0, [pc, #72]	; (8005664 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4413      	add	r3, r2
 8005622:	440b      	add	r3, r1
 8005624:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	490f      	ldr	r1, [pc, #60]	; (8005668 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4610      	mov	r0, r2
 8005636:	4798      	blx	r3
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800563e:	f06f 0304 	mvn.w	r3, #4
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e005      	b.n	8005652 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e002      	b.n	8005652 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800564c:	f06f 0301 	mvn.w	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	2000020c 	.word	0x2000020c
 8005660:	20000134 	.word	0x20000134
 8005664:	200001ec 	.word	0x200001ec
 8005668:	200004b0 	.word	0x200004b0

0800566c <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b090      	sub	sp, #64	; 0x40
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8005674:	2300      	movs	r3, #0
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800567c:	23bf      	movs	r3, #191	; 0xbf
 800567e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005682:	4b49      	ldr	r3, [pc, #292]	; (80057a8 <HTS221_0_Probe+0x13c>)
 8005684:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005686:	4b49      	ldr	r3, [pc, #292]	; (80057ac <HTS221_0_Probe+0x140>)
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800568a:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <HTS221_0_Probe+0x144>)
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800568e:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <HTS221_0_Probe+0x148>)
 8005690:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005692:	4b49      	ldr	r3, [pc, #292]	; (80057b8 <HTS221_0_Probe+0x14c>)
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8005696:	f107 0320 	add.w	r3, r7, #32
 800569a:	4619      	mov	r1, r3
 800569c:	4847      	ldr	r0, [pc, #284]	; (80057bc <HTS221_0_Probe+0x150>)
 800569e:	f7fb fbd7 	bl	8000e50 <HTS221_RegisterBusIO>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056a8:	f06f 0306 	mvn.w	r3, #6
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ae:	e076      	b.n	800579e <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80056b0:	f107 031f 	add.w	r3, r7, #31
 80056b4:	4619      	mov	r1, r3
 80056b6:	4841      	ldr	r0, [pc, #260]	; (80057bc <HTS221_0_Probe+0x150>)
 80056b8:	f7fb fc4f 	bl	8000f5a <HTS221_ReadID>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056c2:	f06f 0306 	mvn.w	r3, #6
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c8:	e069      	b.n	800579e <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2bbc      	cmp	r3, #188	; 0xbc
 80056ce:	d003      	beq.n	80056d8 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056d0:	f06f 0306 	mvn.w	r3, #6
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d6:	e062      	b.n	800579e <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80056d8:	f107 030c 	add.w	r3, r7, #12
 80056dc:	4619      	mov	r1, r3
 80056de:	4837      	ldr	r0, [pc, #220]	; (80057bc <HTS221_0_Probe+0x150>)
 80056e0:	f7fb fc52 	bl	8000f88 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056e4:	7b3b      	ldrb	r3, [r7, #12]
 80056e6:	461a      	mov	r2, r3
 80056e8:	7b7b      	ldrb	r3, [r7, #13]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80056ee:	7bbb      	ldrb	r3, [r7, #14]
 80056f0:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80056f2:	4313      	orrs	r3, r2
 80056f4:	4a32      	ldr	r2, [pc, #200]	; (80057c0 <HTS221_0_Probe+0x154>)
 80056f6:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 80056f8:	4b32      	ldr	r3, [pc, #200]	; (80057c4 <HTS221_0_Probe+0x158>)
 80056fa:	4a30      	ldr	r2, [pc, #192]	; (80057bc <HTS221_0_Probe+0x150>)
 80056fc:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80056fe:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <HTS221_0_Probe+0x15c>)
 8005700:	4a32      	ldr	r2, [pc, #200]	; (80057cc <HTS221_0_Probe+0x160>)
 8005702:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11d      	bne.n	8005746 <HTS221_0_Probe+0xda>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d018      	beq.n	8005746 <HTS221_0_Probe+0xda>
 8005714:	7b3b      	ldrb	r3, [r7, #12]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d115      	bne.n	8005746 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800571a:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <HTS221_0_Probe+0x164>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <HTS221_0_Probe+0x168>)
 8005720:	492d      	ldr	r1, [pc, #180]	; (80057d8 <HTS221_0_Probe+0x16c>)
 8005722:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005726:	4b28      	ldr	r3, [pc, #160]	; (80057c8 <HTS221_0_Probe+0x15c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <HTS221_0_Probe+0x158>)
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	4610      	mov	r0, r2
 8005732:	4798      	blx	r3
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800573a:	f06f 0304 	mvn.w	r3, #4
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	e001      	b.n	8005746 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005742:	2300      	movs	r3, #0
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11d      	bne.n	8005788 <HTS221_0_Probe+0x11c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <HTS221_0_Probe+0x11c>
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d115      	bne.n	8005788 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800575c:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <HTS221_0_Probe+0x164>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HTS221_0_Probe+0x168>)
 8005762:	491e      	ldr	r1, [pc, #120]	; (80057dc <HTS221_0_Probe+0x170>)
 8005764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8005768:	4b17      	ldr	r3, [pc, #92]	; (80057c8 <HTS221_0_Probe+0x15c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <HTS221_0_Probe+0x158>)
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	4610      	mov	r0, r2
 8005774:	4798      	blx	r3
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800577c:	f06f 0304 	mvn.w	r3, #4
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005782:	e001      	b.n	8005788 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005784:	2300      	movs	r3, #0
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8005788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <HTS221_0_Probe+0x132>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005798:	f06f 0304 	mvn.w	r3, #4
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3740      	adds	r7, #64	; 0x40
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	08000a7d 	.word	0x08000a7d
 80057ac:	08000af9 	.word	0x08000af9
 80057b0:	08000bad 	.word	0x08000bad
 80057b4:	08000b49 	.word	0x08000b49
 80057b8:	08000c11 	.word	0x08000c11
 80057bc:	20000214 	.word	0x20000214
 80057c0:	2000020c 	.word	0x2000020c
 80057c4:	200004b0 	.word	0x200004b0
 80057c8:	20000204 	.word	0x20000204
 80057cc:	20000004 	.word	0x20000004
 80057d0:	20000134 	.word	0x20000134
 80057d4:	200001ec 	.word	0x200001ec
 80057d8:	20000028 	.word	0x20000028
 80057dc:	20000014 	.word	0x20000014

080057e0 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b090      	sub	sp, #64	; 0x40
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 80057ec:	2300      	movs	r3, #0
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 80057f0:	23bb      	movs	r3, #187	; 0xbb
 80057f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80057f6:	4b4a      	ldr	r3, [pc, #296]	; (8005920 <LPS22HB_0_Probe+0x140>)
 80057f8:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80057fa:	4b4a      	ldr	r3, [pc, #296]	; (8005924 <LPS22HB_0_Probe+0x144>)
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80057fe:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <LPS22HB_0_Probe+0x148>)
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005802:	4b4a      	ldr	r3, [pc, #296]	; (800592c <LPS22HB_0_Probe+0x14c>)
 8005804:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005806:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <LPS22HB_0_Probe+0x150>)
 8005808:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800580a:	f107 0320 	add.w	r3, r7, #32
 800580e:	4619      	mov	r1, r3
 8005810:	4848      	ldr	r0, [pc, #288]	; (8005934 <LPS22HB_0_Probe+0x154>)
 8005812:	f7fc f93b 	bl	8001a8c <LPS22HB_RegisterBusIO>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800581c:	f06f 0306 	mvn.w	r3, #6
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005822:	e078      	b.n	8005916 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 8005824:	f107 031f 	add.w	r3, r7, #31
 8005828:	4619      	mov	r1, r3
 800582a:	4842      	ldr	r0, [pc, #264]	; (8005934 <LPS22HB_0_Probe+0x154>)
 800582c:	f7fc f9d3 	bl	8001bd6 <LPS22HB_ReadID>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005836:	f06f 0306 	mvn.w	r3, #6
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583c:	e06b      	b.n	8005916 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800583e:	7ffb      	ldrb	r3, [r7, #31]
 8005840:	2bb1      	cmp	r3, #177	; 0xb1
 8005842:	d003      	beq.n	800584c <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005844:	f06f 0306 	mvn.w	r3, #6
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584a:	e064      	b.n	8005916 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800584c:	f107 030c 	add.w	r3, r7, #12
 8005850:	4619      	mov	r1, r3
 8005852:	4838      	ldr	r0, [pc, #224]	; (8005934 <LPS22HB_0_Probe+0x154>)
 8005854:	f7fc f9d6 	bl	8001c04 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005858:	7b3b      	ldrb	r3, [r7, #12]
 800585a:	461a      	mov	r2, r3
 800585c:	7b7b      	ldrb	r3, [r7, #13]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8005866:	4313      	orrs	r3, r2
 8005868:	4a33      	ldr	r2, [pc, #204]	; (8005938 <LPS22HB_0_Probe+0x158>)
 800586a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800586c:	4b33      	ldr	r3, [pc, #204]	; (800593c <LPS22HB_0_Probe+0x15c>)
 800586e:	4a31      	ldr	r2, [pc, #196]	; (8005934 <LPS22HB_0_Probe+0x154>)
 8005870:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8005872:	4b33      	ldr	r3, [pc, #204]	; (8005940 <LPS22HB_0_Probe+0x160>)
 8005874:	4a33      	ldr	r2, [pc, #204]	; (8005944 <LPS22HB_0_Probe+0x164>)
 8005876:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11e      	bne.n	80058bc <LPS22HB_0_Probe+0xdc>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <LPS22HB_0_Probe+0xdc>
 8005888:	7b3b      	ldrb	r3, [r7, #12]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d116      	bne.n	80058bc <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800588e:	4b2e      	ldr	r3, [pc, #184]	; (8005948 <LPS22HB_0_Probe+0x168>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4a2e      	ldr	r2, [pc, #184]	; (800594c <LPS22HB_0_Probe+0x16c>)
 8005894:	3303      	adds	r3, #3
 8005896:	492e      	ldr	r1, [pc, #184]	; (8005950 <LPS22HB_0_Probe+0x170>)
 8005898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800589c:	4b28      	ldr	r3, [pc, #160]	; (8005940 <LPS22HB_0_Probe+0x160>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a26      	ldr	r2, [pc, #152]	; (800593c <LPS22HB_0_Probe+0x15c>)
 80058a4:	6852      	ldr	r2, [r2, #4]
 80058a6:	4610      	mov	r0, r2
 80058a8:	4798      	blx	r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058b0:	f06f 0304 	mvn.w	r3, #4
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	e001      	b.n	80058bc <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 80058bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11e      	bne.n	8005900 <LPS22HB_0_Probe+0x120>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d019      	beq.n	8005900 <LPS22HB_0_Probe+0x120>
 80058cc:	7b7b      	ldrb	r3, [r7, #13]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d116      	bne.n	8005900 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <LPS22HB_0_Probe+0x168>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	4a1d      	ldr	r2, [pc, #116]	; (800594c <LPS22HB_0_Probe+0x16c>)
 80058d8:	3303      	adds	r3, #3
 80058da:	491e      	ldr	r1, [pc, #120]	; (8005954 <LPS22HB_0_Probe+0x174>)
 80058dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <LPS22HB_0_Probe+0x160>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a15      	ldr	r2, [pc, #84]	; (800593c <LPS22HB_0_Probe+0x15c>)
 80058e8:	6852      	ldr	r2, [r2, #4]
 80058ea:	4610      	mov	r0, r2
 80058ec:	4798      	blx	r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058f4:	f06f 0304 	mvn.w	r3, #4
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fa:	e001      	b.n	8005900 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <LPS22HB_0_Probe+0x136>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005910:	f06f 0304 	mvn.w	r3, #4
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8005916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005918:	4618      	mov	r0, r3
 800591a:	3740      	adds	r7, #64	; 0x40
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	08000a7d 	.word	0x08000a7d
 8005924:	08000af9 	.word	0x08000af9
 8005928:	08000bad 	.word	0x08000bad
 800592c:	08000b49 	.word	0x08000b49
 8005930:	08000c11 	.word	0x08000c11
 8005934:	20000240 	.word	0x20000240
 8005938:	2000020c 	.word	0x2000020c
 800593c:	200004b0 	.word	0x200004b0
 8005940:	20000204 	.word	0x20000204
 8005944:	2000003c 	.word	0x2000003c
 8005948:	20000134 	.word	0x20000134
 800594c:	200001ec 	.word	0x200001ec
 8005950:	20000060 	.word	0x20000060
 8005954:	2000004c 	.word	0x2000004c

08005958 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08e      	sub	sp, #56	; 0x38
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005966:	2301      	movs	r3, #1
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d06e      	beq.n	8005a52 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b02      	cmp	r3, #2
 8005978:	f200 809d 	bhi.w	8005ab6 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d032      	beq.n	80059ee <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005988:	e095      	b.n	8005ab6 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800598a:	6838      	ldr	r0, [r7, #0]
 800598c:	f000 f966 	bl	8005c5c <LSM6DSL_0_Probe>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005996:	f04f 33ff 	mov.w	r3, #4294967295
 800599a:	e0cc      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800599c:	4a68      	ldr	r2, [pc, #416]	; (8005b40 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	4967      	ldr	r1, [pc, #412]	; (8005b44 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059ae:	f107 010c 	add.w	r1, r7, #12
 80059b2:	4610      	mov	r0, r2
 80059b4:	4798      	blx	r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80059bc:	f06f 0306 	mvn.w	r3, #6
 80059c0:	e0b9      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80059c2:	7b3b      	ldrb	r3, [r7, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d103      	bne.n	80059d0 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	f043 0302 	orr.w	r3, r3, #2
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80059d0:	7b7b      	ldrb	r3, [r7, #13]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d103      	bne.n	80059de <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d16c      	bne.n	8005abe <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80059ec:	e067      	b.n	8005abe <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80059ee:	6838      	ldr	r0, [r7, #0]
 80059f0:	f000 f9f0 	bl	8005dd4 <LSM303AGR_ACC_0_Probe>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	e09a      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005a00:	4a4f      	ldr	r2, [pc, #316]	; (8005b40 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	494e      	ldr	r1, [pc, #312]	; (8005b44 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a12:	f107 010c 	add.w	r1, r7, #12
 8005a16:	4610      	mov	r0, r2
 8005a18:	4798      	blx	r3
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a20:	f06f 0306 	mvn.w	r3, #6
 8005a24:	e087      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a26:	7b3b      	ldrb	r3, [r7, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d103      	bne.n	8005a34 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	f043 0302 	orr.w	r3, r3, #2
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005a34:	7b7b      	ldrb	r3, [r7, #13]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d103      	bne.n	8005a42 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d13c      	bne.n	8005ac2 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	f043 0304 	orr.w	r3, r3, #4
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005a50:	e037      	b.n	8005ac2 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005a52:	6838      	ldr	r0, [r7, #0]
 8005a54:	f000 fa62 	bl	8005f1c <LSM303AGR_MAG_0_Probe>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a62:	e068      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005a64:	4a36      	ldr	r2, [pc, #216]	; (8005b40 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	4935      	ldr	r1, [pc, #212]	; (8005b44 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a76:	f107 010c 	add.w	r1, r7, #12
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4798      	blx	r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a84:	f06f 0306 	mvn.w	r3, #6
 8005a88:	e055      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a8a:	7b3b      	ldrb	r3, [r7, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d103      	bne.n	8005a98 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	f043 0302 	orr.w	r3, r3, #2
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005a98:	7b7b      	ldrb	r3, [r7, #13]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d103      	bne.n	8005aa6 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	f043 0301 	orr.w	r3, r3, #1
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d10c      	bne.n	8005ac6 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005ab4:	e007      	b.n	8005ac6 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005ab6:	f06f 0301 	mvn.w	r3, #1
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005abc:	e004      	b.n	8005ac8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005ac6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	e031      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad6:	e02a      	b.n	8005b2e <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	4013      	ands	r3, r2
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d11e      	bne.n	8005b22 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	4013      	ands	r3, r2
 8005aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d118      	bne.n	8005b22 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005af0:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005af8:	4814      	ldr	r0, [pc, #80]	; (8005b4c <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	440b      	add	r3, r1
 8005b04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	490e      	ldr	r1, [pc, #56]	; (8005b44 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b12:	4610      	mov	r0, r2
 8005b14:	4798      	blx	r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005b1c:	f06f 0304 	mvn.w	r3, #4
 8005b20:	e009      	b.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d9d1      	bls.n	8005ad8 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3738      	adds	r7, #56	; 0x38
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000290 	.word	0x20000290
 8005b44:	200004b8 	.word	0x200004b8
 8005b48:	20000148 	.word	0x20000148
 8005b4c:	2000026c 	.word	0x2000026c

08005b50 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d903      	bls.n	8005b68 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b60:	f06f 0301 	mvn.w	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e028      	b.n	8005bba <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005b68:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4013      	ands	r3, r2
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d11c      	bne.n	8005bb4 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b82:	4812      	ldr	r0, [pc, #72]	; (8005bcc <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	490e      	ldr	r1, [pc, #56]	; (8005bd0 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ba6:	f06f 0304 	mvn.w	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e005      	b.n	8005bba <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e002      	b.n	8005bba <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005bb4:	f06f 0301 	mvn.w	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	2000029c 	.word	0x2000029c
 8005bc8:	20000148 	.word	0x20000148
 8005bcc:	2000026c 	.word	0x2000026c
 8005bd0:	200004b8 	.word	0x200004b8

08005bd4 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d903      	bls.n	8005bee <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005be6:	f06f 0301 	mvn.w	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e029      	b.n	8005c42 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d11d      	bne.n	8005c3c <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005c00:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c08:	4812      	ldr	r0, [pc, #72]	; (8005c54 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	440b      	add	r3, r1
 8005c14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	490f      	ldr	r1, [pc, #60]	; (8005c58 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4610      	mov	r0, r2
 8005c26:	4798      	blx	r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c2e:	f06f 0304 	mvn.w	r3, #4
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e005      	b.n	8005c42 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e002      	b.n	8005c42 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005c3c:	f06f 0301 	mvn.w	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005c42:	697b      	ldr	r3, [r7, #20]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2000029c 	.word	0x2000029c
 8005c50:	20000148 	.word	0x20000148
 8005c54:	2000026c 	.word	0x2000026c
 8005c58:	200004b8 	.word	0x200004b8

08005c5c <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b092      	sub	sp, #72	; 0x48
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005c6c:	23d7      	movs	r3, #215	; 0xd7
 8005c6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005c72:	4b4a      	ldr	r3, [pc, #296]	; (8005d9c <LSM6DSL_0_Probe+0x140>)
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005c76:	4b4a      	ldr	r3, [pc, #296]	; (8005da0 <LSM6DSL_0_Probe+0x144>)
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005c7a:	4b4a      	ldr	r3, [pc, #296]	; (8005da4 <LSM6DSL_0_Probe+0x148>)
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005c7e:	4b4a      	ldr	r3, [pc, #296]	; (8005da8 <LSM6DSL_0_Probe+0x14c>)
 8005c80:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005c82:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <LSM6DSL_0_Probe+0x150>)
 8005c84:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4848      	ldr	r0, [pc, #288]	; (8005db0 <LSM6DSL_0_Probe+0x154>)
 8005c8e:	f7fe f891 	bl	8003db4 <LSM6DSL_RegisterBusIO>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c98:	f06f 0306 	mvn.w	r3, #6
 8005c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c9e:	e077      	b.n	8005d90 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005ca0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4842      	ldr	r0, [pc, #264]	; (8005db0 <LSM6DSL_0_Probe+0x154>)
 8005ca8:	f7fe f97a 	bl	8003fa0 <LSM6DSL_ReadID>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cb2:	f06f 0306 	mvn.w	r3, #6
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	e06a      	b.n	8005d90 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cbe:	2b6a      	cmp	r3, #106	; 0x6a
 8005cc0:	d003      	beq.n	8005cca <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cc2:	f06f 0306 	mvn.w	r3, #6
 8005cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc8:	e062      	b.n	8005d90 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4837      	ldr	r0, [pc, #220]	; (8005db0 <LSM6DSL_0_Probe+0x154>)
 8005cd2:	f7fe f97b 	bl	8003fcc <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005cd6:	7a7b      	ldrb	r3, [r7, #9]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	7a3b      	ldrb	r3, [r7, #8]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	7abb      	ldrb	r3, [r7, #10]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	4a33      	ldr	r2, [pc, #204]	; (8005db4 <LSM6DSL_0_Probe+0x158>)
 8005ce8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005cea:	4b33      	ldr	r3, [pc, #204]	; (8005db8 <LSM6DSL_0_Probe+0x15c>)
 8005cec:	4a30      	ldr	r2, [pc, #192]	; (8005db0 <LSM6DSL_0_Probe+0x154>)
 8005cee:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005cf0:	4b32      	ldr	r3, [pc, #200]	; (8005dbc <LSM6DSL_0_Probe+0x160>)
 8005cf2:	4a33      	ldr	r2, [pc, #204]	; (8005dc0 <LSM6DSL_0_Probe+0x164>)
 8005cf4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d11d      	bne.n	8005d38 <LSM6DSL_0_Probe+0xdc>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <LSM6DSL_0_Probe+0xdc>
 8005d06:	7a7b      	ldrb	r3, [r7, #9]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d115      	bne.n	8005d38 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <LSM6DSL_0_Probe+0x168>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a2d      	ldr	r2, [pc, #180]	; (8005dc8 <LSM6DSL_0_Probe+0x16c>)
 8005d12:	492e      	ldr	r1, [pc, #184]	; (8005dcc <LSM6DSL_0_Probe+0x170>)
 8005d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005d18:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <LSM6DSL_0_Probe+0x160>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <LSM6DSL_0_Probe+0x15c>)
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	4610      	mov	r0, r2
 8005d24:	4798      	blx	r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d2c:	f06f 0304 	mvn.w	r3, #4
 8005d30:	647b      	str	r3, [r7, #68]	; 0x44
 8005d32:	e001      	b.n	8005d38 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11d      	bne.n	8005d7a <LSM6DSL_0_Probe+0x11e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d018      	beq.n	8005d7a <LSM6DSL_0_Probe+0x11e>
 8005d48:	7a3b      	ldrb	r3, [r7, #8]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d115      	bne.n	8005d7a <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005d4e:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <LSM6DSL_0_Probe+0x168>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <LSM6DSL_0_Probe+0x16c>)
 8005d54:	491e      	ldr	r1, [pc, #120]	; (8005dd0 <LSM6DSL_0_Probe+0x174>)
 8005d56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005d5a:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <LSM6DSL_0_Probe+0x160>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <LSM6DSL_0_Probe+0x15c>)
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d6e:	f06f 0304 	mvn.w	r3, #4
 8005d72:	647b      	str	r3, [r7, #68]	; 0x44
 8005d74:	e001      	b.n	8005d7a <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <LSM6DSL_0_Probe+0x134>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d8a:	f06f 0304 	mvn.w	r3, #4
 8005d8e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3748      	adds	r7, #72	; 0x48
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08000a7d 	.word	0x08000a7d
 8005da0:	08000af9 	.word	0x08000af9
 8005da4:	08000bad 	.word	0x08000bad
 8005da8:	08000b49 	.word	0x08000b49
 8005dac:	08000c11 	.word	0x08000c11
 8005db0:	200002a8 	.word	0x200002a8
 8005db4:	2000029c 	.word	0x2000029c
 8005db8:	200004b8 	.word	0x200004b8
 8005dbc:	20000290 	.word	0x20000290
 8005dc0:	200000dc 	.word	0x200000dc
 8005dc4:	20000148 	.word	0x20000148
 8005dc8:	2000026c 	.word	0x2000026c
 8005dcc:	20000110 	.word	0x20000110
 8005dd0:	200000ec 	.word	0x200000ec

08005dd4 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b092      	sub	sp, #72	; 0x48
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005de0:	2300      	movs	r3, #0
 8005de2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005de4:	2333      	movs	r3, #51	; 0x33
 8005de6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <LSM303AGR_ACC_0_Probe+0x114>)
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005dee:	4b3f      	ldr	r3, [pc, #252]	; (8005eec <LSM303AGR_ACC_0_Probe+0x118>)
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005df2:	4b3f      	ldr	r3, [pc, #252]	; (8005ef0 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005df6:	4b3f      	ldr	r3, [pc, #252]	; (8005ef4 <LSM303AGR_ACC_0_Probe+0x120>)
 8005df8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <LSM303AGR_ACC_0_Probe+0x124>)
 8005dfc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e02:	4619      	mov	r1, r3
 8005e04:	483d      	ldr	r0, [pc, #244]	; (8005efc <LSM303AGR_ACC_0_Probe+0x128>)
 8005e06:	f7fc fc1f 	bl	8002648 <LSM303AGR_ACC_RegisterBusIO>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e10:	f06f 0306 	mvn.w	r3, #6
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
 8005e16:	e062      	b.n	8005ede <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005e18:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4837      	ldr	r0, [pc, #220]	; (8005efc <LSM303AGR_ACC_0_Probe+0x128>)
 8005e20:	f7fc fcd3 	bl	80027ca <LSM303AGR_ACC_ReadID>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e2a:	f06f 0306 	mvn.w	r3, #6
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e30:	e055      	b.n	8005ede <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e36:	2b33      	cmp	r3, #51	; 0x33
 8005e38:	d003      	beq.n	8005e42 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e3a:	f06f 0306 	mvn.w	r3, #6
 8005e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e40:	e04d      	b.n	8005ede <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	4619      	mov	r1, r3
 8005e48:	482c      	ldr	r0, [pc, #176]	; (8005efc <LSM303AGR_ACC_0_Probe+0x128>)
 8005e4a:	f7fc fcd5 	bl	80027f8 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e4e:	7a7b      	ldrb	r3, [r7, #9]
 8005e50:	461a      	mov	r2, r3
 8005e52:	7a3b      	ldrb	r3, [r7, #8]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005e58:	7abb      	ldrb	r3, [r7, #10]
 8005e5a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005e60:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005e62:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <LSM303AGR_ACC_0_Probe+0x130>)
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <LSM303AGR_ACC_0_Probe+0x128>)
 8005e66:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005e68:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <LSM303AGR_ACC_0_Probe+0x134>)
 8005e6a:	4a28      	ldr	r2, [pc, #160]	; (8005f0c <LSM303AGR_ACC_0_Probe+0x138>)
 8005e6c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11e      	bne.n	8005eb2 <LSM303AGR_ACC_0_Probe+0xde>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d019      	beq.n	8005eb2 <LSM303AGR_ACC_0_Probe+0xde>
 8005e7e:	7a3b      	ldrb	r3, [r7, #8]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d116      	bne.n	8005eb2 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e84:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a22      	ldr	r2, [pc, #136]	; (8005f14 <LSM303AGR_ACC_0_Probe+0x140>)
 8005e8a:	3303      	adds	r3, #3
 8005e8c:	4922      	ldr	r1, [pc, #136]	; (8005f18 <LSM303AGR_ACC_0_Probe+0x144>)
 8005e8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <LSM303AGR_ACC_0_Probe+0x134>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <LSM303AGR_ACC_0_Probe+0x130>)
 8005e9a:	6852      	ldr	r2, [r2, #4]
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ea6:	f06f 0304 	mvn.w	r3, #4
 8005eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8005eac:	e001      	b.n	8005eb2 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <LSM303AGR_ACC_0_Probe+0xf4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ec2:	f06f 0304 	mvn.w	r3, #4
 8005ec6:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d107      	bne.n	8005ede <LSM303AGR_ACC_0_Probe+0x10a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ed8:	f06f 0304 	mvn.w	r3, #4
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3748      	adds	r7, #72	; 0x48
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	08000a7d 	.word	0x08000a7d
 8005eec:	08000af9 	.word	0x08000af9
 8005ef0:	08000bad 	.word	0x08000bad
 8005ef4:	08000b49 	.word	0x08000b49
 8005ef8:	08000c11 	.word	0x08000c11
 8005efc:	200002d8 	.word	0x200002d8
 8005f00:	2000029c 	.word	0x2000029c
 8005f04:	200004b8 	.word	0x200004b8
 8005f08:	20000290 	.word	0x20000290
 8005f0c:	20000074 	.word	0x20000074
 8005f10:	20000148 	.word	0x20000148
 8005f14:	2000026c 	.word	0x2000026c
 8005f18:	20000084 	.word	0x20000084

08005f1c <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b092      	sub	sp, #72	; 0x48
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005f28:	2300      	movs	r3, #0
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005f2c:	233d      	movs	r3, #61	; 0x3d
 8005f2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005f32:	4b3f      	ldr	r3, [pc, #252]	; (8006030 <LSM303AGR_MAG_0_Probe+0x114>)
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005f36:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <LSM303AGR_MAG_0_Probe+0x118>)
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	; (800603c <LSM303AGR_MAG_0_Probe+0x120>)
 8005f40:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <LSM303AGR_MAG_0_Probe+0x124>)
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	483d      	ldr	r0, [pc, #244]	; (8006044 <LSM303AGR_MAG_0_Probe+0x128>)
 8005f4e:	f7fc ff41 	bl	8002dd4 <LSM303AGR_MAG_RegisterBusIO>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f58:	f06f 0306 	mvn.w	r3, #6
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5e:	e062      	b.n	8006026 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005f60:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f64:	4619      	mov	r1, r3
 8005f66:	4837      	ldr	r0, [pc, #220]	; (8006044 <LSM303AGR_MAG_0_Probe+0x128>)
 8005f68:	f7fc ffeb 	bl	8002f42 <LSM303AGR_MAG_ReadID>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f72:	f06f 0306 	mvn.w	r3, #6
 8005f76:	647b      	str	r3, [r7, #68]	; 0x44
 8005f78:	e055      	b.n	8006026 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d003      	beq.n	8005f8a <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f82:	f06f 0306 	mvn.w	r3, #6
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	e04d      	b.n	8006026 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	4619      	mov	r1, r3
 8005f90:	482c      	ldr	r0, [pc, #176]	; (8006044 <LSM303AGR_MAG_0_Probe+0x128>)
 8005f92:	f7fc ffed 	bl	8002f70 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f96:	7a7b      	ldrb	r3, [r7, #9]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	7a3b      	ldrb	r3, [r7, #8]
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005fa0:	7abb      	ldrb	r3, [r7, #10]
 8005fa2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a28      	ldr	r2, [pc, #160]	; (8006048 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005fa8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005faa:	4b28      	ldr	r3, [pc, #160]	; (800604c <LSM303AGR_MAG_0_Probe+0x130>)
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <LSM303AGR_MAG_0_Probe+0x128>)
 8005fae:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <LSM303AGR_MAG_0_Probe+0x134>)
 8005fb2:	4a28      	ldr	r2, [pc, #160]	; (8006054 <LSM303AGR_MAG_0_Probe+0x138>)
 8005fb4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11e      	bne.n	8005ffa <LSM303AGR_MAG_0_Probe+0xde>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d019      	beq.n	8005ffa <LSM303AGR_MAG_0_Probe+0xde>
 8005fc6:	7abb      	ldrb	r3, [r7, #10]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d116      	bne.n	8005ffa <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005fcc:	4b22      	ldr	r3, [pc, #136]	; (8006058 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	4a22      	ldr	r2, [pc, #136]	; (800605c <LSM303AGR_MAG_0_Probe+0x140>)
 8005fd2:	3306      	adds	r3, #6
 8005fd4:	4922      	ldr	r1, [pc, #136]	; (8006060 <LSM303AGR_MAG_0_Probe+0x144>)
 8005fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <LSM303AGR_MAG_0_Probe+0x134>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1a      	ldr	r2, [pc, #104]	; (800604c <LSM303AGR_MAG_0_Probe+0x130>)
 8005fe2:	6892      	ldr	r2, [r2, #8]
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fee:	f06f 0304 	mvn.w	r3, #4
 8005ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff4:	e001      	b.n	8005ffa <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <LSM303AGR_MAG_0_Probe+0xf4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800600a:	f06f 0304 	mvn.w	r3, #4
 800600e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <LSM303AGR_MAG_0_Probe+0x10a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006020:	f06f 0304 	mvn.w	r3, #4
 8006024:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006028:	4618      	mov	r0, r3
 800602a:	3748      	adds	r7, #72	; 0x48
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08000a7d 	.word	0x08000a7d
 8006034:	08000af9 	.word	0x08000af9
 8006038:	08000bad 	.word	0x08000bad
 800603c:	08000b49 	.word	0x08000b49
 8006040:	08000c11 	.word	0x08000c11
 8006044:	20000304 	.word	0x20000304
 8006048:	2000029c 	.word	0x2000029c
 800604c:	200004b8 	.word	0x200004b8
 8006050:	20000290 	.word	0x20000290
 8006054:	200000a8 	.word	0x200000a8
 8006058:	20000148 	.word	0x20000148
 800605c:	2000026c 	.word	0x2000026c
 8006060:	200000b8 	.word	0x200000b8

08006064 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800606e:	2003      	movs	r0, #3
 8006070:	f000 f942 	bl	80062f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006074:	2000      	movs	r0, #0
 8006076:	f000 f80d 	bl	8006094 <HAL_InitTick>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	71fb      	strb	r3, [r7, #7]
 8006084:	e001      	b.n	800608a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006086:	f7fa fc0b 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800608a:	79fb      	ldrb	r3, [r7, #7]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80060a0:	4b17      	ldr	r3, [pc, #92]	; (8006100 <HAL_InitTick+0x6c>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d023      	beq.n	80060f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <HAL_InitTick+0x70>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <HAL_InitTick+0x6c>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	4619      	mov	r1, r3
 80060b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f941 	bl	8006346 <HAL_SYSTICK_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d809      	bhi.n	80060e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060d0:	2200      	movs	r2, #0
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	f000 f919 	bl	800630e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <HAL_InitTick+0x74>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e007      	b.n	80060f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
 80060e8:	e004      	b.n	80060f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
 80060ee:	e001      	b.n	80060f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000160 	.word	0x20000160
 8006104:	20000000 	.word	0x20000000
 8006108:	2000015c 	.word	0x2000015c

0800610c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_IncTick+0x20>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <HAL_IncTick+0x24>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4413      	add	r3, r2
 800611c:	4a04      	ldr	r2, [pc, #16]	; (8006130 <HAL_IncTick+0x24>)
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000160 	.word	0x20000160
 8006130:	200004c4 	.word	0x200004c4

08006134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return uwTick;
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_GetTick+0x14>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	200004c4 	.word	0x200004c4

0800614c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006154:	f7ff ffee 	bl	8006134 <HAL_GetTick>
 8006158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d005      	beq.n	8006172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <HAL_Delay+0x44>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006172:	bf00      	nop
 8006174:	f7ff ffde 	bl	8006134 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	429a      	cmp	r2, r3
 8006182:	d8f7      	bhi.n	8006174 <HAL_Delay+0x28>
  {
  }
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000160 	.word	0x20000160

08006194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <__NVIC_SetPriorityGrouping+0x44>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061b0:	4013      	ands	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061c6:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <__NVIC_SetPriorityGrouping+0x44>)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	60d3      	str	r3, [r2, #12]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <__NVIC_GetPriorityGrouping+0x18>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	f003 0307 	and.w	r3, r3, #7
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	e000ed00 	.word	0xe000ed00

080061f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	6039      	str	r1, [r7, #0]
 8006202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db0a      	blt.n	8006222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	490c      	ldr	r1, [pc, #48]	; (8006244 <__NVIC_SetPriority+0x4c>)
 8006212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006216:	0112      	lsls	r2, r2, #4
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	440b      	add	r3, r1
 800621c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006220:	e00a      	b.n	8006238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	4908      	ldr	r1, [pc, #32]	; (8006248 <__NVIC_SetPriority+0x50>)
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	3b04      	subs	r3, #4
 8006230:	0112      	lsls	r2, r2, #4
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	440b      	add	r3, r1
 8006236:	761a      	strb	r2, [r3, #24]
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	e000e100 	.word	0xe000e100
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f1c3 0307 	rsb	r3, r3, #7
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf28      	it	cs
 800626a:	2304      	movcs	r3, #4
 800626c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3304      	adds	r3, #4
 8006272:	2b06      	cmp	r3, #6
 8006274:	d902      	bls.n	800627c <NVIC_EncodePriority+0x30>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3b03      	subs	r3, #3
 800627a:	e000      	b.n	800627e <NVIC_EncodePriority+0x32>
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43da      	mvns	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	401a      	ands	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006294:	f04f 31ff 	mov.w	r1, #4294967295
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	43d9      	mvns	r1, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a4:	4313      	orrs	r3, r2
         );
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062c4:	d301      	bcc.n	80062ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062c6:	2301      	movs	r3, #1
 80062c8:	e00f      	b.n	80062ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <SysTick_Config+0x40>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062d2:	210f      	movs	r1, #15
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	f7ff ff8e 	bl	80061f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <SysTick_Config+0x40>)
 80062de:	2200      	movs	r2, #0
 80062e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062e2:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <SysTick_Config+0x40>)
 80062e4:	2207      	movs	r2, #7
 80062e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	e000e010 	.word	0xe000e010

080062f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff47 	bl	8006194 <__NVIC_SetPriorityGrouping>
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	4603      	mov	r3, r0
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006320:	f7ff ff5c 	bl	80061dc <__NVIC_GetPriorityGrouping>
 8006324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f7ff ff8e 	bl	800624c <NVIC_EncodePriority>
 8006330:	4602      	mov	r2, r0
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff5d 	bl	80061f8 <__NVIC_SetPriority>
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff ffb0 	bl	80062b4 <SysTick_Config>
 8006354:	4603      	mov	r3, r0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800636e:	e17f      	b.n	8006670 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	2101      	movs	r1, #1
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	4013      	ands	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 8171 	beq.w	800666a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	2b01      	cmp	r3, #1
 8006392:	d005      	beq.n	80063a0 <HAL_GPIO_Init+0x40>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d130      	bne.n	8006402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	2203      	movs	r2, #3
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4013      	ands	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063d6:	2201      	movs	r2, #1
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43db      	mvns	r3, r3
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4013      	ands	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 0201 	and.w	r2, r3, #1
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d118      	bne.n	8006440 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006414:	2201      	movs	r2, #1
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	43db      	mvns	r3, r3
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4013      	ands	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	08db      	lsrs	r3, r3, #3
 800642a:	f003 0201 	and.w	r2, r3, #1
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b03      	cmp	r3, #3
 800644a:	d017      	beq.n	800647c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	2203      	movs	r2, #3
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4013      	ands	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d123      	bne.n	80064d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	08da      	lsrs	r2, r3, #3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3208      	adds	r2, #8
 8006490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006494:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	220f      	movs	r2, #15
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	08da      	lsrs	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3208      	adds	r2, #8
 80064ca:	6939      	ldr	r1, [r7, #16]
 80064cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	2203      	movs	r2, #3
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4013      	ands	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f003 0203 	and.w	r2, r3, #3
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80ac 	beq.w	800666a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006512:	4b5f      	ldr	r3, [pc, #380]	; (8006690 <HAL_GPIO_Init+0x330>)
 8006514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006516:	4a5e      	ldr	r2, [pc, #376]	; (8006690 <HAL_GPIO_Init+0x330>)
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	6613      	str	r3, [r2, #96]	; 0x60
 800651e:	4b5c      	ldr	r3, [pc, #368]	; (8006690 <HAL_GPIO_Init+0x330>)
 8006520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800652a:	4a5a      	ldr	r2, [pc, #360]	; (8006694 <HAL_GPIO_Init+0x334>)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	3302      	adds	r3, #2
 8006532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006536:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	220f      	movs	r2, #15
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43db      	mvns	r3, r3
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4013      	ands	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006554:	d025      	beq.n	80065a2 <HAL_GPIO_Init+0x242>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a4f      	ldr	r2, [pc, #316]	; (8006698 <HAL_GPIO_Init+0x338>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01f      	beq.n	800659e <HAL_GPIO_Init+0x23e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a4e      	ldr	r2, [pc, #312]	; (800669c <HAL_GPIO_Init+0x33c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d019      	beq.n	800659a <HAL_GPIO_Init+0x23a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a4d      	ldr	r2, [pc, #308]	; (80066a0 <HAL_GPIO_Init+0x340>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_GPIO_Init+0x236>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a4c      	ldr	r2, [pc, #304]	; (80066a4 <HAL_GPIO_Init+0x344>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00d      	beq.n	8006592 <HAL_GPIO_Init+0x232>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a4b      	ldr	r2, [pc, #300]	; (80066a8 <HAL_GPIO_Init+0x348>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <HAL_GPIO_Init+0x22e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a4a      	ldr	r2, [pc, #296]	; (80066ac <HAL_GPIO_Init+0x34c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_GPIO_Init+0x22a>
 8006586:	2306      	movs	r3, #6
 8006588:	e00c      	b.n	80065a4 <HAL_GPIO_Init+0x244>
 800658a:	2307      	movs	r3, #7
 800658c:	e00a      	b.n	80065a4 <HAL_GPIO_Init+0x244>
 800658e:	2305      	movs	r3, #5
 8006590:	e008      	b.n	80065a4 <HAL_GPIO_Init+0x244>
 8006592:	2304      	movs	r3, #4
 8006594:	e006      	b.n	80065a4 <HAL_GPIO_Init+0x244>
 8006596:	2303      	movs	r3, #3
 8006598:	e004      	b.n	80065a4 <HAL_GPIO_Init+0x244>
 800659a:	2302      	movs	r3, #2
 800659c:	e002      	b.n	80065a4 <HAL_GPIO_Init+0x244>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_GPIO_Init+0x244>
 80065a2:	2300      	movs	r3, #0
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	f002 0203 	and.w	r2, r2, #3
 80065aa:	0092      	lsls	r2, r2, #2
 80065ac:	4093      	lsls	r3, r2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80065b4:	4937      	ldr	r1, [pc, #220]	; (8006694 <HAL_GPIO_Init+0x334>)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	089b      	lsrs	r3, r3, #2
 80065ba:	3302      	adds	r3, #2
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065c2:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <HAL_GPIO_Init+0x350>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065e6:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <HAL_GPIO_Init+0x350>)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065ec:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <HAL_GPIO_Init+0x350>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4013      	ands	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <HAL_GPIO_Init+0x350>)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006616:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <HAL_GPIO_Init+0x350>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	43db      	mvns	r3, r3
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4013      	ands	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800663a:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <HAL_GPIO_Init+0x350>)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <HAL_GPIO_Init+0x350>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	43db      	mvns	r3, r3
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4013      	ands	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006664:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <HAL_GPIO_Init+0x350>)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	3301      	adds	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	fa22 f303 	lsr.w	r3, r2, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	f47f ae78 	bne.w	8006370 <HAL_GPIO_Init+0x10>
  }
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000
 8006694:	40010000 	.word	0x40010000
 8006698:	48000400 	.word	0x48000400
 800669c:	48000800 	.word	0x48000800
 80066a0:	48000c00 	.word	0x48000c00
 80066a4:	48001000 	.word	0x48001000
 80066a8:	48001400 	.word	0x48001400
 80066ac:	48001800 	.word	0x48001800
 80066b0:	40010400 	.word	0x40010400

080066b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80066c2:	e0cd      	b.n	8006860 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80066c4:	2201      	movs	r2, #1
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	4013      	ands	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80c0 	beq.w	800685a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80066da:	4a68      	ldr	r2, [pc, #416]	; (800687c <HAL_GPIO_DeInit+0x1c8>)
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	089b      	lsrs	r3, r3, #2
 80066e0:	3302      	adds	r3, #2
 80066e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	220f      	movs	r2, #15
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4013      	ands	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006702:	d025      	beq.n	8006750 <HAL_GPIO_DeInit+0x9c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a5e      	ldr	r2, [pc, #376]	; (8006880 <HAL_GPIO_DeInit+0x1cc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01f      	beq.n	800674c <HAL_GPIO_DeInit+0x98>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a5d      	ldr	r2, [pc, #372]	; (8006884 <HAL_GPIO_DeInit+0x1d0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d019      	beq.n	8006748 <HAL_GPIO_DeInit+0x94>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a5c      	ldr	r2, [pc, #368]	; (8006888 <HAL_GPIO_DeInit+0x1d4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d013      	beq.n	8006744 <HAL_GPIO_DeInit+0x90>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a5b      	ldr	r2, [pc, #364]	; (800688c <HAL_GPIO_DeInit+0x1d8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00d      	beq.n	8006740 <HAL_GPIO_DeInit+0x8c>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a5a      	ldr	r2, [pc, #360]	; (8006890 <HAL_GPIO_DeInit+0x1dc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <HAL_GPIO_DeInit+0x88>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a59      	ldr	r2, [pc, #356]	; (8006894 <HAL_GPIO_DeInit+0x1e0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d101      	bne.n	8006738 <HAL_GPIO_DeInit+0x84>
 8006734:	2306      	movs	r3, #6
 8006736:	e00c      	b.n	8006752 <HAL_GPIO_DeInit+0x9e>
 8006738:	2307      	movs	r3, #7
 800673a:	e00a      	b.n	8006752 <HAL_GPIO_DeInit+0x9e>
 800673c:	2305      	movs	r3, #5
 800673e:	e008      	b.n	8006752 <HAL_GPIO_DeInit+0x9e>
 8006740:	2304      	movs	r3, #4
 8006742:	e006      	b.n	8006752 <HAL_GPIO_DeInit+0x9e>
 8006744:	2303      	movs	r3, #3
 8006746:	e004      	b.n	8006752 <HAL_GPIO_DeInit+0x9e>
 8006748:	2302      	movs	r3, #2
 800674a:	e002      	b.n	8006752 <HAL_GPIO_DeInit+0x9e>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_GPIO_DeInit+0x9e>
 8006750:	2300      	movs	r3, #0
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	f002 0203 	and.w	r2, r2, #3
 8006758:	0092      	lsls	r2, r2, #2
 800675a:	4093      	lsls	r3, r2
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	429a      	cmp	r2, r3
 8006760:	d132      	bne.n	80067c8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006762:	4b4d      	ldr	r3, [pc, #308]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	43db      	mvns	r3, r3
 800676a:	494b      	ldr	r1, [pc, #300]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 800676c:	4013      	ands	r3, r2
 800676e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006770:	4b49      	ldr	r3, [pc, #292]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	43db      	mvns	r3, r3
 8006778:	4947      	ldr	r1, [pc, #284]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 800677a:	4013      	ands	r3, r2
 800677c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800677e:	4b46      	ldr	r3, [pc, #280]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	43db      	mvns	r3, r3
 8006786:	4944      	ldr	r1, [pc, #272]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 8006788:	4013      	ands	r3, r2
 800678a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800678c:	4b42      	ldr	r3, [pc, #264]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	43db      	mvns	r3, r3
 8006794:	4940      	ldr	r1, [pc, #256]	; (8006898 <HAL_GPIO_DeInit+0x1e4>)
 8006796:	4013      	ands	r3, r2
 8006798:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	220f      	movs	r2, #15
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80067aa:	4a34      	ldr	r2, [pc, #208]	; (800687c <HAL_GPIO_DeInit+0x1c8>)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	089b      	lsrs	r3, r3, #2
 80067b0:	3302      	adds	r3, #2
 80067b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	43da      	mvns	r2, r3
 80067ba:	4830      	ldr	r0, [pc, #192]	; (800687c <HAL_GPIO_DeInit+0x1c8>)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	089b      	lsrs	r3, r3, #2
 80067c0:	400a      	ands	r2, r1
 80067c2:	3302      	adds	r3, #2
 80067c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	2103      	movs	r1, #3
 80067d2:	fa01 f303 	lsl.w	r3, r1, r3
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	08da      	lsrs	r2, r3, #3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3208      	adds	r2, #8
 80067e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	220f      	movs	r2, #15
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	43db      	mvns	r3, r3
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	08d2      	lsrs	r2, r2, #3
 80067fc:	4019      	ands	r1, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3208      	adds	r2, #8
 8006802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	2103      	movs	r1, #3
 8006810:	fa01 f303 	lsl.w	r3, r1, r3
 8006814:	43db      	mvns	r3, r3
 8006816:	401a      	ands	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	2101      	movs	r1, #1
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	fa01 f303 	lsl.w	r3, r1, r3
 8006828:	43db      	mvns	r3, r3
 800682a:	401a      	ands	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	2103      	movs	r1, #3
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	43db      	mvns	r3, r3
 8006840:	401a      	ands	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	2101      	movs	r1, #1
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	43db      	mvns	r3, r3
 8006854:	401a      	ands	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	3301      	adds	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	f47f af2b 	bne.w	80066c4 <HAL_GPIO_DeInit+0x10>
  }
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40010000 	.word	0x40010000
 8006880:	48000400 	.word	0x48000400
 8006884:	48000800 	.word	0x48000800
 8006888:	48000c00 	.word	0x48000c00
 800688c:	48001000 	.word	0x48001000
 8006890:	48001400 	.word	0x48001400
 8006894:	48001800 	.word	0x48001800
 8006898:	40010400 	.word	0x40010400

0800689c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
 80068a8:	4613      	mov	r3, r2
 80068aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068ac:	787b      	ldrb	r3, [r7, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068b8:	e002      	b.n	80068c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068ba:	887a      	ldrh	r2, [r7, #2]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e081      	b.n	80069e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f8a8 	bl	8006a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2224      	movs	r2, #36	; 0x24
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800691c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800692c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d107      	bne.n	8006946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e006      	b.n	8006954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d104      	bne.n	8006966 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006964:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006978:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006988:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69d9      	ldr	r1, [r3, #28]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e021      	b.n	8006a40 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2224      	movs	r2, #36	; 0x24
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f821 	bl	8006a5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	817b      	strh	r3, [r7, #10]
 8006a82:	460b      	mov	r3, r1
 8006a84:	813b      	strh	r3, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	f040 80f9 	bne.w	8006c8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_I2C_Mem_Write+0x34>
 8006a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0ed      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_I2C_Mem_Write+0x4e>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e0e6      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ac6:	f7ff fb35 	bl	8006134 <HAL_GetTick>
 8006aca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2319      	movs	r3, #25
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fadd 	bl	8007098 <I2C_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0d1      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2221      	movs	r2, #33	; 0x21
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a3a      	ldr	r2, [r7, #32]
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b10:	88f8      	ldrh	r0, [r7, #6]
 8006b12:	893a      	ldrh	r2, [r7, #8]
 8006b14:	8979      	ldrh	r1, [r7, #10]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	4603      	mov	r3, r0
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 f9ed 	bl	8006f00 <I2C_RequestMemoryWrite>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0a9      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2bff      	cmp	r3, #255	; 0xff
 8006b40:	d90e      	bls.n	8006b60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	22ff      	movs	r2, #255	; 0xff
 8006b46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	8979      	ldrh	r1, [r7, #10]
 8006b50:	2300      	movs	r3, #0
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fc45 	bl	80073e8 <I2C_TransferConfig>
 8006b5e:	e00f      	b.n	8006b80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	8979      	ldrh	r1, [r7, #10]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fc34 	bl	80073e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fac7 	bl	8007118 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e07b      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	781a      	ldrb	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d034      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x1c8>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d130      	bne.n	8006c38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2180      	movs	r1, #128	; 0x80
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fa59 	bl	8007098 <I2C_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e04d      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2bff      	cmp	r3, #255	; 0xff
 8006bf8:	d90e      	bls.n	8006c18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	22ff      	movs	r2, #255	; 0xff
 8006bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	8979      	ldrh	r1, [r7, #10]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fbe9 	bl	80073e8 <I2C_TransferConfig>
 8006c16:	e00f      	b.n	8006c38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	8979      	ldrh	r1, [r7, #10]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 fbd8 	bl	80073e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d19e      	bne.n	8006b80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 faa6 	bl	8007198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e01a      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6859      	ldr	r1, [r3, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <HAL_I2C_Mem_Write+0x224>)
 8006c6a:	400b      	ands	r3, r1
 8006c6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e000      	b.n	8006c8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c8a:	2302      	movs	r3, #2
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	fe00e800 	.word	0xfe00e800

08006c98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	817b      	strh	r3, [r7, #10]
 8006caa:	460b      	mov	r3, r1
 8006cac:	813b      	strh	r3, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	f040 80fd 	bne.w	8006eba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_I2C_Mem_Read+0x34>
 8006cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0f1      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_I2C_Mem_Read+0x4e>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e0ea      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cee:	f7ff fa21 	bl	8006134 <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2319      	movs	r3, #25
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f9c9 	bl	8007098 <I2C_WaitOnFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0d5      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2222      	movs	r2, #34	; 0x22
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2240      	movs	r2, #64	; 0x40
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a3a      	ldr	r2, [r7, #32]
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d38:	88f8      	ldrh	r0, [r7, #6]
 8006d3a:	893a      	ldrh	r2, [r7, #8]
 8006d3c:	8979      	ldrh	r1, [r7, #10]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 f92d 	bl	8006fa8 <I2C_RequestMemoryRead>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0ad      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2bff      	cmp	r3, #255	; 0xff
 8006d68:	d90e      	bls.n	8006d88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	22ff      	movs	r2, #255	; 0xff
 8006d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	8979      	ldrh	r1, [r7, #10]
 8006d78:	4b52      	ldr	r3, [pc, #328]	; (8006ec4 <HAL_I2C_Mem_Read+0x22c>)
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fb31 	bl	80073e8 <I2C_TransferConfig>
 8006d86:	e00f      	b.n	8006da8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	8979      	ldrh	r1, [r7, #10]
 8006d9a:	4b4a      	ldr	r3, [pc, #296]	; (8006ec4 <HAL_I2C_Mem_Read+0x22c>)
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fb20 	bl	80073e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	2200      	movs	r2, #0
 8006db0:	2104      	movs	r1, #4
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f970 	bl	8007098 <I2C_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e07c      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d034      	beq.n	8006e68 <HAL_I2C_Mem_Read+0x1d0>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d130      	bne.n	8006e68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2180      	movs	r1, #128	; 0x80
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f941 	bl	8007098 <I2C_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e04d      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2bff      	cmp	r3, #255	; 0xff
 8006e28:	d90e      	bls.n	8006e48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	22ff      	movs	r2, #255	; 0xff
 8006e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	8979      	ldrh	r1, [r7, #10]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fad1 	bl	80073e8 <I2C_TransferConfig>
 8006e46:	e00f      	b.n	8006e68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	8979      	ldrh	r1, [r7, #10]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fac0 	bl	80073e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d19a      	bne.n	8006da8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f98e 	bl	8007198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e01a      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <HAL_I2C_Mem_Read+0x230>)
 8006e9a:	400b      	ands	r3, r1
 8006e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	80002400 	.word	0x80002400
 8006ec8:	fe00e800 	.word	0xfe00e800

08006ecc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eda:	b2db      	uxtb	r3, r3
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	4608      	mov	r0, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4603      	mov	r3, r0
 8006f10:	817b      	strh	r3, [r7, #10]
 8006f12:	460b      	mov	r3, r1
 8006f14:	813b      	strh	r3, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	8979      	ldrh	r1, [r7, #10]
 8006f20:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <I2C_RequestMemoryWrite+0xa4>)
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fa5d 	bl	80073e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f8f0 	bl	8007118 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e02c      	b.n	8006f9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f42:	88fb      	ldrh	r3, [r7, #6]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d105      	bne.n	8006f54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f48:	893b      	ldrh	r3, [r7, #8]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
 8006f52:	e015      	b.n	8006f80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f54:	893b      	ldrh	r3, [r7, #8]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f62:	69fa      	ldr	r2, [r7, #28]
 8006f64:	69b9      	ldr	r1, [r7, #24]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f8d6 	bl	8007118 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e012      	b.n	8006f9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f76:	893b      	ldrh	r3, [r7, #8]
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2200      	movs	r2, #0
 8006f88:	2180      	movs	r1, #128	; 0x80
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f884 	bl	8007098 <I2C_WaitOnFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	80002000 	.word	0x80002000

08006fa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	817b      	strh	r3, [r7, #10]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	813b      	strh	r3, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	8979      	ldrh	r1, [r7, #10]
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <I2C_RequestMemoryRead+0xa4>)
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fa0a 	bl	80073e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	69b9      	ldr	r1, [r7, #24]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f89d 	bl	8007118 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e02c      	b.n	8007042 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d105      	bne.n	8006ffa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fee:	893b      	ldrh	r3, [r7, #8]
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ff8:	e015      	b.n	8007026 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ffa:	893b      	ldrh	r3, [r7, #8]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	b2da      	uxtb	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	69b9      	ldr	r1, [r7, #24]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f883 	bl	8007118 <I2C_WaitOnTXISFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e012      	b.n	8007042 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800701c:	893b      	ldrh	r3, [r7, #8]
 800701e:	b2da      	uxtb	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2200      	movs	r2, #0
 800702e:	2140      	movs	r1, #64	; 0x40
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f831 	bl	8007098 <I2C_WaitOnFlagUntilTimeout>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	80002000 	.word	0x80002000

08007050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b02      	cmp	r3, #2
 8007064:	d103      	bne.n	800706e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b01      	cmp	r3, #1
 800707a:	d007      	beq.n	800708c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	619a      	str	r2, [r3, #24]
  }
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070a8:	e022      	b.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d01e      	beq.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b2:	f7ff f83f 	bl	8006134 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d113      	bne.n	80070f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070cc:	f043 0220 	orr.w	r2, r3, #32
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e00f      	b.n	8007110 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	4013      	ands	r3, r2
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	429a      	cmp	r2, r3
 800710c:	d0cd      	beq.n	80070aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007124:	e02c      	b.n	8007180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f870 	bl	8007210 <I2C_IsErrorOccurred>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e02a      	b.n	8007190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007140:	d01e      	beq.n	8007180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007142:	f7fe fff7 	bl	8006134 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	429a      	cmp	r2, r3
 8007150:	d302      	bcc.n	8007158 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d113      	bne.n	8007180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e007      	b.n	8007190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b02      	cmp	r3, #2
 800718c:	d1cb      	bne.n	8007126 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071a4:	e028      	b.n	80071f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f830 	bl	8007210 <I2C_IsErrorOccurred>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e026      	b.n	8007208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ba:	f7fe ffbb 	bl	8006134 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d302      	bcc.n	80071d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d113      	bne.n	80071f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	f043 0220 	orr.w	r2, r3, #32
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e007      	b.n	8007208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b20      	cmp	r3, #32
 8007204:	d1cf      	bne.n	80071a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d075      	beq.n	8007328 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2210      	movs	r2, #16
 8007242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007244:	e056      	b.n	80072f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d052      	beq.n	80072f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fe ff71 	bl	8006134 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <I2C_IsErrorOccurred+0x54>
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d147      	bne.n	80072f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800726e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007286:	d12e      	bne.n	80072e6 <I2C_IsErrorOccurred+0xd6>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800728e:	d02a      	beq.n	80072e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007290:	7cfb      	ldrb	r3, [r7, #19]
 8007292:	2b20      	cmp	r3, #32
 8007294:	d027      	beq.n	80072e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072a6:	f7fe ff45 	bl	8006134 <HAL_GetTick>
 80072aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ac:	e01b      	b.n	80072e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072ae:	f7fe ff41 	bl	8006134 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b19      	cmp	r3, #25
 80072ba:	d914      	bls.n	80072e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c0:	f043 0220 	orr.w	r2, r3, #32
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d1dc      	bne.n	80072ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d003      	beq.n	800730a <I2C_IsErrorOccurred+0xfa>
 8007302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007306:	2b00      	cmp	r3, #0
 8007308:	d09d      	beq.n	8007246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800730a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2220      	movs	r2, #32
 8007318:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f043 0304 	orr.w	r3, r3, #4
 8007320:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00b      	beq.n	8007352 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800734a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f043 0308 	orr.w	r3, r3, #8
 8007362:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800736c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800738e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01c      	beq.n	80073d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fe56 	bl	8007050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6859      	ldr	r1, [r3, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <I2C_IsErrorOccurred+0x1d4>)
 80073b0:	400b      	ands	r3, r1
 80073b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80073d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3728      	adds	r7, #40	; 0x28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	fe00e800 	.word	0xfe00e800

080073e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	817b      	strh	r3, [r7, #10]
 80073f6:	4613      	mov	r3, r2
 80073f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073fa:	897b      	ldrh	r3, [r7, #10]
 80073fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007400:	7a7b      	ldrb	r3, [r7, #9]
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007408:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	4313      	orrs	r3, r2
 8007412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007416:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	0d5b      	lsrs	r3, r3, #21
 8007422:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <I2C_TransferConfig+0x60>)
 8007428:	430b      	orrs	r3, r1
 800742a:	43db      	mvns	r3, r3
 800742c:	ea02 0103 	and.w	r1, r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	03ff63ff 	.word	0x03ff63ff

0800744c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b20      	cmp	r3, #32
 8007460:	d138      	bne.n	80074d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800746c:	2302      	movs	r3, #2
 800746e:	e032      	b.n	80074d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2224      	movs	r2, #36	; 0x24
 800747c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0201 	bic.w	r2, r2, #1
 800748e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800749e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6819      	ldr	r1, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	e000      	b.n	80074d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074d4:	2302      	movs	r3, #2
  }
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	d139      	bne.n	800756c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007502:	2302      	movs	r3, #2
 8007504:	e033      	b.n	800756e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2224      	movs	r2, #36	; 0x24
 8007512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007534:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	e000      	b.n	800756e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800756c:	2302      	movs	r3, #2
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
	...

0800757c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007580:	4b04      	ldr	r3, [pc, #16]	; (8007594 <HAL_PWREx_GetVoltageRange+0x18>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007588:	4618      	mov	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40007000 	.word	0x40007000

08007598 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a6:	d130      	bne.n	800760a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80075a8:	4b23      	ldr	r3, [pc, #140]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b4:	d038      	beq.n	8007628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075b6:	4b20      	ldr	r3, [pc, #128]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075c6:	4b1d      	ldr	r3, [pc, #116]	; (800763c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2232      	movs	r2, #50	; 0x32
 80075cc:	fb02 f303 	mul.w	r3, r2, r3
 80075d0:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	0c9b      	lsrs	r3, r3, #18
 80075d8:	3301      	adds	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075dc:	e002      	b.n	80075e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075e4:	4b14      	ldr	r3, [pc, #80]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f0:	d102      	bne.n	80075f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f2      	bne.n	80075de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007604:	d110      	bne.n	8007628 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e00f      	b.n	800762a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800760a:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007616:	d007      	beq.n	8007628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007620:	4a05      	ldr	r2, [pc, #20]	; (8007638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007626:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40007000 	.word	0x40007000
 800763c:	20000000 	.word	0x20000000
 8007640:	431bde83 	.word	0x431bde83

08007644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e3d4      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007656:	4ba1      	ldr	r3, [pc, #644]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007660:	4b9e      	ldr	r3, [pc, #632]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80e4 	beq.w	8007840 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_RCC_OscConfig+0x4a>
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b0c      	cmp	r3, #12
 8007682:	f040 808b 	bne.w	800779c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b01      	cmp	r3, #1
 800768a:	f040 8087 	bne.w	800779c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800768e:	4b93      	ldr	r3, [pc, #588]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <HAL_RCC_OscConfig+0x62>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e3ac      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	4b8c      	ldr	r3, [pc, #560]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d004      	beq.n	80076c0 <HAL_RCC_OscConfig+0x7c>
 80076b6:	4b89      	ldr	r3, [pc, #548]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076be:	e005      	b.n	80076cc <HAL_RCC_OscConfig+0x88>
 80076c0:	4b86      	ldr	r3, [pc, #536]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80076c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c6:	091b      	lsrs	r3, r3, #4
 80076c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d223      	bcs.n	8007718 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fd41 	bl	800815c <RCC_SetFlashLatencyFromMSIRange>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e38d      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076e4:	4b7d      	ldr	r3, [pc, #500]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a7c      	ldr	r2, [pc, #496]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80076ea:	f043 0308 	orr.w	r3, r3, #8
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	4b7a      	ldr	r3, [pc, #488]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	4977      	ldr	r1, [pc, #476]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007702:	4b76      	ldr	r3, [pc, #472]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	4972      	ldr	r1, [pc, #456]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007712:	4313      	orrs	r3, r2
 8007714:	604b      	str	r3, [r1, #4]
 8007716:	e025      	b.n	8007764 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007718:	4b70      	ldr	r3, [pc, #448]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a6f      	ldr	r2, [pc, #444]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 800771e:	f043 0308 	orr.w	r3, r3, #8
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	4b6d      	ldr	r3, [pc, #436]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	496a      	ldr	r1, [pc, #424]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007732:	4313      	orrs	r3, r2
 8007734:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007736:	4b69      	ldr	r3, [pc, #420]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	021b      	lsls	r3, r3, #8
 8007744:	4965      	ldr	r1, [pc, #404]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007746:	4313      	orrs	r3, r2
 8007748:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fd01 	bl	800815c <RCC_SetFlashLatencyFromMSIRange>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e34d      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007764:	f000 fc36 	bl	8007fd4 <HAL_RCC_GetSysClockFreq>
 8007768:	4602      	mov	r2, r0
 800776a:	4b5c      	ldr	r3, [pc, #368]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	091b      	lsrs	r3, r3, #4
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	495a      	ldr	r1, [pc, #360]	; (80078e0 <HAL_RCC_OscConfig+0x29c>)
 8007776:	5ccb      	ldrb	r3, [r1, r3]
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	4a58      	ldr	r2, [pc, #352]	; (80078e4 <HAL_RCC_OscConfig+0x2a0>)
 8007782:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007784:	4b58      	ldr	r3, [pc, #352]	; (80078e8 <HAL_RCC_OscConfig+0x2a4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fc83 	bl	8006094 <HAL_InitTick>
 800778e:	4603      	mov	r3, r0
 8007790:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d052      	beq.n	800783e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	e331      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d032      	beq.n	800780a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077a4:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a4c      	ldr	r2, [pc, #304]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077b0:	f7fe fcc0 	bl	8006134 <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077b6:	e008      	b.n	80077ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077b8:	f7fe fcbc 	bl	8006134 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e31a      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077ca:	4b44      	ldr	r3, [pc, #272]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f0      	beq.n	80077b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077d6:	4b41      	ldr	r3, [pc, #260]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a40      	ldr	r2, [pc, #256]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077dc:	f043 0308 	orr.w	r3, r3, #8
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	4b3e      	ldr	r3, [pc, #248]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	493b      	ldr	r1, [pc, #236]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077f4:	4b39      	ldr	r3, [pc, #228]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	4936      	ldr	r1, [pc, #216]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007804:	4313      	orrs	r3, r2
 8007806:	604b      	str	r3, [r1, #4]
 8007808:	e01a      	b.n	8007840 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800780a:	4b34      	ldr	r3, [pc, #208]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a33      	ldr	r2, [pc, #204]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007816:	f7fe fc8d 	bl	8006134 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800781c:	e008      	b.n	8007830 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800781e:	f7fe fc89 	bl	8006134 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e2e7      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007830:	4b2a      	ldr	r3, [pc, #168]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f0      	bne.n	800781e <HAL_RCC_OscConfig+0x1da>
 800783c:	e000      	b.n	8007840 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800783e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d074      	beq.n	8007936 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	2b08      	cmp	r3, #8
 8007850:	d005      	beq.n	800785e <HAL_RCC_OscConfig+0x21a>
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d10e      	bne.n	8007876 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b03      	cmp	r3, #3
 800785c:	d10b      	bne.n	8007876 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800785e:	4b1f      	ldr	r3, [pc, #124]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d064      	beq.n	8007934 <HAL_RCC_OscConfig+0x2f0>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d160      	bne.n	8007934 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e2c4      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800787e:	d106      	bne.n	800788e <HAL_RCC_OscConfig+0x24a>
 8007880:	4b16      	ldr	r3, [pc, #88]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a15      	ldr	r2, [pc, #84]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 8007886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e01d      	b.n	80078ca <HAL_RCC_OscConfig+0x286>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007896:	d10c      	bne.n	80078b2 <HAL_RCC_OscConfig+0x26e>
 8007898:	4b10      	ldr	r3, [pc, #64]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a0f      	ldr	r2, [pc, #60]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 800789e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a0c      	ldr	r2, [pc, #48]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80078aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	e00b      	b.n	80078ca <HAL_RCC_OscConfig+0x286>
 80078b2:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80078b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a06      	ldr	r2, [pc, #24]	; (80078dc <HAL_RCC_OscConfig+0x298>)
 80078c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d01c      	beq.n	800790c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d2:	f7fe fc2f 	bl	8006134 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078d8:	e011      	b.n	80078fe <HAL_RCC_OscConfig+0x2ba>
 80078da:	bf00      	nop
 80078dc:	40021000 	.word	0x40021000
 80078e0:	08009eb0 	.word	0x08009eb0
 80078e4:	20000000 	.word	0x20000000
 80078e8:	2000015c 	.word	0x2000015c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078ec:	f7fe fc22 	bl	8006134 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b64      	cmp	r3, #100	; 0x64
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e280      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078fe:	4baf      	ldr	r3, [pc, #700]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0f0      	beq.n	80078ec <HAL_RCC_OscConfig+0x2a8>
 800790a:	e014      	b.n	8007936 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790c:	f7fe fc12 	bl	8006134 <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007914:	f7fe fc0e 	bl	8006134 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b64      	cmp	r3, #100	; 0x64
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e26c      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007926:	4ba5      	ldr	r3, [pc, #660]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f0      	bne.n	8007914 <HAL_RCC_OscConfig+0x2d0>
 8007932:	e000      	b.n	8007936 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d060      	beq.n	8007a04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d005      	beq.n	8007954 <HAL_RCC_OscConfig+0x310>
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	2b0c      	cmp	r3, #12
 800794c:	d119      	bne.n	8007982 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d116      	bne.n	8007982 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007954:	4b99      	ldr	r3, [pc, #612]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <HAL_RCC_OscConfig+0x328>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e249      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800796c:	4b93      	ldr	r3, [pc, #588]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	061b      	lsls	r3, r3, #24
 800797a:	4990      	ldr	r1, [pc, #576]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 800797c:	4313      	orrs	r3, r2
 800797e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007980:	e040      	b.n	8007a04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d023      	beq.n	80079d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800798a:	4b8c      	ldr	r3, [pc, #560]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a8b      	ldr	r2, [pc, #556]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007996:	f7fe fbcd 	bl	8006134 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800799e:	f7fe fbc9 	bl	8006134 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e227      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079b0:	4b82      	ldr	r3, [pc, #520]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f0      	beq.n	800799e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079bc:	4b7f      	ldr	r3, [pc, #508]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	497c      	ldr	r1, [pc, #496]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	604b      	str	r3, [r1, #4]
 80079d0:	e018      	b.n	8007a04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079d2:	4b7a      	ldr	r3, [pc, #488]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a79      	ldr	r2, [pc, #484]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 80079d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079de:	f7fe fba9 	bl	8006134 <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079e6:	f7fe fba5 	bl	8006134 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e203      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079f8:	4b70      	ldr	r3, [pc, #448]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f0      	bne.n	80079e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d03c      	beq.n	8007a8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01c      	beq.n	8007a52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a18:	4b68      	ldr	r3, [pc, #416]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a1e:	4a67      	ldr	r2, [pc, #412]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007a20:	f043 0301 	orr.w	r3, r3, #1
 8007a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a28:	f7fe fb84 	bl	8006134 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a30:	f7fe fb80 	bl	8006134 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e1de      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a42:	4b5e      	ldr	r3, [pc, #376]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0ef      	beq.n	8007a30 <HAL_RCC_OscConfig+0x3ec>
 8007a50:	e01b      	b.n	8007a8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a52:	4b5a      	ldr	r3, [pc, #360]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a58:	4a58      	ldr	r2, [pc, #352]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007a5a:	f023 0301 	bic.w	r3, r3, #1
 8007a5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a62:	f7fe fb67 	bl	8006134 <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a6a:	f7fe fb63 	bl	8006134 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e1c1      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a7c:	4b4f      	ldr	r3, [pc, #316]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1ef      	bne.n	8007a6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 80a6 	beq.w	8007be4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007a9c:	4b47      	ldr	r3, [pc, #284]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10d      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aa8:	4b44      	ldr	r3, [pc, #272]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aac:	4a43      	ldr	r2, [pc, #268]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ab4:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007abc:	60bb      	str	r3, [r7, #8]
 8007abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ac4:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <HAL_RCC_OscConfig+0x57c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d118      	bne.n	8007b02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ad0:	4b3b      	ldr	r3, [pc, #236]	; (8007bc0 <HAL_RCC_OscConfig+0x57c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a3a      	ldr	r2, [pc, #232]	; (8007bc0 <HAL_RCC_OscConfig+0x57c>)
 8007ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007adc:	f7fe fb2a 	bl	8006134 <HAL_GetTick>
 8007ae0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae4:	f7fe fb26 	bl	8006134 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e184      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007af6:	4b32      	ldr	r3, [pc, #200]	; (8007bc0 <HAL_RCC_OscConfig+0x57c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d108      	bne.n	8007b1c <HAL_RCC_OscConfig+0x4d8>
 8007b0a:	4b2c      	ldr	r3, [pc, #176]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b10:	4a2a      	ldr	r2, [pc, #168]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b1a:	e024      	b.n	8007b66 <HAL_RCC_OscConfig+0x522>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	d110      	bne.n	8007b46 <HAL_RCC_OscConfig+0x502>
 8007b24:	4b25      	ldr	r3, [pc, #148]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	4a24      	ldr	r2, [pc, #144]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b2c:	f043 0304 	orr.w	r3, r3, #4
 8007b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b34:	4b21      	ldr	r3, [pc, #132]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3a:	4a20      	ldr	r2, [pc, #128]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b44:	e00f      	b.n	8007b66 <HAL_RCC_OscConfig+0x522>
 8007b46:	4b1d      	ldr	r3, [pc, #116]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
 8007b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b56:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5c:	4a17      	ldr	r2, [pc, #92]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b5e:	f023 0304 	bic.w	r3, r3, #4
 8007b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d016      	beq.n	8007b9c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b6e:	f7fe fae1 	bl	8006134 <HAL_GetTick>
 8007b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b74:	e00a      	b.n	8007b8c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b76:	f7fe fadd 	bl	8006134 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e139      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b8c:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <HAL_RCC_OscConfig+0x578>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0ed      	beq.n	8007b76 <HAL_RCC_OscConfig+0x532>
 8007b9a:	e01a      	b.n	8007bd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9c:	f7fe faca 	bl	8006134 <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ba2:	e00f      	b.n	8007bc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba4:	f7fe fac6 	bl	8006134 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d906      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e122      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
 8007bba:	bf00      	nop
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007bc4:	4b90      	ldr	r3, [pc, #576]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e8      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bd2:	7ffb      	ldrb	r3, [r7, #31]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d105      	bne.n	8007be4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bd8:	4b8b      	ldr	r3, [pc, #556]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bdc:	4a8a      	ldr	r2, [pc, #552]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 8108 	beq.w	8007dfe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	f040 80d0 	bne.w	8007d98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007bf8:	4b83      	ldr	r3, [pc, #524]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f003 0203 	and.w	r2, r3, #3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d130      	bne.n	8007c6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	3b01      	subs	r3, #1
 8007c18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d127      	bne.n	8007c6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d11f      	bne.n	8007c6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c38:	2a07      	cmp	r2, #7
 8007c3a:	bf14      	ite	ne
 8007c3c:	2201      	movne	r2, #1
 8007c3e:	2200      	moveq	r2, #0
 8007c40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d113      	bne.n	8007c6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	3b01      	subs	r3, #1
 8007c54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d109      	bne.n	8007c6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	085b      	lsrs	r3, r3, #1
 8007c66:	3b01      	subs	r3, #1
 8007c68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d06e      	beq.n	8007d4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b0c      	cmp	r3, #12
 8007c72:	d069      	beq.n	8007d48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007c74:	4b64      	ldr	r3, [pc, #400]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007c80:	4b61      	ldr	r3, [pc, #388]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e0b7      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007c90:	4b5d      	ldr	r3, [pc, #372]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a5c      	ldr	r2, [pc, #368]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c9c:	f7fe fa4a 	bl	8006134 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca4:	f7fe fa46 	bl	8006134 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e0a4      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cb6:	4b54      	ldr	r3, [pc, #336]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f0      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cc2:	4b51      	ldr	r3, [pc, #324]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	4b51      	ldr	r3, [pc, #324]	; (8007e0c <HAL_RCC_OscConfig+0x7c8>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	0112      	lsls	r2, r2, #4
 8007cd6:	4311      	orrs	r1, r2
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cdc:	0212      	lsls	r2, r2, #8
 8007cde:	4311      	orrs	r1, r2
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ce4:	0852      	lsrs	r2, r2, #1
 8007ce6:	3a01      	subs	r2, #1
 8007ce8:	0552      	lsls	r2, r2, #21
 8007cea:	4311      	orrs	r1, r2
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007cf0:	0852      	lsrs	r2, r2, #1
 8007cf2:	3a01      	subs	r2, #1
 8007cf4:	0652      	lsls	r2, r2, #25
 8007cf6:	4311      	orrs	r1, r2
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cfc:	0912      	lsrs	r2, r2, #4
 8007cfe:	0452      	lsls	r2, r2, #17
 8007d00:	430a      	orrs	r2, r1
 8007d02:	4941      	ldr	r1, [pc, #260]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007d08:	4b3f      	ldr	r3, [pc, #252]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a3e      	ldr	r2, [pc, #248]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d14:	4b3c      	ldr	r3, [pc, #240]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	4a3b      	ldr	r2, [pc, #236]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d20:	f7fe fa08 	bl	8006134 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d28:	f7fe fa04 	bl	8006134 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e062      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d3a:	4b33      	ldr	r3, [pc, #204]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0f0      	beq.n	8007d28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d46:	e05a      	b.n	8007dfe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e059      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d4c:	4b2e      	ldr	r3, [pc, #184]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d152      	bne.n	8007dfe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007d58:	4b2b      	ldr	r3, [pc, #172]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d64:	4b28      	ldr	r3, [pc, #160]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d70:	f7fe f9e0 	bl	8006134 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d78:	f7fe f9dc 	bl	8006134 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e03a      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d8a:	4b1f      	ldr	r3, [pc, #124]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0x734>
 8007d96:	e032      	b.n	8007dfe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b0c      	cmp	r3, #12
 8007d9c:	d02d      	beq.n	8007dfa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d9e:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007da8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007daa:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d105      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007db6:	4b14      	ldr	r3, [pc, #80]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	4a13      	ldr	r2, [pc, #76]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007dbc:	f023 0303 	bic.w	r3, r3, #3
 8007dc0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007dc2:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	4a10      	ldr	r2, [pc, #64]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007dc8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd2:	f7fe f9af 	bl	8006134 <HAL_GetTick>
 8007dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dd8:	e008      	b.n	8007dec <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dda:	f7fe f9ab 	bl	8006134 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e009      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <HAL_RCC_OscConfig+0x7c4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1f0      	bne.n	8007dda <HAL_RCC_OscConfig+0x796>
 8007df8:	e001      	b.n	8007dfe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40021000 	.word	0x40021000
 8007e0c:	f99d808c 	.word	0xf99d808c

08007e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0c8      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e24:	4b66      	ldr	r3, [pc, #408]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d910      	bls.n	8007e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e32:	4b63      	ldr	r3, [pc, #396]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f023 0207 	bic.w	r2, r3, #7
 8007e3a:	4961      	ldr	r1, [pc, #388]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e42:	4b5f      	ldr	r3, [pc, #380]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d001      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0b0      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d04c      	beq.n	8007efa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d107      	bne.n	8007e78 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e68:	4b56      	ldr	r3, [pc, #344]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d121      	bne.n	8007eb8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e09e      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d107      	bne.n	8007e90 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e80:	4b50      	ldr	r3, [pc, #320]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d115      	bne.n	8007eb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e092      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d107      	bne.n	8007ea8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e98:	4b4a      	ldr	r3, [pc, #296]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d109      	bne.n	8007eb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e086      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ea8:	4b46      	ldr	r3, [pc, #280]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e07e      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007eb8:	4b42      	ldr	r3, [pc, #264]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f023 0203 	bic.w	r2, r3, #3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	493f      	ldr	r1, [pc, #252]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eca:	f7fe f933 	bl	8006134 <HAL_GetTick>
 8007ece:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ed2:	f7fe f92f 	bl	8006134 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e066      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ee8:	4b36      	ldr	r3, [pc, #216]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 020c 	and.w	r2, r3, #12
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d1eb      	bne.n	8007ed2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d008      	beq.n	8007f18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f06:	4b2f      	ldr	r3, [pc, #188]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	492c      	ldr	r1, [pc, #176]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f18:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d210      	bcs.n	8007f48 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f26:	4b26      	ldr	r3, [pc, #152]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f023 0207 	bic.w	r2, r3, #7
 8007f2e:	4924      	ldr	r1, [pc, #144]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f36:	4b22      	ldr	r3, [pc, #136]	; (8007fc0 <HAL_RCC_ClockConfig+0x1b0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d001      	beq.n	8007f48 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e036      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d008      	beq.n	8007f66 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f54:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	4918      	ldr	r1, [pc, #96]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	4910      	ldr	r1, [pc, #64]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f86:	f000 f825 	bl	8007fd4 <HAL_RCC_GetSysClockFreq>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b4>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	490c      	ldr	r1, [pc, #48]	; (8007fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f98:	5ccb      	ldrb	r3, [r1, r3]
 8007f9a:	f003 031f 	and.w	r3, r3, #31
 8007f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa2:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe f872 	bl	8006094 <HAL_InitTick>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	40022000 	.word	0x40022000
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	08009eb0 	.word	0x08009eb0
 8007fcc:	20000000 	.word	0x20000000
 8007fd0:	2000015c 	.word	0x2000015c

08007fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b089      	sub	sp, #36	; 0x24
 8007fd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe2:	4b3e      	ldr	r3, [pc, #248]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
 8007fea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fec:	4b3b      	ldr	r3, [pc, #236]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_RCC_GetSysClockFreq+0x34>
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b0c      	cmp	r3, #12
 8008000:	d121      	bne.n	8008046 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d11e      	bne.n	8008046 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008008:	4b34      	ldr	r3, [pc, #208]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d107      	bne.n	8008024 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008014:	4b31      	ldr	r3, [pc, #196]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	e005      	b.n	8008030 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008024:	4b2d      	ldr	r3, [pc, #180]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008030:	4a2b      	ldr	r2, [pc, #172]	; (80080e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008038:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10d      	bne.n	800805c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008044:	e00a      	b.n	800805c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d102      	bne.n	8008052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800804c:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	e004      	b.n	800805c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b08      	cmp	r3, #8
 8008056:	d101      	bne.n	800805c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008058:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800805a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b0c      	cmp	r3, #12
 8008060:	d134      	bne.n	80080cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d003      	beq.n	800807a <HAL_RCC_GetSysClockFreq+0xa6>
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d003      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0xac>
 8008078:	e005      	b.n	8008086 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800807a:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800807c:	617b      	str	r3, [r7, #20]
      break;
 800807e:	e005      	b.n	800808c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008080:	4b19      	ldr	r3, [pc, #100]	; (80080e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008082:	617b      	str	r3, [r7, #20]
      break;
 8008084:	e002      	b.n	800808c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	617b      	str	r3, [r7, #20]
      break;
 800808a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800808c:	4b13      	ldr	r3, [pc, #76]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	091b      	lsrs	r3, r3, #4
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	3301      	adds	r3, #1
 8008098:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800809a:	4b10      	ldr	r3, [pc, #64]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	fb02 f203 	mul.w	r2, r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080b2:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <HAL_RCC_GetSysClockFreq+0x108>)
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	0e5b      	lsrs	r3, r3, #25
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	3301      	adds	r3, #1
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80080cc:	69bb      	ldr	r3, [r7, #24]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3724      	adds	r7, #36	; 0x24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40021000 	.word	0x40021000
 80080e0:	08009ec8 	.word	0x08009ec8
 80080e4:	00f42400 	.word	0x00f42400
 80080e8:	007a1200 	.word	0x007a1200

080080ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080f0:	4b03      	ldr	r3, [pc, #12]	; (8008100 <HAL_RCC_GetHCLKFreq+0x14>)
 80080f2:	681b      	ldr	r3, [r3, #0]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	20000000 	.word	0x20000000

08008104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008108:	f7ff fff0 	bl	80080ec <HAL_RCC_GetHCLKFreq>
 800810c:	4602      	mov	r2, r0
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	0a1b      	lsrs	r3, r3, #8
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	4904      	ldr	r1, [pc, #16]	; (800812c <HAL_RCC_GetPCLK1Freq+0x28>)
 800811a:	5ccb      	ldrb	r3, [r1, r3]
 800811c:	f003 031f 	and.w	r3, r3, #31
 8008120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008124:	4618      	mov	r0, r3
 8008126:	bd80      	pop	{r7, pc}
 8008128:	40021000 	.word	0x40021000
 800812c:	08009ec0 	.word	0x08009ec0

08008130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008134:	f7ff ffda 	bl	80080ec <HAL_RCC_GetHCLKFreq>
 8008138:	4602      	mov	r2, r0
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	0adb      	lsrs	r3, r3, #11
 8008140:	f003 0307 	and.w	r3, r3, #7
 8008144:	4904      	ldr	r1, [pc, #16]	; (8008158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008146:	5ccb      	ldrb	r3, [r1, r3]
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	bd80      	pop	{r7, pc}
 8008154:	40021000 	.word	0x40021000
 8008158:	08009ec0 	.word	0x08009ec0

0800815c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008164:	2300      	movs	r3, #0
 8008166:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008168:	4b2a      	ldr	r3, [pc, #168]	; (8008214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800816a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008174:	f7ff fa02 	bl	800757c <HAL_PWREx_GetVoltageRange>
 8008178:	6178      	str	r0, [r7, #20]
 800817a:	e014      	b.n	80081a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800817c:	4b25      	ldr	r3, [pc, #148]	; (8008214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800817e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008180:	4a24      	ldr	r2, [pc, #144]	; (8008214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008186:	6593      	str	r3, [r2, #88]	; 0x58
 8008188:	4b22      	ldr	r3, [pc, #136]	; (8008214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800818a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008194:	f7ff f9f2 	bl	800757c <HAL_PWREx_GetVoltageRange>
 8008198:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800819a:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819e:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ac:	d10b      	bne.n	80081c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b80      	cmp	r3, #128	; 0x80
 80081b2:	d919      	bls.n	80081e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2ba0      	cmp	r3, #160	; 0xa0
 80081b8:	d902      	bls.n	80081c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80081ba:	2302      	movs	r3, #2
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	e013      	b.n	80081e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80081c0:	2301      	movs	r3, #1
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	e010      	b.n	80081e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b80      	cmp	r3, #128	; 0x80
 80081ca:	d902      	bls.n	80081d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80081cc:	2303      	movs	r3, #3
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	e00a      	b.n	80081e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b80      	cmp	r3, #128	; 0x80
 80081d6:	d102      	bne.n	80081de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80081d8:	2302      	movs	r3, #2
 80081da:	613b      	str	r3, [r7, #16]
 80081dc:	e004      	b.n	80081e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b70      	cmp	r3, #112	; 0x70
 80081e2:	d101      	bne.n	80081e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80081e4:	2301      	movs	r3, #1
 80081e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80081e8:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f023 0207 	bic.w	r2, r3, #7
 80081f0:	4909      	ldr	r1, [pc, #36]	; (8008218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80081f8:	4b07      	ldr	r3, [pc, #28]	; (8008218 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	429a      	cmp	r2, r3
 8008204:	d001      	beq.n	800820a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	40021000 	.word	0x40021000
 8008218:	40022000 	.word	0x40022000

0800821c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008224:	2300      	movs	r3, #0
 8008226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008228:	2300      	movs	r3, #0
 800822a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008234:	2b00      	cmp	r3, #0
 8008236:	d041      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008240:	d02a      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008242:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008246:	d824      	bhi.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008248:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800824c:	d008      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800824e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008252:	d81e      	bhi.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800825c:	d010      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800825e:	e018      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008260:	4b86      	ldr	r3, [pc, #536]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4a85      	ldr	r2, [pc, #532]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800826a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800826c:	e015      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3304      	adds	r3, #4
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fabb 	bl	80087f0 <RCCEx_PLLSAI1_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800827e:	e00c      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3320      	adds	r3, #32
 8008284:	2100      	movs	r1, #0
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fba6 	bl	80089d8 <RCCEx_PLLSAI2_Config>
 800828c:	4603      	mov	r3, r0
 800828e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008290:	e003      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	74fb      	strb	r3, [r7, #19]
      break;
 8008296:	e000      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800829a:	7cfb      	ldrb	r3, [r7, #19]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10b      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082a0:	4b76      	ldr	r3, [pc, #472]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ae:	4973      	ldr	r1, [pc, #460]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80082b6:	e001      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b8:	7cfb      	ldrb	r3, [r7, #19]
 80082ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d041      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082d0:	d02a      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80082d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082d6:	d824      	bhi.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80082d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082dc:	d008      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80082de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e2:	d81e      	bhi.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80082e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082ec:	d010      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80082ee:	e018      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80082f0:	4b62      	ldr	r3, [pc, #392]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	4a61      	ldr	r2, [pc, #388]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80082fc:	e015      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3304      	adds	r3, #4
 8008302:	2100      	movs	r1, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fa73 	bl	80087f0 <RCCEx_PLLSAI1_Config>
 800830a:	4603      	mov	r3, r0
 800830c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800830e:	e00c      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3320      	adds	r3, #32
 8008314:	2100      	movs	r1, #0
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fb5e 	bl	80089d8 <RCCEx_PLLSAI2_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008320:	e003      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	74fb      	strb	r3, [r7, #19]
      break;
 8008326:	e000      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800832a:	7cfb      	ldrb	r3, [r7, #19]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10b      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008330:	4b52      	ldr	r3, [pc, #328]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008336:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800833e:	494f      	ldr	r1, [pc, #316]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008340:	4313      	orrs	r3, r2
 8008342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008346:	e001      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	7cfb      	ldrb	r3, [r7, #19]
 800834a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80a0 	beq.w	800849a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800835a:	2300      	movs	r3, #0
 800835c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800835e:	4b47      	ldr	r3, [pc, #284]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800836e:	2300      	movs	r3, #0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00d      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008374:	4b41      	ldr	r3, [pc, #260]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	4a40      	ldr	r2, [pc, #256]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800837a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800837e:	6593      	str	r3, [r2, #88]	; 0x58
 8008380:	4b3e      	ldr	r3, [pc, #248]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008388:	60bb      	str	r3, [r7, #8]
 800838a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800838c:	2301      	movs	r3, #1
 800838e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008390:	4b3b      	ldr	r3, [pc, #236]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a3a      	ldr	r2, [pc, #232]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800839c:	f7fd feca 	bl	8006134 <HAL_GetTick>
 80083a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80083a2:	e009      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a4:	f7fd fec6 	bl	8006134 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d902      	bls.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	74fb      	strb	r3, [r7, #19]
        break;
 80083b6:	e005      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80083b8:	4b31      	ldr	r3, [pc, #196]	; (8008480 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0ef      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80083c4:	7cfb      	ldrb	r3, [r7, #19]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d15c      	bne.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083ca:	4b2c      	ldr	r3, [pc, #176]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01f      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d019      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083e8:	4b24      	ldr	r3, [pc, #144]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083f4:	4b21      	ldr	r3, [pc, #132]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083fa:	4a20      	ldr	r2, [pc, #128]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008404:	4b1d      	ldr	r3, [pc, #116]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840a:	4a1c      	ldr	r2, [pc, #112]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800840c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008414:	4a19      	ldr	r2, [pc, #100]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d016      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008426:	f7fd fe85 	bl	8006134 <HAL_GetTick>
 800842a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800842c:	e00b      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800842e:	f7fd fe81 	bl	8006134 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	f241 3288 	movw	r2, #5000	; 0x1388
 800843c:	4293      	cmp	r3, r2
 800843e:	d902      	bls.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	74fb      	strb	r3, [r7, #19]
            break;
 8008444:	e006      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0ec      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008454:	7cfb      	ldrb	r3, [r7, #19]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10c      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800845a:	4b08      	ldr	r3, [pc, #32]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800845c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846a:	4904      	ldr	r1, [pc, #16]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800846c:	4313      	orrs	r3, r2
 800846e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008472:	e009      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008474:	7cfb      	ldrb	r3, [r7, #19]
 8008476:	74bb      	strb	r3, [r7, #18]
 8008478:	e006      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800847a:	bf00      	nop
 800847c:	40021000 	.word	0x40021000
 8008480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008484:	7cfb      	ldrb	r3, [r7, #19]
 8008486:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008488:	7c7b      	ldrb	r3, [r7, #17]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d105      	bne.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800848e:	4b9e      	ldr	r3, [pc, #632]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008492:	4a9d      	ldr	r2, [pc, #628]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008498:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084a6:	4b98      	ldr	r3, [pc, #608]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ac:	f023 0203 	bic.w	r2, r3, #3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	4994      	ldr	r1, [pc, #592]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084c8:	4b8f      	ldr	r3, [pc, #572]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ce:	f023 020c 	bic.w	r2, r3, #12
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	498c      	ldr	r1, [pc, #560]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084ea:	4b87      	ldr	r3, [pc, #540]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	4983      	ldr	r1, [pc, #524]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800850c:	4b7e      	ldr	r3, [pc, #504]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851a:	497b      	ldr	r1, [pc, #492]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0310 	and.w	r3, r3, #16
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800852e:	4b76      	ldr	r3, [pc, #472]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853c:	4972      	ldr	r1, [pc, #456]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008550:	4b6d      	ldr	r3, [pc, #436]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855e:	496a      	ldr	r1, [pc, #424]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008572:	4b65      	ldr	r3, [pc, #404]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008580:	4961      	ldr	r1, [pc, #388]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008582:	4313      	orrs	r3, r2
 8008584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008594:	4b5c      	ldr	r3, [pc, #368]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800859a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a2:	4959      	ldr	r1, [pc, #356]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085b6:	4b54      	ldr	r3, [pc, #336]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c4:	4950      	ldr	r1, [pc, #320]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085d8:	4b4b      	ldr	r3, [pc, #300]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e6:	4948      	ldr	r1, [pc, #288]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085fa:	4b43      	ldr	r3, [pc, #268]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008608:	493f      	ldr	r1, [pc, #252]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800860a:	4313      	orrs	r3, r2
 800860c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d028      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800861c:	4b3a      	ldr	r3, [pc, #232]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800861e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862a:	4937      	ldr	r1, [pc, #220]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800862c:	4313      	orrs	r3, r2
 800862e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863a:	d106      	bne.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800863c:	4b32      	ldr	r3, [pc, #200]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	4a31      	ldr	r2, [pc, #196]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008646:	60d3      	str	r3, [r2, #12]
 8008648:	e011      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008652:	d10c      	bne.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3304      	adds	r3, #4
 8008658:	2101      	movs	r1, #1
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f8c8 	bl	80087f0 <RCCEx_PLLSAI1_Config>
 8008660:	4603      	mov	r3, r0
 8008662:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008664:	7cfb      	ldrb	r3, [r7, #19]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800866a:	7cfb      	ldrb	r3, [r7, #19]
 800866c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d028      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800867a:	4b23      	ldr	r3, [pc, #140]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800867c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008680:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008688:	491f      	ldr	r1, [pc, #124]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800868a:	4313      	orrs	r3, r2
 800868c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008698:	d106      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800869a:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	4a1a      	ldr	r2, [pc, #104]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086a4:	60d3      	str	r3, [r2, #12]
 80086a6:	e011      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086b0:	d10c      	bne.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3304      	adds	r3, #4
 80086b6:	2101      	movs	r1, #1
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f899 	bl	80087f0 <RCCEx_PLLSAI1_Config>
 80086be:	4603      	mov	r3, r0
 80086c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086c2:	7cfb      	ldrb	r3, [r7, #19]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80086c8:	7cfb      	ldrb	r3, [r7, #19]
 80086ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d02b      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e6:	4908      	ldr	r1, [pc, #32]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086f6:	d109      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086f8:	4b03      	ldr	r3, [pc, #12]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	4a02      	ldr	r2, [pc, #8]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008702:	60d3      	str	r3, [r2, #12]
 8008704:	e014      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008706:	bf00      	nop
 8008708:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008714:	d10c      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3304      	adds	r3, #4
 800871a:	2101      	movs	r1, #1
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f867 	bl	80087f0 <RCCEx_PLLSAI1_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008726:	7cfb      	ldrb	r3, [r7, #19]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800872c:	7cfb      	ldrb	r3, [r7, #19]
 800872e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d02f      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800873c:	4b2b      	ldr	r3, [pc, #172]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800873e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008742:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800874a:	4928      	ldr	r1, [pc, #160]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800874c:	4313      	orrs	r3, r2
 800874e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800875a:	d10d      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	2102      	movs	r1, #2
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f844 	bl	80087f0 <RCCEx_PLLSAI1_Config>
 8008768:	4603      	mov	r3, r0
 800876a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800876c:	7cfb      	ldrb	r3, [r7, #19]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d014      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008772:	7cfb      	ldrb	r3, [r7, #19]
 8008774:	74bb      	strb	r3, [r7, #18]
 8008776:	e011      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008780:	d10c      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3320      	adds	r3, #32
 8008786:	2102      	movs	r1, #2
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f925 	bl	80089d8 <RCCEx_PLLSAI2_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008792:	7cfb      	ldrb	r3, [r7, #19]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008798:	7cfb      	ldrb	r3, [r7, #19]
 800879a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00a      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087a8:	4b10      	ldr	r3, [pc, #64]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80087aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b6:	490d      	ldr	r1, [pc, #52]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00b      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087ca:	4b08      	ldr	r3, [pc, #32]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087da:	4904      	ldr	r1, [pc, #16]	; (80087ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80087e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40021000 	.word	0x40021000

080087f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087fe:	4b75      	ldr	r3, [pc, #468]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d018      	beq.n	800883c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800880a:	4b72      	ldr	r3, [pc, #456]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f003 0203 	and.w	r2, r3, #3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d10d      	bne.n	8008836 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
       ||
 800881e:	2b00      	cmp	r3, #0
 8008820:	d009      	beq.n	8008836 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008822:	4b6c      	ldr	r3, [pc, #432]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	091b      	lsrs	r3, r3, #4
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
       ||
 8008832:	429a      	cmp	r2, r3
 8008834:	d047      	beq.n	80088c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
 800883a:	e044      	b.n	80088c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b03      	cmp	r3, #3
 8008842:	d018      	beq.n	8008876 <RCCEx_PLLSAI1_Config+0x86>
 8008844:	2b03      	cmp	r3, #3
 8008846:	d825      	bhi.n	8008894 <RCCEx_PLLSAI1_Config+0xa4>
 8008848:	2b01      	cmp	r3, #1
 800884a:	d002      	beq.n	8008852 <RCCEx_PLLSAI1_Config+0x62>
 800884c:	2b02      	cmp	r3, #2
 800884e:	d009      	beq.n	8008864 <RCCEx_PLLSAI1_Config+0x74>
 8008850:	e020      	b.n	8008894 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008852:	4b60      	ldr	r3, [pc, #384]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d11d      	bne.n	800889a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008862:	e01a      	b.n	800889a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008864:	4b5b      	ldr	r3, [pc, #364]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800886c:	2b00      	cmp	r3, #0
 800886e:	d116      	bne.n	800889e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008874:	e013      	b.n	800889e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008876:	4b57      	ldr	r3, [pc, #348]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10f      	bne.n	80088a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008882:	4b54      	ldr	r3, [pc, #336]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008892:	e006      	b.n	80088a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
      break;
 8008898:	e004      	b.n	80088a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800889a:	bf00      	nop
 800889c:	e002      	b.n	80088a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800889e:	bf00      	nop
 80088a0:	e000      	b.n	80088a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80088a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10d      	bne.n	80088c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80088aa:	4b4a      	ldr	r3, [pc, #296]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6819      	ldr	r1, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	430b      	orrs	r3, r1
 80088c0:	4944      	ldr	r1, [pc, #272]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d17d      	bne.n	80089c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80088cc:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a40      	ldr	r2, [pc, #256]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088d8:	f7fd fc2c 	bl	8006134 <HAL_GetTick>
 80088dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088de:	e009      	b.n	80088f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088e0:	f7fd fc28 	bl	8006134 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d902      	bls.n	80088f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	73fb      	strb	r3, [r7, #15]
        break;
 80088f2:	e005      	b.n	8008900 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088f4:	4b37      	ldr	r3, [pc, #220]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1ef      	bne.n	80088e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d160      	bne.n	80089c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d111      	bne.n	8008930 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800890c:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6892      	ldr	r2, [r2, #8]
 800891c:	0211      	lsls	r1, r2, #8
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	68d2      	ldr	r2, [r2, #12]
 8008922:	0912      	lsrs	r2, r2, #4
 8008924:	0452      	lsls	r2, r2, #17
 8008926:	430a      	orrs	r2, r1
 8008928:	492a      	ldr	r1, [pc, #168]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800892a:	4313      	orrs	r3, r2
 800892c:	610b      	str	r3, [r1, #16]
 800892e:	e027      	b.n	8008980 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d112      	bne.n	800895c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008936:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800893e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	6892      	ldr	r2, [r2, #8]
 8008946:	0211      	lsls	r1, r2, #8
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6912      	ldr	r2, [r2, #16]
 800894c:	0852      	lsrs	r2, r2, #1
 800894e:	3a01      	subs	r2, #1
 8008950:	0552      	lsls	r2, r2, #21
 8008952:	430a      	orrs	r2, r1
 8008954:	491f      	ldr	r1, [pc, #124]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008956:	4313      	orrs	r3, r2
 8008958:	610b      	str	r3, [r1, #16]
 800895a:	e011      	b.n	8008980 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800895c:	4b1d      	ldr	r3, [pc, #116]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008964:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6892      	ldr	r2, [r2, #8]
 800896c:	0211      	lsls	r1, r2, #8
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	6952      	ldr	r2, [r2, #20]
 8008972:	0852      	lsrs	r2, r2, #1
 8008974:	3a01      	subs	r2, #1
 8008976:	0652      	lsls	r2, r2, #25
 8008978:	430a      	orrs	r2, r1
 800897a:	4916      	ldr	r1, [pc, #88]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800897c:	4313      	orrs	r3, r2
 800897e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008980:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800898a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800898c:	f7fd fbd2 	bl	8006134 <HAL_GetTick>
 8008990:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008992:	e009      	b.n	80089a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008994:	f7fd fbce 	bl	8006134 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d902      	bls.n	80089a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	73fb      	strb	r3, [r7, #15]
          break;
 80089a6:	e005      	b.n	80089b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0ef      	beq.n	8008994 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80089ba:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089bc:	691a      	ldr	r2, [r3, #16]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	4904      	ldr	r1, [pc, #16]	; (80089d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40021000 	.word	0x40021000

080089d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80089e6:	4b6a      	ldr	r3, [pc, #424]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d018      	beq.n	8008a24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80089f2:	4b67      	ldr	r3, [pc, #412]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f003 0203 	and.w	r2, r3, #3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d10d      	bne.n	8008a1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
       ||
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008a0a:	4b61      	ldr	r3, [pc, #388]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	091b      	lsrs	r3, r3, #4
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
       ||
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d047      	beq.n	8008aae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	73fb      	strb	r3, [r7, #15]
 8008a22:	e044      	b.n	8008aae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d018      	beq.n	8008a5e <RCCEx_PLLSAI2_Config+0x86>
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d825      	bhi.n	8008a7c <RCCEx_PLLSAI2_Config+0xa4>
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d002      	beq.n	8008a3a <RCCEx_PLLSAI2_Config+0x62>
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d009      	beq.n	8008a4c <RCCEx_PLLSAI2_Config+0x74>
 8008a38:	e020      	b.n	8008a7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a3a:	4b55      	ldr	r3, [pc, #340]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d11d      	bne.n	8008a82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a4a:	e01a      	b.n	8008a82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a4c:	4b50      	ldr	r3, [pc, #320]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d116      	bne.n	8008a86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a5c:	e013      	b.n	8008a86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008a5e:	4b4c      	ldr	r3, [pc, #304]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10f      	bne.n	8008a8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a6a:	4b49      	ldr	r3, [pc, #292]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a7a:	e006      	b.n	8008a8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a80:	e004      	b.n	8008a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008a82:	bf00      	nop
 8008a84:	e002      	b.n	8008a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008a86:	bf00      	nop
 8008a88:	e000      	b.n	8008a8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008a8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10d      	bne.n	8008aae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a92:	4b3f      	ldr	r3, [pc, #252]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6819      	ldr	r1, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	430b      	orrs	r3, r1
 8008aa8:	4939      	ldr	r1, [pc, #228]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d167      	bne.n	8008b84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008ab4:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a35      	ldr	r2, [pc, #212]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ac0:	f7fd fb38 	bl	8006134 <HAL_GetTick>
 8008ac4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008ac6:	e009      	b.n	8008adc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ac8:	f7fd fb34 	bl	8006134 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d902      	bls.n	8008adc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8008ada:	e005      	b.n	8008ae8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008adc:	4b2c      	ldr	r3, [pc, #176]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1ef      	bne.n	8008ac8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d14a      	bne.n	8008b84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d111      	bne.n	8008b18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008af4:	4b26      	ldr	r3, [pc, #152]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6892      	ldr	r2, [r2, #8]
 8008b04:	0211      	lsls	r1, r2, #8
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	68d2      	ldr	r2, [r2, #12]
 8008b0a:	0912      	lsrs	r2, r2, #4
 8008b0c:	0452      	lsls	r2, r2, #17
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	491f      	ldr	r1, [pc, #124]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	614b      	str	r3, [r1, #20]
 8008b16:	e011      	b.n	8008b3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008b18:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6892      	ldr	r2, [r2, #8]
 8008b28:	0211      	lsls	r1, r2, #8
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6912      	ldr	r2, [r2, #16]
 8008b2e:	0852      	lsrs	r2, r2, #1
 8008b30:	3a01      	subs	r2, #1
 8008b32:	0652      	lsls	r2, r2, #25
 8008b34:	430a      	orrs	r2, r1
 8008b36:	4916      	ldr	r1, [pc, #88]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008b3c:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a13      	ldr	r2, [pc, #76]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b48:	f7fd faf4 	bl	8006134 <HAL_GetTick>
 8008b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b4e:	e009      	b.n	8008b64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008b50:	f7fd faf0 	bl	8006134 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d902      	bls.n	8008b64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	73fb      	strb	r3, [r7, #15]
          break;
 8008b62:	e005      	b.n	8008b70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0ef      	beq.n	8008b50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008b76:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b78:	695a      	ldr	r2, [r3, #20]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	4904      	ldr	r1, [pc, #16]	; (8008b90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	40021000 	.word	0x40021000

08008b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e040      	b.n	8008c28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7f7 fe96 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2224      	movs	r2, #36	; 0x24
 8008bc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0201 	bic.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f8c0 	bl	8008d58 <UART_SetConfig>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d101      	bne.n	8008be2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e022      	b.n	8008c28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fb3e 	bl	800926c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0201 	orr.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fbc5 	bl	80093b0 <UART_CheckIdleState>
 8008c26:	4603      	mov	r3, r0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	f040 8082 	bne.w	8008d4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <HAL_UART_Transmit+0x26>
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e07a      	b.n	8008d50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d101      	bne.n	8008c68 <HAL_UART_Transmit+0x38>
 8008c64:	2302      	movs	r3, #2
 8008c66:	e073      	b.n	8008d50 <HAL_UART_Transmit+0x120>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2221      	movs	r2, #33	; 0x21
 8008c7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c7e:	f7fd fa59 	bl	8006134 <HAL_GetTick>
 8008c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	88fa      	ldrh	r2, [r7, #6]
 8008c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9c:	d108      	bne.n	8008cb0 <HAL_UART_Transmit+0x80>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	e003      	b.n	8008cb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008cc0:	e02d      	b.n	8008d1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2180      	movs	r1, #128	; 0x80
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fbb8 	bl	8009442 <UART_WaitOnFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e039      	b.n	8008d50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	881a      	ldrh	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cee:	b292      	uxth	r2, r2
 8008cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	e008      	b.n	8008d0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	b292      	uxth	r2, r2
 8008d04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1cb      	bne.n	8008cc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2200      	movs	r2, #0
 8008d32:	2140      	movs	r1, #64	; 0x40
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fb84 	bl	8009442 <UART_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e005      	b.n	8008d50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e000      	b.n	8008d50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008d4e:	2302      	movs	r3, #2
  }
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3720      	adds	r7, #32
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d58:	b5b0      	push	{r4, r5, r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4bad      	ldr	r3, [pc, #692]	; (8009038 <UART_SetConfig+0x2e0>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6812      	ldr	r2, [r2, #0]
 8008d8a:	69f9      	ldr	r1, [r7, #28]
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4aa2      	ldr	r2, [pc, #648]	; (800903c <UART_SetConfig+0x2e4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a99      	ldr	r2, [pc, #612]	; (8009040 <UART_SetConfig+0x2e8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d121      	bne.n	8008e22 <UART_SetConfig+0xca>
 8008dde:	4b99      	ldr	r3, [pc, #612]	; (8009044 <UART_SetConfig+0x2ec>)
 8008de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d817      	bhi.n	8008e1c <UART_SetConfig+0xc4>
 8008dec:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <UART_SetConfig+0x9c>)
 8008dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df2:	bf00      	nop
 8008df4:	08008e05 	.word	0x08008e05
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e0b 	.word	0x08008e0b
 8008e00:	08008e17 	.word	0x08008e17
 8008e04:	2301      	movs	r3, #1
 8008e06:	76fb      	strb	r3, [r7, #27]
 8008e08:	e0e7      	b.n	8008fda <UART_SetConfig+0x282>
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	76fb      	strb	r3, [r7, #27]
 8008e0e:	e0e4      	b.n	8008fda <UART_SetConfig+0x282>
 8008e10:	2304      	movs	r3, #4
 8008e12:	76fb      	strb	r3, [r7, #27]
 8008e14:	e0e1      	b.n	8008fda <UART_SetConfig+0x282>
 8008e16:	2308      	movs	r3, #8
 8008e18:	76fb      	strb	r3, [r7, #27]
 8008e1a:	e0de      	b.n	8008fda <UART_SetConfig+0x282>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	76fb      	strb	r3, [r7, #27]
 8008e20:	e0db      	b.n	8008fda <UART_SetConfig+0x282>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a88      	ldr	r2, [pc, #544]	; (8009048 <UART_SetConfig+0x2f0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d132      	bne.n	8008e92 <UART_SetConfig+0x13a>
 8008e2c:	4b85      	ldr	r3, [pc, #532]	; (8009044 <UART_SetConfig+0x2ec>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	f003 030c 	and.w	r3, r3, #12
 8008e36:	2b0c      	cmp	r3, #12
 8008e38:	d828      	bhi.n	8008e8c <UART_SetConfig+0x134>
 8008e3a:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <UART_SetConfig+0xe8>)
 8008e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e40:	08008e75 	.word	0x08008e75
 8008e44:	08008e8d 	.word	0x08008e8d
 8008e48:	08008e8d 	.word	0x08008e8d
 8008e4c:	08008e8d 	.word	0x08008e8d
 8008e50:	08008e81 	.word	0x08008e81
 8008e54:	08008e8d 	.word	0x08008e8d
 8008e58:	08008e8d 	.word	0x08008e8d
 8008e5c:	08008e8d 	.word	0x08008e8d
 8008e60:	08008e7b 	.word	0x08008e7b
 8008e64:	08008e8d 	.word	0x08008e8d
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e8d 	.word	0x08008e8d
 8008e70:	08008e87 	.word	0x08008e87
 8008e74:	2300      	movs	r3, #0
 8008e76:	76fb      	strb	r3, [r7, #27]
 8008e78:	e0af      	b.n	8008fda <UART_SetConfig+0x282>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	76fb      	strb	r3, [r7, #27]
 8008e7e:	e0ac      	b.n	8008fda <UART_SetConfig+0x282>
 8008e80:	2304      	movs	r3, #4
 8008e82:	76fb      	strb	r3, [r7, #27]
 8008e84:	e0a9      	b.n	8008fda <UART_SetConfig+0x282>
 8008e86:	2308      	movs	r3, #8
 8008e88:	76fb      	strb	r3, [r7, #27]
 8008e8a:	e0a6      	b.n	8008fda <UART_SetConfig+0x282>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	76fb      	strb	r3, [r7, #27]
 8008e90:	e0a3      	b.n	8008fda <UART_SetConfig+0x282>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a6d      	ldr	r2, [pc, #436]	; (800904c <UART_SetConfig+0x2f4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d120      	bne.n	8008ede <UART_SetConfig+0x186>
 8008e9c:	4b69      	ldr	r3, [pc, #420]	; (8009044 <UART_SetConfig+0x2ec>)
 8008e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ea6:	2b30      	cmp	r3, #48	; 0x30
 8008ea8:	d013      	beq.n	8008ed2 <UART_SetConfig+0x17a>
 8008eaa:	2b30      	cmp	r3, #48	; 0x30
 8008eac:	d814      	bhi.n	8008ed8 <UART_SetConfig+0x180>
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	d009      	beq.n	8008ec6 <UART_SetConfig+0x16e>
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d810      	bhi.n	8008ed8 <UART_SetConfig+0x180>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <UART_SetConfig+0x168>
 8008eba:	2b10      	cmp	r3, #16
 8008ebc:	d006      	beq.n	8008ecc <UART_SetConfig+0x174>
 8008ebe:	e00b      	b.n	8008ed8 <UART_SetConfig+0x180>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	76fb      	strb	r3, [r7, #27]
 8008ec4:	e089      	b.n	8008fda <UART_SetConfig+0x282>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	76fb      	strb	r3, [r7, #27]
 8008eca:	e086      	b.n	8008fda <UART_SetConfig+0x282>
 8008ecc:	2304      	movs	r3, #4
 8008ece:	76fb      	strb	r3, [r7, #27]
 8008ed0:	e083      	b.n	8008fda <UART_SetConfig+0x282>
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	76fb      	strb	r3, [r7, #27]
 8008ed6:	e080      	b.n	8008fda <UART_SetConfig+0x282>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	76fb      	strb	r3, [r7, #27]
 8008edc:	e07d      	b.n	8008fda <UART_SetConfig+0x282>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a5b      	ldr	r2, [pc, #364]	; (8009050 <UART_SetConfig+0x2f8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d120      	bne.n	8008f2a <UART_SetConfig+0x1d2>
 8008ee8:	4b56      	ldr	r3, [pc, #344]	; (8009044 <UART_SetConfig+0x2ec>)
 8008eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8008ef4:	d013      	beq.n	8008f1e <UART_SetConfig+0x1c6>
 8008ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8008ef8:	d814      	bhi.n	8008f24 <UART_SetConfig+0x1cc>
 8008efa:	2b80      	cmp	r3, #128	; 0x80
 8008efc:	d009      	beq.n	8008f12 <UART_SetConfig+0x1ba>
 8008efe:	2b80      	cmp	r3, #128	; 0x80
 8008f00:	d810      	bhi.n	8008f24 <UART_SetConfig+0x1cc>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <UART_SetConfig+0x1b4>
 8008f06:	2b40      	cmp	r3, #64	; 0x40
 8008f08:	d006      	beq.n	8008f18 <UART_SetConfig+0x1c0>
 8008f0a:	e00b      	b.n	8008f24 <UART_SetConfig+0x1cc>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	76fb      	strb	r3, [r7, #27]
 8008f10:	e063      	b.n	8008fda <UART_SetConfig+0x282>
 8008f12:	2302      	movs	r3, #2
 8008f14:	76fb      	strb	r3, [r7, #27]
 8008f16:	e060      	b.n	8008fda <UART_SetConfig+0x282>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	76fb      	strb	r3, [r7, #27]
 8008f1c:	e05d      	b.n	8008fda <UART_SetConfig+0x282>
 8008f1e:	2308      	movs	r3, #8
 8008f20:	76fb      	strb	r3, [r7, #27]
 8008f22:	e05a      	b.n	8008fda <UART_SetConfig+0x282>
 8008f24:	2310      	movs	r3, #16
 8008f26:	76fb      	strb	r3, [r7, #27]
 8008f28:	e057      	b.n	8008fda <UART_SetConfig+0x282>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a49      	ldr	r2, [pc, #292]	; (8009054 <UART_SetConfig+0x2fc>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d125      	bne.n	8008f80 <UART_SetConfig+0x228>
 8008f34:	4b43      	ldr	r3, [pc, #268]	; (8009044 <UART_SetConfig+0x2ec>)
 8008f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f42:	d017      	beq.n	8008f74 <UART_SetConfig+0x21c>
 8008f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f48:	d817      	bhi.n	8008f7a <UART_SetConfig+0x222>
 8008f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f4e:	d00b      	beq.n	8008f68 <UART_SetConfig+0x210>
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f54:	d811      	bhi.n	8008f7a <UART_SetConfig+0x222>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <UART_SetConfig+0x20a>
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5e:	d006      	beq.n	8008f6e <UART_SetConfig+0x216>
 8008f60:	e00b      	b.n	8008f7a <UART_SetConfig+0x222>
 8008f62:	2300      	movs	r3, #0
 8008f64:	76fb      	strb	r3, [r7, #27]
 8008f66:	e038      	b.n	8008fda <UART_SetConfig+0x282>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	76fb      	strb	r3, [r7, #27]
 8008f6c:	e035      	b.n	8008fda <UART_SetConfig+0x282>
 8008f6e:	2304      	movs	r3, #4
 8008f70:	76fb      	strb	r3, [r7, #27]
 8008f72:	e032      	b.n	8008fda <UART_SetConfig+0x282>
 8008f74:	2308      	movs	r3, #8
 8008f76:	76fb      	strb	r3, [r7, #27]
 8008f78:	e02f      	b.n	8008fda <UART_SetConfig+0x282>
 8008f7a:	2310      	movs	r3, #16
 8008f7c:	76fb      	strb	r3, [r7, #27]
 8008f7e:	e02c      	b.n	8008fda <UART_SetConfig+0x282>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a2d      	ldr	r2, [pc, #180]	; (800903c <UART_SetConfig+0x2e4>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d125      	bne.n	8008fd6 <UART_SetConfig+0x27e>
 8008f8a:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <UART_SetConfig+0x2ec>)
 8008f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f98:	d017      	beq.n	8008fca <UART_SetConfig+0x272>
 8008f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f9e:	d817      	bhi.n	8008fd0 <UART_SetConfig+0x278>
 8008fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa4:	d00b      	beq.n	8008fbe <UART_SetConfig+0x266>
 8008fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008faa:	d811      	bhi.n	8008fd0 <UART_SetConfig+0x278>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <UART_SetConfig+0x260>
 8008fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb4:	d006      	beq.n	8008fc4 <UART_SetConfig+0x26c>
 8008fb6:	e00b      	b.n	8008fd0 <UART_SetConfig+0x278>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	76fb      	strb	r3, [r7, #27]
 8008fbc:	e00d      	b.n	8008fda <UART_SetConfig+0x282>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	76fb      	strb	r3, [r7, #27]
 8008fc2:	e00a      	b.n	8008fda <UART_SetConfig+0x282>
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	76fb      	strb	r3, [r7, #27]
 8008fc8:	e007      	b.n	8008fda <UART_SetConfig+0x282>
 8008fca:	2308      	movs	r3, #8
 8008fcc:	76fb      	strb	r3, [r7, #27]
 8008fce:	e004      	b.n	8008fda <UART_SetConfig+0x282>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	76fb      	strb	r3, [r7, #27]
 8008fd4:	e001      	b.n	8008fda <UART_SetConfig+0x282>
 8008fd6:	2310      	movs	r3, #16
 8008fd8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a17      	ldr	r2, [pc, #92]	; (800903c <UART_SetConfig+0x2e4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	f040 8087 	bne.w	80090f4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fe6:	7efb      	ldrb	r3, [r7, #27]
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d837      	bhi.n	800905c <UART_SetConfig+0x304>
 8008fec:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <UART_SetConfig+0x29c>)
 8008fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff2:	bf00      	nop
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	0800905d 	.word	0x0800905d
 8008ffc:	08009021 	.word	0x08009021
 8009000:	0800905d 	.word	0x0800905d
 8009004:	08009027 	.word	0x08009027
 8009008:	0800905d 	.word	0x0800905d
 800900c:	0800905d 	.word	0x0800905d
 8009010:	0800905d 	.word	0x0800905d
 8009014:	0800902f 	.word	0x0800902f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009018:	f7ff f874 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800901c:	6178      	str	r0, [r7, #20]
        break;
 800901e:	e022      	b.n	8009066 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009020:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <UART_SetConfig+0x300>)
 8009022:	617b      	str	r3, [r7, #20]
        break;
 8009024:	e01f      	b.n	8009066 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009026:	f7fe ffd5 	bl	8007fd4 <HAL_RCC_GetSysClockFreq>
 800902a:	6178      	str	r0, [r7, #20]
        break;
 800902c:	e01b      	b.n	8009066 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800902e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009032:	617b      	str	r3, [r7, #20]
        break;
 8009034:	e017      	b.n	8009066 <UART_SetConfig+0x30e>
 8009036:	bf00      	nop
 8009038:	efff69f3 	.word	0xefff69f3
 800903c:	40008000 	.word	0x40008000
 8009040:	40013800 	.word	0x40013800
 8009044:	40021000 	.word	0x40021000
 8009048:	40004400 	.word	0x40004400
 800904c:	40004800 	.word	0x40004800
 8009050:	40004c00 	.word	0x40004c00
 8009054:	40005000 	.word	0x40005000
 8009058:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	76bb      	strb	r3, [r7, #26]
        break;
 8009064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 80f1 	beq.w	8009250 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	4613      	mov	r3, r2
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	4413      	add	r3, r2
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	429a      	cmp	r2, r3
 800907c:	d305      	bcc.n	800908a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	429a      	cmp	r2, r3
 8009088:	d902      	bls.n	8009090 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	76bb      	strb	r3, [r7, #26]
 800908e:	e0df      	b.n	8009250 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	4618      	mov	r0, r3
 8009094:	f04f 0100 	mov.w	r1, #0
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	020b      	lsls	r3, r1, #8
 80090a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090a6:	0202      	lsls	r2, r0, #8
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	6849      	ldr	r1, [r1, #4]
 80090ac:	0849      	lsrs	r1, r1, #1
 80090ae:	4608      	mov	r0, r1
 80090b0:	f04f 0100 	mov.w	r1, #0
 80090b4:	1814      	adds	r4, r2, r0
 80090b6:	eb43 0501 	adc.w	r5, r3, r1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	461a      	mov	r2, r3
 80090c0:	f04f 0300 	mov.w	r3, #0
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 f8da 	bl	8000280 <__aeabi_uldivmod>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4613      	mov	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090da:	d308      	bcc.n	80090ee <UART_SetConfig+0x396>
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e2:	d204      	bcs.n	80090ee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	60da      	str	r2, [r3, #12]
 80090ec:	e0b0      	b.n	8009250 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	76bb      	strb	r3, [r7, #26]
 80090f2:	e0ad      	b.n	8009250 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090fc:	d15b      	bne.n	80091b6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80090fe:	7efb      	ldrb	r3, [r7, #27]
 8009100:	2b08      	cmp	r3, #8
 8009102:	d828      	bhi.n	8009156 <UART_SetConfig+0x3fe>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0x3b4>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009131 	.word	0x08009131
 8009110:	08009139 	.word	0x08009139
 8009114:	08009141 	.word	0x08009141
 8009118:	08009157 	.word	0x08009157
 800911c:	08009147 	.word	0x08009147
 8009120:	08009157 	.word	0x08009157
 8009124:	08009157 	.word	0x08009157
 8009128:	08009157 	.word	0x08009157
 800912c:	0800914f 	.word	0x0800914f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009130:	f7fe ffe8 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 8009134:	6178      	str	r0, [r7, #20]
        break;
 8009136:	e013      	b.n	8009160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009138:	f7fe fffa 	bl	8008130 <HAL_RCC_GetPCLK2Freq>
 800913c:	6178      	str	r0, [r7, #20]
        break;
 800913e:	e00f      	b.n	8009160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009140:	4b49      	ldr	r3, [pc, #292]	; (8009268 <UART_SetConfig+0x510>)
 8009142:	617b      	str	r3, [r7, #20]
        break;
 8009144:	e00c      	b.n	8009160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009146:	f7fe ff45 	bl	8007fd4 <HAL_RCC_GetSysClockFreq>
 800914a:	6178      	str	r0, [r7, #20]
        break;
 800914c:	e008      	b.n	8009160 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800914e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009152:	617b      	str	r3, [r7, #20]
        break;
 8009154:	e004      	b.n	8009160 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	76bb      	strb	r3, [r7, #26]
        break;
 800915e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d074      	beq.n	8009250 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	005a      	lsls	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	085b      	lsrs	r3, r3, #1
 8009170:	441a      	add	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	fbb2 f3f3 	udiv	r3, r2, r3
 800917a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2b0f      	cmp	r3, #15
 8009180:	d916      	bls.n	80091b0 <UART_SetConfig+0x458>
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009188:	d212      	bcs.n	80091b0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f023 030f 	bic.w	r3, r3, #15
 8009192:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	085b      	lsrs	r3, r3, #1
 8009198:	b29b      	uxth	r3, r3
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	b29a      	uxth	r2, r3
 80091a0:	89fb      	ldrh	r3, [r7, #14]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	89fa      	ldrh	r2, [r7, #14]
 80091ac:	60da      	str	r2, [r3, #12]
 80091ae:	e04f      	b.n	8009250 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	76bb      	strb	r3, [r7, #26]
 80091b4:	e04c      	b.n	8009250 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091b6:	7efb      	ldrb	r3, [r7, #27]
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d828      	bhi.n	800920e <UART_SetConfig+0x4b6>
 80091bc:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <UART_SetConfig+0x46c>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091e9 	.word	0x080091e9
 80091c8:	080091f1 	.word	0x080091f1
 80091cc:	080091f9 	.word	0x080091f9
 80091d0:	0800920f 	.word	0x0800920f
 80091d4:	080091ff 	.word	0x080091ff
 80091d8:	0800920f 	.word	0x0800920f
 80091dc:	0800920f 	.word	0x0800920f
 80091e0:	0800920f 	.word	0x0800920f
 80091e4:	08009207 	.word	0x08009207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e8:	f7fe ff8c 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 80091ec:	6178      	str	r0, [r7, #20]
        break;
 80091ee:	e013      	b.n	8009218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091f0:	f7fe ff9e 	bl	8008130 <HAL_RCC_GetPCLK2Freq>
 80091f4:	6178      	str	r0, [r7, #20]
        break;
 80091f6:	e00f      	b.n	8009218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091f8:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <UART_SetConfig+0x510>)
 80091fa:	617b      	str	r3, [r7, #20]
        break;
 80091fc:	e00c      	b.n	8009218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091fe:	f7fe fee9 	bl	8007fd4 <HAL_RCC_GetSysClockFreq>
 8009202:	6178      	str	r0, [r7, #20]
        break;
 8009204:	e008      	b.n	8009218 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800920a:	617b      	str	r3, [r7, #20]
        break;
 800920c:	e004      	b.n	8009218 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	76bb      	strb	r3, [r7, #26]
        break;
 8009216:	bf00      	nop
    }

    if (pclk != 0U)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d018      	beq.n	8009250 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	085a      	lsrs	r2, r3, #1
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	441a      	add	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009230:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2b0f      	cmp	r3, #15
 8009236:	d909      	bls.n	800924c <UART_SetConfig+0x4f4>
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800923e:	d205      	bcs.n	800924c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	e001      	b.n	8009250 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800925c:	7ebb      	ldrb	r3, [r7, #26]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bdb0      	pop	{r4, r5, r7, pc}
 8009266:	bf00      	nop
 8009268:	00f42400 	.word	0x00f42400

0800926c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800936a:	d10a      	bne.n	8009382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]
  }
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093c0:	f7fc feb8 	bl	8006134 <HAL_GetTick>
 80093c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d10e      	bne.n	80093f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f82d 	bl	8009442 <UART_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e023      	b.n	800943a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d10e      	bne.n	800941e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f817 	bl	8009442 <UART_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e00d      	b.n	800943a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b09c      	sub	sp, #112	; 0x70
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	603b      	str	r3, [r7, #0]
 800944e:	4613      	mov	r3, r2
 8009450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009452:	e0a5      	b.n	80095a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	f000 80a1 	beq.w	80095a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800945e:	f7fc fe69 	bl	8006134 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800946a:	429a      	cmp	r2, r3
 800946c:	d302      	bcc.n	8009474 <UART_WaitOnFlagUntilTimeout+0x32>
 800946e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009470:	2b00      	cmp	r3, #0
 8009472:	d13e      	bne.n	80094f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009488:	667b      	str	r3, [r7, #100]	; 0x64
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009494:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e6      	bne.n	8009474 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3308      	adds	r3, #8
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	663b      	str	r3, [r7, #96]	; 0x60
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80094c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e5      	bne.n	80094a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2220      	movs	r2, #32
 80094de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2220      	movs	r2, #32
 80094e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e067      	b.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0304 	and.w	r3, r3, #4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d04f      	beq.n	80095a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800950a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800950e:	d147      	bne.n	80095a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009518:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800952e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009538:	637b      	str	r3, [r7, #52]	; 0x34
 800953a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800953e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e6      	bne.n	800951a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3308      	adds	r3, #8
 8009552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	613b      	str	r3, [r7, #16]
   return(result);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	66bb      	str	r3, [r7, #104]	; 0x68
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800956c:	623a      	str	r2, [r7, #32]
 800956e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	69f9      	ldr	r1, [r7, #28]
 8009572:	6a3a      	ldr	r2, [r7, #32]
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	61bb      	str	r3, [r7, #24]
   return(result);
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e5      	bne.n	800954c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2220      	movs	r2, #32
 8009584:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2220      	movs	r2, #32
 800958a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2220      	movs	r2, #32
 8009590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e010      	b.n	80095c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	69da      	ldr	r2, [r3, #28]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	4013      	ands	r3, r2
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	bf0c      	ite	eq
 80095b0:	2301      	moveq	r3, #1
 80095b2:	2300      	movne	r3, #0
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	f43f af4a 	beq.w	8009454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3770      	adds	r7, #112	; 0x70
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <__errno>:
 80095cc:	4b01      	ldr	r3, [pc, #4]	; (80095d4 <__errno+0x8>)
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20000164 	.word	0x20000164

080095d8 <__libc_init_array>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	4d0d      	ldr	r5, [pc, #52]	; (8009610 <__libc_init_array+0x38>)
 80095dc:	4c0d      	ldr	r4, [pc, #52]	; (8009614 <__libc_init_array+0x3c>)
 80095de:	1b64      	subs	r4, r4, r5
 80095e0:	10a4      	asrs	r4, r4, #2
 80095e2:	2600      	movs	r6, #0
 80095e4:	42a6      	cmp	r6, r4
 80095e6:	d109      	bne.n	80095fc <__libc_init_array+0x24>
 80095e8:	4d0b      	ldr	r5, [pc, #44]	; (8009618 <__libc_init_array+0x40>)
 80095ea:	4c0c      	ldr	r4, [pc, #48]	; (800961c <__libc_init_array+0x44>)
 80095ec:	f000 fc4e 	bl	8009e8c <_init>
 80095f0:	1b64      	subs	r4, r4, r5
 80095f2:	10a4      	asrs	r4, r4, #2
 80095f4:	2600      	movs	r6, #0
 80095f6:	42a6      	cmp	r6, r4
 80095f8:	d105      	bne.n	8009606 <__libc_init_array+0x2e>
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
 80095fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009600:	4798      	blx	r3
 8009602:	3601      	adds	r6, #1
 8009604:	e7ee      	b.n	80095e4 <__libc_init_array+0xc>
 8009606:	f855 3b04 	ldr.w	r3, [r5], #4
 800960a:	4798      	blx	r3
 800960c:	3601      	adds	r6, #1
 800960e:	e7f2      	b.n	80095f6 <__libc_init_array+0x1e>
 8009610:	08009f34 	.word	0x08009f34
 8009614:	08009f34 	.word	0x08009f34
 8009618:	08009f34 	.word	0x08009f34
 800961c:	08009f38 	.word	0x08009f38

08009620 <memset>:
 8009620:	4402      	add	r2, r0
 8009622:	4603      	mov	r3, r0
 8009624:	4293      	cmp	r3, r2
 8009626:	d100      	bne.n	800962a <memset+0xa>
 8009628:	4770      	bx	lr
 800962a:	f803 1b01 	strb.w	r1, [r3], #1
 800962e:	e7f9      	b.n	8009624 <memset+0x4>

08009630 <siprintf>:
 8009630:	b40e      	push	{r1, r2, r3}
 8009632:	b500      	push	{lr}
 8009634:	b09c      	sub	sp, #112	; 0x70
 8009636:	ab1d      	add	r3, sp, #116	; 0x74
 8009638:	9002      	str	r0, [sp, #8]
 800963a:	9006      	str	r0, [sp, #24]
 800963c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009640:	4809      	ldr	r0, [pc, #36]	; (8009668 <siprintf+0x38>)
 8009642:	9107      	str	r1, [sp, #28]
 8009644:	9104      	str	r1, [sp, #16]
 8009646:	4909      	ldr	r1, [pc, #36]	; (800966c <siprintf+0x3c>)
 8009648:	f853 2b04 	ldr.w	r2, [r3], #4
 800964c:	9105      	str	r1, [sp, #20]
 800964e:	6800      	ldr	r0, [r0, #0]
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	a902      	add	r1, sp, #8
 8009654:	f000 f868 	bl	8009728 <_svfiprintf_r>
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	b01c      	add	sp, #112	; 0x70
 8009660:	f85d eb04 	ldr.w	lr, [sp], #4
 8009664:	b003      	add	sp, #12
 8009666:	4770      	bx	lr
 8009668:	20000164 	.word	0x20000164
 800966c:	ffff0208 	.word	0xffff0208

08009670 <__ssputs_r>:
 8009670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	688e      	ldr	r6, [r1, #8]
 8009676:	429e      	cmp	r6, r3
 8009678:	4682      	mov	sl, r0
 800967a:	460c      	mov	r4, r1
 800967c:	4690      	mov	r8, r2
 800967e:	461f      	mov	r7, r3
 8009680:	d838      	bhi.n	80096f4 <__ssputs_r+0x84>
 8009682:	898a      	ldrh	r2, [r1, #12]
 8009684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009688:	d032      	beq.n	80096f0 <__ssputs_r+0x80>
 800968a:	6825      	ldr	r5, [r4, #0]
 800968c:	6909      	ldr	r1, [r1, #16]
 800968e:	eba5 0901 	sub.w	r9, r5, r1
 8009692:	6965      	ldr	r5, [r4, #20]
 8009694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800969c:	3301      	adds	r3, #1
 800969e:	444b      	add	r3, r9
 80096a0:	106d      	asrs	r5, r5, #1
 80096a2:	429d      	cmp	r5, r3
 80096a4:	bf38      	it	cc
 80096a6:	461d      	movcc	r5, r3
 80096a8:	0553      	lsls	r3, r2, #21
 80096aa:	d531      	bpl.n	8009710 <__ssputs_r+0xa0>
 80096ac:	4629      	mov	r1, r5
 80096ae:	f000 fb47 	bl	8009d40 <_malloc_r>
 80096b2:	4606      	mov	r6, r0
 80096b4:	b950      	cbnz	r0, 80096cc <__ssputs_r+0x5c>
 80096b6:	230c      	movs	r3, #12
 80096b8:	f8ca 3000 	str.w	r3, [sl]
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096cc:	6921      	ldr	r1, [r4, #16]
 80096ce:	464a      	mov	r2, r9
 80096d0:	f000 fabe 	bl	8009c50 <memcpy>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	6126      	str	r6, [r4, #16]
 80096e2:	6165      	str	r5, [r4, #20]
 80096e4:	444e      	add	r6, r9
 80096e6:	eba5 0509 	sub.w	r5, r5, r9
 80096ea:	6026      	str	r6, [r4, #0]
 80096ec:	60a5      	str	r5, [r4, #8]
 80096ee:	463e      	mov	r6, r7
 80096f0:	42be      	cmp	r6, r7
 80096f2:	d900      	bls.n	80096f6 <__ssputs_r+0x86>
 80096f4:	463e      	mov	r6, r7
 80096f6:	4632      	mov	r2, r6
 80096f8:	6820      	ldr	r0, [r4, #0]
 80096fa:	4641      	mov	r1, r8
 80096fc:	f000 fab6 	bl	8009c6c <memmove>
 8009700:	68a3      	ldr	r3, [r4, #8]
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	1b9b      	subs	r3, r3, r6
 8009706:	4432      	add	r2, r6
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	2000      	movs	r0, #0
 800970e:	e7db      	b.n	80096c8 <__ssputs_r+0x58>
 8009710:	462a      	mov	r2, r5
 8009712:	f000 fb6f 	bl	8009df4 <_realloc_r>
 8009716:	4606      	mov	r6, r0
 8009718:	2800      	cmp	r0, #0
 800971a:	d1e1      	bne.n	80096e0 <__ssputs_r+0x70>
 800971c:	6921      	ldr	r1, [r4, #16]
 800971e:	4650      	mov	r0, sl
 8009720:	f000 fabe 	bl	8009ca0 <_free_r>
 8009724:	e7c7      	b.n	80096b6 <__ssputs_r+0x46>
	...

08009728 <_svfiprintf_r>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	4698      	mov	r8, r3
 800972e:	898b      	ldrh	r3, [r1, #12]
 8009730:	061b      	lsls	r3, r3, #24
 8009732:	b09d      	sub	sp, #116	; 0x74
 8009734:	4607      	mov	r7, r0
 8009736:	460d      	mov	r5, r1
 8009738:	4614      	mov	r4, r2
 800973a:	d50e      	bpl.n	800975a <_svfiprintf_r+0x32>
 800973c:	690b      	ldr	r3, [r1, #16]
 800973e:	b963      	cbnz	r3, 800975a <_svfiprintf_r+0x32>
 8009740:	2140      	movs	r1, #64	; 0x40
 8009742:	f000 fafd 	bl	8009d40 <_malloc_r>
 8009746:	6028      	str	r0, [r5, #0]
 8009748:	6128      	str	r0, [r5, #16]
 800974a:	b920      	cbnz	r0, 8009756 <_svfiprintf_r+0x2e>
 800974c:	230c      	movs	r3, #12
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	e0d1      	b.n	80098fa <_svfiprintf_r+0x1d2>
 8009756:	2340      	movs	r3, #64	; 0x40
 8009758:	616b      	str	r3, [r5, #20]
 800975a:	2300      	movs	r3, #0
 800975c:	9309      	str	r3, [sp, #36]	; 0x24
 800975e:	2320      	movs	r3, #32
 8009760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009764:	f8cd 800c 	str.w	r8, [sp, #12]
 8009768:	2330      	movs	r3, #48	; 0x30
 800976a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009914 <_svfiprintf_r+0x1ec>
 800976e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009772:	f04f 0901 	mov.w	r9, #1
 8009776:	4623      	mov	r3, r4
 8009778:	469a      	mov	sl, r3
 800977a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800977e:	b10a      	cbz	r2, 8009784 <_svfiprintf_r+0x5c>
 8009780:	2a25      	cmp	r2, #37	; 0x25
 8009782:	d1f9      	bne.n	8009778 <_svfiprintf_r+0x50>
 8009784:	ebba 0b04 	subs.w	fp, sl, r4
 8009788:	d00b      	beq.n	80097a2 <_svfiprintf_r+0x7a>
 800978a:	465b      	mov	r3, fp
 800978c:	4622      	mov	r2, r4
 800978e:	4629      	mov	r1, r5
 8009790:	4638      	mov	r0, r7
 8009792:	f7ff ff6d 	bl	8009670 <__ssputs_r>
 8009796:	3001      	adds	r0, #1
 8009798:	f000 80aa 	beq.w	80098f0 <_svfiprintf_r+0x1c8>
 800979c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800979e:	445a      	add	r2, fp
 80097a0:	9209      	str	r2, [sp, #36]	; 0x24
 80097a2:	f89a 3000 	ldrb.w	r3, [sl]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 80a2 	beq.w	80098f0 <_svfiprintf_r+0x1c8>
 80097ac:	2300      	movs	r3, #0
 80097ae:	f04f 32ff 	mov.w	r2, #4294967295
 80097b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097b6:	f10a 0a01 	add.w	sl, sl, #1
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	9307      	str	r3, [sp, #28]
 80097be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097c2:	931a      	str	r3, [sp, #104]	; 0x68
 80097c4:	4654      	mov	r4, sl
 80097c6:	2205      	movs	r2, #5
 80097c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097cc:	4851      	ldr	r0, [pc, #324]	; (8009914 <_svfiprintf_r+0x1ec>)
 80097ce:	f7f6 fd07 	bl	80001e0 <memchr>
 80097d2:	9a04      	ldr	r2, [sp, #16]
 80097d4:	b9d8      	cbnz	r0, 800980e <_svfiprintf_r+0xe6>
 80097d6:	06d0      	lsls	r0, r2, #27
 80097d8:	bf44      	itt	mi
 80097da:	2320      	movmi	r3, #32
 80097dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e0:	0711      	lsls	r1, r2, #28
 80097e2:	bf44      	itt	mi
 80097e4:	232b      	movmi	r3, #43	; 0x2b
 80097e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ea:	f89a 3000 	ldrb.w	r3, [sl]
 80097ee:	2b2a      	cmp	r3, #42	; 0x2a
 80097f0:	d015      	beq.n	800981e <_svfiprintf_r+0xf6>
 80097f2:	9a07      	ldr	r2, [sp, #28]
 80097f4:	4654      	mov	r4, sl
 80097f6:	2000      	movs	r0, #0
 80097f8:	f04f 0c0a 	mov.w	ip, #10
 80097fc:	4621      	mov	r1, r4
 80097fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009802:	3b30      	subs	r3, #48	; 0x30
 8009804:	2b09      	cmp	r3, #9
 8009806:	d94e      	bls.n	80098a6 <_svfiprintf_r+0x17e>
 8009808:	b1b0      	cbz	r0, 8009838 <_svfiprintf_r+0x110>
 800980a:	9207      	str	r2, [sp, #28]
 800980c:	e014      	b.n	8009838 <_svfiprintf_r+0x110>
 800980e:	eba0 0308 	sub.w	r3, r0, r8
 8009812:	fa09 f303 	lsl.w	r3, r9, r3
 8009816:	4313      	orrs	r3, r2
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	46a2      	mov	sl, r4
 800981c:	e7d2      	b.n	80097c4 <_svfiprintf_r+0x9c>
 800981e:	9b03      	ldr	r3, [sp, #12]
 8009820:	1d19      	adds	r1, r3, #4
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	9103      	str	r1, [sp, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfbb      	ittet	lt
 800982a:	425b      	neglt	r3, r3
 800982c:	f042 0202 	orrlt.w	r2, r2, #2
 8009830:	9307      	strge	r3, [sp, #28]
 8009832:	9307      	strlt	r3, [sp, #28]
 8009834:	bfb8      	it	lt
 8009836:	9204      	strlt	r2, [sp, #16]
 8009838:	7823      	ldrb	r3, [r4, #0]
 800983a:	2b2e      	cmp	r3, #46	; 0x2e
 800983c:	d10c      	bne.n	8009858 <_svfiprintf_r+0x130>
 800983e:	7863      	ldrb	r3, [r4, #1]
 8009840:	2b2a      	cmp	r3, #42	; 0x2a
 8009842:	d135      	bne.n	80098b0 <_svfiprintf_r+0x188>
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	1d1a      	adds	r2, r3, #4
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	9203      	str	r2, [sp, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	bfb8      	it	lt
 8009850:	f04f 33ff 	movlt.w	r3, #4294967295
 8009854:	3402      	adds	r4, #2
 8009856:	9305      	str	r3, [sp, #20]
 8009858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009924 <_svfiprintf_r+0x1fc>
 800985c:	7821      	ldrb	r1, [r4, #0]
 800985e:	2203      	movs	r2, #3
 8009860:	4650      	mov	r0, sl
 8009862:	f7f6 fcbd 	bl	80001e0 <memchr>
 8009866:	b140      	cbz	r0, 800987a <_svfiprintf_r+0x152>
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	eba0 000a 	sub.w	r0, r0, sl
 800986e:	fa03 f000 	lsl.w	r0, r3, r0
 8009872:	9b04      	ldr	r3, [sp, #16]
 8009874:	4303      	orrs	r3, r0
 8009876:	3401      	adds	r4, #1
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987e:	4826      	ldr	r0, [pc, #152]	; (8009918 <_svfiprintf_r+0x1f0>)
 8009880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009884:	2206      	movs	r2, #6
 8009886:	f7f6 fcab 	bl	80001e0 <memchr>
 800988a:	2800      	cmp	r0, #0
 800988c:	d038      	beq.n	8009900 <_svfiprintf_r+0x1d8>
 800988e:	4b23      	ldr	r3, [pc, #140]	; (800991c <_svfiprintf_r+0x1f4>)
 8009890:	bb1b      	cbnz	r3, 80098da <_svfiprintf_r+0x1b2>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	3307      	adds	r3, #7
 8009896:	f023 0307 	bic.w	r3, r3, #7
 800989a:	3308      	adds	r3, #8
 800989c:	9303      	str	r3, [sp, #12]
 800989e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a0:	4433      	add	r3, r6
 80098a2:	9309      	str	r3, [sp, #36]	; 0x24
 80098a4:	e767      	b.n	8009776 <_svfiprintf_r+0x4e>
 80098a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80098aa:	460c      	mov	r4, r1
 80098ac:	2001      	movs	r0, #1
 80098ae:	e7a5      	b.n	80097fc <_svfiprintf_r+0xd4>
 80098b0:	2300      	movs	r3, #0
 80098b2:	3401      	adds	r4, #1
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	4619      	mov	r1, r3
 80098b8:	f04f 0c0a 	mov.w	ip, #10
 80098bc:	4620      	mov	r0, r4
 80098be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098c2:	3a30      	subs	r2, #48	; 0x30
 80098c4:	2a09      	cmp	r2, #9
 80098c6:	d903      	bls.n	80098d0 <_svfiprintf_r+0x1a8>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0c5      	beq.n	8009858 <_svfiprintf_r+0x130>
 80098cc:	9105      	str	r1, [sp, #20]
 80098ce:	e7c3      	b.n	8009858 <_svfiprintf_r+0x130>
 80098d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098d4:	4604      	mov	r4, r0
 80098d6:	2301      	movs	r3, #1
 80098d8:	e7f0      	b.n	80098bc <_svfiprintf_r+0x194>
 80098da:	ab03      	add	r3, sp, #12
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	462a      	mov	r2, r5
 80098e0:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <_svfiprintf_r+0x1f8>)
 80098e2:	a904      	add	r1, sp, #16
 80098e4:	4638      	mov	r0, r7
 80098e6:	f3af 8000 	nop.w
 80098ea:	1c42      	adds	r2, r0, #1
 80098ec:	4606      	mov	r6, r0
 80098ee:	d1d6      	bne.n	800989e <_svfiprintf_r+0x176>
 80098f0:	89ab      	ldrh	r3, [r5, #12]
 80098f2:	065b      	lsls	r3, r3, #25
 80098f4:	f53f af2c 	bmi.w	8009750 <_svfiprintf_r+0x28>
 80098f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098fa:	b01d      	add	sp, #116	; 0x74
 80098fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009900:	ab03      	add	r3, sp, #12
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	462a      	mov	r2, r5
 8009906:	4b06      	ldr	r3, [pc, #24]	; (8009920 <_svfiprintf_r+0x1f8>)
 8009908:	a904      	add	r1, sp, #16
 800990a:	4638      	mov	r0, r7
 800990c:	f000 f87a 	bl	8009a04 <_printf_i>
 8009910:	e7eb      	b.n	80098ea <_svfiprintf_r+0x1c2>
 8009912:	bf00      	nop
 8009914:	08009ef8 	.word	0x08009ef8
 8009918:	08009f02 	.word	0x08009f02
 800991c:	00000000 	.word	0x00000000
 8009920:	08009671 	.word	0x08009671
 8009924:	08009efe 	.word	0x08009efe

08009928 <_printf_common>:
 8009928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800992c:	4616      	mov	r6, r2
 800992e:	4699      	mov	r9, r3
 8009930:	688a      	ldr	r2, [r1, #8]
 8009932:	690b      	ldr	r3, [r1, #16]
 8009934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009938:	4293      	cmp	r3, r2
 800993a:	bfb8      	it	lt
 800993c:	4613      	movlt	r3, r2
 800993e:	6033      	str	r3, [r6, #0]
 8009940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009944:	4607      	mov	r7, r0
 8009946:	460c      	mov	r4, r1
 8009948:	b10a      	cbz	r2, 800994e <_printf_common+0x26>
 800994a:	3301      	adds	r3, #1
 800994c:	6033      	str	r3, [r6, #0]
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	0699      	lsls	r1, r3, #26
 8009952:	bf42      	ittt	mi
 8009954:	6833      	ldrmi	r3, [r6, #0]
 8009956:	3302      	addmi	r3, #2
 8009958:	6033      	strmi	r3, [r6, #0]
 800995a:	6825      	ldr	r5, [r4, #0]
 800995c:	f015 0506 	ands.w	r5, r5, #6
 8009960:	d106      	bne.n	8009970 <_printf_common+0x48>
 8009962:	f104 0a19 	add.w	sl, r4, #25
 8009966:	68e3      	ldr	r3, [r4, #12]
 8009968:	6832      	ldr	r2, [r6, #0]
 800996a:	1a9b      	subs	r3, r3, r2
 800996c:	42ab      	cmp	r3, r5
 800996e:	dc26      	bgt.n	80099be <_printf_common+0x96>
 8009970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009974:	1e13      	subs	r3, r2, #0
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	bf18      	it	ne
 800997a:	2301      	movne	r3, #1
 800997c:	0692      	lsls	r2, r2, #26
 800997e:	d42b      	bmi.n	80099d8 <_printf_common+0xb0>
 8009980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009984:	4649      	mov	r1, r9
 8009986:	4638      	mov	r0, r7
 8009988:	47c0      	blx	r8
 800998a:	3001      	adds	r0, #1
 800998c:	d01e      	beq.n	80099cc <_printf_common+0xa4>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	68e5      	ldr	r5, [r4, #12]
 8009992:	6832      	ldr	r2, [r6, #0]
 8009994:	f003 0306 	and.w	r3, r3, #6
 8009998:	2b04      	cmp	r3, #4
 800999a:	bf08      	it	eq
 800999c:	1aad      	subeq	r5, r5, r2
 800999e:	68a3      	ldr	r3, [r4, #8]
 80099a0:	6922      	ldr	r2, [r4, #16]
 80099a2:	bf0c      	ite	eq
 80099a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099a8:	2500      	movne	r5, #0
 80099aa:	4293      	cmp	r3, r2
 80099ac:	bfc4      	itt	gt
 80099ae:	1a9b      	subgt	r3, r3, r2
 80099b0:	18ed      	addgt	r5, r5, r3
 80099b2:	2600      	movs	r6, #0
 80099b4:	341a      	adds	r4, #26
 80099b6:	42b5      	cmp	r5, r6
 80099b8:	d11a      	bne.n	80099f0 <_printf_common+0xc8>
 80099ba:	2000      	movs	r0, #0
 80099bc:	e008      	b.n	80099d0 <_printf_common+0xa8>
 80099be:	2301      	movs	r3, #1
 80099c0:	4652      	mov	r2, sl
 80099c2:	4649      	mov	r1, r9
 80099c4:	4638      	mov	r0, r7
 80099c6:	47c0      	blx	r8
 80099c8:	3001      	adds	r0, #1
 80099ca:	d103      	bne.n	80099d4 <_printf_common+0xac>
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d4:	3501      	adds	r5, #1
 80099d6:	e7c6      	b.n	8009966 <_printf_common+0x3e>
 80099d8:	18e1      	adds	r1, r4, r3
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	2030      	movs	r0, #48	; 0x30
 80099de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099e2:	4422      	add	r2, r4
 80099e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099ec:	3302      	adds	r3, #2
 80099ee:	e7c7      	b.n	8009980 <_printf_common+0x58>
 80099f0:	2301      	movs	r3, #1
 80099f2:	4622      	mov	r2, r4
 80099f4:	4649      	mov	r1, r9
 80099f6:	4638      	mov	r0, r7
 80099f8:	47c0      	blx	r8
 80099fa:	3001      	adds	r0, #1
 80099fc:	d0e6      	beq.n	80099cc <_printf_common+0xa4>
 80099fe:	3601      	adds	r6, #1
 8009a00:	e7d9      	b.n	80099b6 <_printf_common+0x8e>
	...

08009a04 <_printf_i>:
 8009a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a08:	460c      	mov	r4, r1
 8009a0a:	4691      	mov	r9, r2
 8009a0c:	7e27      	ldrb	r7, [r4, #24]
 8009a0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a10:	2f78      	cmp	r7, #120	; 0x78
 8009a12:	4680      	mov	r8, r0
 8009a14:	469a      	mov	sl, r3
 8009a16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a1a:	d807      	bhi.n	8009a2c <_printf_i+0x28>
 8009a1c:	2f62      	cmp	r7, #98	; 0x62
 8009a1e:	d80a      	bhi.n	8009a36 <_printf_i+0x32>
 8009a20:	2f00      	cmp	r7, #0
 8009a22:	f000 80d8 	beq.w	8009bd6 <_printf_i+0x1d2>
 8009a26:	2f58      	cmp	r7, #88	; 0x58
 8009a28:	f000 80a3 	beq.w	8009b72 <_printf_i+0x16e>
 8009a2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a34:	e03a      	b.n	8009aac <_printf_i+0xa8>
 8009a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a3a:	2b15      	cmp	r3, #21
 8009a3c:	d8f6      	bhi.n	8009a2c <_printf_i+0x28>
 8009a3e:	a001      	add	r0, pc, #4	; (adr r0, 8009a44 <_printf_i+0x40>)
 8009a40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a44:	08009a9d 	.word	0x08009a9d
 8009a48:	08009ab1 	.word	0x08009ab1
 8009a4c:	08009a2d 	.word	0x08009a2d
 8009a50:	08009a2d 	.word	0x08009a2d
 8009a54:	08009a2d 	.word	0x08009a2d
 8009a58:	08009a2d 	.word	0x08009a2d
 8009a5c:	08009ab1 	.word	0x08009ab1
 8009a60:	08009a2d 	.word	0x08009a2d
 8009a64:	08009a2d 	.word	0x08009a2d
 8009a68:	08009a2d 	.word	0x08009a2d
 8009a6c:	08009a2d 	.word	0x08009a2d
 8009a70:	08009bbd 	.word	0x08009bbd
 8009a74:	08009ae1 	.word	0x08009ae1
 8009a78:	08009b9f 	.word	0x08009b9f
 8009a7c:	08009a2d 	.word	0x08009a2d
 8009a80:	08009a2d 	.word	0x08009a2d
 8009a84:	08009bdf 	.word	0x08009bdf
 8009a88:	08009a2d 	.word	0x08009a2d
 8009a8c:	08009ae1 	.word	0x08009ae1
 8009a90:	08009a2d 	.word	0x08009a2d
 8009a94:	08009a2d 	.word	0x08009a2d
 8009a98:	08009ba7 	.word	0x08009ba7
 8009a9c:	680b      	ldr	r3, [r1, #0]
 8009a9e:	1d1a      	adds	r2, r3, #4
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	600a      	str	r2, [r1, #0]
 8009aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0a3      	b.n	8009bf8 <_printf_i+0x1f4>
 8009ab0:	6825      	ldr	r5, [r4, #0]
 8009ab2:	6808      	ldr	r0, [r1, #0]
 8009ab4:	062e      	lsls	r6, r5, #24
 8009ab6:	f100 0304 	add.w	r3, r0, #4
 8009aba:	d50a      	bpl.n	8009ad2 <_printf_i+0xce>
 8009abc:	6805      	ldr	r5, [r0, #0]
 8009abe:	600b      	str	r3, [r1, #0]
 8009ac0:	2d00      	cmp	r5, #0
 8009ac2:	da03      	bge.n	8009acc <_printf_i+0xc8>
 8009ac4:	232d      	movs	r3, #45	; 0x2d
 8009ac6:	426d      	negs	r5, r5
 8009ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009acc:	485e      	ldr	r0, [pc, #376]	; (8009c48 <_printf_i+0x244>)
 8009ace:	230a      	movs	r3, #10
 8009ad0:	e019      	b.n	8009b06 <_printf_i+0x102>
 8009ad2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ad6:	6805      	ldr	r5, [r0, #0]
 8009ad8:	600b      	str	r3, [r1, #0]
 8009ada:	bf18      	it	ne
 8009adc:	b22d      	sxthne	r5, r5
 8009ade:	e7ef      	b.n	8009ac0 <_printf_i+0xbc>
 8009ae0:	680b      	ldr	r3, [r1, #0]
 8009ae2:	6825      	ldr	r5, [r4, #0]
 8009ae4:	1d18      	adds	r0, r3, #4
 8009ae6:	6008      	str	r0, [r1, #0]
 8009ae8:	0628      	lsls	r0, r5, #24
 8009aea:	d501      	bpl.n	8009af0 <_printf_i+0xec>
 8009aec:	681d      	ldr	r5, [r3, #0]
 8009aee:	e002      	b.n	8009af6 <_printf_i+0xf2>
 8009af0:	0669      	lsls	r1, r5, #25
 8009af2:	d5fb      	bpl.n	8009aec <_printf_i+0xe8>
 8009af4:	881d      	ldrh	r5, [r3, #0]
 8009af6:	4854      	ldr	r0, [pc, #336]	; (8009c48 <_printf_i+0x244>)
 8009af8:	2f6f      	cmp	r7, #111	; 0x6f
 8009afa:	bf0c      	ite	eq
 8009afc:	2308      	moveq	r3, #8
 8009afe:	230a      	movne	r3, #10
 8009b00:	2100      	movs	r1, #0
 8009b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b06:	6866      	ldr	r6, [r4, #4]
 8009b08:	60a6      	str	r6, [r4, #8]
 8009b0a:	2e00      	cmp	r6, #0
 8009b0c:	bfa2      	ittt	ge
 8009b0e:	6821      	ldrge	r1, [r4, #0]
 8009b10:	f021 0104 	bicge.w	r1, r1, #4
 8009b14:	6021      	strge	r1, [r4, #0]
 8009b16:	b90d      	cbnz	r5, 8009b1c <_printf_i+0x118>
 8009b18:	2e00      	cmp	r6, #0
 8009b1a:	d04d      	beq.n	8009bb8 <_printf_i+0x1b4>
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b22:	fb03 5711 	mls	r7, r3, r1, r5
 8009b26:	5dc7      	ldrb	r7, [r0, r7]
 8009b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b2c:	462f      	mov	r7, r5
 8009b2e:	42bb      	cmp	r3, r7
 8009b30:	460d      	mov	r5, r1
 8009b32:	d9f4      	bls.n	8009b1e <_printf_i+0x11a>
 8009b34:	2b08      	cmp	r3, #8
 8009b36:	d10b      	bne.n	8009b50 <_printf_i+0x14c>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	07df      	lsls	r7, r3, #31
 8009b3c:	d508      	bpl.n	8009b50 <_printf_i+0x14c>
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	6861      	ldr	r1, [r4, #4]
 8009b42:	4299      	cmp	r1, r3
 8009b44:	bfde      	ittt	le
 8009b46:	2330      	movle	r3, #48	; 0x30
 8009b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b50:	1b92      	subs	r2, r2, r6
 8009b52:	6122      	str	r2, [r4, #16]
 8009b54:	f8cd a000 	str.w	sl, [sp]
 8009b58:	464b      	mov	r3, r9
 8009b5a:	aa03      	add	r2, sp, #12
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4640      	mov	r0, r8
 8009b60:	f7ff fee2 	bl	8009928 <_printf_common>
 8009b64:	3001      	adds	r0, #1
 8009b66:	d14c      	bne.n	8009c02 <_printf_i+0x1fe>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	b004      	add	sp, #16
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	4835      	ldr	r0, [pc, #212]	; (8009c48 <_printf_i+0x244>)
 8009b74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	680e      	ldr	r6, [r1, #0]
 8009b7c:	061f      	lsls	r7, r3, #24
 8009b7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b82:	600e      	str	r6, [r1, #0]
 8009b84:	d514      	bpl.n	8009bb0 <_printf_i+0x1ac>
 8009b86:	07d9      	lsls	r1, r3, #31
 8009b88:	bf44      	itt	mi
 8009b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b8e:	6023      	strmi	r3, [r4, #0]
 8009b90:	b91d      	cbnz	r5, 8009b9a <_printf_i+0x196>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	f023 0320 	bic.w	r3, r3, #32
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	2310      	movs	r3, #16
 8009b9c:	e7b0      	b.n	8009b00 <_printf_i+0xfc>
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	f043 0320 	orr.w	r3, r3, #32
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	2378      	movs	r3, #120	; 0x78
 8009ba8:	4828      	ldr	r0, [pc, #160]	; (8009c4c <_printf_i+0x248>)
 8009baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bae:	e7e3      	b.n	8009b78 <_printf_i+0x174>
 8009bb0:	065e      	lsls	r6, r3, #25
 8009bb2:	bf48      	it	mi
 8009bb4:	b2ad      	uxthmi	r5, r5
 8009bb6:	e7e6      	b.n	8009b86 <_printf_i+0x182>
 8009bb8:	4616      	mov	r6, r2
 8009bba:	e7bb      	b.n	8009b34 <_printf_i+0x130>
 8009bbc:	680b      	ldr	r3, [r1, #0]
 8009bbe:	6826      	ldr	r6, [r4, #0]
 8009bc0:	6960      	ldr	r0, [r4, #20]
 8009bc2:	1d1d      	adds	r5, r3, #4
 8009bc4:	600d      	str	r5, [r1, #0]
 8009bc6:	0635      	lsls	r5, r6, #24
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	d501      	bpl.n	8009bd0 <_printf_i+0x1cc>
 8009bcc:	6018      	str	r0, [r3, #0]
 8009bce:	e002      	b.n	8009bd6 <_printf_i+0x1d2>
 8009bd0:	0671      	lsls	r1, r6, #25
 8009bd2:	d5fb      	bpl.n	8009bcc <_printf_i+0x1c8>
 8009bd4:	8018      	strh	r0, [r3, #0]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6123      	str	r3, [r4, #16]
 8009bda:	4616      	mov	r6, r2
 8009bdc:	e7ba      	b.n	8009b54 <_printf_i+0x150>
 8009bde:	680b      	ldr	r3, [r1, #0]
 8009be0:	1d1a      	adds	r2, r3, #4
 8009be2:	600a      	str	r2, [r1, #0]
 8009be4:	681e      	ldr	r6, [r3, #0]
 8009be6:	6862      	ldr	r2, [r4, #4]
 8009be8:	2100      	movs	r1, #0
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7f6 faf8 	bl	80001e0 <memchr>
 8009bf0:	b108      	cbz	r0, 8009bf6 <_printf_i+0x1f2>
 8009bf2:	1b80      	subs	r0, r0, r6
 8009bf4:	6060      	str	r0, [r4, #4]
 8009bf6:	6863      	ldr	r3, [r4, #4]
 8009bf8:	6123      	str	r3, [r4, #16]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c00:	e7a8      	b.n	8009b54 <_printf_i+0x150>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	4632      	mov	r2, r6
 8009c06:	4649      	mov	r1, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	47d0      	blx	sl
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d0ab      	beq.n	8009b68 <_printf_i+0x164>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	079b      	lsls	r3, r3, #30
 8009c14:	d413      	bmi.n	8009c3e <_printf_i+0x23a>
 8009c16:	68e0      	ldr	r0, [r4, #12]
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	4298      	cmp	r0, r3
 8009c1c:	bfb8      	it	lt
 8009c1e:	4618      	movlt	r0, r3
 8009c20:	e7a4      	b.n	8009b6c <_printf_i+0x168>
 8009c22:	2301      	movs	r3, #1
 8009c24:	4632      	mov	r2, r6
 8009c26:	4649      	mov	r1, r9
 8009c28:	4640      	mov	r0, r8
 8009c2a:	47d0      	blx	sl
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	d09b      	beq.n	8009b68 <_printf_i+0x164>
 8009c30:	3501      	adds	r5, #1
 8009c32:	68e3      	ldr	r3, [r4, #12]
 8009c34:	9903      	ldr	r1, [sp, #12]
 8009c36:	1a5b      	subs	r3, r3, r1
 8009c38:	42ab      	cmp	r3, r5
 8009c3a:	dcf2      	bgt.n	8009c22 <_printf_i+0x21e>
 8009c3c:	e7eb      	b.n	8009c16 <_printf_i+0x212>
 8009c3e:	2500      	movs	r5, #0
 8009c40:	f104 0619 	add.w	r6, r4, #25
 8009c44:	e7f5      	b.n	8009c32 <_printf_i+0x22e>
 8009c46:	bf00      	nop
 8009c48:	08009f09 	.word	0x08009f09
 8009c4c:	08009f1a 	.word	0x08009f1a

08009c50 <memcpy>:
 8009c50:	440a      	add	r2, r1
 8009c52:	4291      	cmp	r1, r2
 8009c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c58:	d100      	bne.n	8009c5c <memcpy+0xc>
 8009c5a:	4770      	bx	lr
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c66:	4291      	cmp	r1, r2
 8009c68:	d1f9      	bne.n	8009c5e <memcpy+0xe>
 8009c6a:	bd10      	pop	{r4, pc}

08009c6c <memmove>:
 8009c6c:	4288      	cmp	r0, r1
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	eb01 0402 	add.w	r4, r1, r2
 8009c74:	d902      	bls.n	8009c7c <memmove+0x10>
 8009c76:	4284      	cmp	r4, r0
 8009c78:	4623      	mov	r3, r4
 8009c7a:	d807      	bhi.n	8009c8c <memmove+0x20>
 8009c7c:	1e43      	subs	r3, r0, #1
 8009c7e:	42a1      	cmp	r1, r4
 8009c80:	d008      	beq.n	8009c94 <memmove+0x28>
 8009c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c8a:	e7f8      	b.n	8009c7e <memmove+0x12>
 8009c8c:	4402      	add	r2, r0
 8009c8e:	4601      	mov	r1, r0
 8009c90:	428a      	cmp	r2, r1
 8009c92:	d100      	bne.n	8009c96 <memmove+0x2a>
 8009c94:	bd10      	pop	{r4, pc}
 8009c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c9e:	e7f7      	b.n	8009c90 <memmove+0x24>

08009ca0 <_free_r>:
 8009ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d048      	beq.n	8009d38 <_free_r+0x98>
 8009ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009caa:	9001      	str	r0, [sp, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f1a1 0404 	sub.w	r4, r1, #4
 8009cb2:	bfb8      	it	lt
 8009cb4:	18e4      	addlt	r4, r4, r3
 8009cb6:	f000 f8d3 	bl	8009e60 <__malloc_lock>
 8009cba:	4a20      	ldr	r2, [pc, #128]	; (8009d3c <_free_r+0x9c>)
 8009cbc:	9801      	ldr	r0, [sp, #4]
 8009cbe:	6813      	ldr	r3, [r2, #0]
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	b933      	cbnz	r3, 8009cd2 <_free_r+0x32>
 8009cc4:	6063      	str	r3, [r4, #4]
 8009cc6:	6014      	str	r4, [r2, #0]
 8009cc8:	b003      	add	sp, #12
 8009cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cce:	f000 b8cd 	b.w	8009e6c <__malloc_unlock>
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	d90b      	bls.n	8009cee <_free_r+0x4e>
 8009cd6:	6821      	ldr	r1, [r4, #0]
 8009cd8:	1862      	adds	r2, r4, r1
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	bf04      	itt	eq
 8009cde:	681a      	ldreq	r2, [r3, #0]
 8009ce0:	685b      	ldreq	r3, [r3, #4]
 8009ce2:	6063      	str	r3, [r4, #4]
 8009ce4:	bf04      	itt	eq
 8009ce6:	1852      	addeq	r2, r2, r1
 8009ce8:	6022      	streq	r2, [r4, #0]
 8009cea:	602c      	str	r4, [r5, #0]
 8009cec:	e7ec      	b.n	8009cc8 <_free_r+0x28>
 8009cee:	461a      	mov	r2, r3
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	b10b      	cbz	r3, 8009cf8 <_free_r+0x58>
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	d9fa      	bls.n	8009cee <_free_r+0x4e>
 8009cf8:	6811      	ldr	r1, [r2, #0]
 8009cfa:	1855      	adds	r5, r2, r1
 8009cfc:	42a5      	cmp	r5, r4
 8009cfe:	d10b      	bne.n	8009d18 <_free_r+0x78>
 8009d00:	6824      	ldr	r4, [r4, #0]
 8009d02:	4421      	add	r1, r4
 8009d04:	1854      	adds	r4, r2, r1
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	6011      	str	r1, [r2, #0]
 8009d0a:	d1dd      	bne.n	8009cc8 <_free_r+0x28>
 8009d0c:	681c      	ldr	r4, [r3, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	6053      	str	r3, [r2, #4]
 8009d12:	4421      	add	r1, r4
 8009d14:	6011      	str	r1, [r2, #0]
 8009d16:	e7d7      	b.n	8009cc8 <_free_r+0x28>
 8009d18:	d902      	bls.n	8009d20 <_free_r+0x80>
 8009d1a:	230c      	movs	r3, #12
 8009d1c:	6003      	str	r3, [r0, #0]
 8009d1e:	e7d3      	b.n	8009cc8 <_free_r+0x28>
 8009d20:	6825      	ldr	r5, [r4, #0]
 8009d22:	1961      	adds	r1, r4, r5
 8009d24:	428b      	cmp	r3, r1
 8009d26:	bf04      	itt	eq
 8009d28:	6819      	ldreq	r1, [r3, #0]
 8009d2a:	685b      	ldreq	r3, [r3, #4]
 8009d2c:	6063      	str	r3, [r4, #4]
 8009d2e:	bf04      	itt	eq
 8009d30:	1949      	addeq	r1, r1, r5
 8009d32:	6021      	streq	r1, [r4, #0]
 8009d34:	6054      	str	r4, [r2, #4]
 8009d36:	e7c7      	b.n	8009cc8 <_free_r+0x28>
 8009d38:	b003      	add	sp, #12
 8009d3a:	bd30      	pop	{r4, r5, pc}
 8009d3c:	20000330 	.word	0x20000330

08009d40 <_malloc_r>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	1ccd      	adds	r5, r1, #3
 8009d44:	f025 0503 	bic.w	r5, r5, #3
 8009d48:	3508      	adds	r5, #8
 8009d4a:	2d0c      	cmp	r5, #12
 8009d4c:	bf38      	it	cc
 8009d4e:	250c      	movcc	r5, #12
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	4606      	mov	r6, r0
 8009d54:	db01      	blt.n	8009d5a <_malloc_r+0x1a>
 8009d56:	42a9      	cmp	r1, r5
 8009d58:	d903      	bls.n	8009d62 <_malloc_r+0x22>
 8009d5a:	230c      	movs	r3, #12
 8009d5c:	6033      	str	r3, [r6, #0]
 8009d5e:	2000      	movs	r0, #0
 8009d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d62:	f000 f87d 	bl	8009e60 <__malloc_lock>
 8009d66:	4921      	ldr	r1, [pc, #132]	; (8009dec <_malloc_r+0xac>)
 8009d68:	680a      	ldr	r2, [r1, #0]
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	b99c      	cbnz	r4, 8009d96 <_malloc_r+0x56>
 8009d6e:	4f20      	ldr	r7, [pc, #128]	; (8009df0 <_malloc_r+0xb0>)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	b923      	cbnz	r3, 8009d7e <_malloc_r+0x3e>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4630      	mov	r0, r6
 8009d78:	f000 f862 	bl	8009e40 <_sbrk_r>
 8009d7c:	6038      	str	r0, [r7, #0]
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4630      	mov	r0, r6
 8009d82:	f000 f85d 	bl	8009e40 <_sbrk_r>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d123      	bne.n	8009dd2 <_malloc_r+0x92>
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	6033      	str	r3, [r6, #0]
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f000 f86c 	bl	8009e6c <__malloc_unlock>
 8009d94:	e7e3      	b.n	8009d5e <_malloc_r+0x1e>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	1b5b      	subs	r3, r3, r5
 8009d9a:	d417      	bmi.n	8009dcc <_malloc_r+0x8c>
 8009d9c:	2b0b      	cmp	r3, #11
 8009d9e:	d903      	bls.n	8009da8 <_malloc_r+0x68>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	441c      	add	r4, r3
 8009da4:	6025      	str	r5, [r4, #0]
 8009da6:	e004      	b.n	8009db2 <_malloc_r+0x72>
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	42a2      	cmp	r2, r4
 8009dac:	bf0c      	ite	eq
 8009dae:	600b      	streq	r3, [r1, #0]
 8009db0:	6053      	strne	r3, [r2, #4]
 8009db2:	4630      	mov	r0, r6
 8009db4:	f000 f85a 	bl	8009e6c <__malloc_unlock>
 8009db8:	f104 000b 	add.w	r0, r4, #11
 8009dbc:	1d23      	adds	r3, r4, #4
 8009dbe:	f020 0007 	bic.w	r0, r0, #7
 8009dc2:	1ac2      	subs	r2, r0, r3
 8009dc4:	d0cc      	beq.n	8009d60 <_malloc_r+0x20>
 8009dc6:	1a1b      	subs	r3, r3, r0
 8009dc8:	50a3      	str	r3, [r4, r2]
 8009dca:	e7c9      	b.n	8009d60 <_malloc_r+0x20>
 8009dcc:	4622      	mov	r2, r4
 8009dce:	6864      	ldr	r4, [r4, #4]
 8009dd0:	e7cc      	b.n	8009d6c <_malloc_r+0x2c>
 8009dd2:	1cc4      	adds	r4, r0, #3
 8009dd4:	f024 0403 	bic.w	r4, r4, #3
 8009dd8:	42a0      	cmp	r0, r4
 8009dda:	d0e3      	beq.n	8009da4 <_malloc_r+0x64>
 8009ddc:	1a21      	subs	r1, r4, r0
 8009dde:	4630      	mov	r0, r6
 8009de0:	f000 f82e 	bl	8009e40 <_sbrk_r>
 8009de4:	3001      	adds	r0, #1
 8009de6:	d1dd      	bne.n	8009da4 <_malloc_r+0x64>
 8009de8:	e7cf      	b.n	8009d8a <_malloc_r+0x4a>
 8009dea:	bf00      	nop
 8009dec:	20000330 	.word	0x20000330
 8009df0:	20000334 	.word	0x20000334

08009df4 <_realloc_r>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	4607      	mov	r7, r0
 8009df8:	4614      	mov	r4, r2
 8009dfa:	460e      	mov	r6, r1
 8009dfc:	b921      	cbnz	r1, 8009e08 <_realloc_r+0x14>
 8009dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e02:	4611      	mov	r1, r2
 8009e04:	f7ff bf9c 	b.w	8009d40 <_malloc_r>
 8009e08:	b922      	cbnz	r2, 8009e14 <_realloc_r+0x20>
 8009e0a:	f7ff ff49 	bl	8009ca0 <_free_r>
 8009e0e:	4625      	mov	r5, r4
 8009e10:	4628      	mov	r0, r5
 8009e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e14:	f000 f830 	bl	8009e78 <_malloc_usable_size_r>
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d20f      	bcs.n	8009e3c <_realloc_r+0x48>
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f7ff ff8e 	bl	8009d40 <_malloc_r>
 8009e24:	4605      	mov	r5, r0
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d0f2      	beq.n	8009e10 <_realloc_r+0x1c>
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	f7ff ff0f 	bl	8009c50 <memcpy>
 8009e32:	4631      	mov	r1, r6
 8009e34:	4638      	mov	r0, r7
 8009e36:	f7ff ff33 	bl	8009ca0 <_free_r>
 8009e3a:	e7e9      	b.n	8009e10 <_realloc_r+0x1c>
 8009e3c:	4635      	mov	r5, r6
 8009e3e:	e7e7      	b.n	8009e10 <_realloc_r+0x1c>

08009e40 <_sbrk_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	; (8009e5c <_sbrk_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f6 ff8e 	bl	8000d6c <_sbrk>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_sbrk_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_sbrk_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	200004c8 	.word	0x200004c8

08009e60 <__malloc_lock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__malloc_lock+0x8>)
 8009e62:	f000 b811 	b.w	8009e88 <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	200004d0 	.word	0x200004d0

08009e6c <__malloc_unlock>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	; (8009e74 <__malloc_unlock+0x8>)
 8009e6e:	f000 b80c 	b.w	8009e8a <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	200004d0 	.word	0x200004d0

08009e78 <_malloc_usable_size_r>:
 8009e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7c:	1f18      	subs	r0, r3, #4
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bfbc      	itt	lt
 8009e82:	580b      	ldrlt	r3, [r1, r0]
 8009e84:	18c0      	addlt	r0, r0, r3
 8009e86:	4770      	bx	lr

08009e88 <__retarget_lock_acquire_recursive>:
 8009e88:	4770      	bx	lr

08009e8a <__retarget_lock_release_recursive>:
 8009e8a:	4770      	bx	lr

08009e8c <_init>:
 8009e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8e:	bf00      	nop
 8009e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e92:	bc08      	pop	{r3}
 8009e94:	469e      	mov	lr, r3
 8009e96:	4770      	bx	lr

08009e98 <_fini>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr
