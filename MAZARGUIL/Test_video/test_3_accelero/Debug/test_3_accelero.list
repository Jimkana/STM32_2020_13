
test_3_accelero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f4  0800a0f4  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0f4  0800a0f4  0001a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0fc  0800a0fc  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a100  0800a100  0001a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800a104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001c8  0800a2cc  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800a2cc  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033afd  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de2  00000000  00000000  00053cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00057ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002318  00000000  00000000  00059f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a7b  00000000  00000000  0005c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c269  00000000  00000000  00084ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b13  00000000  00000000  000a0f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199a67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a098  00000000  00000000  00199abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fd4 	.word	0x08009fd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08009fd4 	.word	0x08009fd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f005 fe15 	bl	80061ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f91f 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9cf 	bl	8000928 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f99d 	bl	80008c8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800058e:	f000 f96b 	bl	8000868 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0,MOTION_GYRO)==HAL_OK){
 8000592:	2101      	movs	r1, #1
 8000594:	2000      	movs	r0, #0
 8000596:	f005 fa83 	bl	8005aa0 <IKS01A2_MOTION_SENSOR_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <main+0x30>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0,MOTION_GYRO);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2000      	movs	r0, #0
 80005a4:	f005 fb78 	bl	8005c98 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO)==HAL_OK){
 80005a8:	2102      	movs	r1, #2
 80005aa:	2001      	movs	r0, #1
 80005ac:	f005 fa78 	bl	8005aa0 <IKS01A2_MOTION_SENSOR_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <main+0x46>
	  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO);
 80005b6:	2102      	movs	r1, #2
 80005b8:	2001      	movs	r0, #1
 80005ba:	f005 fb6d 	bl	8005c98 <IKS01A2_MOTION_SENSOR_Enable>
  }

  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_TEMPERATURE)==HAL_OK){
 80005be:	2101      	movs	r1, #1
 80005c0:	2000      	movs	r0, #0
 80005c2:	f004 ffb1 	bl	8005528 <IKS01A2_ENV_SENSOR_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d103      	bne.n	80005d4 <main+0x5c>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_TEMPERATURE);
 80005cc:	2101      	movs	r1, #1
 80005ce:	2000      	movs	r0, #0
 80005d0:	f005 f86a 	bl	80056a8 <IKS01A2_ENV_SENSOR_Enable>
  }
  if(IKS01A2_ENV_SENSOR_Init(IKS01A2_HTS221_0,ENV_HUMIDITY)==HAL_OK){
 80005d4:	2104      	movs	r1, #4
 80005d6:	2000      	movs	r0, #0
 80005d8:	f004 ffa6 	bl	8005528 <IKS01A2_ENV_SENSOR_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d103      	bne.n	80005ea <main+0x72>
	  IKS01A2_ENV_SENSOR_Enable(IKS01A2_HTS221_0,ENV_HUMIDITY);
 80005e2:	2104      	movs	r1, #4
 80005e4:	2000      	movs	r0, #0
 80005e6:	f005 f85f 	bl	80056a8 <IKS01A2_ENV_SENSOR_Enable>
  while (1)
  {



	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 80005ea:	4a68      	ldr	r2, [pc, #416]	; (800078c <main+0x214>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	2000      	movs	r0, #0
 80005f0:	f005 f89c 	bl	800572c <IKS01A2_ENV_SENSOR_GetValue>
	  sprintf((char*)buf,"Température : %u\r\n",(unsigned int)data);
 80005f4:	4b65      	ldr	r3, [pc, #404]	; (800078c <main+0x214>)
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fe:	463b      	mov	r3, r7
 8000600:	ee17 2a90 	vmov	r2, s15
 8000604:	4962      	ldr	r1, [pc, #392]	; (8000790 <main+0x218>)
 8000606:	4618      	mov	r0, r3
 8000608:	f009 f8b6 	bl	8009778 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fdde 	bl	80001d0 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	4639      	mov	r1, r7
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	485d      	ldr	r0, [pc, #372]	; (8000794 <main+0x21c>)
 8000620:	f008 fbaa 	bl	8008d78 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f005 fe35 	bl	8006294 <HAL_Delay>


	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_HUMIDITY, &data_humidity);
 800062a:	4a5b      	ldr	r2, [pc, #364]	; (8000798 <main+0x220>)
 800062c:	2104      	movs	r1, #4
 800062e:	2000      	movs	r0, #0
 8000630:	f005 f87c 	bl	800572c <IKS01A2_ENV_SENSOR_GetValue>
	  sprintf((char*)buf,"Humidité : %u\r\n",(unsigned int)data_humidity);
 8000634:	4b58      	ldr	r3, [pc, #352]	; (8000798 <main+0x220>)
 8000636:	edd3 7a00 	vldr	s15, [r3]
 800063a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063e:	463b      	mov	r3, r7
 8000640:	ee17 2a90 	vmov	r2, s15
 8000644:	4955      	ldr	r1, [pc, #340]	; (800079c <main+0x224>)
 8000646:	4618      	mov	r0, r3
 8000648:	f009 f896 	bl	8009778 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fdbe 	bl	80001d0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	4639      	mov	r1, r7
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	484d      	ldr	r0, [pc, #308]	; (8000794 <main+0x21c>)
 8000660:	f008 fb8a 	bl	8008d78 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	; 0x64
 8000666:	f005 fe15 	bl	8006294 <HAL_Delay>


	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0,MOTION_ACCELERO, &data_axe_acc);
 800066a:	4a4d      	ldr	r2, [pc, #308]	; (80007a0 <main+0x228>)
 800066c:	2102      	movs	r1, #2
 800066e:	2001      	movs	r0, #1
 8000670:	f005 fb54 	bl	8005d1c <IKS01A2_MOTION_SENSOR_GetAxes>
	  sprintf((char*)buf,"Accelero : \t x : %u\r\n ",(unsigned int)data_axe_acc.x);
 8000674:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <main+0x228>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	463b      	mov	r3, r7
 800067c:	4949      	ldr	r1, [pc, #292]	; (80007a4 <main+0x22c>)
 800067e:	4618      	mov	r0, r3
 8000680:	f009 f87a 	bl	8009778 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000684:	463b      	mov	r3, r7
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fda2 	bl	80001d0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b29a      	uxth	r2, r3
 8000690:	4639      	mov	r1, r7
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	483f      	ldr	r0, [pc, #252]	; (8000794 <main+0x21c>)
 8000698:	f008 fb6e 	bl	8008d78 <HAL_UART_Transmit>

	  sprintf((char*)buf," \t\t y : %u \r\n",(unsigned int)data_axe_acc.y);
 800069c:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <main+0x228>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	461a      	mov	r2, r3
 80006a2:	463b      	mov	r3, r7
 80006a4:	4940      	ldr	r1, [pc, #256]	; (80007a8 <main+0x230>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f009 f866 	bl	8009778 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80006ac:	463b      	mov	r3, r7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd8e 	bl	80001d0 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4639      	mov	r1, r7
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	4835      	ldr	r0, [pc, #212]	; (8000794 <main+0x21c>)
 80006c0:	f008 fb5a 	bl	8008d78 <HAL_UART_Transmit>

	  sprintf((char*)buf,"\t\t z : %u \r\n",(unsigned int)data_axe_acc.z);
 80006c4:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <main+0x228>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	461a      	mov	r2, r3
 80006ca:	463b      	mov	r3, r7
 80006cc:	4937      	ldr	r1, [pc, #220]	; (80007ac <main+0x234>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f009 f852 	bl	8009778 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80006d4:	463b      	mov	r3, r7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd7a 	bl	80001d0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4639      	mov	r1, r7
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	482b      	ldr	r0, [pc, #172]	; (8000794 <main+0x21c>)
 80006e8:	f008 fb46 	bl	8008d78 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80006ec:	2064      	movs	r0, #100	; 0x64
 80006ee:	f005 fdd1 	bl	8006294 <HAL_Delay>



	  IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0,MOTION_GYRO, &data_axe_gyro);
 80006f2:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <main+0x238>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	2000      	movs	r0, #0
 80006f8:	f005 fb10 	bl	8005d1c <IKS01A2_MOTION_SENSOR_GetAxes>
	  val = data_axe_gyro.x ;
 80006fc:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <main+0x238>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a2c      	ldr	r2, [pc, #176]	; (80007b4 <main+0x23c>)
 8000702:	6013      	str	r3, [r2, #0]
	 // val |= 0xF000;
	  sprintf((char*)buf,"gyro \t x : %u\r\n",(int)val);
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <main+0x23c>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	463b      	mov	r3, r7
 800070a:	492b      	ldr	r1, [pc, #172]	; (80007b8 <main+0x240>)
 800070c:	4618      	mov	r0, r3
 800070e:	f009 f833 	bl	8009778 <siprintf>

//	  val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
//	  if (val > 0x7FF){
//		  val |=0xF000;
//	  }
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000712:	463b      	mov	r3, r7
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd5b 	bl	80001d0 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	4639      	mov	r1, r7
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	481b      	ldr	r0, [pc, #108]	; (8000794 <main+0x21c>)
 8000726:	f008 fb27 	bl	8008d78 <HAL_UART_Transmit>

	  sprintf((char*)buf," \t y : %u\r\n",(unsigned int)data_axe_gyro.y);
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <main+0x238>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	461a      	mov	r2, r3
 8000730:	463b      	mov	r3, r7
 8000732:	4922      	ldr	r1, [pc, #136]	; (80007bc <main+0x244>)
 8000734:	4618      	mov	r0, r3
 8000736:	f009 f81f 	bl	8009778 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 800073a:	463b      	mov	r3, r7
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fd47 	bl	80001d0 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	4639      	mov	r1, r7
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <main+0x21c>)
 800074e:	f008 fb13 	bl	8008d78 <HAL_UART_Transmit>

	  sprintf((char*)buf," \t z : %u\r\n\n",(unsigned int)data_axe_gyro.z);
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <main+0x238>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	461a      	mov	r2, r3
 8000758:	463b      	mov	r3, r7
 800075a:	4919      	ldr	r1, [pc, #100]	; (80007c0 <main+0x248>)
 800075c:	4618      	mov	r0, r3
 800075e:	f009 f80b 	bl	8009778 <siprintf>
	  HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 8000762:	463b      	mov	r3, r7
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fd33 	bl	80001d0 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	4639      	mov	r1, r7
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <main+0x21c>)
 8000776:	f008 faff 	bl	8008d78 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f005 fd8a 	bl	8006294 <HAL_Delay>


	  HAL_Delay(1000);
 8000780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000784:	f005 fd86 	bl	8006294 <HAL_Delay>
	  IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0,ENV_TEMPERATURE, &data);
 8000788:	e72f      	b.n	80005ea <main+0x72>
 800078a:	bf00      	nop
 800078c:	2000034c 	.word	0x2000034c
 8000790:	08009fec 	.word	0x08009fec
 8000794:	200003e4 	.word	0x200003e4
 8000798:	20000338 	.word	0x20000338
 800079c:	0800a000 	.word	0x0800a000
 80007a0:	200003d8 	.word	0x200003d8
 80007a4:	0800a014 	.word	0x0800a014
 80007a8:	0800a02c 	.word	0x0800a02c
 80007ac:	0800a03c 	.word	0x0800a03c
 80007b0:	20000340 	.word	0x20000340
 80007b4:	2000033c 	.word	0x2000033c
 80007b8:	0800a04c 	.word	0x0800a04c
 80007bc:	0800a05c 	.word	0x0800a05c
 80007c0:	0800a068 	.word	0x0800a068

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b096      	sub	sp, #88	; 0x58
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2244      	movs	r2, #68	; 0x44
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f008 ffc8 	bl	8009768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ea:	f006 ff79 	bl	80076e0 <HAL_PWREx_ControlVoltageScaling>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f4:	f000 f8f2 	bl	80009dc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000800:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2310      	movs	r3, #16
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080e:	2301      	movs	r3, #1
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000812:	230a      	movs	r3, #10
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000816:	2307      	movs	r3, #7
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4618      	mov	r0, r3
 8000828:	f006 ffb0 	bl	800778c <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000832:	f000 f8d3 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	2104      	movs	r1, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f007 fb82 	bl	8007f58 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800085a:	f000 f8bf 	bl	80009dc <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3758      	adds	r7, #88	; 0x58
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_UART4_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_UART4_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_UART4_Init+0x58>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_UART4_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_UART4_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_UART4_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_UART4_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_UART4_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_UART4_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_UART4_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_UART4_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_UART4_Init+0x58>)
 80008ac:	f008 fa16 	bl	8008cdc <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f891 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000350 	.word	0x20000350
 80008c4:	40004c00 	.word	0x40004c00

080008c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART2_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x58>)
 800090c:	f008 f9e6 	bl	8008cdc <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f861 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200003e4 	.word	0x200003e4
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_GPIO_Init+0xac>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <MX_GPIO_Init+0xac>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_GPIO_Init+0xac>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_GPIO_Init+0xac>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f006 f829 	bl	80069e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000998:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xb0>)
 80009aa:	f005 fd7d 	bl	80064a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f005 fd6e 	bl	80064a8 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000800 	.word	0x48000800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	; 0x60
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ae      	sub	sp, #184	; 0xb8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2288      	movs	r2, #136	; 0x88
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f008 fe89 	bl	8009768 <memset>
  if(huart->Instance==UART4)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a42      	ldr	r2, [pc, #264]	; (8000b64 <HAL_UART_MspInit+0x134>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d13c      	bne.n	8000ada <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a60:	2308      	movs	r3, #8
 8000a62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f007 fc79 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a78:	f7ff ffb0 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a80:	4a39      	ldr	r2, [pc, #228]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a86:	6593      	str	r3, [r2, #88]	; 0x58
 8000a88:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aac:	2303      	movs	r3, #3
 8000aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f005 fce8 	bl	80064a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad8:	e040      	b.n	8000b5c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <HAL_UART_MspInit+0x13c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d13b      	bne.n	8000b5c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 fc37 	bl	8008364 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000afc:	f7ff ff6e 	bl	80009dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x138>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b30:	230c      	movs	r3, #12
 8000b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f005 fca6 	bl	80064a8 <HAL_GPIO_Init>
}
 8000b5c:	bf00      	nop
 8000b5e:	37b8      	adds	r7, #184	; 0xb8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40004c00 	.word	0x40004c00
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40004400 	.word	0x40004400

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f005 fb4a 	bl	8006254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <BSP_I2C1_Init+0x70>)
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <BSP_I2C1_Init+0x74>)
 8000bd2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <BSP_I2C1_Init+0x78>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	4918      	ldr	r1, [pc, #96]	; (8000c3c <BSP_I2C1_Init+0x78>)
 8000bdc:	600a      	str	r2, [r1, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d122      	bne.n	8000c28 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000be2:	4814      	ldr	r0, [pc, #80]	; (8000c34 <BSP_I2C1_Init+0x70>)
 8000be4:	f006 fa16 	bl	8007014 <HAL_I2C_GetState>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d11c      	bne.n	8000c28 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <BSP_I2C1_Init+0x70>)
 8000bf0:	f000 f8fe 	bl	8000df0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d116      	bne.n	8000c28 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <BSP_I2C1_Init+0x70>)
 8000bfc:	f000 f8b4 	bl	8000d68 <MX_I2C1_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c06:	f06f 0307 	mvn.w	r3, #7
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	e00c      	b.n	8000c28 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <BSP_I2C1_Init+0x70>)
 8000c12:	f006 fcbf 	bl	8007594 <HAL_I2CEx_ConfigAnalogFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c1c:	f06f 0307 	mvn.w	r3, #7
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e001      	b.n	8000c28 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000468 	.word	0x20000468
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	200001e4 	.word	0x200001e4

08000c40 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <BSP_I2C1_DeInit+0x48>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d014      	beq.n	8000c7c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <BSP_I2C1_DeInit+0x48>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <BSP_I2C1_DeInit+0x48>)
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <BSP_I2C1_DeInit+0x48>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10b      	bne.n	8000c7c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <BSP_I2C1_DeInit+0x4c>)
 8000c66:	f000 f909 	bl	8000e7c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <BSP_I2C1_DeInit+0x4c>)
 8000c6c:	f005 ff61 	bl	8006b32 <HAL_I2C_DeInit>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000c76:	f06f 0307 	mvn.w	r3, #7
 8000c7a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001e4 	.word	0x200001e4
 8000c8c:	20000468 	.word	0x20000468

08000c90 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af04      	add	r7, sp, #16
 8000c96:	60ba      	str	r2, [r7, #8]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	81fb      	strh	r3, [r7, #14]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	81bb      	strh	r3, [r7, #12]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000caa:	89ba      	ldrh	r2, [r7, #12]
 8000cac:	89f9      	ldrh	r1, [r7, #14]
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <BSP_I2C1_WriteReg+0x60>)
 8000cc0:	f005 ff7a 	bl	8006bb8 <HAL_I2C_Mem_Write>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00c      	beq.n	8000ce4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <BSP_I2C1_WriteReg+0x60>)
 8000ccc:	f006 f9b0 	bl	8007030 <HAL_I2C_GetError>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d103      	bne.n	8000cde <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000cd6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e002      	b.n	8000ce4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000cde:	f06f 0303 	mvn.w	r3, #3
 8000ce2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000ce4:	697b      	ldr	r3, [r7, #20]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000468 	.word	0x20000468

08000cf4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	460b      	mov	r3, r1
 8000d04:	81bb      	strh	r3, [r7, #12]
 8000d06:	4613      	mov	r3, r2
 8000d08:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d0e:	89ba      	ldrh	r2, [r7, #12]
 8000d10:	89f9      	ldrh	r1, [r7, #14]
 8000d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <BSP_I2C1_ReadReg+0x60>)
 8000d24:	f006 f85c 	bl	8006de0 <HAL_I2C_Mem_Read>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00c      	beq.n	8000d48 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <BSP_I2C1_ReadReg+0x60>)
 8000d30:	f006 f97e 	bl	8007030 <HAL_I2C_GetError>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d103      	bne.n	8000d42 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d3a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e002      	b.n	8000d48 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d42:	f06f 0303 	mvn.w	r3, #3
 8000d46:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d48:	697b      	ldr	r3, [r7, #20]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000468 	.word	0x20000468

08000d58 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d5c:	f005 fa8e 	bl	800627c <HAL_GetTick>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <MX_I2C1_Init+0x80>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <MX_I2C1_Init+0x84>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f005 fe32 	bl	8006a14 <HAL_I2C_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f006 fbe9 	bl	8007594 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f006 fc2b 	bl	800762a <HAL_I2CEx_ConfigDigitalFilter>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40005400 	.word	0x40005400
 8000dec:	10909cec 	.word	0x10909cec

08000df0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <I2C1_MspInit+0x84>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <I2C1_MspInit+0x84>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <I2C1_MspInit+0x84>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e16:	2312      	movs	r3, #18
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e22:	2304      	movs	r3, #4
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4812      	ldr	r0, [pc, #72]	; (8000e78 <I2C1_MspInit+0x88>)
 8000e2e:	f005 fb3b 	bl	80064a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e38:	2312      	movs	r3, #18
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e44:	2304      	movs	r3, #4
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <I2C1_MspInit+0x88>)
 8000e50:	f005 fb2a 	bl	80064a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <I2C1_MspInit+0x84>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <I2C1_MspInit+0x84>)
 8000e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <I2C1_MspInit+0x84>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000400 	.word	0x48000400

08000e7c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <I2C1_MspDeInit+0x30>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e88:	4a08      	ldr	r2, [pc, #32]	; (8000eac <I2C1_MspDeInit+0x30>)
 8000e8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e8e:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e94:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <I2C1_MspDeInit+0x34>)
 8000e96:	f005 fcb1 	bl	80067fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <I2C1_MspDeInit+0x34>)
 8000ea0:	f005 fcac 	bl	80067fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f008 fc16 	bl	8009714 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20018000 	.word	0x20018000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	200001e8 	.word	0x200001e8
 8000f1c:	200004e0 	.word	0x200004e0

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f7ff ffea 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f008 fbd5 	bl	8009720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f7ff faff 	bl	8000578 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000f88:	0800a104 	.word	0x0800a104
  ldr r2, =_sbss
 8000f8c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000f90:	200004dc 	.word	0x200004dc

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d103      	bne.n	8000fb0 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e030      	b.n	8001012 <HTS221_RegisterBusIO+0x7a>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	7b1a      	ldrb	r2, [r3, #12]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	695a      	ldr	r2, [r3, #20]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a0c      	ldr	r2, [pc, #48]	; (800101c <HTS221_RegisterBusIO+0x84>)
 8000fec:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HTS221_RegisterBusIO+0x88>)
 8000ff2:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <HTS221_RegisterBusIO+0x74>
    {
      ret = pObj->IO.Init();
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4798      	blx	r3
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	e002      	b.n	8001012 <HTS221_RegisterBusIO+0x7a>
    }
    else
    {
      ret = HTS221_ERROR;
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	0800164f 	.word	0x0800164f
 8001020:	080016b1 	.word	0x080016b1

08001024 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001032:	2b00      	cmp	r3, #0
 8001034:	d108      	bne.n	8001048 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 faa4 	bl	8001584 <HTS221_Initialize>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e004      	b.n	8001052 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001068:	2b01      	cmp	r3, #1
 800106a:	d111      	bne.n	8001090 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f878 	bl	8001162 <HTS221_HUM_Disable>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	e00d      	b.n	800109a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f95f 	bl	8001342 <HTS221_TEMP_Disable>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e004      	b.n	800109a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HTS221_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	331c      	adds	r3, #28
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fc28 	bl	8001908 <hts221_device_id_get>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e000      	b.n	80010c6 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HTS221_GetCapabilities+0x44>)
 80010f6:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HTS221_GetCapabilities+0x44>)
 80010fc:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	41480000 	.word	0x41480000

08001118 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e015      	b.n	800115a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	331c      	adds	r3, #28
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fbf3 	bl	800192a <hts221_power_on_set>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e004      	b.n	800115a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	e015      	b.n	80011a4 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10b      	bne.n	800119a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	331c      	adds	r3, #28
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fbce 	bl	800192a <hts221_power_on_set>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	e004      	b.n	80011a4 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return HTS221_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f96f 	bl	800149c <HTS221_GetOutputDataRate>
 80011be:	4603      	mov	r3, r0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80011d4:	ed97 0a00 	vldr	s0, [r7]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f9a3 	bl	8001524 <HTS221_SetOutputDataRate>
 80011de:	4603      	mov	r3, r0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	331c      	adds	r3, #28
 80011f6:	f107 020c 	add.w	r2, r7, #12
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fc58 	bl	8001ab2 <hts221_hum_adc_point_0_get>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	e06b      	b.n	80012e6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f103 021c 	add.w	r2, r3, #28
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	3304      	adds	r3, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f000 fbaa 	bl	8001976 <hts221_hum_rh_point_0_get>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	e05b      	b.n	80012e6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f103 021c 	add.w	r2, r3, #28
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	3308      	adds	r3, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f000 fc5c 	bl	8001afa <hts221_hum_adc_point_1_get>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	e04b      	b.n	80012e6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f103 021c 	add.w	r2, r3, #28
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	330c      	adds	r3, #12
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f000 fba8 	bl	80019b2 <hts221_hum_rh_point_1_get>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e03b      	b.n	80012e6 <HTS221_HUM_GetHumidity+0xfe>
 800126e:	2300      	movs	r3, #0
 8001270:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	331c      	adds	r3, #28
 8001276:	f107 021c 	add.w	r2, r7, #28
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fafd 	bl	800187c <hts221_humidity_raw_get>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	e02b      	b.n	80012e6 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800128e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f99a 	bl	80015dc <Linear_Interpolation>
 80012a8:	eef0 7a40 	vmov.f32	s15, s0
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d503      	bpl.n	80012ca <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012f0 <HTS221_HUM_GetHumidity+0x108>
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	dd02      	ble.n	80012e4 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HTS221_HUM_GetHumidity+0x10c>)
 80012e2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	42c80000 	.word	0x42c80000
 80012f4:	42c80000 	.word	0x42c80000

080012f8 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e015      	b.n	800133a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10b      	bne.n	8001330 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	331c      	adds	r3, #28
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fb03 	bl	800192a <hts221_power_on_set>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e004      	b.n	800133a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	e015      	b.n	8001384 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10b      	bne.n	800137a <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	331c      	adds	r3, #28
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fade 	bl	800192a <hts221_power_on_set>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	e004      	b.n	8001384 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HTS221_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f87f 	bl	800149c <HTS221_GetOutputDataRate>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 80013b4:	ed97 0a00 	vldr	s0, [r7]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f8b3 	bl	8001524 <HTS221_SetOutputDataRate>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	331c      	adds	r3, #28
 80013d6:	f107 020c 	add.w	r2, r7, #12
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fbb0 	bl	8001b42 <hts221_temp_adc_point_0_get>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	e052      	b.n	8001494 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f103 021c 	add.w	r2, r3, #28
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	3304      	adds	r3, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f000 faf6 	bl	80019ee <hts221_temp_deg_point_0_get>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	e042      	b.n	8001494 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f103 021c 	add.w	r2, r3, #28
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	3308      	adds	r3, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f000 fbb4 	bl	8001b8a <hts221_temp_adc_point_1_get>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	e032      	b.n	8001494 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f103 021c 	add.w	r2, r3, #28
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	330c      	adds	r3, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f000 fb07 	bl	8001a50 <hts221_temp_deg_point_1_get>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	e022      	b.n	8001494 <HTS221_TEMP_GetTemperature+0xcc>
 800144e:	2300      	movs	r3, #0
 8001450:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	331c      	adds	r3, #28
 8001456:	f107 021c 	add.w	r2, r7, #28
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fa30 	bl	80018c2 <hts221_temperature_raw_get>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	e012      	b.n	8001494 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800146e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f8aa 	bl	80015dc <Linear_Interpolation>
 8001488:	eef0 7a40 	vmov.f32	s15, s0
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	331c      	adds	r3, #28
 80014ae:	f107 020b 	add.w	r2, r7, #11
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f983 	bl	80017c0 <hts221_data_rate_get>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	e025      	b.n	8001512 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 80014c6:	7afb      	ldrb	r3, [r7, #11]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d81d      	bhi.n	8001508 <HTS221_GetOutputDataRate+0x6c>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <HTS221_GetOutputDataRate+0x38>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014ef 	.word	0x080014ef
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	08001501 	.word	0x08001501
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
      break;
 80014ec:	e010      	b.n	8001510 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014f4:	601a      	str	r2, [r3, #0]
      break;
 80014f6:	e00b      	b.n	8001510 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HTS221_GetOutputDataRate+0x80>)
 80014fc:	601a      	str	r2, [r3, #0]
      break;
 80014fe:	e007      	b.n	8001510 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HTS221_GetOutputDataRate+0x84>)
 8001504:	601a      	str	r2, [r3, #0]
      break;
 8001506:	e003      	b.n	8001510 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	60fb      	str	r3, [r7, #12]
      break;
 800150e:	bf00      	nop
  }

  return ret;
 8001510:	68fb      	ldr	r3, [r7, #12]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40e00000 	.word	0x40e00000
 8001520:	41480000 	.word	0x41480000

08001524 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8001530:	edd7 7a00 	vldr	s15, [r7]
 8001534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	d801      	bhi.n	8001546 <HTS221_SetOutputDataRate+0x22>
 8001542:	2301      	movs	r3, #1
 8001544:	e00b      	b.n	800155e <HTS221_SetOutputDataRate+0x3a>
 8001546:	edd7 7a00 	vldr	s15, [r7]
 800154a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d801      	bhi.n	800155c <HTS221_SetOutputDataRate+0x38>
 8001558:	2302      	movs	r3, #2
 800155a:	e000      	b.n	800155e <HTS221_SetOutputDataRate+0x3a>
 800155c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800155e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	331c      	adds	r3, #28
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f902 	bl	8001772 <hts221_data_rate_set>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e000      	b.n	800157c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	331c      	adds	r3, #28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f9c9 	bl	800192a <hts221_power_on_set>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e017      	b.n	80015d4 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	331c      	adds	r3, #28
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f940 	bl	8001830 <hts221_block_data_update_set>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e00b      	b.n	80015d4 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80015bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffaf 	bl	8001524 <HTS221_SetOutputDataRate>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	e000      	b.n	80015d4 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80015f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f8:	edd7 7a00 	vldr	s15, [r7]
 80015fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 6a02 	vldr	s13, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	edd3 7a01 	vldr	s15, [r3, #4]
 800160c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	ed93 6a00 	vldr	s12, [r3]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edd3 7a03 	vldr	s15, [r3, #12]
 800161c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001620:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 6a02 	vldr	s13, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001638:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800163c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	461a      	mov	r2, r3
 800165a:	460b      	mov	r3, r1
 800165c:	72fb      	strb	r3, [r7, #11]
 800165e:	4613      	mov	r3, r2
 8001660:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10e      	bne.n	800168c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	695c      	ldr	r4, [r3, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	7b1b      	ldrb	r3, [r3, #12]
 8001676:	b298      	uxth	r0, r3
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800167e:	b2db      	uxtb	r3, r3
 8001680:	b299      	uxth	r1, r3
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	47a0      	blx	r4
 8001688:	4603      	mov	r3, r0
 800168a:	e00d      	b.n	80016a8 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	695c      	ldr	r4, [r3, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	7b1b      	ldrb	r3, [r3, #12]
 8001694:	b298      	uxth	r0, r3
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169c:	b2db      	uxtb	r3, r3
 800169e:	b299      	uxth	r1, r3
 80016a0:	893b      	ldrh	r3, [r7, #8]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	47a0      	blx	r4
 80016a6:	4603      	mov	r3, r0
  }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}

080016b0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	72fb      	strb	r3, [r7, #11]
 80016c0:	4613      	mov	r3, r2
 80016c2:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10e      	bne.n	80016ee <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	691c      	ldr	r4, [r3, #16]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	7b1b      	ldrb	r3, [r3, #12]
 80016d8:	b298      	uxth	r0, r3
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	b299      	uxth	r1, r3
 80016e4:	893b      	ldrh	r3, [r7, #8]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	47a0      	blx	r4
 80016ea:	4603      	mov	r3, r0
 80016ec:	e00d      	b.n	800170a <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	691c      	ldr	r4, [r3, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	7b1b      	ldrb	r3, [r3, #12]
 80016f6:	b298      	uxth	r0, r3
 80016f8:	7afb      	ldrb	r3, [r7, #11]
 80016fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	b299      	uxth	r1, r3
 8001702:	893b      	ldrh	r3, [r7, #8]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	47a0      	blx	r4
 8001708:	4603      	mov	r3, r0
  }
}
 800170a:	4618      	mov	r0, r3
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}

08001712 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8001712:	b590      	push	{r4, r7, lr}
 8001714:	b087      	sub	sp, #28
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	461a      	mov	r2, r3
 800171e:	460b      	mov	r3, r1
 8001720:	72fb      	strb	r3, [r7, #11]
 8001722:	4613      	mov	r3, r2
 8001724:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	685c      	ldr	r4, [r3, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6898      	ldr	r0, [r3, #8]
 800172e:	893b      	ldrh	r3, [r7, #8]
 8001730:	7af9      	ldrb	r1, [r7, #11]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	47a0      	blx	r4
 8001736:	6178      	str	r0, [r7, #20]
  return ret;
 8001738:	697b      	ldr	r3, [r7, #20]
}
 800173a:	4618      	mov	r0, r3
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}

08001742 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b087      	sub	sp, #28
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	461a      	mov	r2, r3
 800174e:	460b      	mov	r3, r1
 8001750:	72fb      	strb	r3, [r7, #11]
 8001752:	4613      	mov	r3, r2
 8001754:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681c      	ldr	r4, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6898      	ldr	r0, [r3, #8]
 800175e:	893b      	ldrh	r3, [r7, #8]
 8001760:	7af9      	ldrb	r1, [r7, #11]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	47a0      	blx	r4
 8001766:	6178      	str	r0, [r7, #20]
  return ret;
 8001768:	697b      	ldr	r3, [r7, #20]
}
 800176a:	4618      	mov	r0, r3
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}

08001772 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	2301      	movs	r3, #1
 8001784:	2120      	movs	r1, #32
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffc3 	bl	8001712 <hts221_read_reg>
 800178c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10f      	bne.n	80017b4 <hts221_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	7a3b      	ldrb	r3, [r7, #8]
 800179e:	f362 0301 	bfi	r3, r2, #0, #2
 80017a2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	2301      	movs	r3, #1
 80017aa:	2120      	movs	r1, #32
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffc8 	bl	8001742 <hts221_write_reg>
 80017b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80017ca:	f107 0208 	add.w	r2, r7, #8
 80017ce:	2301      	movs	r3, #1
 80017d0:	2120      	movs	r1, #32
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff9d 	bl	8001712 <hts221_read_reg>
 80017d8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80017da:	7a3b      	ldrb	r3, [r7, #8]
 80017dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d81a      	bhi.n	800181c <hts221_data_rate_get+0x5c>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <hts221_data_rate_get+0x2c>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	08001805 	.word	0x08001805
 80017f4:	0800180d 	.word	0x0800180d
 80017f8:	08001815 	.word	0x08001815
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
      break;
 8001802:	e00f      	b.n	8001824 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
      break;
 800180a:	e00b      	b.n	8001824 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	701a      	strb	r2, [r3, #0]
      break;
 8001812:	e007      	b.n	8001824 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2203      	movs	r2, #3
 8001818:	701a      	strb	r2, [r3, #0]
      break;
 800181a:	e003      	b.n	8001824 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2204      	movs	r2, #4
 8001820:	701a      	strb	r2, [r3, #0]
      break;
 8001822:	bf00      	nop
  }

  return ret;
 8001824:	68fb      	ldr	r3, [r7, #12]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop

08001830 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800183c:	f107 0208 	add.w	r2, r7, #8
 8001840:	2301      	movs	r3, #1
 8001842:	2120      	movs	r1, #32
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff64 	bl	8001712 <hts221_read_reg>
 800184a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <hts221_block_data_update_set+0x42>
    reg.bdu = val;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	b2da      	uxtb	r2, r3
 800185a:	7a3b      	ldrb	r3, [r7, #8]
 800185c:	f362 0382 	bfi	r3, r2, #2, #1
 8001860:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001862:	f107 0208 	add.w	r2, r7, #8
 8001866:	2301      	movs	r3, #1
 8001868:	2120      	movs	r1, #32
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff69 	bl	8001742 <hts221_write_reg>
 8001870:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001886:	f107 0208 	add.w	r2, r7, #8
 800188a:	2302      	movs	r3, #2
 800188c:	2128      	movs	r1, #40	; 0x28
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff3f 	bl	8001712 <hts221_read_reg>
 8001894:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001896:	7a7b      	ldrb	r3, [r7, #9]
 8001898:	b21a      	sxth	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	7a3b      	ldrb	r3, [r7, #8]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	801a      	strh	r2, [r3, #0]
  return ret;
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80018cc:	f107 0208 	add.w	r2, r7, #8
 80018d0:	2302      	movs	r3, #2
 80018d2:	212a      	movs	r1, #42	; 0x2a
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff1c 	bl	8001712 <hts221_read_reg>
 80018da:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	b21a      	sxth	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) +  (int16_t)buff[0];
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	7a3b      	ldrb	r3, [r7, #8]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	801a      	strh	r2, [r3, #0]
  return ret;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8001912:	2301      	movs	r3, #1
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	210f      	movs	r1, #15
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fefa 	bl	8001712 <hts221_read_reg>
 800191e:	60f8      	str	r0, [r7, #12]
  return ret;
 8001920:	68fb      	ldr	r3, [r7, #12]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001936:	f107 0208 	add.w	r2, r7, #8
 800193a:	2301      	movs	r3, #1
 800193c:	2120      	movs	r1, #32
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fee7 	bl	8001712 <hts221_read_reg>
 8001944:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <hts221_power_on_set+0x42>
    reg.pd = val;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	7a3b      	ldrb	r3, [r7, #8]
 8001956:	f362 13c7 	bfi	r3, r2, #7, #1
 800195a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800195c:	f107 0208 	add.w	r2, r7, #8
 8001960:	2301      	movs	r3, #1
 8001962:	2120      	movs	r1, #32
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff feec 	bl	8001742 <hts221_write_reg>
 800196a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8001980:	f107 020b 	add.w	r2, r7, #11
 8001984:	2301      	movs	r3, #1
 8001986:	2130      	movs	r1, #48	; 0x30
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fec2 	bl	8001712 <hts221_read_reg>
 800198e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800199e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80019bc:	f107 020b 	add.w	r2, r7, #11
 80019c0:	2301      	movs	r3, #1
 80019c2:	2131      	movs	r1, #49	; 0x31
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fea4 	bl	8001712 <hts221_read_reg>
 80019ca:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 80019e4:	68fb      	ldr	r3, [r7, #12]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80019f8:	f107 020f 	add.w	r2, r7, #15
 80019fc:	2301      	movs	r3, #1
 80019fe:	2132      	movs	r1, #50	; 0x32
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fe86 	bl	8001712 <hts221_read_reg>
 8001a06:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11b      	bne.n	8001a46 <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001a0e:	f107 0210 	add.w	r2, r7, #16
 8001a12:	2301      	movs	r3, #1
 8001a14:	2135      	movs	r1, #53	; 0x35
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fe7b 	bl	8001712 <hts221_read_reg>
 8001a1c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001a1e:	7c3b      	ldrb	r3, [r7, #16]
 8001a20:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001a28:	7cfb      	ldrb	r3, [r7, #19]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	4413      	add	r3, r2
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a38:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001a46:	697b      	ldr	r3, [r7, #20]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8001a5a:	f107 020f 	add.w	r2, r7, #15
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2133      	movs	r1, #51	; 0x33
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fe55 	bl	8001712 <hts221_read_reg>
 8001a68:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d11b      	bne.n	8001aa8 <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001a70:	f107 0210 	add.w	r2, r7, #16
 8001a74:	2301      	movs	r3, #1
 8001a76:	2135      	movs	r1, #53	; 0x35
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fe4a 	bl	8001712 <hts221_read_reg>
 8001a7e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8001a80:	7c3b      	ldrb	r3, [r7, #16]
 8001a82:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8001a8a:	7cfb      	ldrb	r3, [r7, #19]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	4413      	add	r3, r2
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8001aa8:	697b      	ldr	r3, [r7, #20]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001abc:	f107 0208 	add.w	r2, r7, #8
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	2136      	movs	r1, #54	; 0x36
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fe24 	bl	8001712 <hts221_read_reg>
 8001aca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001acc:	7a7b      	ldrb	r3, [r7, #9]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	7a3b      	ldrb	r3, [r7, #8]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001ade:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001b04:	f107 0208 	add.w	r2, r7, #8
 8001b08:	2302      	movs	r3, #2
 8001b0a:	213a      	movs	r1, #58	; 0x3a
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fe00 	bl	8001712 <hts221_read_reg>
 8001b12:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001b14:	7a7b      	ldrb	r3, [r7, #9]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	7a3b      	ldrb	r3, [r7, #8]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001b26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8001b4c:	f107 0208 	add.w	r2, r7, #8
 8001b50:	2302      	movs	r3, #2
 8001b52:	213c      	movs	r1, #60	; 0x3c
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fddc 	bl	8001712 <hts221_read_reg>
 8001b5a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001b5c:	7a7b      	ldrb	r3, [r7, #9]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	7a3b      	ldrb	r3, [r7, #8]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001b6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8001b94:	f107 0208 	add.w	r2, r7, #8
 8001b98:	2302      	movs	r3, #2
 8001b9a:	213e      	movs	r1, #62	; 0x3e
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fdb8 	bl	8001712 <hts221_read_reg>
 8001ba2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001ba4:	7a7b      	ldrb	r3, [r7, #9]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	7a3b      	ldrb	r3, [r7, #8]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001bb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
  return ret;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <LPS22HB_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d103      	bne.n	8001bf0 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e04d      	b.n	8001c8c <LPS22HB_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7b1a      	ldrb	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <LPS22HB_RegisterBusIO+0xc4>)
 8001c2c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <LPS22HB_RegisterBusIO+0xc8>)
 8001c32:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <LPS22HB_RegisterBusIO+0x76>
    {
      ret = LPS22HB_ERROR;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e020      	b.n	8001c8c <LPS22HB_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4798      	blx	r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <LPS22HB_RegisterBusIO+0x8a>
    {
      ret = LPS22HB_ERROR;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e016      	b.n	8001c8c <LPS22HB_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d112      	bne.n	8001c8c <LPS22HB_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <LPS22HB_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8001c70:	2301      	movs	r3, #1
 8001c72:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	461a      	mov	r2, r3
 8001c78:	2110      	movs	r1, #16
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f9df 	bl	800203e <LPS22HB_Write_Reg>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <LPS22HB_RegisterBusIO+0xb8>
          {
            ret = LPS22HB_ERROR;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	080022ff 	.word	0x080022ff
 8001c9c:	08002385 	.word	0x08002385

08001ca0 <LPS22HB_Init>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d108      	bne.n	8001cc4 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 faca 	bl	800224c <LPS22HB_Initialize>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e004      	b.n	8001cce <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <LPS22HB_DeInit>:
 * @brief  Deinitialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d111      	bne.n	8001d0c <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f877 	bl	8001ddc <LPS22HB_PRESS_Disable>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	e00d      	b.n	8001d16 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f918 	bl	8001f30 <LPS22HB_TEMP_Disable>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e004      	b.n	8001d16 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LPS22HB_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <LPS22HB_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	331c      	adds	r3, #28
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fcd0 	bl	80026d4 <lps22hb_device_id_get>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e000      	b.n	8001d42 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <LPS22HB_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HB sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <LPS22HB_GetCapabilities+0x44>)
 8001d7a:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <LPS22HB_GetCapabilities+0x44>)
 8001d80:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	42960000 	.word	0x42960000

08001d94 <LPS22HB_PRESS_Enable>:
 * @brief  Enable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e014      	b.n	8001dd4 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f103 021c 	add.w	r2, r3, #28
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f000 fbd5 	bl	8002568 <lps22hb_data_rate_set>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	e004      	b.n	8001dd4 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <LPS22HB_PRESS_Disable>:
 * @brief  Disable the LPS22HB pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e024      	b.n	8001e3c <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11a      	bne.n	8001e32 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 021c 	add.w	r2, r3, #28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	332b      	adds	r3, #43	; 0x2b
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f000 fbd3 	bl	80025b4 <lps22hb_data_rate_get>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e010      	b.n	8001e3c <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	331c      	adds	r3, #28
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fba1 	bl	8002568 <lps22hb_data_rate_set>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	e004      	b.n	8001e3c <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LPS22HB_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <LPS22HB_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f90f 	bl	8002074 <LPS22HB_GetOutputDataRate>
 8001e56:	4603      	mov	r3, r0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <LPS22HB_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d106      	bne.n	8001e84 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001e76:	ed97 0a00 	vldr	s0, [r7]
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f94e 	bl	800211c <LPS22HB_SetOutputDataRate_When_Enabled>
 8001e80:	4603      	mov	r3, r0
 8001e82:	e005      	b.n	8001e90 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e84:	ed97 0a00 	vldr	s0, [r7]
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f99f 	bl	80021cc <LPS22HB_SetOutputDataRate_When_Disabled>
 8001e8e:	4603      	mov	r3, r0
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <LPS22HB_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f007 fc5c 	bl	8009768 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	331c      	adds	r3, #28
 8001eb4:	f107 020c 	add.w	r2, r7, #12
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fbbe 	bl	800263c <lps22hb_pressure_raw_get>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 facc 	bl	800246c <lps22hb_from_lsb_to_hpa>
 8001ed4:	eef0 7a40 	vmov.f32	s15, s0
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <LPS22HB_TEMP_Enable>:
 * @brief  Enable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e014      	b.n	8001f28 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f103 021c 	add.w	r2, r3, #28
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f000 fb2b 	bl	8002568 <lps22hb_data_rate_set>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1c:	e004      	b.n	8001f28 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <LPS22HB_TEMP_Disable>:
 * @brief  Disable the LPS22HB temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e024      	b.n	8001f90 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d11a      	bne.n	8001f86 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f103 021c 	add.w	r2, r3, #28
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	332b      	adds	r3, #43	; 0x2b
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f000 fb29 	bl	80025b4 <lps22hb_data_rate_get>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	e010      	b.n	8001f90 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	331c      	adds	r3, #28
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 faf7 	bl	8002568 <lps22hb_data_rate_set>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	e004      	b.n	8001f90 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LPS22HB_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <LPS22HB_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f865 	bl	8002074 <LPS22HB_GetOutputDataRate>
 8001faa:	4603      	mov	r3, r0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <LPS22HB_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d106      	bne.n	8001fd8 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001fca:	ed97 0a00 	vldr	s0, [r7]
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8a4 	bl	800211c <LPS22HB_SetOutputDataRate_When_Enabled>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	e005      	b.n	8001fe4 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001fd8:	ed97 0a00 	vldr	s0, [r7]
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8f5 	bl	80021cc <LPS22HB_SetOutputDataRate_When_Disabled>
 8001fe2:	4603      	mov	r3, r0
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <LPS22HB_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f007 fbb2 	bl	8009768 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	331c      	adds	r3, #28
 8002008:	f107 020c 	add.w	r2, r7, #12
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fb3d 	bl	800268e <lps22hb_temperature_raw_get>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e00a      	b.n	8002036 <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8002020:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fa39 	bl	800249c <lps22hb_from_lsb_to_degc>
 800202a:	eef0 7a40 	vmov.f32	s15, s0
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <LPS22HB_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
 800204a:	4613      	mov	r3, r2
 800204c:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 001c 	add.w	r0, r3, #28
 8002054:	1cba      	adds	r2, r7, #2
 8002056:	78f9      	ldrb	r1, [r7, #3]
 8002058:	2301      	movs	r3, #1
 800205a:	f000 f9ee 	bl	800243a <lps22hb_write_reg>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	e000      	b.n	800206c <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <LPS22HB_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	331c      	adds	r3, #28
 8002086:	f107 020b 	add.w	r2, r7, #11
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fa91 	bl	80025b4 <lps22hb_data_rate_get>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	e031      	b.n	8002102 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 800209e:	7afb      	ldrb	r3, [r7, #11]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d829      	bhi.n	80020f8 <LPS22HB_GetOutputDataRate+0x84>
 80020a4:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <LPS22HB_GetOutputDataRate+0x38>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	080020c5 	.word	0x080020c5
 80020b0:	080020cf 	.word	0x080020cf
 80020b4:	080020d9 	.word	0x080020d9
 80020b8:	080020e1 	.word	0x080020e1
 80020bc:	080020e9 	.word	0x080020e9
 80020c0:	080020f1 	.word	0x080020f1
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
      break;
 80020cc:	e018      	b.n	8002100 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020d4:	601a      	str	r2, [r3, #0]
      break;
 80020d6:	e013      	b.n	8002100 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4a0c      	ldr	r2, [pc, #48]	; (800210c <LPS22HB_GetOutputDataRate+0x98>)
 80020dc:	601a      	str	r2, [r3, #0]
      break;
 80020de:	e00f      	b.n	8002100 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <LPS22HB_GetOutputDataRate+0x9c>)
 80020e4:	601a      	str	r2, [r3, #0]
      break;
 80020e6:	e00b      	b.n	8002100 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <LPS22HB_GetOutputDataRate+0xa0>)
 80020ec:	601a      	str	r2, [r3, #0]
      break;
 80020ee:	e007      	b.n	8002100 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4a09      	ldr	r2, [pc, #36]	; (8002118 <LPS22HB_GetOutputDataRate+0xa4>)
 80020f4:	601a      	str	r2, [r3, #0]
      break;
 80020f6:	e003      	b.n	8002100 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	60fb      	str	r3, [r7, #12]
      break;
 80020fe:	bf00      	nop
  }

  return ret;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	41200000 	.word	0x41200000
 8002110:	41c80000 	.word	0x41c80000
 8002114:	42480000 	.word	0x42480000
 8002118:	42960000 	.word	0x42960000

0800211c <LPS22HB_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8002128:	edd7 7a00 	vldr	s15, [r7]
 800212c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	d801      	bhi.n	800213e <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 800213a:	2301      	movs	r3, #1
 800213c:	e021      	b.n	8002182 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800213e:	edd7 7a00 	vldr	s15, [r7]
 8002142:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	d801      	bhi.n	8002154 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8002150:	2302      	movs	r3, #2
 8002152:	e016      	b.n	8002182 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002154:	edd7 7a00 	vldr	s15, [r7]
 8002158:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800215c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	d801      	bhi.n	800216a <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8002166:	2303      	movs	r3, #3
 8002168:	e00b      	b.n	8002182 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800216a:	edd7 7a00 	vldr	s15, [r7]
 800216e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80021c8 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8002172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	d801      	bhi.n	8002180 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 800217c:	2304      	movs	r3, #4
 800217e:	e000      	b.n	8002182 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8002180:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002182:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	331c      	adds	r3, #28
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f9eb 	bl	8002568 <lps22hb_data_rate_set>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	e00f      	b.n	80021be <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 021c 	add.w	r2, r3, #28
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	332b      	adds	r3, #43	; 0x2b
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 fa02 	bl	80025b4 <lps22hb_data_rate_get>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e000      	b.n	80021be <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	42480000 	.word	0x42480000

080021cc <LPS22HB_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80021d8:	edd7 7a00 	vldr	s15, [r7]
 80021dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d801      	bhi.n	80021ee <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e021      	b.n	8002232 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80021ee:	edd7 7a00 	vldr	s15, [r7]
 80021f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	d801      	bhi.n	8002204 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8002200:	2302      	movs	r3, #2
 8002202:	e016      	b.n	8002232 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002204:	edd7 7a00 	vldr	s15, [r7]
 8002208:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800220c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002214:	d801      	bhi.n	800221a <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8002216:	2303      	movs	r3, #3
 8002218:	e00b      	b.n	8002232 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800221a:	edd7 7a00 	vldr	s15, [r7]
 800221e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002248 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8002222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	d801      	bhi.n	8002230 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 800222c:	2304      	movs	r3, #4
 800222e:	e000      	b.n	8002232 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8002230:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	42480000 	.word	0x42480000

0800224c <LPS22HB_Initialize>:
 * @brief  Initialize the LPS22HB sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	331c      	adds	r3, #28
 8002258:	2101      	movs	r1, #1
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fa4b 	bl	80026f6 <lps22hb_low_power_set>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e044      	b.n	80022f6 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	331c      	adds	r3, #28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f978 	bl	8002568 <lps22hb_data_rate_set>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e038      	b.n	80022f6 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	331c      	adds	r3, #28
 8002288:	2102      	movs	r1, #2
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f946 	bl	800251c <lps22hb_low_pass_filter_mode_set>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e02c      	b.n	80022f6 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	331c      	adds	r3, #28
 80022a0:	2101      	movs	r1, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f914 	bl	80024d0 <lps22hb_block_data_update_set>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e020      	b.n	80022f6 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	331c      	adds	r3, #28
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fa3d 	bl	8002742 <lps22hb_auto_add_inc_set>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00e      	beq.n	80022ec <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e010      	b.n	80022f6 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	331c      	adds	r3, #28
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fa31 	bl	8002742 <lps22hb_auto_add_inc_set>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	e004      	b.n	80022f6 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2203      	movs	r2, #3
 80022f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  return LPS22HB_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80022fe:	b590      	push	{r4, r7, lr}
 8002300:	b089      	sub	sp, #36	; 0x24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	461a      	mov	r2, r3
 800230a:	460b      	mov	r3, r1
 800230c:	72fb      	strb	r3, [r7, #11]
 800230e:	4613      	mov	r3, r2
 8002310:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d121      	bne.n	8002366 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	83fb      	strh	r3, [r7, #30]
 8002326:	e018      	b.n	800235a <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	695c      	ldr	r4, [r3, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	7b1b      	ldrb	r3, [r3, #12]
 8002330:	b298      	uxth	r0, r3
 8002332:	7afb      	ldrb	r3, [r7, #11]
 8002334:	b29a      	uxth	r2, r3
 8002336:	8bfb      	ldrh	r3, [r7, #30]
 8002338:	4413      	add	r3, r2
 800233a:	b299      	uxth	r1, r3
 800233c:	8bfb      	ldrh	r3, [r7, #30]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	441a      	add	r2, r3
 8002342:	2301      	movs	r3, #1
 8002344:	47a0      	blx	r4
 8002346:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	e013      	b.n	800237c <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8002354:	8bfb      	ldrh	r3, [r7, #30]
 8002356:	3301      	adds	r3, #1
 8002358:	83fb      	strh	r3, [r7, #30]
 800235a:	8bfa      	ldrh	r2, [r7, #30]
 800235c:	893b      	ldrh	r3, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	d3e2      	bcc.n	8002328 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	e00a      	b.n	800237c <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	695c      	ldr	r4, [r3, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	7b1b      	ldrb	r3, [r3, #12]
 800236e:	b298      	uxth	r0, r3
 8002370:	7afb      	ldrb	r3, [r7, #11]
 8002372:	b299      	uxth	r1, r3
 8002374:	893b      	ldrh	r3, [r7, #8]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	47a0      	blx	r4
 800237a:	4603      	mov	r3, r0
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3724      	adds	r7, #36	; 0x24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd90      	pop	{r4, r7, pc}

08002384 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	72fb      	strb	r3, [r7, #11]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d121      	bne.n	80023ec <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	83fb      	strh	r3, [r7, #30]
 80023ac:	e018      	b.n	80023e0 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	691c      	ldr	r4, [r3, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	7b1b      	ldrb	r3, [r3, #12]
 80023b6:	b298      	uxth	r0, r3
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	8bfb      	ldrh	r3, [r7, #30]
 80023be:	4413      	add	r3, r2
 80023c0:	b299      	uxth	r1, r3
 80023c2:	8bfb      	ldrh	r3, [r7, #30]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	441a      	add	r2, r3
 80023c8:	2301      	movs	r3, #1
 80023ca:	47a0      	blx	r4
 80023cc:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	e013      	b.n	8002402 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80023da:	8bfb      	ldrh	r3, [r7, #30]
 80023dc:	3301      	adds	r3, #1
 80023de:	83fb      	strh	r3, [r7, #30]
 80023e0:	8bfa      	ldrh	r2, [r7, #30]
 80023e2:	893b      	ldrh	r3, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d3e2      	bcc.n	80023ae <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	e00a      	b.n	8002402 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	691c      	ldr	r4, [r3, #16]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	7b1b      	ldrb	r3, [r3, #12]
 80023f4:	b298      	uxth	r0, r3
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	b299      	uxth	r1, r3
 80023fa:	893b      	ldrh	r3, [r7, #8]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	47a0      	blx	r4
 8002400:	4603      	mov	r3, r0
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}

0800240a <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	461a      	mov	r2, r3
 8002416:	460b      	mov	r3, r1
 8002418:	72fb      	strb	r3, [r7, #11]
 800241a:	4613      	mov	r3, r2
 800241c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685c      	ldr	r4, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6898      	ldr	r0, [r3, #8]
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	7af9      	ldrb	r1, [r7, #11]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	47a0      	blx	r4
 800242e:	6178      	str	r0, [r7, #20]
  return ret;
 8002430:	697b      	ldr	r3, [r7, #20]
}
 8002432:	4618      	mov	r0, r3
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}

0800243a <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800243a:	b590      	push	{r4, r7, lr}
 800243c:	b087      	sub	sp, #28
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	461a      	mov	r2, r3
 8002446:	460b      	mov	r3, r1
 8002448:	72fb      	strb	r3, [r7, #11]
 800244a:	4613      	mov	r3, r2
 800244c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681c      	ldr	r4, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6898      	ldr	r0, [r3, #8]
 8002456:	893b      	ldrh	r3, [r7, #8]
 8002458:	7af9      	ldrb	r1, [r7, #11]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	47a0      	blx	r4
 800245e:	6178      	str	r0, [r7, #20]
  return ret;
 8002460:	697b      	ldr	r3, [r7, #20]
}
 8002462:	4618      	mov	r0, r3
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd90      	pop	{r4, r7, pc}
	...

0800246c <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ( (float_t)lsb / 1048576.0f );
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002498 <lps22hb_from_lsb_to_hpa+0x2c>
 8002482:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002486:	eef0 7a66 	vmov.f32	s15, s13
}
 800248a:	eeb0 0a67 	vmov.f32	s0, s15
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	49800000 	.word	0x49800000

0800249c <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 100.0f );
 80024a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80024cc <lps22hb_from_lsb_to_degc+0x30>
 80024b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80024be:	eeb0 0a67 	vmov.f32	s0, s15
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	42c80000 	.word	0x42c80000

080024d0 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80024dc:	f107 0208 	add.w	r2, r7, #8
 80024e0:	2301      	movs	r3, #1
 80024e2:	2110      	movs	r1, #16
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff90 	bl	800240a <lps22hb_read_reg>
 80024ea:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <lps22hb_block_data_update_set+0x42>
    ctrl_reg1.bdu = val;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	7a3b      	ldrb	r3, [r7, #8]
 80024fc:	f362 0341 	bfi	r3, r2, #1, #1
 8002500:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002502:	f107 0208 	add.w	r2, r7, #8
 8002506:	2301      	movs	r3, #1
 8002508:	2110      	movs	r1, #16
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff95 	bl	800243a <lps22hb_write_reg>
 8002510:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002528:	f107 0208 	add.w	r2, r7, #8
 800252c:	2301      	movs	r3, #1
 800252e:	2110      	movs	r1, #16
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff6a 	bl	800240a <lps22hb_read_reg>
 8002536:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <lps22hb_low_pass_filter_mode_set+0x42>
    ctrl_reg1.lpfp = (uint8_t)val;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	b2da      	uxtb	r2, r3
 8002546:	7a3b      	ldrb	r3, [r7, #8]
 8002548:	f362 0383 	bfi	r3, r2, #2, #2
 800254c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800254e:	f107 0208 	add.w	r2, r7, #8
 8002552:	2301      	movs	r3, #1
 8002554:	2110      	movs	r1, #16
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff6f 	bl	800243a <lps22hb_write_reg>
 800255c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 8002574:	f107 0208 	add.w	r2, r7, #8
 8002578:	2301      	movs	r3, #1
 800257a:	2110      	movs	r1, #16
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff44 	bl	800240a <lps22hb_read_reg>
 8002582:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <lps22hb_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	b2da      	uxtb	r2, r3
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	f362 1306 	bfi	r3, r2, #4, #3
 8002598:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 800259a:	f107 0208 	add.w	r2, r7, #8
 800259e:	2301      	movs	r3, #1
 80025a0:	2110      	movs	r1, #16
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff49 	bl	800243a <lps22hb_write_reg>
 80025a8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1,
 80025be:	f107 0208 	add.w	r2, r7, #8
 80025c2:	2301      	movs	r3, #1
 80025c4:	2110      	movs	r1, #16
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ff1f 	bl	800240a <lps22hb_read_reg>
 80025cc:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl_reg1.odr) {
 80025ce:	7a3b      	ldrb	r3, [r7, #8]
 80025d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d826      	bhi.n	8002628 <lps22hb_data_rate_get+0x74>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <lps22hb_data_rate_get+0x2c>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080025f9 	.word	0x080025f9
 80025e4:	08002601 	.word	0x08002601
 80025e8:	08002609 	.word	0x08002609
 80025ec:	08002611 	.word	0x08002611
 80025f0:	08002619 	.word	0x08002619
 80025f4:	08002621 	.word	0x08002621
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
      break;
 80025fe:	e017      	b.n	8002630 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
      break;
 8002606:	e013      	b.n	8002630 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2202      	movs	r2, #2
 800260c:	701a      	strb	r2, [r3, #0]
      break;
 800260e:	e00f      	b.n	8002630 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2203      	movs	r2, #3
 8002614:	701a      	strb	r2, [r3, #0]
      break;
 8002616:	e00b      	b.n	8002630 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	701a      	strb	r2, [r3, #0]
      break;
 800261e:	e007      	b.n	8002630 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2205      	movs	r2, #5
 8002624:	701a      	strb	r2, [r3, #0]
      break;
 8002626:	e003      	b.n	8002630 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
      break;
 800262e:	bf00      	nop
  }

  return ret;
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop

0800263c <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8002646:	f107 0208 	add.w	r2, r7, #8
 800264a:	2303      	movs	r3, #3
 800264c:	2128      	movs	r1, #40	; 0x28
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fedb 	bl	800240a <lps22hb_read_reg>
 8002654:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8002656:	7abb      	ldrb	r3, [r7, #10]
 8002658:	461a      	mov	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	7a7a      	ldrb	r2, [r7, #9]
 8002666:	441a      	add	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	7a3a      	ldrb	r2, [r7, #8]
 8002674:	441a      	add	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	021a      	lsls	r2, r3, #8
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	601a      	str	r2, [r3, #0]
  return ret;
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8002698:	f107 0208 	add.w	r2, r7, #8
 800269c:	2302      	movs	r3, #2
 800269e:	212b      	movs	r1, #43	; 0x2b
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff feb2 	bl	800240a <lps22hb_read_reg>
 80026a6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80026a8:	7a7b      	ldrb	r3, [r7, #9]
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	7a3b      	ldrb	r3, [r7, #8]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	801a      	strh	r2, [r3, #0]
  return ret;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 80026de:	2301      	movs	r3, #1
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	210f      	movs	r1, #15
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fe90 	bl	800240a <lps22hb_read_reg>
 80026ea:	60f8      	str	r0, [r7, #12]
  return ret;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002702:	f107 0208 	add.w	r2, r7, #8
 8002706:	2301      	movs	r3, #1
 8002708:	211a      	movs	r1, #26
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fe7d 	bl	800240a <lps22hb_read_reg>
 8002710:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <lps22hb_low_power_set+0x42>
    res_conf.lc_en = val;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	7a3b      	ldrb	r3, [r7, #8]
 8002722:	f362 0300 	bfi	r3, r2, #0, #1
 8002726:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf,
 8002728:	f107 0208 	add.w	r2, r7, #8
 800272c:	2301      	movs	r3, #1
 800272e:	211a      	movs	r1, #26
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fe82 	bl	800243a <lps22hb_write_reg>
 8002736:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002738:	68fb      	ldr	r3, [r7, #12]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 800274e:	f107 0208 	add.w	r2, r7, #8
 8002752:	2301      	movs	r3, #1
 8002754:	2111      	movs	r1, #17
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fe57 	bl	800240a <lps22hb_read_reg>
 800275c:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10f      	bne.n	8002784 <lps22hb_auto_add_inc_set+0x42>
    ctrl_reg2.if_add_inc = val;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	7a3b      	ldrb	r3, [r7, #8]
 800276e:	f362 1304 	bfi	r3, r2, #4, #1
 8002772:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2,
 8002774:	f107 0208 	add.w	r2, r7, #8
 8002778:	2301      	movs	r3, #1
 800277a:	2111      	movs	r1, #17
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fe5c 	bl	800243a <lps22hb_write_reg>
 8002782:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8002784:	68fb      	ldr	r3, [r7, #12]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e04d      	b.n	8002848 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	7b1a      	ldrb	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80027e8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80027ee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e020      	b.n	8002848 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4798      	blx	r3
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e016      	b.n	8002848 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d112      	bne.n	8002848 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800282c:	2301      	movs	r3, #1
 800282e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	461a      	mov	r2, r3
 8002834:	2123      	movs	r1, #35	; 0x23
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fb55 	bl	8002ee6 <LSM303AGR_ACC_Write_Reg>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e000      	b.n	800284a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002848:	68fb      	ldr	r3, [r7, #12]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	080036f5 	.word	0x080036f5
 8002858:	08003757 	.word	0x08003757

0800285c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	331c      	adds	r3, #28
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f001 f94a 	bl	8003b04 <lsm303agr_xl_block_data_update_set>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e02c      	b.n	80028d6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	331c      	adds	r3, #28
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f001 faed 	bl	8003e62 <lsm303agr_xl_fifo_mode_set>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e020      	b.n	80028d6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2205      	movs	r2, #5
 8002898:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	331c      	adds	r3, #28
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 f84e 	bl	8003944 <lsm303agr_xl_data_rate_set>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	e010      	b.n	80028d6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	331c      	adds	r3, #28
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 f8c4 	bl	8003a48 <lsm303agr_xl_full_scale_set>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e004      	b.n	80028d6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f87c 	bl	80029e4 <LSM303AGR_ACC_Disable>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e008      	b.n	800290a <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	331c      	adds	r3, #28
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fa55 	bl	8003dd2 <lsm303agr_xl_device_id_get>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	e000      	b.n	8002936 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2200      	movs	r2, #0
 8002954:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2200      	movs	r2, #0
 8002960:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2210      	movs	r2, #16
 800296c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4a06      	ldr	r2, [pc, #24]	; (8002998 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002980:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	43c80000 	.word	0x43c80000

0800299c <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e014      	b.n	80029dc <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 021c 	add.w	r2, r3, #28
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f000 ffbf 	bl	8003944 <lsm303agr_xl_data_rate_set>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295
 80029d0:	e004      	b.n	80029dc <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e01f      	b.n	8002a3a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f103 021c 	add.w	r2, r3, #28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	332a      	adds	r3, #42	; 0x2a
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 ffc2 	bl	8003990 <lsm303agr_xl_data_rate_get>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	e010      	b.n	8002a3a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	331c      	adds	r3, #28
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 ff90 	bl	8003944 <lsm303agr_xl_data_rate_set>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	e004      	b.n	8002a3a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	331c      	adds	r3, #28
 8002a54:	f107 020b 	add.w	r2, r7, #11
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 ff3e 	bl	80038dc <lsm303agr_xl_operating_mode_get>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6a:	e031      	b.n	8002ad0 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d01a      	beq.n	8002aa8 <LSM303AGR_ACC_GetSensitivity+0x66>
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	dc22      	bgt.n	8002abc <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d00a      	beq.n	8002a94 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002a7e:	e01d      	b.n	8002abc <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fca8 	bl	80033d8 <LSM303AGR_ACC_GetSensitivityHR>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01a      	beq.n	8002ac4 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	e01d      	b.n	8002ad0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002a94:	6839      	ldr	r1, [r7, #0]
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fce4 	bl	8003464 <LSM303AGR_ACC_GetSensitivityNM>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	e013      	b.n	8002ad0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fd20 	bl	80034f0 <LSM303AGR_ACC_GetSensitivityLP>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	e009      	b.n	8002ad0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	60fb      	str	r3, [r7, #12]
      break;
 8002ac2:	e004      	b.n	8002ace <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002ac4:	bf00      	nop
 8002ac6:	e002      	b.n	8002ace <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002acc:	bf00      	nop
  }

  return ret;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	331c      	adds	r3, #28
 8002aea:	f107 020b 	add.w	r2, r7, #11
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fef3 	bl	80038dc <lsm303agr_xl_operating_mode_get>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	e09d      	b.n	8002c3e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	331c      	adds	r3, #28
 8002b06:	f107 020a 	add.w	r2, r7, #10
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 ff3f 	bl	8003990 <lsm303agr_xl_data_rate_get>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	e08f      	b.n	8002c3e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d147      	bne.n	8002bb4 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002b24:	7abb      	ldrb	r3, [r7, #10]
 8002b26:	2b09      	cmp	r3, #9
 8002b28:	d840      	bhi.n	8002bac <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b59 	.word	0x08002b59
 8002b34:	08002b63 	.word	0x08002b63
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002b75 	.word	0x08002b75
 8002b40:	08002b7d 	.word	0x08002b7d
 8002b44:	08002b85 	.word	0x08002b85
 8002b48:	08002b8d 	.word	0x08002b8d
 8002b4c:	08002b95 	.word	0x08002b95
 8002b50:	08002b9d 	.word	0x08002b9d
 8002b54:	08002ba5 	.word	0x08002ba5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
        break;
 8002b60:	e06c      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b68:	601a      	str	r2, [r3, #0]
        break;
 8002b6a:	e067      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4a36      	ldr	r2, [pc, #216]	; (8002c48 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002b70:	601a      	str	r2, [r3, #0]
        break;
 8002b72:	e063      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4a35      	ldr	r2, [pc, #212]	; (8002c4c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002b78:	601a      	str	r2, [r3, #0]
        break;
 8002b7a:	e05f      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002b80:	601a      	str	r2, [r3, #0]
        break;
 8002b82:	e05b      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4a33      	ldr	r2, [pc, #204]	; (8002c54 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002b88:	601a      	str	r2, [r3, #0]
        break;
 8002b8a:	e057      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4a32      	ldr	r2, [pc, #200]	; (8002c58 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002b90:	601a      	str	r2, [r3, #0]
        break;
 8002b92:	e053      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002b98:	601a      	str	r2, [r3, #0]
        break;
 8002b9a:	e04f      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4a30      	ldr	r2, [pc, #192]	; (8002c60 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002ba0:	601a      	str	r2, [r3, #0]
        break;
 8002ba2:	e04b      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002ba8:	601a      	str	r2, [r3, #0]
        break;
 8002baa:	e047      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	60fb      	str	r3, [r7, #12]
        break;
 8002bb2:	e043      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002bb4:	7abb      	ldrb	r3, [r7, #10]
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	d83c      	bhi.n	8002c34 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bf3 	.word	0x08002bf3
 8002bc8:	08002bfd 	.word	0x08002bfd
 8002bcc:	08002c05 	.word	0x08002c05
 8002bd0:	08002c0d 	.word	0x08002c0d
 8002bd4:	08002c15 	.word	0x08002c15
 8002bd8:	08002c1d 	.word	0x08002c1d
 8002bdc:	08002c25 	.word	0x08002c25
 8002be0:	08002c35 	.word	0x08002c35
 8002be4:	08002c2d 	.word	0x08002c2d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
        break;
 8002bf0:	e024      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bf8:	601a      	str	r2, [r3, #0]
        break;
 8002bfa:	e01f      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002c00:	601a      	str	r2, [r3, #0]
        break;
 8002c02:	e01b      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002c08:	601a      	str	r2, [r3, #0]
        break;
 8002c0a:	e017      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002c10:	601a      	str	r2, [r3, #0]
        break;
 8002c12:	e013      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002c18:	601a      	str	r2, [r3, #0]
        break;
 8002c1a:	e00f      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002c20:	601a      	str	r2, [r3, #0]
        break;
 8002c22:	e00b      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002c28:	601a      	str	r2, [r3, #0]
        break;
 8002c2a:	e007      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002c30:	601a      	str	r2, [r3, #0]
        break;
 8002c32:	e003      	b.n	8002c3c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	60fb      	str	r3, [r7, #12]
        break;
 8002c3a:	bf00      	nop
    }
  }

  return ret;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	41200000 	.word	0x41200000
 8002c4c:	41c80000 	.word	0x41c80000
 8002c50:	42480000 	.word	0x42480000
 8002c54:	42c80000 	.word	0x42c80000
 8002c58:	43480000 	.word	0x43480000
 8002c5c:	43c80000 	.word	0x43c80000
 8002c60:	44ca8000 	.word	0x44ca8000
 8002c64:	45a80000 	.word	0x45a80000
 8002c68:	44a80000 	.word	0x44a80000

08002c6c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d106      	bne.n	8002c90 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002c82:	ed97 0a00 	vldr	s0, [r7]
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fc78 	bl	800357c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	e005      	b.n	8002c9c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002c90:	ed97 0a00 	vldr	s0, [r7]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fcd3 	bl	8003640 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002c9a:	4603      	mov	r3, r0
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	331c      	adds	r3, #28
 8002cb6:	f107 020b 	add.w	r2, r7, #11
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fee9 	bl	8003a94 <lsm303agr_xl_full_scale_get>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	e023      	b.n	8002d16 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d81b      	bhi.n	8002d0c <LSM303AGR_ACC_GetFullScale+0x68>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <LSM303AGR_ACC_GetFullScale+0x38>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d05 	.word	0x08002d05
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
      break;
 8002cf2:	e00f      	b.n	8002d14 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	601a      	str	r2, [r3, #0]
      break;
 8002cfa:	e00b      	b.n	8002d14 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2208      	movs	r2, #8
 8002d00:	601a      	str	r2, [r3, #0]
      break;
 8002d02:	e007      	b.n	8002d14 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2210      	movs	r2, #16
 8002d08:	601a      	str	r2, [r3, #0]
      break;
 8002d0a:	e003      	b.n	8002d14 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d10:	60fb      	str	r3, [r7, #12]
      break;
 8002d12:	bf00      	nop
  }

  return ret;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop

08002d20 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	dd0b      	ble.n	8002d48 <LSM303AGR_ACC_SetFullScale+0x28>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	dd06      	ble.n	8002d44 <LSM303AGR_ACC_SetFullScale+0x24>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	dc01      	bgt.n	8002d40 <LSM303AGR_ACC_SetFullScale+0x20>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e004      	b.n	8002d4a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002d40:	2303      	movs	r3, #3
 8002d42:	e002      	b.n	8002d4a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LSM303AGR_ACC_SetFullScale+0x2a>
 8002d48:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002d4a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	331c      	adds	r3, #28
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fe77 	bl	8003a48 <lsm303agr_xl_full_scale_set>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e000      	b.n	8002d68 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	331c      	adds	r3, #28
 8002d86:	f107 020f 	add.w	r2, r7, #15
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fda5 	bl	80038dc <lsm303agr_xl_operating_mode_get>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	e04a      	b.n	8002e34 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d00c      	beq.n	8002dbe <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	dc0e      	bgt.n	8002dc6 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d003      	beq.n	8002db8 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002db0:	e009      	b.n	8002dc6 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002db2:	2310      	movs	r3, #16
 8002db4:	83fb      	strh	r3, [r7, #30]
      break;
 8002db6:	e00a      	b.n	8002dce <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002db8:	2340      	movs	r3, #64	; 0x40
 8002dba:	83fb      	strh	r3, [r7, #30]
      break;
 8002dbc:	e007      	b.n	8002dce <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc2:	83fb      	strh	r3, [r7, #30]
      break;
 8002dc4:	e003      	b.n	8002dce <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	61bb      	str	r3, [r7, #24]
      break;
 8002dcc:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d101      	bne.n	8002dda <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	e02c      	b.n	8002e34 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	331c      	adds	r3, #28
 8002dde:	f107 0210 	add.w	r2, r7, #16
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 feb3 	bl	8003b50 <lsm303agr_acceleration_raw_get>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	e01e      	b.n	8002e34 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002df6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e00:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002e0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e18:	b21a      	sxth	r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002e1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e28:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	809a      	strh	r2, [r3, #4]

  return ret;
 8002e32:	69bb      	ldr	r3, [r7, #24]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3720      	adds	r7, #32
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ff8c 	bl	8002d70 <LSM303AGR_ACC_GetAxesRaw>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e03c      	b.n	8002ede <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fde9 	bl	8002a42 <LSM303AGR_ACC_GetSensitivity>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e030      	b.n	8002ede <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002e7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e80:	ee07 3a90 	vmov	s15, r3
 8002e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e94:	ee17 2a90 	vmov	r2, s15
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002e9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ea8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb4:	ee17 2a90 	vmov	r2, s15
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002ebc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed4:	ee17 2a90 	vmov	r2, s15
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f103 001c 	add.w	r0, r3, #28
 8002efc:	1cba      	adds	r2, r7, #2
 8002efe:	78f9      	ldrb	r1, [r7, #3]
 8002f00:	2301      	movs	r3, #1
 8002f02:	f000 fcd3 	bl	80038ac <lsm303agr_write_reg>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	e000      	b.n	8002f14 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	e04b      	b.n	8002fd0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	7b1a      	ldrb	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002f74:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002f7a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e01e      	b.n	8002fd0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4798      	blx	r3
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e014      	b.n	8002fd0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	331c      	adds	r3, #28
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 ff75 	bl	8003eae <lsm303agr_mag_i2c_interface_set>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e000      	b.n	8002fd2 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	080037b9 	.word	0x080037b9
 8002fe0:	0800381b 	.word	0x0800381b

08002fe4 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	331c      	adds	r3, #28
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fe7c 	bl	8003cf0 <lsm303agr_mag_block_data_update_set>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	e028      	b.n	8003056 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	331c      	adds	r3, #28
 8003008:	2102      	movs	r1, #2
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fdeb 	bl	8003be6 <lsm303agr_mag_operating_mode_set>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	e01c      	b.n	8003056 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	331c      	adds	r3, #28
 8003020:	2103      	movs	r1, #3
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fe05 	bl	8003c32 <lsm303agr_mag_data_rate_set>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	e010      	b.n	8003056 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	331c      	adds	r3, #28
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f000 feeb 	bl	8003e16 <lsm303agr_mag_self_test_set>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e004      	b.n	8003056 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f874 	bl	8003154 <LSM303AGR_MAG_Disable>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	e004      	b.n	8003082 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	331c      	adds	r3, #28
 8003098:	6839      	ldr	r1, [r7, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 feaa 	bl	8003df4 <lsm303agr_mag_device_id_get>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	e000      	b.n	80030ae <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2200      	movs	r2, #0
 80030de:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2232      	movs	r2, #50	; 0x32
 80030ea:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8003100:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	42c80000 	.word	0x42c80000

08003114 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e010      	b.n	800314c <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	331c      	adds	r3, #28
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fd58 	bl	8003be6 <lsm303agr_mag_operating_mode_set>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	e004      	b.n	800314c <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e010      	b.n	800318c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	331c      	adds	r3, #28
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fd38 	bl	8003be6 <lsm303agr_mag_operating_mode_set>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	e004      	b.n	800318c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80031a4:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	331c      	adds	r3, #28
 80031c6:	f107 020b 	add.w	r2, r7, #11
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fd57 	bl	8003c80 <lsm303agr_mag_data_rate_get>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
 80031dc:	e023      	b.n	8003226 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d81b      	bhi.n	800321c <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003205 	.word	0x08003205
 80031f4:	0800320d 	.word	0x0800320d
 80031f8:	08003215 	.word	0x08003215
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003200:	601a      	str	r2, [r3, #0]
      break;
 8003202:	e00f      	b.n	8003224 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003208:	601a      	str	r2, [r3, #0]
      break;
 800320a:	e00b      	b.n	8003224 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003210:	601a      	str	r2, [r3, #0]
      break;
 8003212:	e007      	b.n	8003224 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003218:	601a      	str	r2, [r3, #0]
      break;
 800321a:	e003      	b.n	8003224 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	60fb      	str	r3, [r7, #12]
      break;
 8003222:	bf00      	nop
  }

  return ret;
 8003224:	68fb      	ldr	r3, [r7, #12]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	41200000 	.word	0x41200000
 8003234:	41a00000 	.word	0x41a00000
 8003238:	42480000 	.word	0x42480000
 800323c:	42c80000 	.word	0x42c80000

08003240 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 800324c:	edd7 7a00 	vldr	s15, [r7]
 8003250:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	d801      	bhi.n	8003262 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800325e:	2300      	movs	r3, #0
 8003260:	e016      	b.n	8003290 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003262:	edd7 7a00 	vldr	s15, [r7]
 8003266:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800326a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	d801      	bhi.n	8003278 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003274:	2301      	movs	r3, #1
 8003276:	e00b      	b.n	8003290 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003278:	edd7 7a00 	vldr	s15, [r7]
 800327c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80032b8 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	d801      	bhi.n	800328e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800328a:	2302      	movs	r3, #2
 800328c:	e000      	b.n	8003290 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800328e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003290:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	331c      	adds	r3, #28
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fcc9 	bl	8003c32 <lsm303agr_mag_data_rate_set>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e000      	b.n	80032ae <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	42480000 	.word	0x42480000

080032bc <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2232      	movs	r2, #50	; 0x32
 80032ca:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	331c      	adds	r3, #28
 8003300:	f107 0208 	add.w	r2, r7, #8
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fd18 	bl	8003d3c <lsm303agr_magnetic_raw_get>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	e00c      	b.n	8003332 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003318:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003320:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003328:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	331c      	adds	r3, #28
 8003348:	f107 0210 	add.w	r2, r7, #16
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fcf4 	bl	8003d3c <lsm303agr_magnetic_raw_get>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	e036      	b.n	80033ce <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff14 	bl	8003194 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800336c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003378:	edd7 7a03 	vldr	s15, [r7, #12]
 800337c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003384:	ee17 2a90 	vmov	r2, s15
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800338c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003398:	edd7 7a03 	vldr	s15, [r7, #12]
 800339c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033a4:	ee17 2a90 	vmov	r2, s15
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80033ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033c4:	ee17 2a90 	vmov	r2, s15
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	331c      	adds	r3, #28
 80033ea:	f107 020b 	add.w	r2, r7, #11
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb4f 	bl	8003a94 <lsm303agr_xl_full_scale_get>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e023      	b.n	800344a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d81b      	bhi.n	8003440 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003421 	.word	0x08003421
 8003414:	08003429 	.word	0x08003429
 8003418:	08003431 	.word	0x08003431
 800341c:	08003439 	.word	0x08003439
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003424:	601a      	str	r2, [r3, #0]
      break;
 8003426:	e00f      	b.n	8003448 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 800342c:	601a      	str	r2, [r3, #0]
      break;
 800342e:	e00b      	b.n	8003448 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003434:	601a      	str	r2, [r3, #0]
      break;
 8003436:	e007      	b.n	8003448 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 800343c:	601a      	str	r2, [r3, #0]
      break;
 800343e:	e003      	b.n	8003448 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003440:	f04f 33ff 	mov.w	r3, #4294967295
 8003444:	60fb      	str	r3, [r7, #12]
      break;
 8003446:	bf00      	nop
  }

  return ret;
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	3f7ae148 	.word	0x3f7ae148
 8003458:	3ff9999a 	.word	0x3ff9999a
 800345c:	4079999a 	.word	0x4079999a
 8003460:	413b851f 	.word	0x413b851f

08003464 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	331c      	adds	r3, #28
 8003476:	f107 020b 	add.w	r2, r7, #11
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fb09 	bl	8003a94 <lsm303agr_xl_full_scale_get>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	e023      	b.n	80034d6 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d81b      	bhi.n	80034cc <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034bd 	.word	0x080034bd
 80034a8:	080034c5 	.word	0x080034c5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80034b0:	601a      	str	r2, [r3, #0]
      break;
 80034b2:	e00f      	b.n	80034d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80034b8:	601a      	str	r2, [r3, #0]
      break;
 80034ba:	e00b      	b.n	80034d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80034c0:	601a      	str	r2, [r3, #0]
      break;
 80034c2:	e007      	b.n	80034d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80034c8:	601a      	str	r2, [r3, #0]
      break;
 80034ca:	e003      	b.n	80034d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	60fb      	str	r3, [r7, #12]
      break;
 80034d2:	bf00      	nop
  }

  return ret;
 80034d4:	68fb      	ldr	r3, [r7, #12]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	4079999a 	.word	0x4079999a
 80034e4:	40fa3d71 	.word	0x40fa3d71
 80034e8:	417a147b 	.word	0x417a147b
 80034ec:	423b999a 	.word	0x423b999a

080034f0 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	331c      	adds	r3, #28
 8003502:	f107 020b 	add.w	r2, r7, #11
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fac3 	bl	8003a94 <lsm303agr_xl_full_scale_get>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e023      	b.n	8003562 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800351a:	7afb      	ldrb	r3, [r7, #11]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d81b      	bhi.n	8003558 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	08003539 	.word	0x08003539
 800352c:	08003541 	.word	0x08003541
 8003530:	08003549 	.word	0x08003549
 8003534:	08003551 	.word	0x08003551
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 800353c:	601a      	str	r2, [r3, #0]
      break;
 800353e:	e00f      	b.n	8003560 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003544:	601a      	str	r2, [r3, #0]
      break;
 8003546:	e00b      	b.n	8003560 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 800354c:	601a      	str	r2, [r3, #0]
      break;
 800354e:	e007      	b.n	8003560 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4a09      	ldr	r2, [pc, #36]	; (8003578 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003554:	601a      	str	r2, [r3, #0]
      break;
 8003556:	e003      	b.n	8003560 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003558:	f04f 33ff 	mov.w	r3, #4294967295
 800355c:	60fb      	str	r3, [r7, #12]
      break;
 800355e:	bf00      	nop
  }

  return ret;
 8003560:	68fb      	ldr	r3, [r7, #12]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	417a147b 	.word	0x417a147b
 8003570:	41fa147b 	.word	0x41fa147b
 8003574:	427a147b 	.word	0x427a147b
 8003578:	433b947b 	.word	0x433b947b

0800357c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003588:	edd7 7a00 	vldr	s15, [r7]
 800358c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003598:	d801      	bhi.n	800359e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800359a:	2301      	movs	r3, #1
 800359c:	e037      	b.n	800360e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800359e:	edd7 7a00 	vldr	s15, [r7]
 80035a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	d801      	bhi.n	80035b4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e02c      	b.n	800360e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035b4:	edd7 7a00 	vldr	s15, [r7]
 80035b8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80035bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	d801      	bhi.n	80035ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80035c6:	2303      	movs	r3, #3
 80035c8:	e021      	b.n	800360e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035ca:	edd7 7a00 	vldr	s15, [r7]
 80035ce:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003634 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80035d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	d801      	bhi.n	80035e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80035dc:	2304      	movs	r3, #4
 80035de:	e016      	b.n	800360e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035e0:	edd7 7a00 	vldr	s15, [r7]
 80035e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003638 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80035e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f0:	d801      	bhi.n	80035f6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80035f2:	2305      	movs	r3, #5
 80035f4:	e00b      	b.n	800360e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80035f6:	edd7 7a00 	vldr	s15, [r7]
 80035fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800363c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80035fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	d801      	bhi.n	800360c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003608:	2306      	movs	r3, #6
 800360a:	e000      	b.n	800360e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800360c:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800360e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	331c      	adds	r3, #28
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f993 	bl	8003944 <lsm303agr_xl_data_rate_set>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	e000      	b.n	800362c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	42480000 	.word	0x42480000
 8003638:	42c80000 	.word	0x42c80000
 800363c:	43480000 	.word	0x43480000

08003640 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800364c:	edd7 7a00 	vldr	s15, [r7]
 8003650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365c:	d801      	bhi.n	8003662 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800365e:	2301      	movs	r3, #1
 8003660:	e037      	b.n	80036d2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003662:	edd7 7a00 	vldr	s15, [r7]
 8003666:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800366a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	d801      	bhi.n	8003678 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003674:	2302      	movs	r3, #2
 8003676:	e02c      	b.n	80036d2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003678:	edd7 7a00 	vldr	s15, [r7]
 800367c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d801      	bhi.n	800368e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800368a:	2303      	movs	r3, #3
 800368c:	e021      	b.n	80036d2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800368e:	edd7 7a00 	vldr	s15, [r7]
 8003692:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80036e8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369e:	d801      	bhi.n	80036a4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e016      	b.n	80036d2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80036a4:	edd7 7a00 	vldr	s15, [r7]
 80036a8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80036ec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80036ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	d801      	bhi.n	80036ba <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80036b6:	2305      	movs	r3, #5
 80036b8:	e00b      	b.n	80036d2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80036ba:	edd7 7a00 	vldr	s15, [r7]
 80036be:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80036f0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80036c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	d801      	bhi.n	80036d0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80036cc:	2306      	movs	r3, #6
 80036ce:	e000      	b.n	80036d2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80036d0:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	42480000 	.word	0x42480000
 80036ec:	42c80000 	.word	0x42c80000
 80036f0:	43480000 	.word	0x43480000

080036f4 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	460b      	mov	r3, r1
 8003702:	72fb      	strb	r3, [r7, #11]
 8003704:	4613      	mov	r3, r2
 8003706:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10e      	bne.n	8003732 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	695c      	ldr	r4, [r3, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	7b1b      	ldrb	r3, [r3, #12]
 800371c:	b298      	uxth	r0, r3
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003724:	b2db      	uxtb	r3, r3
 8003726:	b299      	uxth	r1, r3
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	47a0      	blx	r4
 800372e:	4603      	mov	r3, r0
 8003730:	e00d      	b.n	800374e <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	695c      	ldr	r4, [r3, #20]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	7b1b      	ldrb	r3, [r3, #12]
 800373a:	b298      	uxth	r0, r3
 800373c:	7afb      	ldrb	r3, [r7, #11]
 800373e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003742:	b2db      	uxtb	r3, r3
 8003744:	b299      	uxth	r1, r3
 8003746:	893b      	ldrh	r3, [r7, #8]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	47a0      	blx	r4
 800374c:	4603      	mov	r3, r0
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}

08003756 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003756:	b590      	push	{r4, r7, lr}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	461a      	mov	r2, r3
 8003762:	460b      	mov	r3, r1
 8003764:	72fb      	strb	r3, [r7, #11]
 8003766:	4613      	mov	r3, r2
 8003768:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10e      	bne.n	8003794 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	691c      	ldr	r4, [r3, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	7b1b      	ldrb	r3, [r3, #12]
 800377e:	b298      	uxth	r0, r3
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003786:	b2db      	uxtb	r3, r3
 8003788:	b299      	uxth	r1, r3
 800378a:	893b      	ldrh	r3, [r7, #8]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	47a0      	blx	r4
 8003790:	4603      	mov	r3, r0
 8003792:	e00d      	b.n	80037b0 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	691c      	ldr	r4, [r3, #16]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	7b1b      	ldrb	r3, [r3, #12]
 800379c:	b298      	uxth	r0, r3
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	b299      	uxth	r1, r3
 80037a8:	893b      	ldrh	r3, [r7, #8]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	47a0      	blx	r4
 80037ae:	4603      	mov	r3, r0
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd90      	pop	{r4, r7, pc}

080037b8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	461a      	mov	r2, r3
 80037c4:	460b      	mov	r3, r1
 80037c6:	72fb      	strb	r3, [r7, #11]
 80037c8:	4613      	mov	r3, r2
 80037ca:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10e      	bne.n	80037f6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	695c      	ldr	r4, [r3, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	7b1b      	ldrb	r3, [r3, #12]
 80037e0:	b298      	uxth	r0, r3
 80037e2:	7afb      	ldrb	r3, [r7, #11]
 80037e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	b299      	uxth	r1, r3
 80037ec:	893b      	ldrh	r3, [r7, #8]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	47a0      	blx	r4
 80037f2:	4603      	mov	r3, r0
 80037f4:	e00d      	b.n	8003812 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	695c      	ldr	r4, [r3, #20]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	7b1b      	ldrb	r3, [r3, #12]
 80037fe:	b298      	uxth	r0, r3
 8003800:	7afb      	ldrb	r3, [r7, #11]
 8003802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003806:	b2db      	uxtb	r3, r3
 8003808:	b299      	uxth	r1, r3
 800380a:	893b      	ldrh	r3, [r7, #8]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	47a0      	blx	r4
 8003810:	4603      	mov	r3, r0
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}

0800381a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800381a:	b590      	push	{r4, r7, lr}
 800381c:	b087      	sub	sp, #28
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	461a      	mov	r2, r3
 8003826:	460b      	mov	r3, r1
 8003828:	72fb      	strb	r3, [r7, #11]
 800382a:	4613      	mov	r3, r2
 800382c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10e      	bne.n	8003858 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	691c      	ldr	r4, [r3, #16]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	7b1b      	ldrb	r3, [r3, #12]
 8003842:	b298      	uxth	r0, r3
 8003844:	7afb      	ldrb	r3, [r7, #11]
 8003846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800384a:	b2db      	uxtb	r3, r3
 800384c:	b299      	uxth	r1, r3
 800384e:	893b      	ldrh	r3, [r7, #8]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	47a0      	blx	r4
 8003854:	4603      	mov	r3, r0
 8003856:	e00d      	b.n	8003874 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	691c      	ldr	r4, [r3, #16]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	7b1b      	ldrb	r3, [r3, #12]
 8003860:	b298      	uxth	r0, r3
 8003862:	7afb      	ldrb	r3, [r7, #11]
 8003864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003868:	b2db      	uxtb	r3, r3
 800386a:	b299      	uxth	r1, r3
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	47a0      	blx	r4
 8003872:	4603      	mov	r3, r0
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd90      	pop	{r4, r7, pc}

0800387c <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	461a      	mov	r2, r3
 8003888:	460b      	mov	r3, r1
 800388a:	72fb      	strb	r3, [r7, #11]
 800388c:	4613      	mov	r3, r2
 800388e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685c      	ldr	r4, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6898      	ldr	r0, [r3, #8]
 8003898:	893b      	ldrh	r3, [r7, #8]
 800389a:	7af9      	ldrb	r1, [r7, #11]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	47a0      	blx	r4
 80038a0:	6178      	str	r0, [r7, #20]
  return ret;
 80038a2:	697b      	ldr	r3, [r7, #20]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd90      	pop	{r4, r7, pc}

080038ac <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	461a      	mov	r2, r3
 80038b8:	460b      	mov	r3, r1
 80038ba:	72fb      	strb	r3, [r7, #11]
 80038bc:	4613      	mov	r3, r2
 80038be:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681c      	ldr	r4, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6898      	ldr	r0, [r3, #8]
 80038c8:	893b      	ldrh	r3, [r7, #8]
 80038ca:	7af9      	ldrb	r1, [r7, #11]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	47a0      	blx	r4
 80038d0:	6178      	str	r0, [r7, #20]
  return ret;
 80038d2:	697b      	ldr	r3, [r7, #20]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}

080038dc <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80038e6:	f107 020c 	add.w	r2, r7, #12
 80038ea:	2301      	movs	r3, #1
 80038ec:	2120      	movs	r1, #32
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffc4 	bl	800387c <lsm303agr_read_reg>
 80038f4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80038fc:	f107 0210 	add.w	r2, r7, #16
 8003900:	2301      	movs	r3, #1
 8003902:	2123      	movs	r1, #35	; 0x23
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ffb9 	bl	800387c <lsm303agr_read_reg>
 800390a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 800390c:	7b3b      	ldrb	r3, [r7, #12]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2202      	movs	r2, #2
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e00c      	b.n	800393a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003920:	7c3b      	ldrb	r3, [r7, #16]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e002      	b.n	800393a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800393a:	697b      	ldr	r3, [r7, #20]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003950:	f107 0208 	add.w	r2, r7, #8
 8003954:	2301      	movs	r3, #1
 8003956:	2120      	movs	r1, #32
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff8f 	bl	800387c <lsm303agr_read_reg>
 800395e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	b2da      	uxtb	r2, r3
 800396e:	7a3b      	ldrb	r3, [r7, #8]
 8003970:	f362 1307 	bfi	r3, r2, #4, #4
 8003974:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003976:	f107 0208 	add.w	r2, r7, #8
 800397a:	2301      	movs	r3, #1
 800397c:	2120      	movs	r1, #32
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ff94 	bl	80038ac <lsm303agr_write_reg>
 8003984:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800399a:	f107 0208 	add.w	r2, r7, #8
 800399e:	2301      	movs	r3, #1
 80039a0:	2120      	movs	r1, #32
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff6a 	bl	800387c <lsm303agr_read_reg>
 80039a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 80039aa:	7a3b      	ldrb	r3, [r7, #8]
 80039ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b09      	cmp	r3, #9
 80039b4:	d83e      	bhi.n	8003a34 <lsm303agr_xl_data_rate_get+0xa4>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <lsm303agr_xl_data_rate_get+0x2c>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	080039f5 	.word	0x080039f5
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a05 	.word	0x08003a05
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	08003a15 	.word	0x08003a15
 80039d8:	08003a1d 	.word	0x08003a1d
 80039dc:	08003a25 	.word	0x08003a25
 80039e0:	08003a2d 	.word	0x08003a2d
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
      break;
 80039ea:	e027      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
      break;
 80039f2:	e023      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2202      	movs	r2, #2
 80039f8:	701a      	strb	r2, [r3, #0]
      break;
 80039fa:	e01f      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2203      	movs	r2, #3
 8003a00:	701a      	strb	r2, [r3, #0]
      break;
 8003a02:	e01b      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2204      	movs	r2, #4
 8003a08:	701a      	strb	r2, [r3, #0]
      break;
 8003a0a:	e017      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2205      	movs	r2, #5
 8003a10:	701a      	strb	r2, [r3, #0]
      break;
 8003a12:	e013      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2206      	movs	r2, #6
 8003a18:	701a      	strb	r2, [r3, #0]
      break;
 8003a1a:	e00f      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2207      	movs	r2, #7
 8003a20:	701a      	strb	r2, [r3, #0]
      break;
 8003a22:	e00b      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2208      	movs	r2, #8
 8003a28:	701a      	strb	r2, [r3, #0]
      break;
 8003a2a:	e007      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2209      	movs	r2, #9
 8003a30:	701a      	strb	r2, [r3, #0]
      break;
 8003a32:	e003      	b.n	8003a3c <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
      break;
 8003a3a:	bf00      	nop
  }

  return ret;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop

08003a48 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a54:	f107 0208 	add.w	r2, r7, #8
 8003a58:	2301      	movs	r3, #1
 8003a5a:	2123      	movs	r1, #35	; 0x23
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff0d 	bl	800387c <lsm303agr_read_reg>
 8003a62:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	f362 1305 	bfi	r3, r2, #4, #2
 8003a78:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a7a:	f107 0208 	add.w	r2, r7, #8
 8003a7e:	2301      	movs	r3, #1
 8003a80:	2123      	movs	r1, #35	; 0x23
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff12 	bl	80038ac <lsm303agr_write_reg>
 8003a88:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a9e:	f107 0208 	add.w	r2, r7, #8
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	2123      	movs	r1, #35	; 0x23
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fee8 	bl	800387c <lsm303agr_read_reg>
 8003aac:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003aae:	7a3b      	ldrb	r3, [r7, #8]
 8003ab0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d81a      	bhi.n	8003af0 <lsm303agr_xl_full_scale_get+0x5c>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <lsm303agr_xl_full_scale_get+0x2c>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003ae1 	.word	0x08003ae1
 8003acc:	08003ae9 	.word	0x08003ae9
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
      break;
 8003ad6:	e00f      	b.n	8003af8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
      break;
 8003ade:	e00b      	b.n	8003af8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e007      	b.n	8003af8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
      break;
 8003aee:	e003      	b.n	8003af8 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
      break;
 8003af6:	bf00      	nop
  }

  return ret;
 8003af8:	68fb      	ldr	r3, [r7, #12]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop

08003b04 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b10:	f107 0208 	add.w	r2, r7, #8
 8003b14:	2301      	movs	r3, #1
 8003b16:	2123      	movs	r1, #35	; 0x23
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff feaf 	bl	800387c <lsm303agr_read_reg>
 8003b1e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	7a3b      	ldrb	r3, [r7, #8]
 8003b30:	f362 13c7 	bfi	r3, r2, #7, #1
 8003b34:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b36:	f107 0208 	add.w	r2, r7, #8
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	2123      	movs	r1, #35	; 0x23
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff feb4 	bl	80038ac <lsm303agr_write_reg>
 8003b44:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003b46:	68fb      	ldr	r3, [r7, #12]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003b5a:	f107 020c 	add.w	r2, r7, #12
 8003b5e:	2306      	movs	r3, #6
 8003b60:	2128      	movs	r1, #40	; 0x28
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fe8a 	bl	800387c <lsm303agr_read_reg>
 8003b68:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003b6a:	7b7b      	ldrb	r3, [r7, #13]
 8003b6c:	b21a      	sxth	r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	7b3b      	ldrb	r3, [r7, #12]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b21a      	sxth	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	3302      	adds	r3, #2
 8003b92:	b212      	sxth	r2, r2
 8003b94:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	b212      	sxth	r2, r2
 8003bb2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003bb4:	7c7a      	ldrb	r2, [r7, #17]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	b212      	sxth	r2, r2
 8003bbc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	7c3b      	ldrb	r3, [r7, #16]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	b212      	sxth	r2, r2
 8003bda:	801a      	strh	r2, [r3, #0]
  return ret;
 8003bdc:	697b      	ldr	r3, [r7, #20]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003bf2:	f107 0208 	add.w	r2, r7, #8
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	2160      	movs	r1, #96	; 0x60
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fe3e 	bl	800387c <lsm303agr_read_reg>
 8003c00:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	7a3b      	ldrb	r3, [r7, #8]
 8003c12:	f362 0301 	bfi	r3, r2, #0, #2
 8003c16:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c18:	f107 0208 	add.w	r2, r7, #8
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	2160      	movs	r1, #96	; 0x60
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fe43 	bl	80038ac <lsm303agr_write_reg>
 8003c26:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003c28:	68fb      	ldr	r3, [r7, #12]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c3e:	f107 0208 	add.w	r2, r7, #8
 8003c42:	2301      	movs	r3, #1
 8003c44:	2160      	movs	r1, #96	; 0x60
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fe18 	bl	800387c <lsm303agr_read_reg>
 8003c4c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10f      	bne.n	8003c74 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	7a3b      	ldrb	r3, [r7, #8]
 8003c5e:	f362 0383 	bfi	r3, r2, #2, #2
 8003c62:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c64:	f107 0208 	add.w	r2, r7, #8
 8003c68:	2301      	movs	r3, #1
 8003c6a:	2160      	movs	r1, #96	; 0x60
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fe1d 	bl	80038ac <lsm303agr_write_reg>
 8003c72:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003c8a:	f107 0208 	add.w	r2, r7, #8
 8003c8e:	2301      	movs	r3, #1
 8003c90:	2160      	movs	r1, #96	; 0x60
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fdf2 	bl	800387c <lsm303agr_read_reg>
 8003c98:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003c9a:	7a3b      	ldrb	r3, [r7, #8]
 8003c9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d81a      	bhi.n	8003cdc <lsm303agr_mag_data_rate_get+0x5c>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <lsm303agr_mag_data_rate_get+0x2c>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc5 	.word	0x08003cc5
 8003cb4:	08003ccd 	.word	0x08003ccd
 8003cb8:	08003cd5 	.word	0x08003cd5
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
      break;
 8003cc2:	e00f      	b.n	8003ce4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
      break;
 8003cca:	e00b      	b.n	8003ce4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
      break;
 8003cd2:	e007      	b.n	8003ce4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	701a      	strb	r2, [r3, #0]
      break;
 8003cda:	e003      	b.n	8003ce4 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
      break;
 8003ce2:	bf00      	nop
  }

  return ret;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop

08003cf0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003cfc:	f107 0208 	add.w	r2, r7, #8
 8003d00:	2301      	movs	r3, #1
 8003d02:	2162      	movs	r1, #98	; 0x62
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fdb9 	bl	800387c <lsm303agr_read_reg>
 8003d0a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	7a3b      	ldrb	r3, [r7, #8]
 8003d1c:	f362 1304 	bfi	r3, r2, #4, #1
 8003d20:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d22:	f107 0208 	add.w	r2, r7, #8
 8003d26:	2301      	movs	r3, #1
 8003d28:	2162      	movs	r1, #98	; 0x62
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fdbe 	bl	80038ac <lsm303agr_write_reg>
 8003d30:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003d46:	f107 020c 	add.w	r2, r7, #12
 8003d4a:	2306      	movs	r3, #6
 8003d4c:	2168      	movs	r1, #104	; 0x68
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fd94 	bl	800387c <lsm303agr_read_reg>
 8003d54:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003d56:	7b7b      	ldrb	r3, [r7, #13]
 8003d58:	b21a      	sxth	r2, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	7b3b      	ldrb	r3, [r7, #12]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	b21a      	sxth	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	b212      	sxth	r2, r2
 8003d80:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	3302      	adds	r3, #2
 8003d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	7bbb      	ldrb	r3, [r7, #14]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	b212      	sxth	r2, r2
 8003d9e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003da0:	7c7a      	ldrb	r2, [r7, #17]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	3304      	adds	r3, #4
 8003da6:	b212      	sxth	r2, r2
 8003da8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	3304      	adds	r3, #4
 8003dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	7c3b      	ldrb	r3, [r7, #16]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	b212      	sxth	r2, r2
 8003dc6:	801a      	strh	r2, [r3, #0]
  return ret;
 8003dc8:	697b      	ldr	r3, [r7, #20]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003ddc:	2301      	movs	r3, #1
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	210f      	movs	r1, #15
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fd4a 	bl	800387c <lsm303agr_read_reg>
 8003de8:	60f8      	str	r0, [r7, #12]
  return ret;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003dfe:	2301      	movs	r3, #1
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	214f      	movs	r1, #79	; 0x4f
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fd39 	bl	800387c <lsm303agr_read_reg>
 8003e0a:	60f8      	str	r0, [r7, #12]
  return ret;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e22:	f107 0208 	add.w	r2, r7, #8
 8003e26:	2301      	movs	r3, #1
 8003e28:	2162      	movs	r1, #98	; 0x62
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fd26 	bl	800387c <lsm303agr_read_reg>
 8003e30:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	7a3b      	ldrb	r3, [r7, #8]
 8003e42:	f362 0341 	bfi	r3, r2, #1, #1
 8003e46:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e48:	f107 0208 	add.w	r2, r7, #8
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	2162      	movs	r1, #98	; 0x62
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fd2b 	bl	80038ac <lsm303agr_write_reg>
 8003e56:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003e6e:	f107 0208 	add.w	r2, r7, #8
 8003e72:	2301      	movs	r3, #1
 8003e74:	212e      	movs	r1, #46	; 0x2e
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff fd00 	bl	800387c <lsm303agr_read_reg>
 8003e7c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10f      	bne.n	8003ea4 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	7a3b      	ldrb	r3, [r7, #8]
 8003e8e:	f362 1387 	bfi	r3, r2, #6, #2
 8003e92:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003e94:	f107 0208 	add.w	r2, r7, #8
 8003e98:	2301      	movs	r3, #1
 8003e9a:	212e      	movs	r1, #46	; 0x2e
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fd05 	bl	80038ac <lsm303agr_write_reg>
 8003ea2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003eba:	f107 0208 	add.w	r2, r7, #8
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	2162      	movs	r1, #98	; 0x62
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fcda 	bl	800387c <lsm303agr_read_reg>
 8003ec8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	7a3b      	ldrb	r3, [r7, #8]
 8003eda:	f362 1345 	bfi	r3, r2, #5, #1
 8003ede:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ee0:	f107 0208 	add.w	r2, r7, #8
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	2162      	movs	r1, #98	; 0x62
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fcdf 	bl	80038ac <lsm303agr_write_reg>
 8003eee:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e04d      	b.n	8003fb4 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	7b1a      	ldrb	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <LSM6DSL_RegisterBusIO+0xc4>)
 8003f54:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <LSM6DSL_RegisterBusIO+0xc8>)
 8003f5a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e020      	b.n	8003fb4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4798      	blx	r3
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e016      	b.n	8003fb4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d112      	bne.n	8003fb4 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10d      	bne.n	8003fb4 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003f98:	230c      	movs	r3, #12
 8003f9a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003f9c:	7afb      	ldrb	r3, [r7, #11]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2112      	movs	r1, #18
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fd2d 	bl	8004a02 <LSM6DSL_Write_Reg>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	08004e71 	.word	0x08004e71
 8003fc4:	08004ea7 	.word	0x08004ea7

08003fc8 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	331c      	adds	r3, #28
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 fa59 	bl	800548e <lsm6dsl_auto_increment_set>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe6:	e054      	b.n	8004092 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	331c      	adds	r3, #28
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f980 	bl	80052f4 <lsm6dsl_block_data_update_set>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	e048      	b.n	8004092 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	331c      	adds	r3, #28
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f001 fa67 	bl	80054da <lsm6dsl_fifo_mode_set>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e03c      	b.n	8004092 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2204      	movs	r2, #4
 800401c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	331c      	adds	r3, #28
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ffe6 	bl	8004ff8 <lsm6dsl_xl_data_rate_set>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	e02c      	b.n	8004092 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	331c      	adds	r3, #28
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ff7c 	bl	8004f3c <lsm6dsl_xl_full_scale_set>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800404a:	f04f 33ff 	mov.w	r3, #4294967295
 800404e:	e020      	b.n	8004092 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2204      	movs	r2, #4
 8004054:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	331c      	adds	r3, #28
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f8c0 	bl	80051e4 <lsm6dsl_gy_data_rate_set>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	e010      	b.n	8004092 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	331c      	adds	r3, #28
 8004074:	2106      	movs	r1, #6
 8004076:	4618      	mov	r0, r3
 8004078:	f001 f84c 	bl	8005114 <lsm6dsl_gy_full_scale_set>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295
 8004086:	e004      	b.n	8004092 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f888 	bl	80041b8 <LSM6DSL_ACC_Disable>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	e015      	b.n	80040e0 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa9a 	bl	80045ee <LSM6DSL_GYRO_Disable>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80040c0:	f04f 33ff 	mov.w	r3, #4294967295
 80040c4:	e00c      	b.n	80040e0 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	331c      	adds	r3, #28
 80040f6:	6839      	ldr	r1, [r7, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f9b7 	bl	800546c <lsm6dsl_device_id_get>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
 8004108:	e000      	b.n	800410c <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800413c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2210      	movs	r2, #16
 8004142:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <LSM6DSL_GetCapabilities+0x58>)
 800414e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4a06      	ldr	r2, [pc, #24]	; (800416c <LSM6DSL_GetCapabilities+0x58>)
 8004154:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	45d02000 	.word	0x45d02000

08004170 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e014      	b.n	80041b0 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f103 021c 	add.w	r2, r3, #28
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f000 ff2f 	bl	8004ff8 <lsm6dsl_xl_data_rate_set>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	e004      	b.n	80041b0 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e01f      	b.n	800420e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f103 021c 	add.w	r2, r3, #28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	332b      	adds	r3, #43	; 0x2b
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 ff32 	bl	8005044 <lsm6dsl_xl_data_rate_get>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	e010      	b.n	800420e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	331c      	adds	r3, #28
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 ff00 	bl	8004ff8 <lsm6dsl_xl_data_rate_set>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e004      	b.n	800420e <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	331c      	adds	r3, #28
 800422a:	f107 020b 	add.w	r2, r7, #11
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fea9 	bl	8004f88 <lsm6dsl_xl_full_scale_get>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	e023      	b.n	800428a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004242:	7afb      	ldrb	r3, [r7, #11]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d81b      	bhi.n	8004280 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004279 	.word	0x08004279
 8004258:	08004269 	.word	0x08004269
 800425c:	08004271 	.word	0x08004271
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004264:	601a      	str	r2, [r3, #0]
      break;
 8004266:	e00f      	b.n	8004288 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4a0b      	ldr	r2, [pc, #44]	; (8004298 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800426c:	601a      	str	r2, [r3, #0]
      break;
 800426e:	e00b      	b.n	8004288 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004274:	601a      	str	r2, [r3, #0]
      break;
 8004276:	e007      	b.n	8004288 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800427c:	601a      	str	r2, [r3, #0]
      break;
 800427e:	e003      	b.n	8004288 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	60fb      	str	r3, [r7, #12]
      break;
 8004286:	bf00      	nop
  }

  return ret;
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	3d79db23 	.word	0x3d79db23
 8004298:	3df9db23 	.word	0x3df9db23
 800429c:	3e79db23 	.word	0x3e79db23
 80042a0:	3ef9db23 	.word	0x3ef9db23

080042a4 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	331c      	adds	r3, #28
 80042b6:	f107 020b 	add.w	r2, r7, #11
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fec1 	bl	8005044 <lsm6dsl_xl_data_rate_get>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80042c8:	f04f 33ff 	mov.w	r3, #4294967295
 80042cc:	e054      	b.n	8004378 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80042ce:	7afb      	ldrb	r3, [r7, #11]
 80042d0:	2b0b      	cmp	r3, #11
 80042d2:	d84c      	bhi.n	800436e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	0800430d 	.word	0x0800430d
 80042e0:	0800431f 	.word	0x0800431f
 80042e4:	08004327 	.word	0x08004327
 80042e8:	0800432f 	.word	0x0800432f
 80042ec:	08004337 	.word	0x08004337
 80042f0:	0800433f 	.word	0x0800433f
 80042f4:	08004347 	.word	0x08004347
 80042f8:	0800434f 	.word	0x0800434f
 80042fc:	08004357 	.word	0x08004357
 8004300:	0800435f 	.word	0x0800435f
 8004304:	08004367 	.word	0x08004367
 8004308:	08004317 	.word	0x08004317
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
      break;
 8004314:	e02f      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800431a:	601a      	str	r2, [r3, #0]
      break;
 800431c:	e02b      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004322:	601a      	str	r2, [r3, #0]
      break;
 8004324:	e027      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	4a17      	ldr	r2, [pc, #92]	; (8004388 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 800432a:	601a      	str	r2, [r3, #0]
      break;
 800432c:	e023      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	4a16      	ldr	r2, [pc, #88]	; (800438c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004332:	601a      	str	r2, [r3, #0]
      break;
 8004334:	e01f      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 800433a:	601a      	str	r2, [r3, #0]
      break;
 800433c:	e01b      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004342:	601a      	str	r2, [r3, #0]
      break;
 8004344:	e017      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	4a13      	ldr	r2, [pc, #76]	; (8004398 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800434a:	601a      	str	r2, [r3, #0]
      break;
 800434c:	e013      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	4a12      	ldr	r2, [pc, #72]	; (800439c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004352:	601a      	str	r2, [r3, #0]
      break;
 8004354:	e00f      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800435a:	601a      	str	r2, [r3, #0]
      break;
 800435c:	e00b      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004362:	601a      	str	r2, [r3, #0]
      break;
 8004364:	e007      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800436a:	601a      	str	r2, [r3, #0]
      break;
 800436c:	e003      	b.n	8004376 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	60fb      	str	r3, [r7, #12]
      break;
 8004374:	bf00      	nop
  }

  return ret;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	3fcccccd 	.word	0x3fcccccd
 8004384:	41480000 	.word	0x41480000
 8004388:	41d00000 	.word	0x41d00000
 800438c:	42500000 	.word	0x42500000
 8004390:	42d00000 	.word	0x42d00000
 8004394:	43500000 	.word	0x43500000
 8004398:	43d00000 	.word	0x43d00000
 800439c:	44504000 	.word	0x44504000
 80043a0:	44cf8000 	.word	0x44cf8000
 80043a4:	45502000 	.word	0x45502000
 80043a8:	45d02000 	.word	0x45d02000

080043ac <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d106      	bne.n	80043d0 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80043c2:	ed97 0a00 	vldr	s0, [r7]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fb36 	bl	8004a38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80043cc:	4603      	mov	r3, r0
 80043ce:	e005      	b.n	80043dc <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80043d0:	ed97 0a00 	vldr	s0, [r7]
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fbbb 	bl	8004b50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80043da:	4603      	mov	r3, r0
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	331c      	adds	r3, #28
 80043f6:	f107 020b 	add.w	r2, r7, #11
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fdc3 	bl	8004f88 <lsm6dsl_xl_full_scale_get>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	e023      	b.n	8004456 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d81b      	bhi.n	800444c <LSM6DSL_ACC_GetFullScale+0x68>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <LSM6DSL_ACC_GetFullScale+0x38>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	0800442d 	.word	0x0800442d
 8004420:	08004445 	.word	0x08004445
 8004424:	08004435 	.word	0x08004435
 8004428:	0800443d 	.word	0x0800443d
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2202      	movs	r2, #2
 8004430:	601a      	str	r2, [r3, #0]
      break;
 8004432:	e00f      	b.n	8004454 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2204      	movs	r2, #4
 8004438:	601a      	str	r2, [r3, #0]
      break;
 800443a:	e00b      	b.n	8004454 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2208      	movs	r2, #8
 8004440:	601a      	str	r2, [r3, #0]
      break;
 8004442:	e007      	b.n	8004454 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2210      	movs	r2, #16
 8004448:	601a      	str	r2, [r3, #0]
      break;
 800444a:	e003      	b.n	8004454 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
 8004450:	60fb      	str	r3, [r7, #12]
      break;
 8004452:	bf00      	nop
  }

  return ret;
 8004454:	68fb      	ldr	r3, [r7, #12]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b02      	cmp	r3, #2
 800446e:	dd0b      	ble.n	8004488 <LSM6DSL_ACC_SetFullScale+0x28>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b04      	cmp	r3, #4
 8004474:	dd06      	ble.n	8004484 <LSM6DSL_ACC_SetFullScale+0x24>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b08      	cmp	r3, #8
 800447a:	dc01      	bgt.n	8004480 <LSM6DSL_ACC_SetFullScale+0x20>
 800447c:	2303      	movs	r3, #3
 800447e:	e004      	b.n	800448a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004480:	2301      	movs	r3, #1
 8004482:	e002      	b.n	800448a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004484:	2302      	movs	r3, #2
 8004486:	e000      	b.n	800448a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004488:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800448a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	331c      	adds	r3, #28
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd51 	bl	8004f3c <lsm6dsl_xl_full_scale_set>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
 80044a4:	e000      	b.n	80044a8 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	331c      	adds	r3, #28
 80044be:	f107 0208 	add.w	r2, r7, #8
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ff86 	bl	80053d6 <lsm6dsl_acceleration_raw_get>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	e00c      	b.n	80044f0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80044d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80044de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80044e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	331c      	adds	r3, #28
 800450c:	f107 0210 	add.w	r2, r7, #16
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ff5f 	bl	80053d6 <lsm6dsl_acceleration_raw_get>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	e03c      	b.n	800459e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff fe74 	bl	8004218 <LSM6DSL_ACC_GetSensitivity>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	e030      	b.n	800459e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800453c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004548:	edd7 7a03 	vldr	s15, [r7, #12]
 800454c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004554:	ee17 2a90 	vmov	r2, s15
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800455c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004560:	ee07 3a90 	vmov	s15, r3
 8004564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004568:	edd7 7a03 	vldr	s15, [r7, #12]
 800456c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004574:	ee17 2a90 	vmov	r2, s15
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800457c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004588:	edd7 7a03 	vldr	s15, [r7, #12]
 800458c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004594:	ee17 2a90 	vmov	r2, s15
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e014      	b.n	80045e6 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f103 021c 	add.w	r2, r3, #28
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 fe0a 	bl	80051e4 <lsm6dsl_gy_data_rate_set>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e004      	b.n	80045e6 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e01f      	b.n	8004644 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f103 021c 	add.w	r2, r3, #28
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	332c      	adds	r3, #44	; 0x2c
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f000 fe0d 	bl	8005230 <lsm6dsl_gy_data_rate_get>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800461c:	f04f 33ff 	mov.w	r3, #4294967295
 8004620:	e010      	b.n	8004644 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	331c      	adds	r3, #28
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fddb 	bl	80051e4 <lsm6dsl_gy_data_rate_set>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	e004      	b.n	8004644 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	331c      	adds	r3, #28
 800465e:	f107 020b 	add.w	r2, r7, #11
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fd7b 	bl	8005160 <lsm6dsl_gy_full_scale_get>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004670:	f04f 33ff 	mov.w	r3, #4294967295
 8004674:	e02d      	b.n	80046d2 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004676:	7afb      	ldrb	r3, [r7, #11]
 8004678:	2b06      	cmp	r3, #6
 800467a:	d825      	bhi.n	80046c8 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046a1 	.word	0x080046a1
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046c9 	.word	0x080046c9
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046c9 	.word	0x080046c9
 800469c:	080046c1 	.word	0x080046c1
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4a0e      	ldr	r2, [pc, #56]	; (80046dc <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80046a4:	601a      	str	r2, [r3, #0]
      break;
 80046a6:	e013      	b.n	80046d0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80046ac:	601a      	str	r2, [r3, #0]
      break;
 80046ae:	e00f      	b.n	80046d0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80046b4:	601a      	str	r2, [r3, #0]
      break;
 80046b6:	e00b      	b.n	80046d0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80046bc:	601a      	str	r2, [r3, #0]
      break;
 80046be:	e007      	b.n	80046d0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80046c4:	601a      	str	r2, [r3, #0]
      break;
 80046c6:	e003      	b.n	80046d0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295
 80046cc:	60fb      	str	r3, [r7, #12]
      break;
 80046ce:	bf00      	nop
  }

  return ret;
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	408c0000 	.word	0x408c0000
 80046e0:	410c0000 	.word	0x410c0000
 80046e4:	418c0000 	.word	0x418c0000
 80046e8:	420c0000 	.word	0x420c0000
 80046ec:	428c0000 	.word	0x428c0000

080046f0 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	331c      	adds	r3, #28
 8004702:	f107 020b 	add.w	r2, r7, #11
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fd91 	bl	8005230 <lsm6dsl_gy_data_rate_get>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004714:	f04f 33ff 	mov.w	r3, #4294967295
 8004718:	e04e      	b.n	80047b8 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800471a:	7afb      	ldrb	r3, [r7, #11]
 800471c:	2b0a      	cmp	r3, #10
 800471e:	d846      	bhi.n	80047ae <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	08004755 	.word	0x08004755
 800472c:	0800475f 	.word	0x0800475f
 8004730:	08004767 	.word	0x08004767
 8004734:	0800476f 	.word	0x0800476f
 8004738:	08004777 	.word	0x08004777
 800473c:	0800477f 	.word	0x0800477f
 8004740:	08004787 	.word	0x08004787
 8004744:	0800478f 	.word	0x0800478f
 8004748:	08004797 	.word	0x08004797
 800474c:	0800479f 	.word	0x0800479f
 8004750:	080047a7 	.word	0x080047a7
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
      break;
 800475c:	e02b      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004762:	601a      	str	r2, [r3, #0]
      break;
 8004764:	e027      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 800476a:	601a      	str	r2, [r3, #0]
      break;
 800476c:	e023      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004772:	601a      	str	r2, [r3, #0]
      break;
 8004774:	e01f      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800477a:	601a      	str	r2, [r3, #0]
      break;
 800477c:	e01b      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004782:	601a      	str	r2, [r3, #0]
      break;
 8004784:	e017      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800478a:	601a      	str	r2, [r3, #0]
      break;
 800478c:	e013      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	4a11      	ldr	r2, [pc, #68]	; (80047d8 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004792:	601a      	str	r2, [r3, #0]
      break;
 8004794:	e00f      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	4a10      	ldr	r2, [pc, #64]	; (80047dc <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800479a:	601a      	str	r2, [r3, #0]
      break;
 800479c:	e00b      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80047a2:	601a      	str	r2, [r3, #0]
      break;
 80047a4:	e007      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80047aa:	601a      	str	r2, [r3, #0]
      break;
 80047ac:	e003      	b.n	80047b6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
 80047b2:	60fb      	str	r3, [r7, #12]
      break;
 80047b4:	bf00      	nop
  }

  return ret;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	41480000 	.word	0x41480000
 80047c4:	41d00000 	.word	0x41d00000
 80047c8:	42500000 	.word	0x42500000
 80047cc:	42d00000 	.word	0x42d00000
 80047d0:	43500000 	.word	0x43500000
 80047d4:	43d00000 	.word	0x43d00000
 80047d8:	44504000 	.word	0x44504000
 80047dc:	44cf8000 	.word	0x44cf8000
 80047e0:	45502000 	.word	0x45502000
 80047e4:	45d02000 	.word	0x45d02000

080047e8 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d106      	bne.n	800480c <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80047fe:	ed97 0a00 	vldr	s0, [r7]
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa26 	bl	8004c54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004808:	4603      	mov	r3, r0
 800480a:	e005      	b.n	8004818 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800480c:	ed97 0a00 	vldr	s0, [r7]
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 faab 	bl	8004d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004816:	4603      	mov	r3, r0
  }
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	331c      	adds	r3, #28
 8004832:	f107 020b 	add.w	r2, r7, #11
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fc91 	bl	8005160 <lsm6dsl_gy_full_scale_get>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295
 8004848:	e030      	b.n	80048ac <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800484a:	7afb      	ldrb	r3, [r7, #11]
 800484c:	2b06      	cmp	r3, #6
 800484e:	d828      	bhi.n	80048a2 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004850:	a201      	add	r2, pc, #4	; (adr r2, 8004858 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004856:	bf00      	nop
 8004858:	0800487d 	.word	0x0800487d
 800485c:	08004875 	.word	0x08004875
 8004860:	08004885 	.word	0x08004885
 8004864:	080048a3 	.word	0x080048a3
 8004868:	0800488f 	.word	0x0800488f
 800486c:	080048a3 	.word	0x080048a3
 8004870:	08004899 	.word	0x08004899
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	227d      	movs	r2, #125	; 0x7d
 8004878:	601a      	str	r2, [r3, #0]
      break;
 800487a:	e016      	b.n	80048aa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	22fa      	movs	r2, #250	; 0xfa
 8004880:	601a      	str	r2, [r3, #0]
      break;
 8004882:	e012      	b.n	80048aa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800488a:	601a      	str	r2, [r3, #0]
      break;
 800488c:	e00d      	b.n	80048aa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004894:	601a      	str	r2, [r3, #0]
      break;
 8004896:	e008      	b.n	80048aa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800489e:	601a      	str	r2, [r3, #0]
      break;
 80048a0:	e003      	b.n	80048aa <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	60fb      	str	r3, [r7, #12]
      break;
 80048a8:	bf00      	nop
  }

  return ret;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b7d      	cmp	r3, #125	; 0x7d
 80048c2:	dd12      	ble.n	80048ea <LSM6DSL_GYRO_SetFullScale+0x36>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2bfa      	cmp	r3, #250	; 0xfa
 80048c8:	dd0d      	ble.n	80048e6 <LSM6DSL_GYRO_SetFullScale+0x32>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048d0:	dd07      	ble.n	80048e2 <LSM6DSL_GYRO_SetFullScale+0x2e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d8:	dc01      	bgt.n	80048de <LSM6DSL_GYRO_SetFullScale+0x2a>
 80048da:	2304      	movs	r3, #4
 80048dc:	e006      	b.n	80048ec <LSM6DSL_GYRO_SetFullScale+0x38>
 80048de:	2306      	movs	r3, #6
 80048e0:	e004      	b.n	80048ec <LSM6DSL_GYRO_SetFullScale+0x38>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e002      	b.n	80048ec <LSM6DSL_GYRO_SetFullScale+0x38>
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <LSM6DSL_GYRO_SetFullScale+0x38>
 80048ea:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80048ec:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	331c      	adds	r3, #28
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fc0c 	bl	8005114 <lsm6dsl_gy_full_scale_set>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	e000      	b.n	800490a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	331c      	adds	r3, #28
 8004920:	f107 0208 	add.w	r2, r7, #8
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fd0a 	bl	8005340 <lsm6dsl_angular_rate_raw_get>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e00c      	b.n	8004952 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004938:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004940:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004948:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	331c      	adds	r3, #28
 8004968:	f107 0210 	add.w	r2, r7, #16
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fce6 	bl	8005340 <lsm6dsl_angular_rate_raw_get>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	e03c      	b.n	80049fa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004980:	f107 030c 	add.w	r3, r7, #12
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fe60 	bl	800464c <LSM6DSL_GYRO_GetSensitivity>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295
 8004996:	e030      	b.n	80049fa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004998:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b0:	ee17 2a90 	vmov	r2, s15
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80049b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80049c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d0:	ee17 2a90 	vmov	r2, s15
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80049d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f0:	ee17 2a90 	vmov	r2, s15
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f103 001c 	add.w	r0, r3, #28
 8004a18:	1cba      	adds	r2, r7, #2
 8004a1a:	78f9      	ldrb	r1, [r7, #3]
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f000 fa75 	bl	8004f0c <lsm6dsl_write_reg>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	e000      	b.n	8004a30 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004a44:	edd7 7a00 	vldr	s15, [r7]
 8004a48:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d801      	bhi.n	8004a5a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e058      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004a5a:	edd7 7a00 	vldr	s15, [r7]
 8004a5e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	d801      	bhi.n	8004a70 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e04d      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004a70:	edd7 7a00 	vldr	s15, [r7]
 8004a74:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004b34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d801      	bhi.n	8004a86 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004a82:	2303      	movs	r3, #3
 8004a84:	e042      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004a86:	edd7 7a00 	vldr	s15, [r7]
 8004a8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004b38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	d801      	bhi.n	8004a9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e037      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004a9c:	edd7 7a00 	vldr	s15, [r7]
 8004aa0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b3c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aac:	d801      	bhi.n	8004ab2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004aae:	2305      	movs	r3, #5
 8004ab0:	e02c      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ab2:	edd7 7a00 	vldr	s15, [r7]
 8004ab6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004b40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	d801      	bhi.n	8004ac8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004ac4:	2306      	movs	r3, #6
 8004ac6:	e021      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ac8:	edd7 7a00 	vldr	s15, [r7]
 8004acc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b44 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad8:	d801      	bhi.n	8004ade <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004ada:	2307      	movs	r3, #7
 8004adc:	e016      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ade:	edd7 7a00 	vldr	s15, [r7]
 8004ae2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004b48 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	d801      	bhi.n	8004af4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004af0:	2308      	movs	r3, #8
 8004af2:	e00b      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004af4:	edd7 7a00 	vldr	s15, [r7]
 8004af8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b4c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	d801      	bhi.n	8004b0a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004b06:	2309      	movs	r3, #9
 8004b08:	e000      	b.n	8004b0c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004b0a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004b0c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	331c      	adds	r3, #28
 8004b12:	7bfa      	ldrb	r2, [r7, #15]
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fa6e 	bl	8004ff8 <lsm6dsl_xl_data_rate_set>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	e000      	b.n	8004b2a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	42500000 	.word	0x42500000
 8004b38:	42d00000 	.word	0x42d00000
 8004b3c:	43500000 	.word	0x43500000
 8004b40:	43d00000 	.word	0x43d00000
 8004b44:	44504000 	.word	0x44504000
 8004b48:	44cf8000 	.word	0x44cf8000
 8004b4c:	45502000 	.word	0x45502000

08004b50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004b5c:	edd7 7a00 	vldr	s15, [r7]
 8004b60:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	d801      	bhi.n	8004b72 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e058      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004b72:	edd7 7a00 	vldr	s15, [r7]
 8004b76:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b82:	d801      	bhi.n	8004b88 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e04d      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004b88:	edd7 7a00 	vldr	s15, [r7]
 8004b8c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004c38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d801      	bhi.n	8004b9e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e042      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004b9e:	edd7 7a00 	vldr	s15, [r7]
 8004ba2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004c3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bae:	d801      	bhi.n	8004bb4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	e037      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004bb4:	edd7 7a00 	vldr	s15, [r7]
 8004bb8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004c40 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	d801      	bhi.n	8004bca <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004bc6:	2305      	movs	r3, #5
 8004bc8:	e02c      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004bca:	edd7 7a00 	vldr	s15, [r7]
 8004bce:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004c44 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	d801      	bhi.n	8004be0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004bdc:	2306      	movs	r3, #6
 8004bde:	e021      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004be0:	edd7 7a00 	vldr	s15, [r7]
 8004be4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004c48 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf0:	d801      	bhi.n	8004bf6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004bf2:	2307      	movs	r3, #7
 8004bf4:	e016      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004bf6:	edd7 7a00 	vldr	s15, [r7]
 8004bfa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004c4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c06:	d801      	bhi.n	8004c0c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	e00b      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c0c:	edd7 7a00 	vldr	s15, [r7]
 8004c10:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004c50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1c:	d801      	bhi.n	8004c22 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004c1e:	2309      	movs	r3, #9
 8004c20:	e000      	b.n	8004c24 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004c22:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	42500000 	.word	0x42500000
 8004c3c:	42d00000 	.word	0x42d00000
 8004c40:	43500000 	.word	0x43500000
 8004c44:	43d00000 	.word	0x43d00000
 8004c48:	44504000 	.word	0x44504000
 8004c4c:	44cf8000 	.word	0x44cf8000
 8004c50:	45502000 	.word	0x45502000

08004c54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004c60:	edd7 7a00 	vldr	s15, [r7]
 8004c64:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	d801      	bhi.n	8004c76 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e058      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c76:	edd7 7a00 	vldr	s15, [r7]
 8004c7a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	d801      	bhi.n	8004c8c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e04d      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004c8c:	edd7 7a00 	vldr	s15, [r7]
 8004c90:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004d50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9c:	d801      	bhi.n	8004ca2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e042      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ca2:	edd7 7a00 	vldr	s15, [r7]
 8004ca6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004d54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	d801      	bhi.n	8004cb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e037      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cb8:	edd7 7a00 	vldr	s15, [r7]
 8004cbc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc8:	d801      	bhi.n	8004cce <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004cca:	2305      	movs	r3, #5
 8004ccc:	e02c      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cce:	edd7 7a00 	vldr	s15, [r7]
 8004cd2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004d5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cde:	d801      	bhi.n	8004ce4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004ce0:	2306      	movs	r3, #6
 8004ce2:	e021      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ce4:	edd7 7a00 	vldr	s15, [r7]
 8004ce8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf4:	d801      	bhi.n	8004cfa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004cf6:	2307      	movs	r3, #7
 8004cf8:	e016      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004cfa:	edd7 7a00 	vldr	s15, [r7]
 8004cfe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004d64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0a:	d801      	bhi.n	8004d10 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004d0c:	2308      	movs	r3, #8
 8004d0e:	e00b      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d10:	edd7 7a00 	vldr	s15, [r7]
 8004d14:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004d68 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d20:	d801      	bhi.n	8004d26 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004d22:	2309      	movs	r3, #9
 8004d24:	e000      	b.n	8004d28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004d26:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004d28:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	331c      	adds	r3, #28
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa56 	bl	80051e4 <lsm6dsl_gy_data_rate_set>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	e000      	b.n	8004d46 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	42500000 	.word	0x42500000
 8004d54:	42d00000 	.word	0x42d00000
 8004d58:	43500000 	.word	0x43500000
 8004d5c:	43d00000 	.word	0x43d00000
 8004d60:	44504000 	.word	0x44504000
 8004d64:	44cf8000 	.word	0x44cf8000
 8004d68:	45502000 	.word	0x45502000

08004d6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004d78:	edd7 7a00 	vldr	s15, [r7]
 8004d7c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d88:	d801      	bhi.n	8004d8e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e058      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004d8e:	edd7 7a00 	vldr	s15, [r7]
 8004d92:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	d801      	bhi.n	8004da4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e04d      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004da4:	edd7 7a00 	vldr	s15, [r7]
 8004da8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004e54 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	d801      	bhi.n	8004dba <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004db6:	2303      	movs	r3, #3
 8004db8:	e042      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dba:	edd7 7a00 	vldr	s15, [r7]
 8004dbe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dca:	d801      	bhi.n	8004dd0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	e037      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dd0:	edd7 7a00 	vldr	s15, [r7]
 8004dd4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e5c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de0:	d801      	bhi.n	8004de6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004de2:	2305      	movs	r3, #5
 8004de4:	e02c      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004de6:	edd7 7a00 	vldr	s15, [r7]
 8004dea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df6:	d801      	bhi.n	8004dfc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004df8:	2306      	movs	r3, #6
 8004dfa:	e021      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004dfc:	edd7 7a00 	vldr	s15, [r7]
 8004e00:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004e64 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0c:	d801      	bhi.n	8004e12 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004e0e:	2307      	movs	r3, #7
 8004e10:	e016      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e12:	edd7 7a00 	vldr	s15, [r7]
 8004e16:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e68 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	d801      	bhi.n	8004e28 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004e24:	2308      	movs	r3, #8
 8004e26:	e00b      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e28:	edd7 7a00 	vldr	s15, [r7]
 8004e2c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004e6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e38:	d801      	bhi.n	8004e3e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004e3a:	2309      	movs	r3, #9
 8004e3c:	e000      	b.n	8004e40 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004e3e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	42500000 	.word	0x42500000
 8004e58:	42d00000 	.word	0x42d00000
 8004e5c:	43500000 	.word	0x43500000
 8004e60:	43d00000 	.word	0x43d00000
 8004e64:	44504000 	.word	0x44504000
 8004e68:	44cf8000 	.word	0x44cf8000
 8004e6c:	45502000 	.word	0x45502000

08004e70 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	72fb      	strb	r3, [r7, #11]
 8004e80:	4613      	mov	r3, r2
 8004e82:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	695c      	ldr	r4, [r3, #20]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	7b1b      	ldrb	r3, [r3, #12]
 8004e90:	b298      	uxth	r0, r3
 8004e92:	7afb      	ldrb	r3, [r7, #11]
 8004e94:	b299      	uxth	r1, r3
 8004e96:	893b      	ldrh	r3, [r7, #8]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	47a0      	blx	r4
 8004e9c:	4603      	mov	r3, r0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}

08004ea6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ea6:	b590      	push	{r4, r7, lr}
 8004ea8:	b087      	sub	sp, #28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	72fb      	strb	r3, [r7, #11]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	691c      	ldr	r4, [r3, #16]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	7b1b      	ldrb	r3, [r3, #12]
 8004ec6:	b298      	uxth	r0, r3
 8004ec8:	7afb      	ldrb	r3, [r7, #11]
 8004eca:	b299      	uxth	r1, r3
 8004ecc:	893b      	ldrh	r3, [r7, #8]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	47a0      	blx	r4
 8004ed2:	4603      	mov	r3, r0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd90      	pop	{r4, r7, pc}

08004edc <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	72fb      	strb	r3, [r7, #11]
 8004eec:	4613      	mov	r3, r2
 8004eee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685c      	ldr	r4, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6898      	ldr	r0, [r3, #8]
 8004ef8:	893b      	ldrh	r3, [r7, #8]
 8004efa:	7af9      	ldrb	r1, [r7, #11]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	47a0      	blx	r4
 8004f00:	6178      	str	r0, [r7, #20]
  return ret;
 8004f02:	697b      	ldr	r3, [r7, #20]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}

08004f0c <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	461a      	mov	r2, r3
 8004f18:	460b      	mov	r3, r1
 8004f1a:	72fb      	strb	r3, [r7, #11]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681c      	ldr	r4, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6898      	ldr	r0, [r3, #8]
 8004f28:	893b      	ldrh	r3, [r7, #8]
 8004f2a:	7af9      	ldrb	r1, [r7, #11]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	47a0      	blx	r4
 8004f30:	6178      	str	r0, [r7, #20]
  return ret;
 8004f32:	697b      	ldr	r3, [r7, #20]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}

08004f3c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004f48:	f107 0208 	add.w	r2, r7, #8
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	2110      	movs	r1, #16
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ffc3 	bl	8004edc <lsm6dsl_read_reg>
 8004f56:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	7a3b      	ldrb	r3, [r7, #8]
 8004f68:	f362 0383 	bfi	r3, r2, #2, #2
 8004f6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004f6e:	f107 0208 	add.w	r2, r7, #8
 8004f72:	2301      	movs	r3, #1
 8004f74:	2110      	movs	r1, #16
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ffc8 	bl	8004f0c <lsm6dsl_write_reg>
 8004f7c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004f92:	f107 0208 	add.w	r2, r7, #8
 8004f96:	2301      	movs	r3, #1
 8004f98:	2110      	movs	r1, #16
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ff9e 	bl	8004edc <lsm6dsl_read_reg>
 8004fa0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004fa2:	7a3b      	ldrb	r3, [r7, #8]
 8004fa4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d81a      	bhi.n	8004fe4 <lsm6dsl_xl_full_scale_get+0x5c>
 8004fae:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	08004fcd 	.word	0x08004fcd
 8004fbc:	08004fd5 	.word	0x08004fd5
 8004fc0:	08004fdd 	.word	0x08004fdd
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	701a      	strb	r2, [r3, #0]
      break;
 8004fca:	e00f      	b.n	8004fec <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
      break;
 8004fd2:	e00b      	b.n	8004fec <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]
      break;
 8004fda:	e007      	b.n	8004fec <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2203      	movs	r2, #3
 8004fe0:	701a      	strb	r2, [r3, #0]
      break;
 8004fe2:	e003      	b.n	8004fec <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	701a      	strb	r2, [r3, #0]
      break;
 8004fea:	bf00      	nop
  }

  return ret;
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop

08004ff8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005004:	f107 0208 	add.w	r2, r7, #8
 8005008:	2301      	movs	r3, #1
 800500a:	2110      	movs	r1, #16
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ff65 	bl	8004edc <lsm6dsl_read_reg>
 8005012:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10f      	bne.n	800503a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	b2da      	uxtb	r2, r3
 8005022:	7a3b      	ldrb	r3, [r7, #8]
 8005024:	f362 1307 	bfi	r3, r2, #4, #4
 8005028:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800502a:	f107 0208 	add.w	r2, r7, #8
 800502e:	2301      	movs	r3, #1
 8005030:	2110      	movs	r1, #16
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff ff6a 	bl	8004f0c <lsm6dsl_write_reg>
 8005038:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800504e:	f107 0208 	add.w	r2, r7, #8
 8005052:	2301      	movs	r3, #1
 8005054:	2110      	movs	r1, #16
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff ff40 	bl	8004edc <lsm6dsl_read_reg>
 800505c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800505e:	7a3b      	ldrb	r3, [r7, #8]
 8005060:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b0b      	cmp	r3, #11
 8005068:	d84a      	bhi.n	8005100 <lsm6dsl_xl_data_rate_get+0xbc>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <lsm6dsl_xl_data_rate_get+0x2c>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	080050a1 	.word	0x080050a1
 8005074:	080050a9 	.word	0x080050a9
 8005078:	080050b1 	.word	0x080050b1
 800507c:	080050b9 	.word	0x080050b9
 8005080:	080050c1 	.word	0x080050c1
 8005084:	080050c9 	.word	0x080050c9
 8005088:	080050d1 	.word	0x080050d1
 800508c:	080050d9 	.word	0x080050d9
 8005090:	080050e1 	.word	0x080050e1
 8005094:	080050e9 	.word	0x080050e9
 8005098:	080050f1 	.word	0x080050f1
 800509c:	080050f9 	.word	0x080050f9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	701a      	strb	r2, [r3, #0]
      break;
 80050a6:	e02f      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
      break;
 80050ae:	e02b      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2202      	movs	r2, #2
 80050b4:	701a      	strb	r2, [r3, #0]
      break;
 80050b6:	e027      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2203      	movs	r2, #3
 80050bc:	701a      	strb	r2, [r3, #0]
      break;
 80050be:	e023      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2204      	movs	r2, #4
 80050c4:	701a      	strb	r2, [r3, #0]
      break;
 80050c6:	e01f      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2205      	movs	r2, #5
 80050cc:	701a      	strb	r2, [r3, #0]
      break;
 80050ce:	e01b      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2206      	movs	r2, #6
 80050d4:	701a      	strb	r2, [r3, #0]
      break;
 80050d6:	e017      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2207      	movs	r2, #7
 80050dc:	701a      	strb	r2, [r3, #0]
      break;
 80050de:	e013      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2208      	movs	r2, #8
 80050e4:	701a      	strb	r2, [r3, #0]
      break;
 80050e6:	e00f      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2209      	movs	r2, #9
 80050ec:	701a      	strb	r2, [r3, #0]
      break;
 80050ee:	e00b      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	220a      	movs	r2, #10
 80050f4:	701a      	strb	r2, [r3, #0]
      break;
 80050f6:	e007      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	220b      	movs	r2, #11
 80050fc:	701a      	strb	r2, [r3, #0]
      break;
 80050fe:	e003      	b.n	8005108 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	220c      	movs	r2, #12
 8005104:	701a      	strb	r2, [r3, #0]
      break;
 8005106:	bf00      	nop
  }

  return ret;
 8005108:	68fb      	ldr	r3, [r7, #12]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop

08005114 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005120:	f107 0208 	add.w	r2, r7, #8
 8005124:	2301      	movs	r3, #1
 8005126:	2111      	movs	r1, #17
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fed7 	bl	8004edc <lsm6dsl_read_reg>
 800512e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10f      	bne.n	8005156 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	b2da      	uxtb	r2, r3
 800513e:	7a3b      	ldrb	r3, [r7, #8]
 8005140:	f362 0343 	bfi	r3, r2, #1, #3
 8005144:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005146:	f107 0208 	add.w	r2, r7, #8
 800514a:	2301      	movs	r3, #1
 800514c:	2111      	movs	r1, #17
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fedc 	bl	8004f0c <lsm6dsl_write_reg>
 8005154:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005156:	68fb      	ldr	r3, [r7, #12]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800516a:	f107 0208 	add.w	r2, r7, #8
 800516e:	2301      	movs	r3, #1
 8005170:	2111      	movs	r1, #17
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff feb2 	bl	8004edc <lsm6dsl_read_reg>
 8005178:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800517a:	7a3b      	ldrb	r3, [r7, #8]
 800517c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b06      	cmp	r3, #6
 8005184:	d824      	bhi.n	80051d0 <lsm6dsl_gy_full_scale_get+0x70>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <lsm6dsl_gy_full_scale_get+0x2c>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051b1 	.word	0x080051b1
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051d1 	.word	0x080051d1
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051d1 	.word	0x080051d1
 80051a4:	080051c9 	.word	0x080051c9
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
      break;
 80051ae:	e013      	b.n	80051d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
      break;
 80051b6:	e00f      	b.n	80051d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2202      	movs	r2, #2
 80051bc:	701a      	strb	r2, [r3, #0]
      break;
 80051be:	e00b      	b.n	80051d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2204      	movs	r2, #4
 80051c4:	701a      	strb	r2, [r3, #0]
      break;
 80051c6:	e007      	b.n	80051d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2206      	movs	r2, #6
 80051cc:	701a      	strb	r2, [r3, #0]
      break;
 80051ce:	e003      	b.n	80051d8 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2207      	movs	r2, #7
 80051d4:	701a      	strb	r2, [r3, #0]
      break;
 80051d6:	bf00      	nop
  }

  return ret;
 80051d8:	68fb      	ldr	r3, [r7, #12]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop

080051e4 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80051f0:	f107 0208 	add.w	r2, r7, #8
 80051f4:	2301      	movs	r3, #1
 80051f6:	2111      	movs	r1, #17
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fe6f 	bl	8004edc <lsm6dsl_read_reg>
 80051fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	b2da      	uxtb	r2, r3
 800520e:	7a3b      	ldrb	r3, [r7, #8]
 8005210:	f362 1307 	bfi	r3, r2, #4, #4
 8005214:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005216:	f107 0208 	add.w	r2, r7, #8
 800521a:	2301      	movs	r3, #1
 800521c:	2111      	movs	r1, #17
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fe74 	bl	8004f0c <lsm6dsl_write_reg>
 8005224:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800523a:	f107 0208 	add.w	r2, r7, #8
 800523e:	2301      	movs	r3, #1
 8005240:	2111      	movs	r1, #17
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fe4a 	bl	8004edc <lsm6dsl_read_reg>
 8005248:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800524a:	7a3b      	ldrb	r3, [r7, #8]
 800524c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b0a      	cmp	r3, #10
 8005254:	d844      	bhi.n	80052e0 <lsm6dsl_gy_data_rate_get+0xb0>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <lsm6dsl_gy_data_rate_get+0x2c>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005289 	.word	0x08005289
 8005260:	08005291 	.word	0x08005291
 8005264:	08005299 	.word	0x08005299
 8005268:	080052a1 	.word	0x080052a1
 800526c:	080052a9 	.word	0x080052a9
 8005270:	080052b1 	.word	0x080052b1
 8005274:	080052b9 	.word	0x080052b9
 8005278:	080052c1 	.word	0x080052c1
 800527c:	080052c9 	.word	0x080052c9
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080052d9 	.word	0x080052d9
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	701a      	strb	r2, [r3, #0]
      break;
 800528e:	e02b      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
      break;
 8005296:	e027      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2202      	movs	r2, #2
 800529c:	701a      	strb	r2, [r3, #0]
      break;
 800529e:	e023      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2203      	movs	r2, #3
 80052a4:	701a      	strb	r2, [r3, #0]
      break;
 80052a6:	e01f      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2204      	movs	r2, #4
 80052ac:	701a      	strb	r2, [r3, #0]
      break;
 80052ae:	e01b      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2205      	movs	r2, #5
 80052b4:	701a      	strb	r2, [r3, #0]
      break;
 80052b6:	e017      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2206      	movs	r2, #6
 80052bc:	701a      	strb	r2, [r3, #0]
      break;
 80052be:	e013      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2207      	movs	r2, #7
 80052c4:	701a      	strb	r2, [r3, #0]
      break;
 80052c6:	e00f      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2208      	movs	r2, #8
 80052cc:	701a      	strb	r2, [r3, #0]
      break;
 80052ce:	e00b      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2209      	movs	r2, #9
 80052d4:	701a      	strb	r2, [r3, #0]
      break;
 80052d6:	e007      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	220a      	movs	r2, #10
 80052dc:	701a      	strb	r2, [r3, #0]
      break;
 80052de:	e003      	b.n	80052e8 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	220b      	movs	r2, #11
 80052e4:	701a      	strb	r2, [r3, #0]
      break;
 80052e6:	bf00      	nop
  }

  return ret;
 80052e8:	68fb      	ldr	r3, [r7, #12]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop

080052f4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005300:	f107 0208 	add.w	r2, r7, #8
 8005304:	2301      	movs	r3, #1
 8005306:	2112      	movs	r1, #18
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff fde7 	bl	8004edc <lsm6dsl_read_reg>
 800530e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10f      	bne.n	8005336 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	b2da      	uxtb	r2, r3
 800531e:	7a3b      	ldrb	r3, [r7, #8]
 8005320:	f362 1386 	bfi	r3, r2, #6, #1
 8005324:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005326:	f107 0208 	add.w	r2, r7, #8
 800532a:	2301      	movs	r3, #1
 800532c:	2112      	movs	r1, #18
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fdec 	bl	8004f0c <lsm6dsl_write_reg>
 8005334:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800534a:	f107 020c 	add.w	r2, r7, #12
 800534e:	2306      	movs	r3, #6
 8005350:	2122      	movs	r1, #34	; 0x22
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fdc2 	bl	8004edc <lsm6dsl_read_reg>
 8005358:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800535a:	7b7b      	ldrb	r3, [r7, #13]
 800535c:	b21a      	sxth	r2, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005368:	b29b      	uxth	r3, r3
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	b29a      	uxth	r2, r3
 800536e:	7b3b      	ldrb	r3, [r7, #12]
 8005370:	b29b      	uxth	r3, r3
 8005372:	4413      	add	r3, r2
 8005374:	b29b      	uxth	r3, r3
 8005376:	b21a      	sxth	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800537c:	7bfa      	ldrb	r2, [r7, #15]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	3302      	adds	r3, #2
 8005382:	b212      	sxth	r2, r2
 8005384:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	3302      	adds	r3, #2
 800538a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800538e:	b29b      	uxth	r3, r3
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	b29a      	uxth	r2, r3
 8005394:	7bbb      	ldrb	r3, [r7, #14]
 8005396:	b29b      	uxth	r3, r3
 8005398:	4413      	add	r3, r2
 800539a:	b29a      	uxth	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	3302      	adds	r3, #2
 80053a0:	b212      	sxth	r2, r2
 80053a2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80053a4:	7c7a      	ldrb	r2, [r7, #17]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3304      	adds	r3, #4
 80053aa:	b212      	sxth	r2, r2
 80053ac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	3304      	adds	r3, #4
 80053b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	7c3b      	ldrb	r3, [r7, #16]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	3304      	adds	r3, #4
 80053c8:	b212      	sxth	r2, r2
 80053ca:	801a      	strh	r2, [r3, #0]
  return ret;
 80053cc:	697b      	ldr	r3, [r7, #20]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80053e0:	f107 020c 	add.w	r2, r7, #12
 80053e4:	2306      	movs	r3, #6
 80053e6:	2128      	movs	r1, #40	; 0x28
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff fd77 	bl	8004edc <lsm6dsl_read_reg>
 80053ee:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80053f0:	7b7b      	ldrb	r3, [r7, #13]
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	b29a      	uxth	r2, r3
 8005404:	7b3b      	ldrb	r3, [r7, #12]
 8005406:	b29b      	uxth	r3, r3
 8005408:	4413      	add	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	b21a      	sxth	r2, r3
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005412:	7bfa      	ldrb	r2, [r7, #15]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	3302      	adds	r3, #2
 8005418:	b212      	sxth	r2, r2
 800541a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	3302      	adds	r3, #2
 8005420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005424:	b29b      	uxth	r3, r3
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	b29a      	uxth	r2, r3
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	b29b      	uxth	r3, r3
 800542e:	4413      	add	r3, r2
 8005430:	b29a      	uxth	r2, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	3302      	adds	r3, #2
 8005436:	b212      	sxth	r2, r2
 8005438:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800543a:	7c7a      	ldrb	r2, [r7, #17]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3304      	adds	r3, #4
 8005440:	b212      	sxth	r2, r2
 8005442:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	3304      	adds	r3, #4
 8005448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800544c:	b29b      	uxth	r3, r3
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	b29a      	uxth	r2, r3
 8005452:	7c3b      	ldrb	r3, [r7, #16]
 8005454:	b29b      	uxth	r3, r3
 8005456:	4413      	add	r3, r2
 8005458:	b29a      	uxth	r2, r3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	3304      	adds	r3, #4
 800545e:	b212      	sxth	r2, r2
 8005460:	801a      	strh	r2, [r3, #0]
  return ret;
 8005462:	697b      	ldr	r3, [r7, #20]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005476:	2301      	movs	r3, #1
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	210f      	movs	r1, #15
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fd2d 	bl	8004edc <lsm6dsl_read_reg>
 8005482:	60f8      	str	r0, [r7, #12]
  return ret;
 8005484:	68fb      	ldr	r3, [r7, #12]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800549a:	f107 0208 	add.w	r2, r7, #8
 800549e:	2301      	movs	r3, #1
 80054a0:	2112      	movs	r1, #18
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fd1a 	bl	8004edc <lsm6dsl_read_reg>
 80054a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10f      	bne.n	80054d0 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	7a3b      	ldrb	r3, [r7, #8]
 80054ba:	f362 0382 	bfi	r3, r2, #2, #1
 80054be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80054c0:	f107 0208 	add.w	r2, r7, #8
 80054c4:	2301      	movs	r3, #1
 80054c6:	2112      	movs	r1, #18
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fd1f 	bl	8004f0c <lsm6dsl_write_reg>
 80054ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054d0:	68fb      	ldr	r3, [r7, #12]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80054e6:	f107 0208 	add.w	r2, r7, #8
 80054ea:	2301      	movs	r3, #1
 80054ec:	210a      	movs	r1, #10
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fcf4 	bl	8004edc <lsm6dsl_read_reg>
 80054f4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	b2da      	uxtb	r2, r3
 8005504:	7a3b      	ldrb	r3, [r7, #8]
 8005506:	f362 0302 	bfi	r3, r2, #0, #3
 800550a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800550c:	f107 0208 	add.w	r2, r7, #8
 8005510:	2301      	movs	r3, #1
 8005512:	210a      	movs	r1, #10
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fcf9 	bl	8004f0c <lsm6dsl_write_reg>
 800551a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005532:	2300      	movs	r3, #0
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8005536:	2301      	movs	r3, #1
 8005538:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <IKS01A2_ENV_SENSOR_Init+0x24>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d032      	beq.n	80055b0 <IKS01A2_ENV_SENSOR_Init+0x88>
 800554a:	e063      	b.n	8005614 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800554c:	6838      	ldr	r0, [r7, #0]
 800554e:	f000 f931 	bl	80057b4 <HTS221_0_Probe>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 8005558:	f04f 33ff 	mov.w	r3, #4294967295
 800555c:	e098      	b.n	8005690 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800555e:	4a4e      	ldr	r2, [pc, #312]	; (8005698 <IKS01A2_ENV_SENSOR_Init+0x170>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	494c      	ldr	r1, [pc, #304]	; (800569c <IKS01A2_ENV_SENSOR_Init+0x174>)
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005570:	f107 0108 	add.w	r1, r7, #8
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800557e:	f06f 0306 	mvn.w	r3, #6
 8005582:	e085      	b.n	8005690 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 8005584:	7a3b      	ldrb	r3, [r7, #8]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d103      	bne.n	8005592 <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8005592:	7abb      	ldrb	r3, [r7, #10]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d103      	bne.n	80055a0 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80055a0:	7a7b      	ldrb	r3, [r7, #9]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d13a      	bne.n	800561c <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f043 0302 	orr.w	r3, r3, #2
 80055ac:	61bb      	str	r3, [r7, #24]
      }
      break;
 80055ae:	e035      	b.n	800561c <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 80055b0:	6838      	ldr	r0, [r7, #0]
 80055b2:	f000 f9b9 	bl	8005928 <LPS22HB_0_Probe>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 80055bc:	f04f 33ff 	mov.w	r3, #4294967295
 80055c0:	e066      	b.n	8005690 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80055c2:	4a35      	ldr	r2, [pc, #212]	; (8005698 <IKS01A2_ENV_SENSOR_Init+0x170>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4933      	ldr	r1, [pc, #204]	; (800569c <IKS01A2_ENV_SENSOR_Init+0x174>)
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055d4:	f107 0108 	add.w	r1, r7, #8
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80055e2:	f06f 0306 	mvn.w	r3, #6
 80055e6:	e053      	b.n	8005690 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 80055e8:	7a3b      	ldrb	r3, [r7, #8]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d103      	bne.n	80055f6 <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80055f6:	7abb      	ldrb	r3, [r7, #10]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d103      	bne.n	8005604 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f043 0304 	orr.w	r3, r3, #4
 8005602:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8005604:	7a7b      	ldrb	r3, [r7, #9]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d10a      	bne.n	8005620 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	61bb      	str	r3, [r7, #24]
      }
      break;
 8005612:	e005      	b.n	8005620 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005614:	f06f 0301 	mvn.w	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800561a:	e002      	b.n	8005622 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800561c:	bf00      	nop
 800561e:	e000      	b.n	8005622 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 8005620:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	e031      	b.n	8005690 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e02a      	b.n	8005688 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	4013      	ands	r3, r2
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	429a      	cmp	r2, r3
 800563c:	d11e      	bne.n	800567c <IKS01A2_ENV_SENSOR_Init+0x154>
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	4013      	ands	r3, r2
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	429a      	cmp	r2, r3
 8005648:	d118      	bne.n	800567c <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <IKS01A2_ENV_SENSOR_Init+0x178>)
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005652:	4814      	ldr	r0, [pc, #80]	; (80056a4 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	440b      	add	r3, r1
 800565e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	490d      	ldr	r1, [pc, #52]	; (800569c <IKS01A2_ENV_SENSOR_Init+0x174>)
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005676:	f06f 0304 	mvn.w	r3, #4
 800567a:	e009      	b.n	8005690 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d9d1      	bls.n	8005632 <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005690:	4618      	mov	r0, r3
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000204 	.word	0x20000204
 800569c:	200004b4 	.word	0x200004b4
 80056a0:	20000134 	.word	0x20000134
 80056a4:	200001ec 	.word	0x200001ec

080056a8 <IKS01A2_ENV_SENSOR_Enable>:
 *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d903      	bls.n	80056c0 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80056b8:	f06f 0301 	mvn.w	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e028      	b.n	8005712 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <IKS01A2_ENV_SENSOR_Enable+0x74>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d11c      	bne.n	800570c <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056da:	4812      	ldr	r0, [pc, #72]	; (8005724 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	4413      	add	r3, r2
 80056e4:	440b      	add	r3, r1
 80056e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	490e      	ldr	r1, [pc, #56]	; (8005728 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056f4:	4610      	mov	r0, r2
 80056f6:	4798      	blx	r3
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80056fe:	f06f 0304 	mvn.w	r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e005      	b.n	8005712 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e002      	b.n	8005712 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800570c:	f06f 0301 	mvn.w	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	2000020c 	.word	0x2000020c
 8005720:	20000134 	.word	0x20000134
 8005724:	200001ec 	.word	0x200001ec
 8005728:	200004b4 	.word	0x200004b4

0800572c <IKS01A2_ENV_SENSOR_GetValue>:
 *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
 * @param  Value pointer to environmental sensor value
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d903      	bls.n	8005746 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800573e:	f06f 0301 	mvn.w	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e029      	b.n	800579a <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8005746:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4013      	ands	r3, r2
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	429a      	cmp	r2, r3
 8005756:	d11d      	bne.n	8005794 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8005758:	4a13      	ldr	r2, [pc, #76]	; (80057a8 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005760:	4812      	ldr	r0, [pc, #72]	; (80057ac <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	440b      	add	r3, r1
 800576c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	490f      	ldr	r1, [pc, #60]	; (80057b0 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4610      	mov	r0, r2
 800577e:	4798      	blx	r3
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005786:	f06f 0304 	mvn.w	r3, #4
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e005      	b.n	800579a <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e002      	b.n	800579a <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005794:	f06f 0301 	mvn.w	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800579a:	697b      	ldr	r3, [r7, #20]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	2000020c 	.word	0x2000020c
 80057a8:	20000134 	.word	0x20000134
 80057ac:	200001ec 	.word	0x200001ec
 80057b0:	200004b4 	.word	0x200004b4

080057b4 <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b090      	sub	sp, #64	; 0x40
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80057c0:	2300      	movs	r3, #0
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80057c4:	23bf      	movs	r3, #191	; 0xbf
 80057c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 80057ca:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <HTS221_0_Probe+0x13c>)
 80057cc:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80057ce:	4b49      	ldr	r3, [pc, #292]	; (80058f4 <HTS221_0_Probe+0x140>)
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80057d2:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <HTS221_0_Probe+0x144>)
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HTS221_0_Probe+0x148>)
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 80057da:	4b49      	ldr	r3, [pc, #292]	; (8005900 <HTS221_0_Probe+0x14c>)
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80057de:	f107 0320 	add.w	r3, r7, #32
 80057e2:	4619      	mov	r1, r3
 80057e4:	4847      	ldr	r0, [pc, #284]	; (8005904 <HTS221_0_Probe+0x150>)
 80057e6:	f7fb fbd7 	bl	8000f98 <HTS221_RegisterBusIO>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057f0:	f06f 0306 	mvn.w	r3, #6
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f6:	e076      	b.n	80058e6 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80057f8:	f107 031f 	add.w	r3, r7, #31
 80057fc:	4619      	mov	r1, r3
 80057fe:	4841      	ldr	r0, [pc, #260]	; (8005904 <HTS221_0_Probe+0x150>)
 8005800:	f7fb fc4f 	bl	80010a2 <HTS221_ReadID>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800580a:	f06f 0306 	mvn.w	r3, #6
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005810:	e069      	b.n	80058e6 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 8005812:	7ffb      	ldrb	r3, [r7, #31]
 8005814:	2bbc      	cmp	r3, #188	; 0xbc
 8005816:	d003      	beq.n	8005820 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005818:	f06f 0306 	mvn.w	r3, #6
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581e:	e062      	b.n	80058e6 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	4619      	mov	r1, r3
 8005826:	4837      	ldr	r0, [pc, #220]	; (8005904 <HTS221_0_Probe+0x150>)
 8005828:	f7fb fc52 	bl	80010d0 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800582c:	7b3b      	ldrb	r3, [r7, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	7b7b      	ldrb	r3, [r7, #13]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800583a:	4313      	orrs	r3, r2
 800583c:	4a32      	ldr	r2, [pc, #200]	; (8005908 <HTS221_0_Probe+0x154>)
 800583e:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 8005840:	4b32      	ldr	r3, [pc, #200]	; (800590c <HTS221_0_Probe+0x158>)
 8005842:	4a30      	ldr	r2, [pc, #192]	; (8005904 <HTS221_0_Probe+0x150>)
 8005844:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8005846:	4b32      	ldr	r3, [pc, #200]	; (8005910 <HTS221_0_Probe+0x15c>)
 8005848:	4a32      	ldr	r2, [pc, #200]	; (8005914 <HTS221_0_Probe+0x160>)
 800584a:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11d      	bne.n	800588e <HTS221_0_Probe+0xda>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d018      	beq.n	800588e <HTS221_0_Probe+0xda>
 800585c:	7b3b      	ldrb	r3, [r7, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d115      	bne.n	800588e <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <HTS221_0_Probe+0x164>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a2d      	ldr	r2, [pc, #180]	; (800591c <HTS221_0_Probe+0x168>)
 8005868:	492d      	ldr	r1, [pc, #180]	; (8005920 <HTS221_0_Probe+0x16c>)
 800586a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800586e:	4b28      	ldr	r3, [pc, #160]	; (8005910 <HTS221_0_Probe+0x15c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <HTS221_0_Probe+0x158>)
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005882:	f06f 0304 	mvn.w	r3, #4
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005888:	e001      	b.n	800588e <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800588a:	2300      	movs	r3, #0
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800588e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11d      	bne.n	80058d0 <HTS221_0_Probe+0x11c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <HTS221_0_Probe+0x11c>
 800589e:	7bbb      	ldrb	r3, [r7, #14]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d115      	bne.n	80058d0 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 80058a4:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <HTS221_0_Probe+0x164>)
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HTS221_0_Probe+0x168>)
 80058aa:	491e      	ldr	r1, [pc, #120]	; (8005924 <HTS221_0_Probe+0x170>)
 80058ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 80058b0:	4b17      	ldr	r3, [pc, #92]	; (8005910 <HTS221_0_Probe+0x15c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a15      	ldr	r2, [pc, #84]	; (800590c <HTS221_0_Probe+0x158>)
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	4610      	mov	r0, r2
 80058bc:	4798      	blx	r3
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058c4:	f06f 0304 	mvn.w	r3, #4
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ca:	e001      	b.n	80058d0 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d107      	bne.n	80058e6 <HTS221_0_Probe+0x132>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058e0:	f06f 0304 	mvn.w	r3, #4
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3740      	adds	r7, #64	; 0x40
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	08000bc5 	.word	0x08000bc5
 80058f4:	08000c41 	.word	0x08000c41
 80058f8:	08000cf5 	.word	0x08000cf5
 80058fc:	08000c91 	.word	0x08000c91
 8005900:	08000d59 	.word	0x08000d59
 8005904:	20000214 	.word	0x20000214
 8005908:	2000020c 	.word	0x2000020c
 800590c:	200004b4 	.word	0x200004b4
 8005910:	20000204 	.word	0x20000204
 8005914:	20000004 	.word	0x20000004
 8005918:	20000134 	.word	0x20000134
 800591c:	200001ec 	.word	0x200001ec
 8005920:	20000028 	.word	0x20000028
 8005924:	20000014 	.word	0x20000014

08005928 <LPS22HB_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b090      	sub	sp, #64	; 0x40
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8005930:	2300      	movs	r3, #0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 8005934:	2300      	movs	r3, #0
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 8005938:	23bb      	movs	r3, #187	; 0xbb
 800593a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  io_ctx.Init        = IKS01A2_I2C_Init;
 800593e:	4b4a      	ldr	r3, [pc, #296]	; (8005a68 <LPS22HB_0_Probe+0x140>)
 8005940:	623b      	str	r3, [r7, #32]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005942:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <LPS22HB_0_Probe+0x144>)
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005946:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <LPS22HB_0_Probe+0x148>)
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800594a:	4b4a      	ldr	r3, [pc, #296]	; (8005a74 <LPS22HB_0_Probe+0x14c>)
 800594c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.GetTick     = IKS01A2_GetTick;
 800594e:	4b4a      	ldr	r3, [pc, #296]	; (8005a78 <LPS22HB_0_Probe+0x150>)
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 8005952:	f107 0320 	add.w	r3, r7, #32
 8005956:	4619      	mov	r1, r3
 8005958:	4848      	ldr	r0, [pc, #288]	; (8005a7c <LPS22HB_0_Probe+0x154>)
 800595a:	f7fc f93b 	bl	8001bd4 <LPS22HB_RegisterBusIO>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005964:	f06f 0306 	mvn.w	r3, #6
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596a:	e078      	b.n	8005a5e <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800596c:	f107 031f 	add.w	r3, r7, #31
 8005970:	4619      	mov	r1, r3
 8005972:	4842      	ldr	r0, [pc, #264]	; (8005a7c <LPS22HB_0_Probe+0x154>)
 8005974:	f7fc f9d3 	bl	8001d1e <LPS22HB_ReadID>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800597e:	f06f 0306 	mvn.w	r3, #6
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005984:	e06b      	b.n	8005a5e <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 8005986:	7ffb      	ldrb	r3, [r7, #31]
 8005988:	2bb1      	cmp	r3, #177	; 0xb1
 800598a:	d003      	beq.n	8005994 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800598c:	f06f 0306 	mvn.w	r3, #6
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005992:	e064      	b.n	8005a5e <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	4619      	mov	r1, r3
 800599a:	4838      	ldr	r0, [pc, #224]	; (8005a7c <LPS22HB_0_Probe+0x154>)
 800599c:	f7fc f9d6 	bl	8001d4c <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80059a0:	7b3b      	ldrb	r3, [r7, #12]
 80059a2:	461a      	mov	r2, r3
 80059a4:	7b7b      	ldrb	r3, [r7, #13]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80059ae:	4313      	orrs	r3, r2
 80059b0:	4a33      	ldr	r2, [pc, #204]	; (8005a80 <LPS22HB_0_Probe+0x158>)
 80059b2:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 80059b4:	4b33      	ldr	r3, [pc, #204]	; (8005a84 <LPS22HB_0_Probe+0x15c>)
 80059b6:	4a31      	ldr	r2, [pc, #196]	; (8005a7c <LPS22HB_0_Probe+0x154>)
 80059b8:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 80059ba:	4b33      	ldr	r3, [pc, #204]	; (8005a88 <LPS22HB_0_Probe+0x160>)
 80059bc:	4a33      	ldr	r2, [pc, #204]	; (8005a8c <LPS22HB_0_Probe+0x164>)
 80059be:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11e      	bne.n	8005a04 <LPS22HB_0_Probe+0xdc>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <LPS22HB_0_Probe+0xdc>
 80059d0:	7b3b      	ldrb	r3, [r7, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d116      	bne.n	8005a04 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <LPS22HB_0_Probe+0x168>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4a2e      	ldr	r2, [pc, #184]	; (8005a94 <LPS22HB_0_Probe+0x16c>)
 80059dc:	3303      	adds	r3, #3
 80059de:	492e      	ldr	r1, [pc, #184]	; (8005a98 <LPS22HB_0_Probe+0x170>)
 80059e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 80059e4:	4b28      	ldr	r3, [pc, #160]	; (8005a88 <LPS22HB_0_Probe+0x160>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <LPS22HB_0_Probe+0x15c>)
 80059ec:	6852      	ldr	r2, [r2, #4]
 80059ee:	4610      	mov	r0, r2
 80059f0:	4798      	blx	r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80059f8:	f06f 0304 	mvn.w	r3, #4
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fe:	e001      	b.n	8005a04 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8005a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11e      	bne.n	8005a48 <LPS22HB_0_Probe+0x120>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d019      	beq.n	8005a48 <LPS22HB_0_Probe+0x120>
 8005a14:	7b7b      	ldrb	r3, [r7, #13]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d116      	bne.n	8005a48 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <LPS22HB_0_Probe+0x168>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <LPS22HB_0_Probe+0x16c>)
 8005a20:	3303      	adds	r3, #3
 8005a22:	491e      	ldr	r1, [pc, #120]	; (8005a9c <LPS22HB_0_Probe+0x174>)
 8005a24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8005a28:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <LPS22HB_0_Probe+0x160>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <LPS22HB_0_Probe+0x15c>)
 8005a30:	6852      	ldr	r2, [r2, #4]
 8005a32:	4610      	mov	r0, r2
 8005a34:	4798      	blx	r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a3c:	f06f 0304 	mvn.w	r3, #4
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a42:	e001      	b.n	8005a48 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8005a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <LPS22HB_0_Probe+0x136>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a58:	f06f 0304 	mvn.w	r3, #4
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3740      	adds	r7, #64	; 0x40
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	08000bc5 	.word	0x08000bc5
 8005a6c:	08000c41 	.word	0x08000c41
 8005a70:	08000cf5 	.word	0x08000cf5
 8005a74:	08000c91 	.word	0x08000c91
 8005a78:	08000d59 	.word	0x08000d59
 8005a7c:	20000240 	.word	0x20000240
 8005a80:	2000020c 	.word	0x2000020c
 8005a84:	200004b4 	.word	0x200004b4
 8005a88:	20000204 	.word	0x20000204
 8005a8c:	2000003c 	.word	0x2000003c
 8005a90:	20000134 	.word	0x20000134
 8005a94:	200001ec 	.word	0x200001ec
 8005a98:	20000060 	.word	0x20000060
 8005a9c:	2000004c 	.word	0x2000004c

08005aa0 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	; 0x38
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d06e      	beq.n	8005b9a <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	f200 809d 	bhi.w	8005bfe <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d032      	beq.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005ad0:	e095      	b.n	8005bfe <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005ad2:	6838      	ldr	r0, [r7, #0]
 8005ad4:	f000 f966 	bl	8005da4 <LSM6DSL_0_Probe>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	e0cc      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005ae4:	4a68      	ldr	r2, [pc, #416]	; (8005c88 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	4967      	ldr	r1, [pc, #412]	; (8005c8c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005af6:	f107 010c 	add.w	r1, r7, #12
 8005afa:	4610      	mov	r0, r2
 8005afc:	4798      	blx	r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b04:	f06f 0306 	mvn.w	r3, #6
 8005b08:	e0b9      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b0a:	7b3b      	ldrb	r3, [r7, #12]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d103      	bne.n	8005b18 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f043 0302 	orr.w	r3, r3, #2
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b18:	7b7b      	ldrb	r3, [r7, #13]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d103      	bne.n	8005b26 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d16c      	bne.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b34:	e067      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	f000 f9f0 	bl	8005f1c <LSM303AGR_ACC_0_Probe>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	e09a      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b48:	4a4f      	ldr	r2, [pc, #316]	; (8005c88 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	494e      	ldr	r1, [pc, #312]	; (8005c8c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b5a:	f107 010c 	add.w	r1, r7, #12
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4798      	blx	r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b68:	f06f 0306 	mvn.w	r3, #6
 8005b6c:	e087      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b6e:	7b3b      	ldrb	r3, [r7, #12]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d103      	bne.n	8005b7c <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	f043 0302 	orr.w	r3, r3, #2
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b7c:	7b7b      	ldrb	r3, [r7, #13]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d103      	bne.n	8005b8a <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d13c      	bne.n	8005c0a <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f043 0304 	orr.w	r3, r3, #4
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b98:	e037      	b.n	8005c0a <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f000 fa62 	bl	8006064 <LSM303AGR_MAG_0_Probe>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	e068      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005bac:	4a36      	ldr	r2, [pc, #216]	; (8005c88 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4935      	ldr	r1, [pc, #212]	; (8005c8c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bbe:	f107 010c 	add.w	r1, r7, #12
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005bcc:	f06f 0306 	mvn.w	r3, #6
 8005bd0:	e055      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005bd2:	7b3b      	ldrb	r3, [r7, #12]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d103      	bne.n	8005be0 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f043 0302 	orr.w	r3, r3, #2
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005be0:	7b7b      	ldrb	r3, [r7, #13]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d103      	bne.n	8005bee <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d10c      	bne.n	8005c0e <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	f043 0304 	orr.w	r3, r3, #4
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005bfc:	e007      	b.n	8005c0e <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005bfe:	f06f 0301 	mvn.w	r3, #1
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005c04:	e004      	b.n	8005c10 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c0e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	e031      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c1e:	e02a      	b.n	8005c76 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	4013      	ands	r3, r2
 8005c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d11e      	bne.n	8005c6a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	4013      	ands	r3, r2
 8005c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d118      	bne.n	8005c6a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c40:	4814      	ldr	r0, [pc, #80]	; (8005c94 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	490e      	ldr	r1, [pc, #56]	; (8005c8c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4798      	blx	r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005c64:	f06f 0304 	mvn.w	r3, #4
 8005c68:	e009      	b.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	3301      	adds	r3, #1
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d9d1      	bls.n	8005c20 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3738      	adds	r7, #56	; 0x38
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000290 	.word	0x20000290
 8005c8c:	200004bc 	.word	0x200004bc
 8005c90:	20000148 	.word	0x20000148
 8005c94:	2000026c 	.word	0x2000026c

08005c98 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d903      	bls.n	8005cb0 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ca8:	f06f 0301 	mvn.w	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e028      	b.n	8005d02 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d11c      	bne.n	8005cfc <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005cca:	4812      	ldr	r0, [pc, #72]	; (8005d14 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	490e      	ldr	r1, [pc, #56]	; (8005d18 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cee:	f06f 0304 	mvn.w	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e005      	b.n	8005d02 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	e002      	b.n	8005d02 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005cfc:	f06f 0301 	mvn.w	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	2000029c 	.word	0x2000029c
 8005d10:	20000148 	.word	0x20000148
 8005d14:	2000026c 	.word	0x2000026c
 8005d18:	200004bc 	.word	0x200004bc

08005d1c <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d903      	bls.n	8005d36 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d2e:	f06f 0301 	mvn.w	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e029      	b.n	8005d8a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d36:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d11d      	bne.n	8005d84 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d50:	4812      	ldr	r0, [pc, #72]	; (8005d9c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	490f      	ldr	r1, [pc, #60]	; (8005da0 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d76:	f06f 0304 	mvn.w	r3, #4
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e005      	b.n	8005d8a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e002      	b.n	8005d8a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d84:	f06f 0301 	mvn.w	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d8a:	697b      	ldr	r3, [r7, #20]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	2000029c 	.word	0x2000029c
 8005d98:	20000148 	.word	0x20000148
 8005d9c:	2000026c 	.word	0x2000026c
 8005da0:	200004bc 	.word	0x200004bc

08005da4 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b092      	sub	sp, #72	; 0x48
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005db0:	2300      	movs	r3, #0
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005db4:	23d7      	movs	r3, #215	; 0xd7
 8005db6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005dba:	4b4a      	ldr	r3, [pc, #296]	; (8005ee4 <LSM6DSL_0_Probe+0x140>)
 8005dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005dbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <LSM6DSL_0_Probe+0x144>)
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005dc2:	4b4a      	ldr	r3, [pc, #296]	; (8005eec <LSM6DSL_0_Probe+0x148>)
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005dc6:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <LSM6DSL_0_Probe+0x14c>)
 8005dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005dca:	4b4a      	ldr	r3, [pc, #296]	; (8005ef4 <LSM6DSL_0_Probe+0x150>)
 8005dcc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4848      	ldr	r0, [pc, #288]	; (8005ef8 <LSM6DSL_0_Probe+0x154>)
 8005dd6:	f7fe f891 	bl	8003efc <LSM6DSL_RegisterBusIO>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005de0:	f06f 0306 	mvn.w	r3, #6
 8005de4:	647b      	str	r3, [r7, #68]	; 0x44
 8005de6:	e077      	b.n	8005ed8 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005de8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005dec:	4619      	mov	r1, r3
 8005dee:	4842      	ldr	r0, [pc, #264]	; (8005ef8 <LSM6DSL_0_Probe+0x154>)
 8005df0:	f7fe f97a 	bl	80040e8 <LSM6DSL_ReadID>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dfa:	f06f 0306 	mvn.w	r3, #6
 8005dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005e00:	e06a      	b.n	8005ed8 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e06:	2b6a      	cmp	r3, #106	; 0x6a
 8005e08:	d003      	beq.n	8005e12 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e0a:	f06f 0306 	mvn.w	r3, #6
 8005e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e10:	e062      	b.n	8005ed8 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4619      	mov	r1, r3
 8005e18:	4837      	ldr	r0, [pc, #220]	; (8005ef8 <LSM6DSL_0_Probe+0x154>)
 8005e1a:	f7fe f97b 	bl	8004114 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005e1e:	7a7b      	ldrb	r3, [r7, #9]
 8005e20:	461a      	mov	r2, r3
 8005e22:	7a3b      	ldrb	r3, [r7, #8]
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	431a      	orrs	r2, r3
 8005e28:	7abb      	ldrb	r3, [r7, #10]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	4a33      	ldr	r2, [pc, #204]	; (8005efc <LSM6DSL_0_Probe+0x158>)
 8005e30:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005e32:	4b33      	ldr	r3, [pc, #204]	; (8005f00 <LSM6DSL_0_Probe+0x15c>)
 8005e34:	4a30      	ldr	r2, [pc, #192]	; (8005ef8 <LSM6DSL_0_Probe+0x154>)
 8005e36:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <LSM6DSL_0_Probe+0x160>)
 8005e3a:	4a33      	ldr	r2, [pc, #204]	; (8005f08 <LSM6DSL_0_Probe+0x164>)
 8005e3c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11d      	bne.n	8005e80 <LSM6DSL_0_Probe+0xdc>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d018      	beq.n	8005e80 <LSM6DSL_0_Probe+0xdc>
 8005e4e:	7a7b      	ldrb	r3, [r7, #9]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d115      	bne.n	8005e80 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005e54:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <LSM6DSL_0_Probe+0x168>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a2d      	ldr	r2, [pc, #180]	; (8005f10 <LSM6DSL_0_Probe+0x16c>)
 8005e5a:	492e      	ldr	r1, [pc, #184]	; (8005f14 <LSM6DSL_0_Probe+0x170>)
 8005e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005e60:	4b28      	ldr	r3, [pc, #160]	; (8005f04 <LSM6DSL_0_Probe+0x160>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a26      	ldr	r2, [pc, #152]	; (8005f00 <LSM6DSL_0_Probe+0x15c>)
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4798      	blx	r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e74:	f06f 0304 	mvn.w	r3, #4
 8005e78:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7a:	e001      	b.n	8005e80 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11d      	bne.n	8005ec2 <LSM6DSL_0_Probe+0x11e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d018      	beq.n	8005ec2 <LSM6DSL_0_Probe+0x11e>
 8005e90:	7a3b      	ldrb	r3, [r7, #8]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d115      	bne.n	8005ec2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <LSM6DSL_0_Probe+0x168>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <LSM6DSL_0_Probe+0x16c>)
 8005e9c:	491e      	ldr	r1, [pc, #120]	; (8005f18 <LSM6DSL_0_Probe+0x174>)
 8005e9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005ea2:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <LSM6DSL_0_Probe+0x160>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <LSM6DSL_0_Probe+0x15c>)
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	4610      	mov	r0, r2
 8005eae:	4798      	blx	r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eb6:	f06f 0304 	mvn.w	r3, #4
 8005eba:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebc:	e001      	b.n	8005ec2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d107      	bne.n	8005ed8 <LSM6DSL_0_Probe+0x134>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ed2:	f06f 0304 	mvn.w	r3, #4
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3748      	adds	r7, #72	; 0x48
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	08000bc5 	.word	0x08000bc5
 8005ee8:	08000c41 	.word	0x08000c41
 8005eec:	08000cf5 	.word	0x08000cf5
 8005ef0:	08000c91 	.word	0x08000c91
 8005ef4:	08000d59 	.word	0x08000d59
 8005ef8:	200002a8 	.word	0x200002a8
 8005efc:	2000029c 	.word	0x2000029c
 8005f00:	200004bc 	.word	0x200004bc
 8005f04:	20000290 	.word	0x20000290
 8005f08:	200000dc 	.word	0x200000dc
 8005f0c:	20000148 	.word	0x20000148
 8005f10:	2000026c 	.word	0x2000026c
 8005f14:	20000110 	.word	0x20000110
 8005f18:	200000ec 	.word	0x200000ec

08005f1c <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b092      	sub	sp, #72	; 0x48
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005f28:	2300      	movs	r3, #0
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005f2c:	2333      	movs	r3, #51	; 0x33
 8005f2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005f32:	4b3f      	ldr	r3, [pc, #252]	; (8006030 <LSM303AGR_ACC_0_Probe+0x114>)
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005f36:	4b3f      	ldr	r3, [pc, #252]	; (8006034 <LSM303AGR_ACC_0_Probe+0x118>)
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	; (800603c <LSM303AGR_ACC_0_Probe+0x120>)
 8005f40:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <LSM303AGR_ACC_0_Probe+0x124>)
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	483d      	ldr	r0, [pc, #244]	; (8006044 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f4e:	f7fc fc1f 	bl	8002790 <LSM303AGR_ACC_RegisterBusIO>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f58:	f06f 0306 	mvn.w	r3, #6
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5e:	e062      	b.n	8006026 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005f60:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f64:	4619      	mov	r1, r3
 8005f66:	4837      	ldr	r0, [pc, #220]	; (8006044 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f68:	f7fc fcd3 	bl	8002912 <LSM303AGR_ACC_ReadID>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f72:	f06f 0306 	mvn.w	r3, #6
 8005f76:	647b      	str	r3, [r7, #68]	; 0x44
 8005f78:	e055      	b.n	8006026 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7e:	2b33      	cmp	r3, #51	; 0x33
 8005f80:	d003      	beq.n	8005f8a <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f82:	f06f 0306 	mvn.w	r3, #6
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	e04d      	b.n	8006026 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	4619      	mov	r1, r3
 8005f90:	482c      	ldr	r0, [pc, #176]	; (8006044 <LSM303AGR_ACC_0_Probe+0x128>)
 8005f92:	f7fc fcd5 	bl	8002940 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f96:	7a7b      	ldrb	r3, [r7, #9]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	7a3b      	ldrb	r3, [r7, #8]
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005fa0:	7abb      	ldrb	r3, [r7, #10]
 8005fa2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a28      	ldr	r2, [pc, #160]	; (8006048 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005fa8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005faa:	4b28      	ldr	r3, [pc, #160]	; (800604c <LSM303AGR_ACC_0_Probe+0x130>)
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <LSM303AGR_ACC_0_Probe+0x128>)
 8005fae:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <LSM303AGR_ACC_0_Probe+0x134>)
 8005fb2:	4a28      	ldr	r2, [pc, #160]	; (8006054 <LSM303AGR_ACC_0_Probe+0x138>)
 8005fb4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11e      	bne.n	8005ffa <LSM303AGR_ACC_0_Probe+0xde>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d019      	beq.n	8005ffa <LSM303AGR_ACC_0_Probe+0xde>
 8005fc6:	7a3b      	ldrb	r3, [r7, #8]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d116      	bne.n	8005ffa <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005fcc:	4b22      	ldr	r3, [pc, #136]	; (8006058 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a22      	ldr	r2, [pc, #136]	; (800605c <LSM303AGR_ACC_0_Probe+0x140>)
 8005fd2:	3303      	adds	r3, #3
 8005fd4:	4922      	ldr	r1, [pc, #136]	; (8006060 <LSM303AGR_ACC_0_Probe+0x144>)
 8005fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005fda:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <LSM303AGR_ACC_0_Probe+0x134>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1a      	ldr	r2, [pc, #104]	; (800604c <LSM303AGR_ACC_0_Probe+0x130>)
 8005fe2:	6852      	ldr	r2, [r2, #4]
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fee:	f06f 0304 	mvn.w	r3, #4
 8005ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff4:	e001      	b.n	8005ffa <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <LSM303AGR_ACC_0_Probe+0xf4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800600a:	f06f 0304 	mvn.w	r3, #4
 800600e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <LSM303AGR_ACC_0_Probe+0x10a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006020:	f06f 0304 	mvn.w	r3, #4
 8006024:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006028:	4618      	mov	r0, r3
 800602a:	3748      	adds	r7, #72	; 0x48
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08000bc5 	.word	0x08000bc5
 8006034:	08000c41 	.word	0x08000c41
 8006038:	08000cf5 	.word	0x08000cf5
 800603c:	08000c91 	.word	0x08000c91
 8006040:	08000d59 	.word	0x08000d59
 8006044:	200002d8 	.word	0x200002d8
 8006048:	2000029c 	.word	0x2000029c
 800604c:	200004bc 	.word	0x200004bc
 8006050:	20000290 	.word	0x20000290
 8006054:	20000074 	.word	0x20000074
 8006058:	20000148 	.word	0x20000148
 800605c:	2000026c 	.word	0x2000026c
 8006060:	20000084 	.word	0x20000084

08006064 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b092      	sub	sp, #72	; 0x48
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800606c:	2300      	movs	r3, #0
 800606e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006070:	2300      	movs	r3, #0
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006074:	233d      	movs	r3, #61	; 0x3d
 8006076:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800607a:	4b3f      	ldr	r3, [pc, #252]	; (8006178 <LSM303AGR_MAG_0_Probe+0x114>)
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800607e:	4b3f      	ldr	r3, [pc, #252]	; (800617c <LSM303AGR_MAG_0_Probe+0x118>)
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8006082:	4b3f      	ldr	r3, [pc, #252]	; (8006180 <LSM303AGR_MAG_0_Probe+0x11c>)
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8006086:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <LSM303AGR_MAG_0_Probe+0x120>)
 8006088:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800608a:	4b3f      	ldr	r3, [pc, #252]	; (8006188 <LSM303AGR_MAG_0_Probe+0x124>)
 800608c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800608e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006092:	4619      	mov	r1, r3
 8006094:	483d      	ldr	r0, [pc, #244]	; (800618c <LSM303AGR_MAG_0_Probe+0x128>)
 8006096:	f7fc ff41 	bl	8002f1c <LSM303AGR_MAG_RegisterBusIO>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060a0:	f06f 0306 	mvn.w	r3, #6
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
 80060a6:	e062      	b.n	800616e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80060a8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80060ac:	4619      	mov	r1, r3
 80060ae:	4837      	ldr	r0, [pc, #220]	; (800618c <LSM303AGR_MAG_0_Probe+0x128>)
 80060b0:	f7fc ffeb 	bl	800308a <LSM303AGR_MAG_ReadID>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060ba:	f06f 0306 	mvn.w	r3, #6
 80060be:	647b      	str	r3, [r7, #68]	; 0x44
 80060c0:	e055      	b.n	800616e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80060c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d003      	beq.n	80060d2 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060ca:	f06f 0306 	mvn.w	r3, #6
 80060ce:	647b      	str	r3, [r7, #68]	; 0x44
 80060d0:	e04d      	b.n	800616e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4619      	mov	r1, r3
 80060d8:	482c      	ldr	r0, [pc, #176]	; (800618c <LSM303AGR_MAG_0_Probe+0x128>)
 80060da:	f7fc ffed 	bl	80030b8 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060de:	7a7b      	ldrb	r3, [r7, #9]
 80060e0:	461a      	mov	r2, r3
 80060e2:	7a3b      	ldrb	r3, [r7, #8]
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80060e8:	7abb      	ldrb	r3, [r7, #10]
 80060ea:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060ec:	4313      	orrs	r3, r2
 80060ee:	4a28      	ldr	r2, [pc, #160]	; (8006190 <LSM303AGR_MAG_0_Probe+0x12c>)
 80060f0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 80060f2:	4b28      	ldr	r3, [pc, #160]	; (8006194 <LSM303AGR_MAG_0_Probe+0x130>)
 80060f4:	4a25      	ldr	r2, [pc, #148]	; (800618c <LSM303AGR_MAG_0_Probe+0x128>)
 80060f6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 80060f8:	4b27      	ldr	r3, [pc, #156]	; (8006198 <LSM303AGR_MAG_0_Probe+0x134>)
 80060fa:	4a28      	ldr	r2, [pc, #160]	; (800619c <LSM303AGR_MAG_0_Probe+0x138>)
 80060fc:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80060fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11e      	bne.n	8006142 <LSM303AGR_MAG_0_Probe+0xde>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d019      	beq.n	8006142 <LSM303AGR_MAG_0_Probe+0xde>
 800610e:	7abb      	ldrb	r3, [r7, #10]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d116      	bne.n	8006142 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006114:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <LSM303AGR_MAG_0_Probe+0x13c>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	4a22      	ldr	r2, [pc, #136]	; (80061a4 <LSM303AGR_MAG_0_Probe+0x140>)
 800611a:	3306      	adds	r3, #6
 800611c:	4922      	ldr	r1, [pc, #136]	; (80061a8 <LSM303AGR_MAG_0_Probe+0x144>)
 800611e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006122:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <LSM303AGR_MAG_0_Probe+0x134>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <LSM303AGR_MAG_0_Probe+0x130>)
 800612a:	6892      	ldr	r2, [r2, #8]
 800612c:	4610      	mov	r0, r2
 800612e:	4798      	blx	r3
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006136:	f06f 0304 	mvn.w	r3, #4
 800613a:	647b      	str	r3, [r7, #68]	; 0x44
 800613c:	e001      	b.n	8006142 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800613e:	2300      	movs	r3, #0
 8006140:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006144:	2b00      	cmp	r3, #0
 8006146:	d107      	bne.n	8006158 <LSM303AGR_MAG_0_Probe+0xf4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006152:	f06f 0304 	mvn.w	r3, #4
 8006156:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615a:	2b00      	cmp	r3, #0
 800615c:	d107      	bne.n	800616e <LSM303AGR_MAG_0_Probe+0x10a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006168:	f06f 0304 	mvn.w	r3, #4
 800616c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800616e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006170:	4618      	mov	r0, r3
 8006172:	3748      	adds	r7, #72	; 0x48
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	08000bc5 	.word	0x08000bc5
 800617c:	08000c41 	.word	0x08000c41
 8006180:	08000cf5 	.word	0x08000cf5
 8006184:	08000c91 	.word	0x08000c91
 8006188:	08000d59 	.word	0x08000d59
 800618c:	20000304 	.word	0x20000304
 8006190:	2000029c 	.word	0x2000029c
 8006194:	200004bc 	.word	0x200004bc
 8006198:	20000290 	.word	0x20000290
 800619c:	200000a8 	.word	0x200000a8
 80061a0:	20000148 	.word	0x20000148
 80061a4:	2000026c 	.word	0x2000026c
 80061a8:	200000b8 	.word	0x200000b8

080061ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061b6:	2003      	movs	r0, #3
 80061b8:	f000 f942 	bl	8006440 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061bc:	2000      	movs	r0, #0
 80061be:	f000 f80d 	bl	80061dc <HAL_InitTick>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	71fb      	strb	r3, [r7, #7]
 80061cc:	e001      	b.n	80061d2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80061ce:	f7fa fc0b 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061d2:	79fb      	ldrb	r3, [r7, #7]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <HAL_InitTick+0x6c>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d023      	beq.n	8006238 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80061f0:	4b16      	ldr	r3, [pc, #88]	; (800624c <HAL_InitTick+0x70>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <HAL_InitTick+0x6c>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	4618      	mov	r0, r3
 8006208:	f000 f941 	bl	800648e <HAL_SYSTICK_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10f      	bne.n	8006232 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d809      	bhi.n	800622c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006218:	2200      	movs	r2, #0
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	f04f 30ff 	mov.w	r0, #4294967295
 8006220:	f000 f919 	bl	8006456 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006224:	4a0a      	ldr	r2, [pc, #40]	; (8006250 <HAL_InitTick+0x74>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e007      	b.n	800623c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e004      	b.n	800623c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]
 8006236:	e001      	b.n	800623c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000160 	.word	0x20000160
 800624c:	20000000 	.word	0x20000000
 8006250:	2000015c 	.word	0x2000015c

08006254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_IncTick+0x20>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_IncTick+0x24>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4413      	add	r3, r2
 8006264:	4a04      	ldr	r2, [pc, #16]	; (8006278 <HAL_IncTick+0x24>)
 8006266:	6013      	str	r3, [r2, #0]
}
 8006268:	bf00      	nop
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000160 	.word	0x20000160
 8006278:	200004c8 	.word	0x200004c8

0800627c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return uwTick;
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <HAL_GetTick+0x14>)
 8006282:	681b      	ldr	r3, [r3, #0]
}
 8006284:	4618      	mov	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	200004c8 	.word	0x200004c8

08006294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800629c:	f7ff ffee 	bl	800627c <HAL_GetTick>
 80062a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d005      	beq.n	80062ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <HAL_Delay+0x44>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062ba:	bf00      	nop
 80062bc:	f7ff ffde 	bl	800627c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d8f7      	bhi.n	80062bc <HAL_Delay+0x28>
  {
  }
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000160 	.word	0x20000160

080062dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <__NVIC_SetPriorityGrouping+0x44>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062f8:	4013      	ands	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800630e:	4a04      	ldr	r2, [pc, #16]	; (8006320 <__NVIC_SetPriorityGrouping+0x44>)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	60d3      	str	r3, [r2, #12]
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	e000ed00 	.word	0xe000ed00

08006324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006328:	4b04      	ldr	r3, [pc, #16]	; (800633c <__NVIC_GetPriorityGrouping+0x18>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	f003 0307 	and.w	r3, r3, #7
}
 8006332:	4618      	mov	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	e000ed00 	.word	0xe000ed00

08006340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	6039      	str	r1, [r7, #0]
 800634a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800634c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006350:	2b00      	cmp	r3, #0
 8006352:	db0a      	blt.n	800636a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	490c      	ldr	r1, [pc, #48]	; (800638c <__NVIC_SetPriority+0x4c>)
 800635a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635e:	0112      	lsls	r2, r2, #4
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	440b      	add	r3, r1
 8006364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006368:	e00a      	b.n	8006380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	b2da      	uxtb	r2, r3
 800636e:	4908      	ldr	r1, [pc, #32]	; (8006390 <__NVIC_SetPriority+0x50>)
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	3b04      	subs	r3, #4
 8006378:	0112      	lsls	r2, r2, #4
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	440b      	add	r3, r1
 800637e:	761a      	strb	r2, [r3, #24]
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	e000e100 	.word	0xe000e100
 8006390:	e000ed00 	.word	0xe000ed00

08006394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006394:	b480      	push	{r7}
 8006396:	b089      	sub	sp, #36	; 0x24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f1c3 0307 	rsb	r3, r3, #7
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	bf28      	it	cs
 80063b2:	2304      	movcs	r3, #4
 80063b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	3304      	adds	r3, #4
 80063ba:	2b06      	cmp	r3, #6
 80063bc:	d902      	bls.n	80063c4 <NVIC_EncodePriority+0x30>
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	3b03      	subs	r3, #3
 80063c2:	e000      	b.n	80063c6 <NVIC_EncodePriority+0x32>
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063c8:	f04f 32ff 	mov.w	r2, #4294967295
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43da      	mvns	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	401a      	ands	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063dc:	f04f 31ff 	mov.w	r1, #4294967295
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	fa01 f303 	lsl.w	r3, r1, r3
 80063e6:	43d9      	mvns	r1, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ec:	4313      	orrs	r3, r2
         );
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3b01      	subs	r3, #1
 8006408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800640c:	d301      	bcc.n	8006412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800640e:	2301      	movs	r3, #1
 8006410:	e00f      	b.n	8006432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006412:	4a0a      	ldr	r2, [pc, #40]	; (800643c <SysTick_Config+0x40>)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3b01      	subs	r3, #1
 8006418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800641a:	210f      	movs	r1, #15
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	f7ff ff8e 	bl	8006340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <SysTick_Config+0x40>)
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800642a:	4b04      	ldr	r3, [pc, #16]	; (800643c <SysTick_Config+0x40>)
 800642c:	2207      	movs	r2, #7
 800642e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	e000e010 	.word	0xe000e010

08006440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ff47 	bl	80062dc <__NVIC_SetPriorityGrouping>
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b086      	sub	sp, #24
 800645a:	af00      	add	r7, sp, #0
 800645c:	4603      	mov	r3, r0
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
 8006462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006468:	f7ff ff5c 	bl	8006324 <__NVIC_GetPriorityGrouping>
 800646c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f7ff ff8e 	bl	8006394 <NVIC_EncodePriority>
 8006478:	4602      	mov	r2, r0
 800647a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800647e:	4611      	mov	r1, r2
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff5d 	bl	8006340 <__NVIC_SetPriority>
}
 8006486:	bf00      	nop
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff ffb0 	bl	80063fc <SysTick_Config>
 800649c:	4603      	mov	r3, r0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064b6:	e17f      	b.n	80067b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	2101      	movs	r1, #1
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8171 	beq.w	80067b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d005      	beq.n	80064e8 <HAL_GPIO_Init+0x40>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d130      	bne.n	800654a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	2203      	movs	r2, #3
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43db      	mvns	r3, r3
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4013      	ands	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800651e:	2201      	movs	r2, #1
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	43db      	mvns	r3, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4013      	ands	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	f003 0201 	and.w	r2, r3, #1
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d118      	bne.n	8006588 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800655c:	2201      	movs	r2, #1
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	43db      	mvns	r3, r3
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4013      	ands	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	08db      	lsrs	r3, r3, #3
 8006572:	f003 0201 	and.w	r2, r3, #1
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	2b03      	cmp	r3, #3
 8006592:	d017      	beq.n	80065c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	2203      	movs	r2, #3
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	43db      	mvns	r3, r3
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4013      	ands	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d123      	bne.n	8006618 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	08da      	lsrs	r2, r3, #3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3208      	adds	r2, #8
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	220f      	movs	r2, #15
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	43db      	mvns	r3, r3
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4013      	ands	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	08da      	lsrs	r2, r3, #3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3208      	adds	r2, #8
 8006612:	6939      	ldr	r1, [r7, #16]
 8006614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	2203      	movs	r2, #3
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4013      	ands	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f003 0203 	and.w	r2, r3, #3
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80ac 	beq.w	80067b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800665a:	4b5f      	ldr	r3, [pc, #380]	; (80067d8 <HAL_GPIO_Init+0x330>)
 800665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665e:	4a5e      	ldr	r2, [pc, #376]	; (80067d8 <HAL_GPIO_Init+0x330>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6613      	str	r3, [r2, #96]	; 0x60
 8006666:	4b5c      	ldr	r3, [pc, #368]	; (80067d8 <HAL_GPIO_Init+0x330>)
 8006668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	60bb      	str	r3, [r7, #8]
 8006670:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006672:	4a5a      	ldr	r2, [pc, #360]	; (80067dc <HAL_GPIO_Init+0x334>)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	3302      	adds	r3, #2
 800667a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	220f      	movs	r2, #15
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43db      	mvns	r3, r3
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4013      	ands	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800669c:	d025      	beq.n	80066ea <HAL_GPIO_Init+0x242>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a4f      	ldr	r2, [pc, #316]	; (80067e0 <HAL_GPIO_Init+0x338>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01f      	beq.n	80066e6 <HAL_GPIO_Init+0x23e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a4e      	ldr	r2, [pc, #312]	; (80067e4 <HAL_GPIO_Init+0x33c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d019      	beq.n	80066e2 <HAL_GPIO_Init+0x23a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a4d      	ldr	r2, [pc, #308]	; (80067e8 <HAL_GPIO_Init+0x340>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <HAL_GPIO_Init+0x236>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a4c      	ldr	r2, [pc, #304]	; (80067ec <HAL_GPIO_Init+0x344>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00d      	beq.n	80066da <HAL_GPIO_Init+0x232>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a4b      	ldr	r2, [pc, #300]	; (80067f0 <HAL_GPIO_Init+0x348>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <HAL_GPIO_Init+0x22e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a4a      	ldr	r2, [pc, #296]	; (80067f4 <HAL_GPIO_Init+0x34c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d101      	bne.n	80066d2 <HAL_GPIO_Init+0x22a>
 80066ce:	2306      	movs	r3, #6
 80066d0:	e00c      	b.n	80066ec <HAL_GPIO_Init+0x244>
 80066d2:	2307      	movs	r3, #7
 80066d4:	e00a      	b.n	80066ec <HAL_GPIO_Init+0x244>
 80066d6:	2305      	movs	r3, #5
 80066d8:	e008      	b.n	80066ec <HAL_GPIO_Init+0x244>
 80066da:	2304      	movs	r3, #4
 80066dc:	e006      	b.n	80066ec <HAL_GPIO_Init+0x244>
 80066de:	2303      	movs	r3, #3
 80066e0:	e004      	b.n	80066ec <HAL_GPIO_Init+0x244>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e002      	b.n	80066ec <HAL_GPIO_Init+0x244>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <HAL_GPIO_Init+0x244>
 80066ea:	2300      	movs	r3, #0
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	f002 0203 	and.w	r2, r2, #3
 80066f2:	0092      	lsls	r2, r2, #2
 80066f4:	4093      	lsls	r3, r2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80066fc:	4937      	ldr	r1, [pc, #220]	; (80067dc <HAL_GPIO_Init+0x334>)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	089b      	lsrs	r3, r3, #2
 8006702:	3302      	adds	r3, #2
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800670a:	4b3b      	ldr	r3, [pc, #236]	; (80067f8 <HAL_GPIO_Init+0x350>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	43db      	mvns	r3, r3
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4013      	ands	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800672e:	4a32      	ldr	r2, [pc, #200]	; (80067f8 <HAL_GPIO_Init+0x350>)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006734:	4b30      	ldr	r3, [pc, #192]	; (80067f8 <HAL_GPIO_Init+0x350>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	43db      	mvns	r3, r3
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4013      	ands	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006758:	4a27      	ldr	r2, [pc, #156]	; (80067f8 <HAL_GPIO_Init+0x350>)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800675e:	4b26      	ldr	r3, [pc, #152]	; (80067f8 <HAL_GPIO_Init+0x350>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	43db      	mvns	r3, r3
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4013      	ands	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006782:	4a1d      	ldr	r2, [pc, #116]	; (80067f8 <HAL_GPIO_Init+0x350>)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006788:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <HAL_GPIO_Init+0x350>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	43db      	mvns	r3, r3
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4013      	ands	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067ac:	4a12      	ldr	r2, [pc, #72]	; (80067f8 <HAL_GPIO_Init+0x350>)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	3301      	adds	r3, #1
 80067b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	fa22 f303 	lsr.w	r3, r2, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f47f ae78 	bne.w	80064b8 <HAL_GPIO_Init+0x10>
  }
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40021000 	.word	0x40021000
 80067dc:	40010000 	.word	0x40010000
 80067e0:	48000400 	.word	0x48000400
 80067e4:	48000800 	.word	0x48000800
 80067e8:	48000c00 	.word	0x48000c00
 80067ec:	48001000 	.word	0x48001000
 80067f0:	48001400 	.word	0x48001400
 80067f4:	48001800 	.word	0x48001800
 80067f8:	40010400 	.word	0x40010400

080067fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800680a:	e0cd      	b.n	80069a8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800680c:	2201      	movs	r2, #1
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	4013      	ands	r3, r2
 8006818:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80c0 	beq.w	80069a2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006822:	4a68      	ldr	r2, [pc, #416]	; (80069c4 <HAL_GPIO_DeInit+0x1c8>)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	089b      	lsrs	r3, r3, #2
 8006828:	3302      	adds	r3, #2
 800682a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	220f      	movs	r2, #15
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4013      	ands	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800684a:	d025      	beq.n	8006898 <HAL_GPIO_DeInit+0x9c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a5e      	ldr	r2, [pc, #376]	; (80069c8 <HAL_GPIO_DeInit+0x1cc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d01f      	beq.n	8006894 <HAL_GPIO_DeInit+0x98>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a5d      	ldr	r2, [pc, #372]	; (80069cc <HAL_GPIO_DeInit+0x1d0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d019      	beq.n	8006890 <HAL_GPIO_DeInit+0x94>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a5c      	ldr	r2, [pc, #368]	; (80069d0 <HAL_GPIO_DeInit+0x1d4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d013      	beq.n	800688c <HAL_GPIO_DeInit+0x90>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a5b      	ldr	r2, [pc, #364]	; (80069d4 <HAL_GPIO_DeInit+0x1d8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00d      	beq.n	8006888 <HAL_GPIO_DeInit+0x8c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a5a      	ldr	r2, [pc, #360]	; (80069d8 <HAL_GPIO_DeInit+0x1dc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <HAL_GPIO_DeInit+0x88>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a59      	ldr	r2, [pc, #356]	; (80069dc <HAL_GPIO_DeInit+0x1e0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d101      	bne.n	8006880 <HAL_GPIO_DeInit+0x84>
 800687c:	2306      	movs	r3, #6
 800687e:	e00c      	b.n	800689a <HAL_GPIO_DeInit+0x9e>
 8006880:	2307      	movs	r3, #7
 8006882:	e00a      	b.n	800689a <HAL_GPIO_DeInit+0x9e>
 8006884:	2305      	movs	r3, #5
 8006886:	e008      	b.n	800689a <HAL_GPIO_DeInit+0x9e>
 8006888:	2304      	movs	r3, #4
 800688a:	e006      	b.n	800689a <HAL_GPIO_DeInit+0x9e>
 800688c:	2303      	movs	r3, #3
 800688e:	e004      	b.n	800689a <HAL_GPIO_DeInit+0x9e>
 8006890:	2302      	movs	r3, #2
 8006892:	e002      	b.n	800689a <HAL_GPIO_DeInit+0x9e>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <HAL_GPIO_DeInit+0x9e>
 8006898:	2300      	movs	r3, #0
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	f002 0203 	and.w	r2, r2, #3
 80068a0:	0092      	lsls	r2, r2, #2
 80068a2:	4093      	lsls	r3, r2
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d132      	bne.n	8006910 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80068aa:	4b4d      	ldr	r3, [pc, #308]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	494b      	ldr	r1, [pc, #300]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80068b8:	4b49      	ldr	r3, [pc, #292]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	43db      	mvns	r3, r3
 80068c0:	4947      	ldr	r1, [pc, #284]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80068c6:	4b46      	ldr	r3, [pc, #280]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	4944      	ldr	r1, [pc, #272]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80068d4:	4b42      	ldr	r3, [pc, #264]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	43db      	mvns	r3, r3
 80068dc:	4940      	ldr	r1, [pc, #256]	; (80069e0 <HAL_GPIO_DeInit+0x1e4>)
 80068de:	4013      	ands	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	220f      	movs	r2, #15
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80068f2:	4a34      	ldr	r2, [pc, #208]	; (80069c4 <HAL_GPIO_DeInit+0x1c8>)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	089b      	lsrs	r3, r3, #2
 80068f8:	3302      	adds	r3, #2
 80068fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	43da      	mvns	r2, r3
 8006902:	4830      	ldr	r0, [pc, #192]	; (80069c4 <HAL_GPIO_DeInit+0x1c8>)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	089b      	lsrs	r3, r3, #2
 8006908:	400a      	ands	r2, r1
 800690a:	3302      	adds	r3, #2
 800690c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	2103      	movs	r1, #3
 800691a:	fa01 f303 	lsl.w	r3, r1, r3
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	08da      	lsrs	r2, r3, #3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3208      	adds	r2, #8
 800692c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	220f      	movs	r2, #15
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	43db      	mvns	r3, r3
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	08d2      	lsrs	r2, r2, #3
 8006944:	4019      	ands	r1, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3208      	adds	r2, #8
 800694a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	2103      	movs	r1, #3
 8006958:	fa01 f303 	lsl.w	r3, r1, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	401a      	ands	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	2101      	movs	r1, #1
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	43db      	mvns	r3, r3
 8006972:	401a      	ands	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	2103      	movs	r1, #3
 8006982:	fa01 f303 	lsl.w	r3, r1, r3
 8006986:	43db      	mvns	r3, r3
 8006988:	401a      	ands	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	2101      	movs	r1, #1
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	fa01 f303 	lsl.w	r3, r1, r3
 800699a:	43db      	mvns	r3, r3
 800699c:	401a      	ands	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	3301      	adds	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f47f af2b 	bne.w	800680c <HAL_GPIO_DeInit+0x10>
  }
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40010000 	.word	0x40010000
 80069c8:	48000400 	.word	0x48000400
 80069cc:	48000800 	.word	0x48000800
 80069d0:	48000c00 	.word	0x48000c00
 80069d4:	48001000 	.word	0x48001000
 80069d8:	48001400 	.word	0x48001400
 80069dc:	48001800 	.word	0x48001800
 80069e0:	40010400 	.word	0x40010400

080069e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
 80069f0:	4613      	mov	r3, r2
 80069f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069f4:	787b      	ldrb	r3, [r7, #1]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069fa:	887a      	ldrh	r2, [r7, #2]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a00:	e002      	b.n	8006a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a02:	887a      	ldrh	r2, [r7, #2]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e081      	b.n	8006b2a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8a8 	bl	8006b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2224      	movs	r2, #36	; 0x24
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0201 	bic.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d107      	bne.n	8006a8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	e006      	b.n	8006a9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006a9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d104      	bne.n	8006aae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ad0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e021      	b.n	8006b88 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2224      	movs	r2, #36	; 0x24
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0201 	bic.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f821 	bl	8006ba4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	817b      	strh	r3, [r7, #10]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	813b      	strh	r3, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	f040 80f9 	bne.w	8006dd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_I2C_Mem_Write+0x34>
 8006be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d105      	bne.n	8006bf8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0ed      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_I2C_Mem_Write+0x4e>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e0e6      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c0e:	f7ff fb35 	bl	800627c <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	2319      	movs	r3, #25
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fadd 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0d1      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2221      	movs	r2, #33	; 0x21
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2240      	movs	r2, #64	; 0x40
 8006c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c58:	88f8      	ldrh	r0, [r7, #6]
 8006c5a:	893a      	ldrh	r2, [r7, #8]
 8006c5c:	8979      	ldrh	r1, [r7, #10]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	4603      	mov	r3, r0
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f9ed 	bl	8007048 <I2C_RequestMemoryWrite>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e0a9      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2bff      	cmp	r3, #255	; 0xff
 8006c88:	d90e      	bls.n	8006ca8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	8979      	ldrh	r1, [r7, #10]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 fc45 	bl	8007530 <I2C_TransferConfig>
 8006ca6:	e00f      	b.n	8006cc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	8979      	ldrh	r1, [r7, #10]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fc34 	bl	8007530 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fac7 	bl	8007260 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e07b      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d034      	beq.n	8006d80 <HAL_I2C_Mem_Write+0x1c8>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d130      	bne.n	8006d80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	2200      	movs	r2, #0
 8006d26:	2180      	movs	r1, #128	; 0x80
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fa59 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e04d      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2bff      	cmp	r3, #255	; 0xff
 8006d40:	d90e      	bls.n	8006d60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	22ff      	movs	r2, #255	; 0xff
 8006d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	8979      	ldrh	r1, [r7, #10]
 8006d50:	2300      	movs	r3, #0
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fbe9 	bl	8007530 <I2C_TransferConfig>
 8006d5e:	e00f      	b.n	8006d80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	8979      	ldrh	r1, [r7, #10]
 8006d72:	2300      	movs	r3, #0
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fbd8 	bl	8007530 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d19e      	bne.n	8006cc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 faa6 	bl	80072e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e01a      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2220      	movs	r2, #32
 8006da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <HAL_I2C_Mem_Write+0x224>)
 8006db2:	400b      	ands	r3, r1
 8006db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e000      	b.n	8006dd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
  }
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	fe00e800 	.word	0xfe00e800

08006de0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	461a      	mov	r2, r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	817b      	strh	r3, [r7, #10]
 8006df2:	460b      	mov	r3, r1
 8006df4:	813b      	strh	r3, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	f040 80fd 	bne.w	8007002 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_I2C_Mem_Read+0x34>
 8006e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0f1      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_I2C_Mem_Read+0x4e>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e0ea      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e36:	f7ff fa21 	bl	800627c <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2319      	movs	r3, #25
 8006e42:	2201      	movs	r2, #1
 8006e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f9c9 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0d5      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2222      	movs	r2, #34	; 0x22
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2240      	movs	r2, #64	; 0x40
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e80:	88f8      	ldrh	r0, [r7, #6]
 8006e82:	893a      	ldrh	r2, [r7, #8]
 8006e84:	8979      	ldrh	r1, [r7, #10]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4603      	mov	r3, r0
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f92d 	bl	80070f0 <I2C_RequestMemoryRead>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0ad      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2bff      	cmp	r3, #255	; 0xff
 8006eb0:	d90e      	bls.n	8006ed0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	22ff      	movs	r2, #255	; 0xff
 8006eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	8979      	ldrh	r1, [r7, #10]
 8006ec0:	4b52      	ldr	r3, [pc, #328]	; (800700c <HAL_I2C_Mem_Read+0x22c>)
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fb31 	bl	8007530 <I2C_TransferConfig>
 8006ece:	e00f      	b.n	8006ef0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	8979      	ldrh	r1, [r7, #10]
 8006ee2:	4b4a      	ldr	r3, [pc, #296]	; (800700c <HAL_I2C_Mem_Read+0x22c>)
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fb20 	bl	8007530 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2104      	movs	r1, #4
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f970 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e07c      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d034      	beq.n	8006fb0 <HAL_I2C_Mem_Read+0x1d0>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d130      	bne.n	8006fb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	2200      	movs	r2, #0
 8006f56:	2180      	movs	r1, #128	; 0x80
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f941 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e04d      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2bff      	cmp	r3, #255	; 0xff
 8006f70:	d90e      	bls.n	8006f90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	8979      	ldrh	r1, [r7, #10]
 8006f80:	2300      	movs	r3, #0
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fad1 	bl	8007530 <I2C_TransferConfig>
 8006f8e:	e00f      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	8979      	ldrh	r1, [r7, #10]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fac0 	bl	8007530 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d19a      	bne.n	8006ef0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f98e 	bl	80072e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e01a      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6859      	ldr	r1, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <HAL_I2C_Mem_Read+0x230>)
 8006fe2:	400b      	ands	r3, r1
 8006fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e000      	b.n	8007004 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	80002400 	.word	0x80002400
 8007010:	fe00e800 	.word	0xfe00e800

08007014 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007022:	b2db      	uxtb	r3, r3
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	4608      	mov	r0, r1
 8007052:	4611      	mov	r1, r2
 8007054:	461a      	mov	r2, r3
 8007056:	4603      	mov	r3, r0
 8007058:	817b      	strh	r3, [r7, #10]
 800705a:	460b      	mov	r3, r1
 800705c:	813b      	strh	r3, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	8979      	ldrh	r1, [r7, #10]
 8007068:	4b20      	ldr	r3, [pc, #128]	; (80070ec <I2C_RequestMemoryWrite+0xa4>)
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fa5d 	bl	8007530 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	69b9      	ldr	r1, [r7, #24]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 f8f0 	bl	8007260 <I2C_WaitOnTXISFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e02c      	b.n	80070e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d105      	bne.n	800709c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007090:	893b      	ldrh	r3, [r7, #8]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
 800709a:	e015      	b.n	80070c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800709c:	893b      	ldrh	r3, [r7, #8]
 800709e:	0a1b      	lsrs	r3, r3, #8
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	69b9      	ldr	r1, [r7, #24]
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f8d6 	bl	8007260 <I2C_WaitOnTXISFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e012      	b.n	80070e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070be:	893b      	ldrh	r3, [r7, #8]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2200      	movs	r2, #0
 80070d0:	2180      	movs	r1, #128	; 0x80
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f884 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	80002000 	.word	0x80002000

080070f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	817b      	strh	r3, [r7, #10]
 8007102:	460b      	mov	r3, r1
 8007104:	813b      	strh	r3, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	b2da      	uxtb	r2, r3
 800710e:	8979      	ldrh	r1, [r7, #10]
 8007110:	4b20      	ldr	r3, [pc, #128]	; (8007194 <I2C_RequestMemoryRead+0xa4>)
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fa0a 	bl	8007530 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	69b9      	ldr	r1, [r7, #24]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f89d 	bl	8007260 <I2C_WaitOnTXISFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e02c      	b.n	800718a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007130:	88fb      	ldrh	r3, [r7, #6]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d105      	bne.n	8007142 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007136:	893b      	ldrh	r3, [r7, #8]
 8007138:	b2da      	uxtb	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	629a      	str	r2, [r3, #40]	; 0x28
 8007140:	e015      	b.n	800716e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007142:	893b      	ldrh	r3, [r7, #8]
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	b29b      	uxth	r3, r3
 8007148:	b2da      	uxtb	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	69b9      	ldr	r1, [r7, #24]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f883 	bl	8007260 <I2C_WaitOnTXISFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e012      	b.n	800718a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007164:	893b      	ldrh	r3, [r7, #8]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2200      	movs	r2, #0
 8007176:	2140      	movs	r1, #64	; 0x40
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f831 	bl	80071e0 <I2C_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	80002000 	.word	0x80002000

08007198 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d103      	bne.n	80071b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d007      	beq.n	80071d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	619a      	str	r2, [r3, #24]
  }
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071f0:	e022      	b.n	8007238 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d01e      	beq.n	8007238 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7ff f83f 	bl	800627c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <I2C_WaitOnFlagUntilTimeout+0x30>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d113      	bne.n	8007238 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	f043 0220 	orr.w	r2, r3, #32
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e00f      	b.n	8007258 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	429a      	cmp	r2, r3
 8007254:	d0cd      	beq.n	80071f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800726c:	e02c      	b.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 f870 	bl	8007358 <I2C_IsErrorOccurred>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e02a      	b.n	80072d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d01e      	beq.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fe fff7 	bl	800627c <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d113      	bne.n	80072c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a4:	f043 0220 	orr.w	r2, r3, #32
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e007      	b.n	80072d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d1cb      	bne.n	800726e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ec:	e028      	b.n	8007340 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f830 	bl	8007358 <I2C_IsErrorOccurred>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e026      	b.n	8007350 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007302:	f7fe ffbb 	bl	800627c <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d113      	bne.n	8007340 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731c:	f043 0220 	orr.w	r2, r3, #32
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e007      	b.n	8007350 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b20      	cmp	r3, #32
 800734c:	d1cf      	bne.n	80072ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	d075      	beq.n	8007470 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2210      	movs	r2, #16
 800738a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800738c:	e056      	b.n	800743c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007394:	d052      	beq.n	800743c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007396:	f7fe ff71 	bl	800627c <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d302      	bcc.n	80073ac <I2C_IsErrorOccurred+0x54>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d147      	bne.n	800743c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ce:	d12e      	bne.n	800742e <I2C_IsErrorOccurred+0xd6>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d6:	d02a      	beq.n	800742e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80073d8:	7cfb      	ldrb	r3, [r7, #19]
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d027      	beq.n	800742e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80073ee:	f7fe ff45 	bl	800627c <HAL_GetTick>
 80073f2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073f4:	e01b      	b.n	800742e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80073f6:	f7fe ff41 	bl	800627c <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b19      	cmp	r3, #25
 8007402:	d914      	bls.n	800742e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007408:	f043 0220 	orr.w	r2, r3, #32
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b20      	cmp	r3, #32
 800743a:	d1dc      	bne.n	80073f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f003 0320 	and.w	r3, r3, #32
 8007446:	2b20      	cmp	r3, #32
 8007448:	d003      	beq.n	8007452 <I2C_IsErrorOccurred+0xfa>
 800744a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800744e:	2b00      	cmp	r3, #0
 8007450:	d09d      	beq.n	800738e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2220      	movs	r2, #32
 8007460:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	f043 0304 	orr.w	r3, r3, #4
 8007468:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00b      	beq.n	80074bc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	f043 0308 	orr.w	r3, r3, #8
 80074aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00b      	beq.n	80074de <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f043 0302 	orr.w	r3, r3, #2
 80074cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80074de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01c      	beq.n	8007520 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fe56 	bl	8007198 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6859      	ldr	r1, [r3, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <I2C_IsErrorOccurred+0x1d4>)
 80074f8:	400b      	ands	r3, r1
 80074fa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	431a      	orrs	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007524:	4618      	mov	r0, r3
 8007526:	3728      	adds	r7, #40	; 0x28
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	fe00e800 	.word	0xfe00e800

08007530 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	607b      	str	r3, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	817b      	strh	r3, [r7, #10]
 800753e:	4613      	mov	r3, r2
 8007540:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007542:	897b      	ldrh	r3, [r7, #10]
 8007544:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007548:	7a7b      	ldrb	r3, [r7, #9]
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007550:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	4313      	orrs	r3, r2
 800755a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800755e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	0d5b      	lsrs	r3, r3, #21
 800756a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <I2C_TransferConfig+0x60>)
 8007570:	430b      	orrs	r3, r1
 8007572:	43db      	mvns	r3, r3
 8007574:	ea02 0103 	and.w	r1, r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	03ff63ff 	.word	0x03ff63ff

08007594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d138      	bne.n	800761c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e032      	b.n	800761e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2224      	movs	r2, #36	; 0x24
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6819      	ldr	r1, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b20      	cmp	r3, #32
 800763e:	d139      	bne.n	80076b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800764a:	2302      	movs	r3, #2
 800764c:	e033      	b.n	80076b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2224      	movs	r2, #36	; 0x24
 800765a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800767c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	e000      	b.n	80076b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076b4:	2302      	movs	r3, #2
  }
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80076c8:	4b04      	ldr	r3, [pc, #16]	; (80076dc <HAL_PWREx_GetVoltageRange+0x18>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40007000 	.word	0x40007000

080076e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ee:	d130      	bne.n	8007752 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80076f0:	4b23      	ldr	r3, [pc, #140]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d038      	beq.n	8007770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80076fe:	4b20      	ldr	r3, [pc, #128]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007706:	4a1e      	ldr	r2, [pc, #120]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800770c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800770e:	4b1d      	ldr	r3, [pc, #116]	; (8007784 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2232      	movs	r2, #50	; 0x32
 8007714:	fb02 f303 	mul.w	r3, r2, r3
 8007718:	4a1b      	ldr	r2, [pc, #108]	; (8007788 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	0c9b      	lsrs	r3, r3, #18
 8007720:	3301      	adds	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007724:	e002      	b.n	800772c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b01      	subs	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800772c:	4b14      	ldr	r3, [pc, #80]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007738:	d102      	bne.n	8007740 <HAL_PWREx_ControlVoltageScaling+0x60>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f2      	bne.n	8007726 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774c:	d110      	bne.n	8007770 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e00f      	b.n	8007772 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800775a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775e:	d007      	beq.n	8007770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007768:	4a05      	ldr	r2, [pc, #20]	; (8007780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800776a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800776e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40007000 	.word	0x40007000
 8007784:	20000000 	.word	0x20000000
 8007788:	431bde83 	.word	0x431bde83

0800778c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e3d4      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800779e:	4ba1      	ldr	r3, [pc, #644]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 030c 	and.w	r3, r3, #12
 80077a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077a8:	4b9e      	ldr	r3, [pc, #632]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 80e4 	beq.w	8007988 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d007      	beq.n	80077d6 <HAL_RCC_OscConfig+0x4a>
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	2b0c      	cmp	r3, #12
 80077ca:	f040 808b 	bne.w	80078e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	f040 8087 	bne.w	80078e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80077d6:	4b93      	ldr	r3, [pc, #588]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_RCC_OscConfig+0x62>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e3ac      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1a      	ldr	r2, [r3, #32]
 80077f2:	4b8c      	ldr	r3, [pc, #560]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_RCC_OscConfig+0x7c>
 80077fe:	4b89      	ldr	r3, [pc, #548]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007806:	e005      	b.n	8007814 <HAL_RCC_OscConfig+0x88>
 8007808:	4b86      	ldr	r3, [pc, #536]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800780a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800780e:	091b      	lsrs	r3, r3, #4
 8007810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007814:	4293      	cmp	r3, r2
 8007816:	d223      	bcs.n	8007860 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fd41 	bl	80082a4 <RCC_SetFlashLatencyFromMSIRange>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e38d      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800782c:	4b7d      	ldr	r3, [pc, #500]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a7c      	ldr	r2, [pc, #496]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007832:	f043 0308 	orr.w	r3, r3, #8
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	4b7a      	ldr	r3, [pc, #488]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	4977      	ldr	r1, [pc, #476]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800784a:	4b76      	ldr	r3, [pc, #472]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	4972      	ldr	r1, [pc, #456]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800785a:	4313      	orrs	r3, r2
 800785c:	604b      	str	r3, [r1, #4]
 800785e:	e025      	b.n	80078ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007860:	4b70      	ldr	r3, [pc, #448]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a6f      	ldr	r2, [pc, #444]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007866:	f043 0308 	orr.w	r3, r3, #8
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	4b6d      	ldr	r3, [pc, #436]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	496a      	ldr	r1, [pc, #424]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800787a:	4313      	orrs	r3, r2
 800787c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800787e:	4b69      	ldr	r3, [pc, #420]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	4965      	ldr	r1, [pc, #404]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800788e:	4313      	orrs	r3, r2
 8007890:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d109      	bne.n	80078ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fd01 	bl	80082a4 <RCC_SetFlashLatencyFromMSIRange>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e34d      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078ac:	f000 fc36 	bl	800811c <HAL_RCC_GetSysClockFreq>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b5c      	ldr	r3, [pc, #368]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	091b      	lsrs	r3, r3, #4
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	495a      	ldr	r1, [pc, #360]	; (8007a28 <HAL_RCC_OscConfig+0x29c>)
 80078be:	5ccb      	ldrb	r3, [r1, r3]
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	fa22 f303 	lsr.w	r3, r2, r3
 80078c8:	4a58      	ldr	r2, [pc, #352]	; (8007a2c <HAL_RCC_OscConfig+0x2a0>)
 80078ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80078cc:	4b58      	ldr	r3, [pc, #352]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fc83 	bl	80061dc <HAL_InitTick>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d052      	beq.n	8007986 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	e331      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d032      	beq.n	8007952 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80078ec:	4b4d      	ldr	r3, [pc, #308]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a4c      	ldr	r2, [pc, #304]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80078f2:	f043 0301 	orr.w	r3, r3, #1
 80078f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078f8:	f7fe fcc0 	bl	800627c <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007900:	f7fe fcbc 	bl	800627c <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e31a      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007912:	4b44      	ldr	r3, [pc, #272]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800791e:	4b41      	ldr	r3, [pc, #260]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a40      	ldr	r2, [pc, #256]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007924:	f043 0308 	orr.w	r3, r3, #8
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	4b3e      	ldr	r3, [pc, #248]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	493b      	ldr	r1, [pc, #236]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007938:	4313      	orrs	r3, r2
 800793a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800793c:	4b39      	ldr	r3, [pc, #228]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	4936      	ldr	r1, [pc, #216]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800794c:	4313      	orrs	r3, r2
 800794e:	604b      	str	r3, [r1, #4]
 8007950:	e01a      	b.n	8007988 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007952:	4b34      	ldr	r3, [pc, #208]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a33      	ldr	r2, [pc, #204]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800795e:	f7fe fc8d 	bl	800627c <HAL_GetTick>
 8007962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007964:	e008      	b.n	8007978 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007966:	f7fe fc89 	bl	800627c <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e2e7      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007978:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f0      	bne.n	8007966 <HAL_RCC_OscConfig+0x1da>
 8007984:	e000      	b.n	8007988 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007986:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d074      	beq.n	8007a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b08      	cmp	r3, #8
 8007998:	d005      	beq.n	80079a6 <HAL_RCC_OscConfig+0x21a>
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b0c      	cmp	r3, #12
 800799e:	d10e      	bne.n	80079be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d10b      	bne.n	80079be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079a6:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d064      	beq.n	8007a7c <HAL_RCC_OscConfig+0x2f0>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d160      	bne.n	8007a7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e2c4      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c6:	d106      	bne.n	80079d6 <HAL_RCC_OscConfig+0x24a>
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a15      	ldr	r2, [pc, #84]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e01d      	b.n	8007a12 <HAL_RCC_OscConfig+0x286>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079de:	d10c      	bne.n	80079fa <HAL_RCC_OscConfig+0x26e>
 80079e0:	4b10      	ldr	r3, [pc, #64]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a0f      	ldr	r2, [pc, #60]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	e00b      	b.n	8007a12 <HAL_RCC_OscConfig+0x286>
 80079fa:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a06      	ldr	r2, [pc, #24]	; (8007a24 <HAL_RCC_OscConfig+0x298>)
 8007a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01c      	beq.n	8007a54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1a:	f7fe fc2f 	bl	800627c <HAL_GetTick>
 8007a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a20:	e011      	b.n	8007a46 <HAL_RCC_OscConfig+0x2ba>
 8007a22:	bf00      	nop
 8007a24:	40021000 	.word	0x40021000
 8007a28:	0800a078 	.word	0x0800a078
 8007a2c:	20000000 	.word	0x20000000
 8007a30:	2000015c 	.word	0x2000015c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a34:	f7fe fc22 	bl	800627c <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b64      	cmp	r3, #100	; 0x64
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e280      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a46:	4baf      	ldr	r3, [pc, #700]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0f0      	beq.n	8007a34 <HAL_RCC_OscConfig+0x2a8>
 8007a52:	e014      	b.n	8007a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fe fc12 	bl	800627c <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a5c:	f7fe fc0e 	bl	800627c <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b64      	cmp	r3, #100	; 0x64
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e26c      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a6e:	4ba5      	ldr	r3, [pc, #660]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f0      	bne.n	8007a5c <HAL_RCC_OscConfig+0x2d0>
 8007a7a:	e000      	b.n	8007a7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d060      	beq.n	8007b4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d005      	beq.n	8007a9c <HAL_RCC_OscConfig+0x310>
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b0c      	cmp	r3, #12
 8007a94:	d119      	bne.n	8007aca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d116      	bne.n	8007aca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a9c:	4b99      	ldr	r3, [pc, #612]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x328>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e249      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab4:	4b93      	ldr	r3, [pc, #588]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	061b      	lsls	r3, r3, #24
 8007ac2:	4990      	ldr	r1, [pc, #576]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ac8:	e040      	b.n	8007b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d023      	beq.n	8007b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ad2:	4b8c      	ldr	r3, [pc, #560]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a8b      	ldr	r2, [pc, #556]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ade:	f7fe fbcd 	bl	800627c <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae6:	f7fe fbc9 	bl	800627c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e227      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007af8:	4b82      	ldr	r3, [pc, #520]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b04:	4b7f      	ldr	r3, [pc, #508]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	061b      	lsls	r3, r3, #24
 8007b12:	497c      	ldr	r1, [pc, #496]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	604b      	str	r3, [r1, #4]
 8007b18:	e018      	b.n	8007b4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b1a:	4b7a      	ldr	r3, [pc, #488]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a79      	ldr	r2, [pc, #484]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b26:	f7fe fba9 	bl	800627c <HAL_GetTick>
 8007b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b2e:	f7fe fba5 	bl	800627c <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e203      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b40:	4b70      	ldr	r3, [pc, #448]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f0      	bne.n	8007b2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d03c      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01c      	beq.n	8007b9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b60:	4b68      	ldr	r3, [pc, #416]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b66:	4a67      	ldr	r2, [pc, #412]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b68:	f043 0301 	orr.w	r3, r3, #1
 8007b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b70:	f7fe fb84 	bl	800627c <HAL_GetTick>
 8007b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b78:	f7fe fb80 	bl	800627c <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e1de      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b8a:	4b5e      	ldr	r3, [pc, #376]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0ef      	beq.n	8007b78 <HAL_RCC_OscConfig+0x3ec>
 8007b98:	e01b      	b.n	8007bd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b9a:	4b5a      	ldr	r3, [pc, #360]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba0:	4a58      	ldr	r2, [pc, #352]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007baa:	f7fe fb67 	bl	800627c <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb2:	f7fe fb63 	bl	800627c <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e1c1      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bc4:	4b4f      	ldr	r3, [pc, #316]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1ef      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80a6 	beq.w	8007d2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007be0:	2300      	movs	r3, #0
 8007be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007be4:	4b47      	ldr	r3, [pc, #284]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10d      	bne.n	8007c0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bf0:	4b44      	ldr	r3, [pc, #272]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf4:	4a43      	ldr	r2, [pc, #268]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8007bfc:	4b41      	ldr	r3, [pc, #260]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c04:	60bb      	str	r3, [r7, #8]
 8007c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c0c:	4b3e      	ldr	r3, [pc, #248]	; (8007d08 <HAL_RCC_OscConfig+0x57c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d118      	bne.n	8007c4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c18:	4b3b      	ldr	r3, [pc, #236]	; (8007d08 <HAL_RCC_OscConfig+0x57c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a3a      	ldr	r2, [pc, #232]	; (8007d08 <HAL_RCC_OscConfig+0x57c>)
 8007c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c24:	f7fe fb2a 	bl	800627c <HAL_GetTick>
 8007c28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c2c:	f7fe fb26 	bl	800627c <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e184      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c3e:	4b32      	ldr	r3, [pc, #200]	; (8007d08 <HAL_RCC_OscConfig+0x57c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0f0      	beq.n	8007c2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d108      	bne.n	8007c64 <HAL_RCC_OscConfig+0x4d8>
 8007c52:	4b2c      	ldr	r3, [pc, #176]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	4a2a      	ldr	r2, [pc, #168]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c62:	e024      	b.n	8007cae <HAL_RCC_OscConfig+0x522>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d110      	bne.n	8007c8e <HAL_RCC_OscConfig+0x502>
 8007c6c:	4b25      	ldr	r3, [pc, #148]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c72:	4a24      	ldr	r2, [pc, #144]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c74:	f043 0304 	orr.w	r3, r3, #4
 8007c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c7c:	4b21      	ldr	r3, [pc, #132]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	4a20      	ldr	r2, [pc, #128]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c84:	f043 0301 	orr.w	r3, r3, #1
 8007c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c8c:	e00f      	b.n	8007cae <HAL_RCC_OscConfig+0x522>
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c94:	4a1b      	ldr	r2, [pc, #108]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c9e:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	4a17      	ldr	r2, [pc, #92]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007ca6:	f023 0304 	bic.w	r3, r3, #4
 8007caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d016      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb6:	f7fe fae1 	bl	800627c <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cbe:	f7fe fadd 	bl	800627c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e139      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <HAL_RCC_OscConfig+0x578>)
 8007cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0ed      	beq.n	8007cbe <HAL_RCC_OscConfig+0x532>
 8007ce2:	e01a      	b.n	8007d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce4:	f7fe faca 	bl	800627c <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cea:	e00f      	b.n	8007d0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cec:	f7fe fac6 	bl	800627c <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d906      	bls.n	8007d0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e122      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
 8007d02:	bf00      	nop
 8007d04:	40021000 	.word	0x40021000
 8007d08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d0c:	4b90      	ldr	r3, [pc, #576]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e8      	bne.n	8007cec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d1a:	7ffb      	ldrb	r3, [r7, #31]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d105      	bne.n	8007d2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d20:	4b8b      	ldr	r3, [pc, #556]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d24:	4a8a      	ldr	r2, [pc, #552]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 8108 	beq.w	8007f46 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	f040 80d0 	bne.w	8007ee0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007d40:	4b83      	ldr	r3, [pc, #524]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 0203 	and.w	r2, r3, #3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d130      	bne.n	8007db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d127      	bne.n	8007db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d11f      	bne.n	8007db6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d80:	2a07      	cmp	r2, #7
 8007d82:	bf14      	ite	ne
 8007d84:	2201      	movne	r2, #1
 8007d86:	2200      	moveq	r2, #0
 8007d88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d113      	bne.n	8007db6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d98:	085b      	lsrs	r3, r3, #1
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d109      	bne.n	8007db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	3b01      	subs	r3, #1
 8007db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d06e      	beq.n	8007e94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b0c      	cmp	r3, #12
 8007dba:	d069      	beq.n	8007e90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007dbc:	4b64      	ldr	r3, [pc, #400]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d105      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007dc8:	4b61      	ldr	r3, [pc, #388]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0b7      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007dd8:	4b5d      	ldr	r3, [pc, #372]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5c      	ldr	r2, [pc, #368]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007de2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007de4:	f7fe fa4a 	bl	800627c <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dec:	f7fe fa46 	bl	800627c <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e0a4      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dfe:	4b54      	ldr	r3, [pc, #336]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e0a:	4b51      	ldr	r3, [pc, #324]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	4b51      	ldr	r3, [pc, #324]	; (8007f54 <HAL_RCC_OscConfig+0x7c8>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e1a:	3a01      	subs	r2, #1
 8007e1c:	0112      	lsls	r2, r2, #4
 8007e1e:	4311      	orrs	r1, r2
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e24:	0212      	lsls	r2, r2, #8
 8007e26:	4311      	orrs	r1, r2
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e2c:	0852      	lsrs	r2, r2, #1
 8007e2e:	3a01      	subs	r2, #1
 8007e30:	0552      	lsls	r2, r2, #21
 8007e32:	4311      	orrs	r1, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e38:	0852      	lsrs	r2, r2, #1
 8007e3a:	3a01      	subs	r2, #1
 8007e3c:	0652      	lsls	r2, r2, #25
 8007e3e:	4311      	orrs	r1, r2
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e44:	0912      	lsrs	r2, r2, #4
 8007e46:	0452      	lsls	r2, r2, #17
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	4941      	ldr	r1, [pc, #260]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007e50:	4b3f      	ldr	r3, [pc, #252]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a3e      	ldr	r2, [pc, #248]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e5c:	4b3c      	ldr	r3, [pc, #240]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	4a3b      	ldr	r2, [pc, #236]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e68:	f7fe fa08 	bl	800627c <HAL_GetTick>
 8007e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e70:	f7fe fa04 	bl	800627c <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e062      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e82:	4b33      	ldr	r3, [pc, #204]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0f0      	beq.n	8007e70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e8e:	e05a      	b.n	8007f46 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e059      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e94:	4b2e      	ldr	r3, [pc, #184]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d152      	bne.n	8007f46 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ea0:	4b2b      	ldr	r3, [pc, #172]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007eac:	4b28      	ldr	r3, [pc, #160]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	4a27      	ldr	r2, [pc, #156]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007eb8:	f7fe f9e0 	bl	800627c <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec0:	f7fe f9dc 	bl	800627c <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e03a      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ed2:	4b1f      	ldr	r3, [pc, #124]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x734>
 8007ede:	e032      	b.n	8007f46 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b0c      	cmp	r3, #12
 8007ee4:	d02d      	beq.n	8007f42 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a19      	ldr	r2, [pc, #100]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ef0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007ef2:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007efe:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007f04:	f023 0303 	bic.w	r3, r3, #3
 8007f08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	4a10      	ldr	r2, [pc, #64]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007f10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1a:	f7fe f9af 	bl	800627c <HAL_GetTick>
 8007f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f20:	e008      	b.n	8007f34 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f22:	f7fe f9ab 	bl	800627c <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d901      	bls.n	8007f34 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e009      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f34:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <HAL_RCC_OscConfig+0x7c4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1f0      	bne.n	8007f22 <HAL_RCC_OscConfig+0x796>
 8007f40:	e001      	b.n	8007f46 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	40021000 	.word	0x40021000
 8007f54:	f99d808c 	.word	0xf99d808c

08007f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e0c8      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f6c:	4b66      	ldr	r3, [pc, #408]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d910      	bls.n	8007f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f7a:	4b63      	ldr	r3, [pc, #396]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f023 0207 	bic.w	r2, r3, #7
 8007f82:	4961      	ldr	r1, [pc, #388]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f8a:	4b5f      	ldr	r3, [pc, #380]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d001      	beq.n	8007f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0b0      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d04c      	beq.n	8008042 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fb0:	4b56      	ldr	r3, [pc, #344]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d121      	bne.n	8008000 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e09e      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d107      	bne.n	8007fd8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fc8:	4b50      	ldr	r3, [pc, #320]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d115      	bne.n	8008000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e092      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fe0:	4b4a      	ldr	r3, [pc, #296]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d109      	bne.n	8008000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e086      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ff0:	4b46      	ldr	r3, [pc, #280]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e07e      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008000:	4b42      	ldr	r3, [pc, #264]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f023 0203 	bic.w	r2, r3, #3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	493f      	ldr	r1, [pc, #252]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 800800e:	4313      	orrs	r3, r2
 8008010:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008012:	f7fe f933 	bl	800627c <HAL_GetTick>
 8008016:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008018:	e00a      	b.n	8008030 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800801a:	f7fe f92f 	bl	800627c <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	f241 3288 	movw	r2, #5000	; 0x1388
 8008028:	4293      	cmp	r3, r2
 800802a:	d901      	bls.n	8008030 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e066      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008030:	4b36      	ldr	r3, [pc, #216]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 020c 	and.w	r2, r3, #12
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	429a      	cmp	r2, r3
 8008040:	d1eb      	bne.n	800801a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800804e:	4b2f      	ldr	r3, [pc, #188]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	492c      	ldr	r1, [pc, #176]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 800805c:	4313      	orrs	r3, r2
 800805e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008060:	4b29      	ldr	r3, [pc, #164]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d210      	bcs.n	8008090 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806e:	4b26      	ldr	r3, [pc, #152]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f023 0207 	bic.w	r2, r3, #7
 8008076:	4924      	ldr	r1, [pc, #144]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800807e:	4b22      	ldr	r3, [pc, #136]	; (8008108 <HAL_RCC_ClockConfig+0x1b0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d001      	beq.n	8008090 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e036      	b.n	80080fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	4918      	ldr	r1, [pc, #96]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080ba:	4b14      	ldr	r3, [pc, #80]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	4910      	ldr	r1, [pc, #64]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80080ce:	f000 f825 	bl	800811c <HAL_RCC_GetSysClockFreq>
 80080d2:	4602      	mov	r2, r0
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <HAL_RCC_ClockConfig+0x1b4>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	091b      	lsrs	r3, r3, #4
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	490c      	ldr	r1, [pc, #48]	; (8008110 <HAL_RCC_ClockConfig+0x1b8>)
 80080e0:	5ccb      	ldrb	r3, [r1, r3]
 80080e2:	f003 031f 	and.w	r3, r3, #31
 80080e6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ea:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <HAL_RCC_ClockConfig+0x1bc>)
 80080ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80080ee:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <HAL_RCC_ClockConfig+0x1c0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe f872 	bl	80061dc <HAL_InitTick>
 80080f8:	4603      	mov	r3, r0
 80080fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	40022000 	.word	0x40022000
 800810c:	40021000 	.word	0x40021000
 8008110:	0800a078 	.word	0x0800a078
 8008114:	20000000 	.word	0x20000000
 8008118:	2000015c 	.word	0x2000015c

0800811c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800811c:	b480      	push	{r7}
 800811e:	b089      	sub	sp, #36	; 0x24
 8008120:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	2300      	movs	r3, #0
 8008128:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800812a:	4b3e      	ldr	r3, [pc, #248]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f003 030c 	and.w	r3, r3, #12
 8008132:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008134:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0303 	and.w	r3, r3, #3
 800813c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d005      	beq.n	8008150 <HAL_RCC_GetSysClockFreq+0x34>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2b0c      	cmp	r3, #12
 8008148:	d121      	bne.n	800818e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d11e      	bne.n	800818e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008150:	4b34      	ldr	r3, [pc, #208]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d107      	bne.n	800816c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800815c:	4b31      	ldr	r3, [pc, #196]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 800815e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	e005      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800816c:	4b2d      	ldr	r3, [pc, #180]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	091b      	lsrs	r3, r3, #4
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008178:	4a2b      	ldr	r2, [pc, #172]	; (8008228 <HAL_RCC_GetSysClockFreq+0x10c>)
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008180:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10d      	bne.n	80081a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800818c:	e00a      	b.n	80081a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b04      	cmp	r3, #4
 8008192:	d102      	bne.n	800819a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008194:	4b25      	ldr	r3, [pc, #148]	; (800822c <HAL_RCC_GetSysClockFreq+0x110>)
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e004      	b.n	80081a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d101      	bne.n	80081a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80081a0:	4b23      	ldr	r3, [pc, #140]	; (8008230 <HAL_RCC_GetSysClockFreq+0x114>)
 80081a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b0c      	cmp	r3, #12
 80081a8:	d134      	bne.n	8008214 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081aa:	4b1e      	ldr	r3, [pc, #120]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d003      	beq.n	80081c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d003      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0xac>
 80081c0:	e005      	b.n	80081ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80081c2:	4b1a      	ldr	r3, [pc, #104]	; (800822c <HAL_RCC_GetSysClockFreq+0x110>)
 80081c4:	617b      	str	r3, [r7, #20]
      break;
 80081c6:	e005      	b.n	80081d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80081c8:	4b19      	ldr	r3, [pc, #100]	; (8008230 <HAL_RCC_GetSysClockFreq+0x114>)
 80081ca:	617b      	str	r3, [r7, #20]
      break;
 80081cc:	e002      	b.n	80081d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	617b      	str	r3, [r7, #20]
      break;
 80081d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081d4:	4b13      	ldr	r3, [pc, #76]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	091b      	lsrs	r3, r3, #4
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	3301      	adds	r3, #1
 80081e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80081e2:	4b10      	ldr	r3, [pc, #64]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	fb02 f203 	mul.w	r2, r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081fa:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <HAL_RCC_GetSysClockFreq+0x108>)
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	0e5b      	lsrs	r3, r3, #25
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	3301      	adds	r3, #1
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008212:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008214:	69bb      	ldr	r3, [r7, #24]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3724      	adds	r7, #36	; 0x24
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40021000 	.word	0x40021000
 8008228:	0800a090 	.word	0x0800a090
 800822c:	00f42400 	.word	0x00f42400
 8008230:	007a1200 	.word	0x007a1200

08008234 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008238:	4b03      	ldr	r3, [pc, #12]	; (8008248 <HAL_RCC_GetHCLKFreq+0x14>)
 800823a:	681b      	ldr	r3, [r3, #0]
}
 800823c:	4618      	mov	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000000 	.word	0x20000000

0800824c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008250:	f7ff fff0 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 8008254:	4602      	mov	r2, r0
 8008256:	4b06      	ldr	r3, [pc, #24]	; (8008270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	4904      	ldr	r1, [pc, #16]	; (8008274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008262:	5ccb      	ldrb	r3, [r1, r3]
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800826c:	4618      	mov	r0, r3
 800826e:	bd80      	pop	{r7, pc}
 8008270:	40021000 	.word	0x40021000
 8008274:	0800a088 	.word	0x0800a088

08008278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800827c:	f7ff ffda 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 8008280:	4602      	mov	r2, r0
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	0adb      	lsrs	r3, r3, #11
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	4904      	ldr	r1, [pc, #16]	; (80082a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800828e:	5ccb      	ldrb	r3, [r1, r3]
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008298:	4618      	mov	r0, r3
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40021000 	.word	0x40021000
 80082a0:	0800a088 	.word	0x0800a088

080082a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80082b0:	4b2a      	ldr	r3, [pc, #168]	; (800835c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80082bc:	f7ff fa02 	bl	80076c4 <HAL_PWREx_GetVoltageRange>
 80082c0:	6178      	str	r0, [r7, #20]
 80082c2:	e014      	b.n	80082ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082c4:	4b25      	ldr	r3, [pc, #148]	; (800835c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c8:	4a24      	ldr	r2, [pc, #144]	; (800835c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ce:	6593      	str	r3, [r2, #88]	; 0x58
 80082d0:	4b22      	ldr	r3, [pc, #136]	; (800835c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80082dc:	f7ff f9f2 	bl	80076c4 <HAL_PWREx_GetVoltageRange>
 80082e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80082e2:	4b1e      	ldr	r3, [pc, #120]	; (800835c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e6:	4a1d      	ldr	r2, [pc, #116]	; (800835c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f4:	d10b      	bne.n	800830e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b80      	cmp	r3, #128	; 0x80
 80082fa:	d919      	bls.n	8008330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2ba0      	cmp	r3, #160	; 0xa0
 8008300:	d902      	bls.n	8008308 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008302:	2302      	movs	r3, #2
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	e013      	b.n	8008330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008308:	2301      	movs	r3, #1
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	e010      	b.n	8008330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b80      	cmp	r3, #128	; 0x80
 8008312:	d902      	bls.n	800831a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008314:	2303      	movs	r3, #3
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	e00a      	b.n	8008330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d102      	bne.n	8008326 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008320:	2302      	movs	r3, #2
 8008322:	613b      	str	r3, [r7, #16]
 8008324:	e004      	b.n	8008330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b70      	cmp	r3, #112	; 0x70
 800832a:	d101      	bne.n	8008330 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800832c:	2301      	movs	r3, #1
 800832e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f023 0207 	bic.w	r2, r3, #7
 8008338:	4909      	ldr	r1, [pc, #36]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	429a      	cmp	r2, r3
 800834c:	d001      	beq.n	8008352 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	40021000 	.word	0x40021000
 8008360:	40022000 	.word	0x40022000

08008364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800836c:	2300      	movs	r3, #0
 800836e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008370:	2300      	movs	r3, #0
 8008372:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800837c:	2b00      	cmp	r3, #0
 800837e:	d041      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008388:	d02a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800838a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800838e:	d824      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008394:	d008      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800839a:	d81e      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80083a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083a4:	d010      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083a6:	e018      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80083a8:	4b86      	ldr	r3, [pc, #536]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	4a85      	ldr	r2, [pc, #532]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083b4:	e015      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3304      	adds	r3, #4
 80083ba:	2100      	movs	r1, #0
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fabb 	bl	8008938 <RCCEx_PLLSAI1_Config>
 80083c2:	4603      	mov	r3, r0
 80083c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083c6:	e00c      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3320      	adds	r3, #32
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fba6 	bl	8008b20 <RCCEx_PLLSAI2_Config>
 80083d4:	4603      	mov	r3, r0
 80083d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083d8:	e003      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	74fb      	strb	r3, [r7, #19]
      break;
 80083de:	e000      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e2:	7cfb      	ldrb	r3, [r7, #19]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083e8:	4b76      	ldr	r3, [pc, #472]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f6:	4973      	ldr	r1, [pc, #460]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80083fe:	e001      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008400:	7cfb      	ldrb	r3, [r7, #19]
 8008402:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d041      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008414:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008418:	d02a      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800841a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800841e:	d824      	bhi.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008424:	d008      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800842a:	d81e      	bhi.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008434:	d010      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008436:	e018      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008438:	4b62      	ldr	r3, [pc, #392]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4a61      	ldr	r2, [pc, #388]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800843e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008442:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008444:	e015      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3304      	adds	r3, #4
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fa73 	bl	8008938 <RCCEx_PLLSAI1_Config>
 8008452:	4603      	mov	r3, r0
 8008454:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008456:	e00c      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3320      	adds	r3, #32
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fb5e 	bl	8008b20 <RCCEx_PLLSAI2_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008468:	e003      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	74fb      	strb	r3, [r7, #19]
      break;
 800846e:	e000      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008472:	7cfb      	ldrb	r3, [r7, #19]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10b      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008478:	4b52      	ldr	r3, [pc, #328]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800847a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008486:	494f      	ldr	r1, [pc, #316]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008488:	4313      	orrs	r3, r2
 800848a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800848e:	e001      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008490:	7cfb      	ldrb	r3, [r7, #19]
 8008492:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80a0 	beq.w	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084a2:	2300      	movs	r3, #0
 80084a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80084a6:	4b47      	ldr	r3, [pc, #284]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80084b6:	2300      	movs	r3, #0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00d      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084bc:	4b41      	ldr	r3, [pc, #260]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c0:	4a40      	ldr	r2, [pc, #256]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c6:	6593      	str	r3, [r2, #88]	; 0x58
 80084c8:	4b3e      	ldr	r3, [pc, #248]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084d4:	2301      	movs	r3, #1
 80084d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084d8:	4b3b      	ldr	r3, [pc, #236]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a3a      	ldr	r2, [pc, #232]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80084de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084e4:	f7fd feca 	bl	800627c <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80084ea:	e009      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084ec:	f7fd fec6 	bl	800627c <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d902      	bls.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	74fb      	strb	r3, [r7, #19]
        break;
 80084fe:	e005      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008500:	4b31      	ldr	r3, [pc, #196]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0ef      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800850c:	7cfb      	ldrb	r3, [r7, #19]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d15c      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008512:	4b2c      	ldr	r3, [pc, #176]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800851c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01f      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	429a      	cmp	r2, r3
 800852e:	d019      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008530:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800853c:	4b21      	ldr	r3, [pc, #132]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008542:	4a20      	ldr	r2, [pc, #128]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800854c:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008552:	4a1c      	ldr	r2, [pc, #112]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800855c:	4a19      	ldr	r2, [pc, #100]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d016      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856e:	f7fd fe85 	bl	800627c <HAL_GetTick>
 8008572:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008574:	e00b      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008576:	f7fd fe81 	bl	800627c <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	f241 3288 	movw	r2, #5000	; 0x1388
 8008584:	4293      	cmp	r3, r2
 8008586:	d902      	bls.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	74fb      	strb	r3, [r7, #19]
            break;
 800858c:	e006      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800858e:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0ec      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800859c:	7cfb      	ldrb	r3, [r7, #19]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10c      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b2:	4904      	ldr	r1, [pc, #16]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80085ba:	e009      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085bc:	7cfb      	ldrb	r3, [r7, #19]
 80085be:	74bb      	strb	r3, [r7, #18]
 80085c0:	e006      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80085c2:	bf00      	nop
 80085c4:	40021000 	.word	0x40021000
 80085c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085cc:	7cfb      	ldrb	r3, [r7, #19]
 80085ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085d0:	7c7b      	ldrb	r3, [r7, #17]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d105      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085d6:	4b9e      	ldr	r3, [pc, #632]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085da:	4a9d      	ldr	r2, [pc, #628]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085ee:	4b98      	ldr	r3, [pc, #608]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f4:	f023 0203 	bic.w	r2, r3, #3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	4994      	ldr	r1, [pc, #592]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008610:	4b8f      	ldr	r3, [pc, #572]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008616:	f023 020c 	bic.w	r2, r3, #12
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	498c      	ldr	r1, [pc, #560]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008620:	4313      	orrs	r3, r2
 8008622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008632:	4b87      	ldr	r3, [pc, #540]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008638:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	4983      	ldr	r1, [pc, #524]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008654:	4b7e      	ldr	r3, [pc, #504]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800865a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	497b      	ldr	r1, [pc, #492]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008664:	4313      	orrs	r3, r2
 8008666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008676:	4b76      	ldr	r3, [pc, #472]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008684:	4972      	ldr	r1, [pc, #456]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008686:	4313      	orrs	r3, r2
 8008688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0320 	and.w	r3, r3, #32
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008698:	4b6d      	ldr	r3, [pc, #436]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800869a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a6:	496a      	ldr	r1, [pc, #424]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ba:	4b65      	ldr	r3, [pc, #404]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c8:	4961      	ldr	r1, [pc, #388]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086dc:	4b5c      	ldr	r3, [pc, #368]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ea:	4959      	ldr	r1, [pc, #356]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086fe:	4b54      	ldr	r3, [pc, #336]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008704:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800870c:	4950      	ldr	r1, [pc, #320]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008720:	4b4b      	ldr	r3, [pc, #300]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008726:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872e:	4948      	ldr	r1, [pc, #288]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008742:	4b43      	ldr	r3, [pc, #268]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008750:	493f      	ldr	r1, [pc, #252]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d028      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008764:	4b3a      	ldr	r3, [pc, #232]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008772:	4937      	ldr	r1, [pc, #220]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008774:	4313      	orrs	r3, r2
 8008776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800877e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008782:	d106      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008784:	4b32      	ldr	r3, [pc, #200]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	4a31      	ldr	r2, [pc, #196]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800878a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800878e:	60d3      	str	r3, [r2, #12]
 8008790:	e011      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800879a:	d10c      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	2101      	movs	r1, #1
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 f8c8 	bl	8008938 <RCCEx_PLLSAI1_Config>
 80087a8:	4603      	mov	r3, r0
 80087aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80087ac:	7cfb      	ldrb	r3, [r7, #19]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80087b2:	7cfb      	ldrb	r3, [r7, #19]
 80087b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d028      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087c2:	4b23      	ldr	r3, [pc, #140]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	491f      	ldr	r1, [pc, #124]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087e0:	d106      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087e2:	4b1b      	ldr	r3, [pc, #108]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	4a1a      	ldr	r2, [pc, #104]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ec:	60d3      	str	r3, [r2, #12]
 80087ee:	e011      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087f8:	d10c      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3304      	adds	r3, #4
 80087fe:	2101      	movs	r1, #1
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f899 	bl	8008938 <RCCEx_PLLSAI1_Config>
 8008806:	4603      	mov	r3, r0
 8008808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800880a:	7cfb      	ldrb	r3, [r7, #19]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008810:	7cfb      	ldrb	r3, [r7, #19]
 8008812:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02b      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882e:	4908      	ldr	r1, [pc, #32]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008830:	4313      	orrs	r3, r2
 8008832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800883e:	d109      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008840:	4b03      	ldr	r3, [pc, #12]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	4a02      	ldr	r2, [pc, #8]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800884a:	60d3      	str	r3, [r2, #12]
 800884c:	e014      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800884e:	bf00      	nop
 8008850:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800885c:	d10c      	bne.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3304      	adds	r3, #4
 8008862:	2101      	movs	r1, #1
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f867 	bl	8008938 <RCCEx_PLLSAI1_Config>
 800886a:	4603      	mov	r3, r0
 800886c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800886e:	7cfb      	ldrb	r3, [r7, #19]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008874:	7cfb      	ldrb	r3, [r7, #19]
 8008876:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d02f      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008884:	4b2b      	ldr	r3, [pc, #172]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008892:	4928      	ldr	r1, [pc, #160]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008894:	4313      	orrs	r3, r2
 8008896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800889e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088a2:	d10d      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3304      	adds	r3, #4
 80088a8:	2102      	movs	r1, #2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f844 	bl	8008938 <RCCEx_PLLSAI1_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088b4:	7cfb      	ldrb	r3, [r7, #19]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d014      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80088ba:	7cfb      	ldrb	r3, [r7, #19]
 80088bc:	74bb      	strb	r3, [r7, #18]
 80088be:	e011      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088c8:	d10c      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3320      	adds	r3, #32
 80088ce:	2102      	movs	r1, #2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f925 	bl	8008b20 <RCCEx_PLLSAI2_Config>
 80088d6:	4603      	mov	r3, r0
 80088d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088da:	7cfb      	ldrb	r3, [r7, #19]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80088e0:	7cfb      	ldrb	r3, [r7, #19]
 80088e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088f0:	4b10      	ldr	r3, [pc, #64]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80088f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088fe:	490d      	ldr	r1, [pc, #52]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008900:	4313      	orrs	r3, r2
 8008902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008912:	4b08      	ldr	r3, [pc, #32]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008922:	4904      	ldr	r1, [pc, #16]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008924:	4313      	orrs	r3, r2
 8008926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800892a:	7cbb      	ldrb	r3, [r7, #18]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	40021000 	.word	0x40021000

08008938 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008946:	4b75      	ldr	r3, [pc, #468]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0303 	and.w	r3, r3, #3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d018      	beq.n	8008984 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008952:	4b72      	ldr	r3, [pc, #456]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f003 0203 	and.w	r2, r3, #3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d10d      	bne.n	800897e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
       ||
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800896a:	4b6c      	ldr	r3, [pc, #432]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	091b      	lsrs	r3, r3, #4
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
       ||
 800897a:	429a      	cmp	r2, r3
 800897c:	d047      	beq.n	8008a0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	73fb      	strb	r3, [r7, #15]
 8008982:	e044      	b.n	8008a0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b03      	cmp	r3, #3
 800898a:	d018      	beq.n	80089be <RCCEx_PLLSAI1_Config+0x86>
 800898c:	2b03      	cmp	r3, #3
 800898e:	d825      	bhi.n	80089dc <RCCEx_PLLSAI1_Config+0xa4>
 8008990:	2b01      	cmp	r3, #1
 8008992:	d002      	beq.n	800899a <RCCEx_PLLSAI1_Config+0x62>
 8008994:	2b02      	cmp	r3, #2
 8008996:	d009      	beq.n	80089ac <RCCEx_PLLSAI1_Config+0x74>
 8008998:	e020      	b.n	80089dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800899a:	4b60      	ldr	r3, [pc, #384]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d11d      	bne.n	80089e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089aa:	e01a      	b.n	80089e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089ac:	4b5b      	ldr	r3, [pc, #364]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d116      	bne.n	80089e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089bc:	e013      	b.n	80089e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089be:	4b57      	ldr	r3, [pc, #348]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10f      	bne.n	80089ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089ca:	4b54      	ldr	r3, [pc, #336]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089da:	e006      	b.n	80089ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
      break;
 80089e0:	e004      	b.n	80089ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80089e2:	bf00      	nop
 80089e4:	e002      	b.n	80089ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80089ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10d      	bne.n	8008a0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80089f2:	4b4a      	ldr	r3, [pc, #296]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6819      	ldr	r1, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	430b      	orrs	r3, r1
 8008a08:	4944      	ldr	r1, [pc, #272]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d17d      	bne.n	8008b10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008a14:	4b41      	ldr	r3, [pc, #260]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a40      	ldr	r2, [pc, #256]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a20:	f7fd fc2c 	bl	800627c <HAL_GetTick>
 8008a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a26:	e009      	b.n	8008a3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a28:	f7fd fc28 	bl	800627c <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d902      	bls.n	8008a3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	73fb      	strb	r3, [r7, #15]
        break;
 8008a3a:	e005      	b.n	8008a48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a3c:	4b37      	ldr	r3, [pc, #220]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1ef      	bne.n	8008a28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d160      	bne.n	8008b10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d111      	bne.n	8008a78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a54:	4b31      	ldr	r3, [pc, #196]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6892      	ldr	r2, [r2, #8]
 8008a64:	0211      	lsls	r1, r2, #8
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	68d2      	ldr	r2, [r2, #12]
 8008a6a:	0912      	lsrs	r2, r2, #4
 8008a6c:	0452      	lsls	r2, r2, #17
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	492a      	ldr	r1, [pc, #168]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	610b      	str	r3, [r1, #16]
 8008a76:	e027      	b.n	8008ac8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d112      	bne.n	8008aa4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a7e:	4b27      	ldr	r3, [pc, #156]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008a86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6892      	ldr	r2, [r2, #8]
 8008a8e:	0211      	lsls	r1, r2, #8
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	6912      	ldr	r2, [r2, #16]
 8008a94:	0852      	lsrs	r2, r2, #1
 8008a96:	3a01      	subs	r2, #1
 8008a98:	0552      	lsls	r2, r2, #21
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	491f      	ldr	r1, [pc, #124]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	610b      	str	r3, [r1, #16]
 8008aa2:	e011      	b.n	8008ac8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008aa4:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008aac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6892      	ldr	r2, [r2, #8]
 8008ab4:	0211      	lsls	r1, r2, #8
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	6952      	ldr	r2, [r2, #20]
 8008aba:	0852      	lsrs	r2, r2, #1
 8008abc:	3a01      	subs	r2, #1
 8008abe:	0652      	lsls	r2, r2, #25
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	4916      	ldr	r1, [pc, #88]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008ac8:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ad2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad4:	f7fd fbd2 	bl	800627c <HAL_GetTick>
 8008ad8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008ada:	e009      	b.n	8008af0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008adc:	f7fd fbce 	bl	800627c <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d902      	bls.n	8008af0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	73fb      	strb	r3, [r7, #15]
          break;
 8008aee:	e005      	b.n	8008afc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0ef      	beq.n	8008adc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008b02:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b04:	691a      	ldr	r2, [r3, #16]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	4904      	ldr	r1, [pc, #16]	; (8008b1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	40021000 	.word	0x40021000

08008b20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008b2e:	4b6a      	ldr	r3, [pc, #424]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d018      	beq.n	8008b6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008b3a:	4b67      	ldr	r3, [pc, #412]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f003 0203 	and.w	r2, r3, #3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d10d      	bne.n	8008b66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
       ||
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d009      	beq.n	8008b66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008b52:	4b61      	ldr	r3, [pc, #388]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	091b      	lsrs	r3, r3, #4
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
       ||
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d047      	beq.n	8008bf6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	73fb      	strb	r3, [r7, #15]
 8008b6a:	e044      	b.n	8008bf6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d018      	beq.n	8008ba6 <RCCEx_PLLSAI2_Config+0x86>
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d825      	bhi.n	8008bc4 <RCCEx_PLLSAI2_Config+0xa4>
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d002      	beq.n	8008b82 <RCCEx_PLLSAI2_Config+0x62>
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d009      	beq.n	8008b94 <RCCEx_PLLSAI2_Config+0x74>
 8008b80:	e020      	b.n	8008bc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008b82:	4b55      	ldr	r3, [pc, #340]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d11d      	bne.n	8008bca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b92:	e01a      	b.n	8008bca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008b94:	4b50      	ldr	r3, [pc, #320]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d116      	bne.n	8008bce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ba4:	e013      	b.n	8008bce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008ba6:	4b4c      	ldr	r3, [pc, #304]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10f      	bne.n	8008bd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008bb2:	4b49      	ldr	r3, [pc, #292]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bc2:	e006      	b.n	8008bd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc8:	e004      	b.n	8008bd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008bca:	bf00      	nop
 8008bcc:	e002      	b.n	8008bd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008bce:	bf00      	nop
 8008bd0:	e000      	b.n	8008bd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008bd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10d      	bne.n	8008bf6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008bda:	4b3f      	ldr	r3, [pc, #252]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6819      	ldr	r1, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	4939      	ldr	r1, [pc, #228]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d167      	bne.n	8008ccc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008bfc:	4b36      	ldr	r3, [pc, #216]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a35      	ldr	r2, [pc, #212]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c08:	f7fd fb38 	bl	800627c <HAL_GetTick>
 8008c0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c0e:	e009      	b.n	8008c24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008c10:	f7fd fb34 	bl	800627c <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d902      	bls.n	8008c24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	73fb      	strb	r3, [r7, #15]
        break;
 8008c22:	e005      	b.n	8008c30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c24:	4b2c      	ldr	r3, [pc, #176]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1ef      	bne.n	8008c10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d14a      	bne.n	8008ccc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d111      	bne.n	8008c60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008c3c:	4b26      	ldr	r3, [pc, #152]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6892      	ldr	r2, [r2, #8]
 8008c4c:	0211      	lsls	r1, r2, #8
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	68d2      	ldr	r2, [r2, #12]
 8008c52:	0912      	lsrs	r2, r2, #4
 8008c54:	0452      	lsls	r2, r2, #17
 8008c56:	430a      	orrs	r2, r1
 8008c58:	491f      	ldr	r1, [pc, #124]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	614b      	str	r3, [r1, #20]
 8008c5e:	e011      	b.n	8008c84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008c60:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008c68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6892      	ldr	r2, [r2, #8]
 8008c70:	0211      	lsls	r1, r2, #8
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	6912      	ldr	r2, [r2, #16]
 8008c76:	0852      	lsrs	r2, r2, #1
 8008c78:	3a01      	subs	r2, #1
 8008c7a:	0652      	lsls	r2, r2, #25
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	4916      	ldr	r1, [pc, #88]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008c84:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c90:	f7fd faf4 	bl	800627c <HAL_GetTick>
 8008c94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008c96:	e009      	b.n	8008cac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008c98:	f7fd faf0 	bl	800627c <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d902      	bls.n	8008cac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	73fb      	strb	r3, [r7, #15]
          break;
 8008caa:	e005      	b.n	8008cb8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0ef      	beq.n	8008c98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008cbe:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cc0:	695a      	ldr	r2, [r3, #20]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	4904      	ldr	r1, [pc, #16]	; (8008cd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40021000 	.word	0x40021000

08008cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e040      	b.n	8008d70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7f7 fe96 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2224      	movs	r2, #36	; 0x24
 8008d08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0201 	bic.w	r2, r2, #1
 8008d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f8c0 	bl	8008ea0 <UART_SetConfig>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e022      	b.n	8008d70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb3e 	bl	80093b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0201 	orr.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fbc5 	bl	80094f8 <UART_CheckIdleState>
 8008d6e:	4603      	mov	r3, r0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08a      	sub	sp, #40	; 0x28
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	4613      	mov	r3, r2
 8008d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	f040 8082 	bne.w	8008e96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_UART_Transmit+0x26>
 8008d98:	88fb      	ldrh	r3, [r7, #6]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e07a      	b.n	8008e98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <HAL_UART_Transmit+0x38>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e073      	b.n	8008e98 <HAL_UART_Transmit+0x120>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2221      	movs	r2, #33	; 0x21
 8008dc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dc6:	f7fd fa59 	bl	800627c <HAL_GetTick>
 8008dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	88fa      	ldrh	r2, [r7, #6]
 8008dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	88fa      	ldrh	r2, [r7, #6]
 8008dd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de4:	d108      	bne.n	8008df8 <HAL_UART_Transmit+0x80>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	61bb      	str	r3, [r7, #24]
 8008df6:	e003      	b.n	8008e00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008e08:	e02d      	b.n	8008e66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2200      	movs	r2, #0
 8008e12:	2180      	movs	r1, #128	; 0x80
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 fbb8 	bl	800958a <UART_WaitOnFlagUntilTimeout>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e039      	b.n	8008e98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10b      	bne.n	8008e42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	881a      	ldrh	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e36:	b292      	uxth	r2, r2
 8008e38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	61bb      	str	r3, [r7, #24]
 8008e40:	e008      	b.n	8008e54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	b292      	uxth	r2, r2
 8008e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	3301      	adds	r3, #1
 8008e52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1cb      	bne.n	8008e0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2140      	movs	r1, #64	; 0x40
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fb84 	bl	800958a <UART_WaitOnFlagUntilTimeout>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e005      	b.n	8008e98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	e000      	b.n	8008e98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008e96:	2302      	movs	r3, #2
  }
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ea0:	b5b0      	push	{r4, r5, r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	4bad      	ldr	r3, [pc, #692]	; (8009180 <UART_SetConfig+0x2e0>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6812      	ldr	r2, [r2, #0]
 8008ed2:	69f9      	ldr	r1, [r7, #28]
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4aa2      	ldr	r2, [pc, #648]	; (8009184 <UART_SetConfig+0x2e4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d004      	beq.n	8008f08 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a99      	ldr	r2, [pc, #612]	; (8009188 <UART_SetConfig+0x2e8>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d121      	bne.n	8008f6a <UART_SetConfig+0xca>
 8008f26:	4b99      	ldr	r3, [pc, #612]	; (800918c <UART_SetConfig+0x2ec>)
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	f003 0303 	and.w	r3, r3, #3
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d817      	bhi.n	8008f64 <UART_SetConfig+0xc4>
 8008f34:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <UART_SetConfig+0x9c>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f4d 	.word	0x08008f4d
 8008f40:	08008f59 	.word	0x08008f59
 8008f44:	08008f53 	.word	0x08008f53
 8008f48:	08008f5f 	.word	0x08008f5f
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	76fb      	strb	r3, [r7, #27]
 8008f50:	e0e7      	b.n	8009122 <UART_SetConfig+0x282>
 8008f52:	2302      	movs	r3, #2
 8008f54:	76fb      	strb	r3, [r7, #27]
 8008f56:	e0e4      	b.n	8009122 <UART_SetConfig+0x282>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	76fb      	strb	r3, [r7, #27]
 8008f5c:	e0e1      	b.n	8009122 <UART_SetConfig+0x282>
 8008f5e:	2308      	movs	r3, #8
 8008f60:	76fb      	strb	r3, [r7, #27]
 8008f62:	e0de      	b.n	8009122 <UART_SetConfig+0x282>
 8008f64:	2310      	movs	r3, #16
 8008f66:	76fb      	strb	r3, [r7, #27]
 8008f68:	e0db      	b.n	8009122 <UART_SetConfig+0x282>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a88      	ldr	r2, [pc, #544]	; (8009190 <UART_SetConfig+0x2f0>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d132      	bne.n	8008fda <UART_SetConfig+0x13a>
 8008f74:	4b85      	ldr	r3, [pc, #532]	; (800918c <UART_SetConfig+0x2ec>)
 8008f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7a:	f003 030c 	and.w	r3, r3, #12
 8008f7e:	2b0c      	cmp	r3, #12
 8008f80:	d828      	bhi.n	8008fd4 <UART_SetConfig+0x134>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <UART_SetConfig+0xe8>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fd5 	.word	0x08008fd5
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fd5 	.word	0x08008fd5
 8008fa4:	08008fd5 	.word	0x08008fd5
 8008fa8:	08008fc3 	.word	0x08008fc3
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fd5 	.word	0x08008fd5
 8008fb4:	08008fd5 	.word	0x08008fd5
 8008fb8:	08008fcf 	.word	0x08008fcf
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	76fb      	strb	r3, [r7, #27]
 8008fc0:	e0af      	b.n	8009122 <UART_SetConfig+0x282>
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	76fb      	strb	r3, [r7, #27]
 8008fc6:	e0ac      	b.n	8009122 <UART_SetConfig+0x282>
 8008fc8:	2304      	movs	r3, #4
 8008fca:	76fb      	strb	r3, [r7, #27]
 8008fcc:	e0a9      	b.n	8009122 <UART_SetConfig+0x282>
 8008fce:	2308      	movs	r3, #8
 8008fd0:	76fb      	strb	r3, [r7, #27]
 8008fd2:	e0a6      	b.n	8009122 <UART_SetConfig+0x282>
 8008fd4:	2310      	movs	r3, #16
 8008fd6:	76fb      	strb	r3, [r7, #27]
 8008fd8:	e0a3      	b.n	8009122 <UART_SetConfig+0x282>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a6d      	ldr	r2, [pc, #436]	; (8009194 <UART_SetConfig+0x2f4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d120      	bne.n	8009026 <UART_SetConfig+0x186>
 8008fe4:	4b69      	ldr	r3, [pc, #420]	; (800918c <UART_SetConfig+0x2ec>)
 8008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008fee:	2b30      	cmp	r3, #48	; 0x30
 8008ff0:	d013      	beq.n	800901a <UART_SetConfig+0x17a>
 8008ff2:	2b30      	cmp	r3, #48	; 0x30
 8008ff4:	d814      	bhi.n	8009020 <UART_SetConfig+0x180>
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d009      	beq.n	800900e <UART_SetConfig+0x16e>
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d810      	bhi.n	8009020 <UART_SetConfig+0x180>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <UART_SetConfig+0x168>
 8009002:	2b10      	cmp	r3, #16
 8009004:	d006      	beq.n	8009014 <UART_SetConfig+0x174>
 8009006:	e00b      	b.n	8009020 <UART_SetConfig+0x180>
 8009008:	2300      	movs	r3, #0
 800900a:	76fb      	strb	r3, [r7, #27]
 800900c:	e089      	b.n	8009122 <UART_SetConfig+0x282>
 800900e:	2302      	movs	r3, #2
 8009010:	76fb      	strb	r3, [r7, #27]
 8009012:	e086      	b.n	8009122 <UART_SetConfig+0x282>
 8009014:	2304      	movs	r3, #4
 8009016:	76fb      	strb	r3, [r7, #27]
 8009018:	e083      	b.n	8009122 <UART_SetConfig+0x282>
 800901a:	2308      	movs	r3, #8
 800901c:	76fb      	strb	r3, [r7, #27]
 800901e:	e080      	b.n	8009122 <UART_SetConfig+0x282>
 8009020:	2310      	movs	r3, #16
 8009022:	76fb      	strb	r3, [r7, #27]
 8009024:	e07d      	b.n	8009122 <UART_SetConfig+0x282>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a5b      	ldr	r2, [pc, #364]	; (8009198 <UART_SetConfig+0x2f8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d120      	bne.n	8009072 <UART_SetConfig+0x1d2>
 8009030:	4b56      	ldr	r3, [pc, #344]	; (800918c <UART_SetConfig+0x2ec>)
 8009032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800903a:	2bc0      	cmp	r3, #192	; 0xc0
 800903c:	d013      	beq.n	8009066 <UART_SetConfig+0x1c6>
 800903e:	2bc0      	cmp	r3, #192	; 0xc0
 8009040:	d814      	bhi.n	800906c <UART_SetConfig+0x1cc>
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	d009      	beq.n	800905a <UART_SetConfig+0x1ba>
 8009046:	2b80      	cmp	r3, #128	; 0x80
 8009048:	d810      	bhi.n	800906c <UART_SetConfig+0x1cc>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <UART_SetConfig+0x1b4>
 800904e:	2b40      	cmp	r3, #64	; 0x40
 8009050:	d006      	beq.n	8009060 <UART_SetConfig+0x1c0>
 8009052:	e00b      	b.n	800906c <UART_SetConfig+0x1cc>
 8009054:	2300      	movs	r3, #0
 8009056:	76fb      	strb	r3, [r7, #27]
 8009058:	e063      	b.n	8009122 <UART_SetConfig+0x282>
 800905a:	2302      	movs	r3, #2
 800905c:	76fb      	strb	r3, [r7, #27]
 800905e:	e060      	b.n	8009122 <UART_SetConfig+0x282>
 8009060:	2304      	movs	r3, #4
 8009062:	76fb      	strb	r3, [r7, #27]
 8009064:	e05d      	b.n	8009122 <UART_SetConfig+0x282>
 8009066:	2308      	movs	r3, #8
 8009068:	76fb      	strb	r3, [r7, #27]
 800906a:	e05a      	b.n	8009122 <UART_SetConfig+0x282>
 800906c:	2310      	movs	r3, #16
 800906e:	76fb      	strb	r3, [r7, #27]
 8009070:	e057      	b.n	8009122 <UART_SetConfig+0x282>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a49      	ldr	r2, [pc, #292]	; (800919c <UART_SetConfig+0x2fc>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d125      	bne.n	80090c8 <UART_SetConfig+0x228>
 800907c:	4b43      	ldr	r3, [pc, #268]	; (800918c <UART_SetConfig+0x2ec>)
 800907e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800908a:	d017      	beq.n	80090bc <UART_SetConfig+0x21c>
 800908c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009090:	d817      	bhi.n	80090c2 <UART_SetConfig+0x222>
 8009092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009096:	d00b      	beq.n	80090b0 <UART_SetConfig+0x210>
 8009098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909c:	d811      	bhi.n	80090c2 <UART_SetConfig+0x222>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <UART_SetConfig+0x20a>
 80090a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a6:	d006      	beq.n	80090b6 <UART_SetConfig+0x216>
 80090a8:	e00b      	b.n	80090c2 <UART_SetConfig+0x222>
 80090aa:	2300      	movs	r3, #0
 80090ac:	76fb      	strb	r3, [r7, #27]
 80090ae:	e038      	b.n	8009122 <UART_SetConfig+0x282>
 80090b0:	2302      	movs	r3, #2
 80090b2:	76fb      	strb	r3, [r7, #27]
 80090b4:	e035      	b.n	8009122 <UART_SetConfig+0x282>
 80090b6:	2304      	movs	r3, #4
 80090b8:	76fb      	strb	r3, [r7, #27]
 80090ba:	e032      	b.n	8009122 <UART_SetConfig+0x282>
 80090bc:	2308      	movs	r3, #8
 80090be:	76fb      	strb	r3, [r7, #27]
 80090c0:	e02f      	b.n	8009122 <UART_SetConfig+0x282>
 80090c2:	2310      	movs	r3, #16
 80090c4:	76fb      	strb	r3, [r7, #27]
 80090c6:	e02c      	b.n	8009122 <UART_SetConfig+0x282>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a2d      	ldr	r2, [pc, #180]	; (8009184 <UART_SetConfig+0x2e4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d125      	bne.n	800911e <UART_SetConfig+0x27e>
 80090d2:	4b2e      	ldr	r3, [pc, #184]	; (800918c <UART_SetConfig+0x2ec>)
 80090d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e0:	d017      	beq.n	8009112 <UART_SetConfig+0x272>
 80090e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e6:	d817      	bhi.n	8009118 <UART_SetConfig+0x278>
 80090e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ec:	d00b      	beq.n	8009106 <UART_SetConfig+0x266>
 80090ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090f2:	d811      	bhi.n	8009118 <UART_SetConfig+0x278>
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <UART_SetConfig+0x260>
 80090f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090fc:	d006      	beq.n	800910c <UART_SetConfig+0x26c>
 80090fe:	e00b      	b.n	8009118 <UART_SetConfig+0x278>
 8009100:	2300      	movs	r3, #0
 8009102:	76fb      	strb	r3, [r7, #27]
 8009104:	e00d      	b.n	8009122 <UART_SetConfig+0x282>
 8009106:	2302      	movs	r3, #2
 8009108:	76fb      	strb	r3, [r7, #27]
 800910a:	e00a      	b.n	8009122 <UART_SetConfig+0x282>
 800910c:	2304      	movs	r3, #4
 800910e:	76fb      	strb	r3, [r7, #27]
 8009110:	e007      	b.n	8009122 <UART_SetConfig+0x282>
 8009112:	2308      	movs	r3, #8
 8009114:	76fb      	strb	r3, [r7, #27]
 8009116:	e004      	b.n	8009122 <UART_SetConfig+0x282>
 8009118:	2310      	movs	r3, #16
 800911a:	76fb      	strb	r3, [r7, #27]
 800911c:	e001      	b.n	8009122 <UART_SetConfig+0x282>
 800911e:	2310      	movs	r3, #16
 8009120:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a17      	ldr	r2, [pc, #92]	; (8009184 <UART_SetConfig+0x2e4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	f040 8087 	bne.w	800923c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800912e:	7efb      	ldrb	r3, [r7, #27]
 8009130:	2b08      	cmp	r3, #8
 8009132:	d837      	bhi.n	80091a4 <UART_SetConfig+0x304>
 8009134:	a201      	add	r2, pc, #4	; (adr r2, 800913c <UART_SetConfig+0x29c>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	08009161 	.word	0x08009161
 8009140:	080091a5 	.word	0x080091a5
 8009144:	08009169 	.word	0x08009169
 8009148:	080091a5 	.word	0x080091a5
 800914c:	0800916f 	.word	0x0800916f
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091a5 	.word	0x080091a5
 800915c:	08009177 	.word	0x08009177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009160:	f7ff f874 	bl	800824c <HAL_RCC_GetPCLK1Freq>
 8009164:	6178      	str	r0, [r7, #20]
        break;
 8009166:	e022      	b.n	80091ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009168:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <UART_SetConfig+0x300>)
 800916a:	617b      	str	r3, [r7, #20]
        break;
 800916c:	e01f      	b.n	80091ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800916e:	f7fe ffd5 	bl	800811c <HAL_RCC_GetSysClockFreq>
 8009172:	6178      	str	r0, [r7, #20]
        break;
 8009174:	e01b      	b.n	80091ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800917a:	617b      	str	r3, [r7, #20]
        break;
 800917c:	e017      	b.n	80091ae <UART_SetConfig+0x30e>
 800917e:	bf00      	nop
 8009180:	efff69f3 	.word	0xefff69f3
 8009184:	40008000 	.word	0x40008000
 8009188:	40013800 	.word	0x40013800
 800918c:	40021000 	.word	0x40021000
 8009190:	40004400 	.word	0x40004400
 8009194:	40004800 	.word	0x40004800
 8009198:	40004c00 	.word	0x40004c00
 800919c:	40005000 	.word	0x40005000
 80091a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	76bb      	strb	r3, [r7, #26]
        break;
 80091ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 80f1 	beq.w	8009398 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	4613      	mov	r3, r2
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	4413      	add	r3, r2
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d305      	bcc.n	80091d2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d902      	bls.n	80091d8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	76bb      	strb	r3, [r7, #26]
 80091d6:	e0df      	b.n	8009398 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	4618      	mov	r0, r3
 80091dc:	f04f 0100 	mov.w	r1, #0
 80091e0:	f04f 0200 	mov.w	r2, #0
 80091e4:	f04f 0300 	mov.w	r3, #0
 80091e8:	020b      	lsls	r3, r1, #8
 80091ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091ee:	0202      	lsls	r2, r0, #8
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	6849      	ldr	r1, [r1, #4]
 80091f4:	0849      	lsrs	r1, r1, #1
 80091f6:	4608      	mov	r0, r1
 80091f8:	f04f 0100 	mov.w	r1, #0
 80091fc:	1814      	adds	r4, r2, r0
 80091fe:	eb43 0501 	adc.w	r5, r3, r1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	461a      	mov	r2, r3
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f7 f836 	bl	8000280 <__aeabi_uldivmod>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4613      	mov	r3, r2
 800921a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009222:	d308      	bcc.n	8009236 <UART_SetConfig+0x396>
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800922a:	d204      	bcs.n	8009236 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	60da      	str	r2, [r3, #12]
 8009234:	e0b0      	b.n	8009398 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	76bb      	strb	r3, [r7, #26]
 800923a:	e0ad      	b.n	8009398 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009244:	d15b      	bne.n	80092fe <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8009246:	7efb      	ldrb	r3, [r7, #27]
 8009248:	2b08      	cmp	r3, #8
 800924a:	d828      	bhi.n	800929e <UART_SetConfig+0x3fe>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <UART_SetConfig+0x3b4>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009279 	.word	0x08009279
 8009258:	08009281 	.word	0x08009281
 800925c:	08009289 	.word	0x08009289
 8009260:	0800929f 	.word	0x0800929f
 8009264:	0800928f 	.word	0x0800928f
 8009268:	0800929f 	.word	0x0800929f
 800926c:	0800929f 	.word	0x0800929f
 8009270:	0800929f 	.word	0x0800929f
 8009274:	08009297 	.word	0x08009297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009278:	f7fe ffe8 	bl	800824c <HAL_RCC_GetPCLK1Freq>
 800927c:	6178      	str	r0, [r7, #20]
        break;
 800927e:	e013      	b.n	80092a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009280:	f7fe fffa 	bl	8008278 <HAL_RCC_GetPCLK2Freq>
 8009284:	6178      	str	r0, [r7, #20]
        break;
 8009286:	e00f      	b.n	80092a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009288:	4b49      	ldr	r3, [pc, #292]	; (80093b0 <UART_SetConfig+0x510>)
 800928a:	617b      	str	r3, [r7, #20]
        break;
 800928c:	e00c      	b.n	80092a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800928e:	f7fe ff45 	bl	800811c <HAL_RCC_GetSysClockFreq>
 8009292:	6178      	str	r0, [r7, #20]
        break;
 8009294:	e008      	b.n	80092a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800929a:	617b      	str	r3, [r7, #20]
        break;
 800929c:	e004      	b.n	80092a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	76bb      	strb	r3, [r7, #26]
        break;
 80092a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d074      	beq.n	8009398 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	005a      	lsls	r2, r3, #1
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	085b      	lsrs	r3, r3, #1
 80092b8:	441a      	add	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2b0f      	cmp	r3, #15
 80092c8:	d916      	bls.n	80092f8 <UART_SetConfig+0x458>
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d0:	d212      	bcs.n	80092f8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f023 030f 	bic.w	r3, r3, #15
 80092da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	085b      	lsrs	r3, r3, #1
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f003 0307 	and.w	r3, r3, #7
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	89fb      	ldrh	r3, [r7, #14]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	89fa      	ldrh	r2, [r7, #14]
 80092f4:	60da      	str	r2, [r3, #12]
 80092f6:	e04f      	b.n	8009398 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	76bb      	strb	r3, [r7, #26]
 80092fc:	e04c      	b.n	8009398 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092fe:	7efb      	ldrb	r3, [r7, #27]
 8009300:	2b08      	cmp	r3, #8
 8009302:	d828      	bhi.n	8009356 <UART_SetConfig+0x4b6>
 8009304:	a201      	add	r2, pc, #4	; (adr r2, 800930c <UART_SetConfig+0x46c>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	08009331 	.word	0x08009331
 8009310:	08009339 	.word	0x08009339
 8009314:	08009341 	.word	0x08009341
 8009318:	08009357 	.word	0x08009357
 800931c:	08009347 	.word	0x08009347
 8009320:	08009357 	.word	0x08009357
 8009324:	08009357 	.word	0x08009357
 8009328:	08009357 	.word	0x08009357
 800932c:	0800934f 	.word	0x0800934f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009330:	f7fe ff8c 	bl	800824c <HAL_RCC_GetPCLK1Freq>
 8009334:	6178      	str	r0, [r7, #20]
        break;
 8009336:	e013      	b.n	8009360 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009338:	f7fe ff9e 	bl	8008278 <HAL_RCC_GetPCLK2Freq>
 800933c:	6178      	str	r0, [r7, #20]
        break;
 800933e:	e00f      	b.n	8009360 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <UART_SetConfig+0x510>)
 8009342:	617b      	str	r3, [r7, #20]
        break;
 8009344:	e00c      	b.n	8009360 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009346:	f7fe fee9 	bl	800811c <HAL_RCC_GetSysClockFreq>
 800934a:	6178      	str	r0, [r7, #20]
        break;
 800934c:	e008      	b.n	8009360 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800934e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009352:	617b      	str	r3, [r7, #20]
        break;
 8009354:	e004      	b.n	8009360 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	76bb      	strb	r3, [r7, #26]
        break;
 800935e:	bf00      	nop
    }

    if (pclk != 0U)
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d018      	beq.n	8009398 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	085a      	lsrs	r2, r3, #1
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	441a      	add	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	fbb2 f3f3 	udiv	r3, r2, r3
 8009378:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b0f      	cmp	r3, #15
 800937e:	d909      	bls.n	8009394 <UART_SetConfig+0x4f4>
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009386:	d205      	bcs.n	8009394 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60da      	str	r2, [r3, #12]
 8009392:	e001      	b.n	8009398 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80093a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bdb0      	pop	{r4, r5, r7, pc}
 80093ae:	bf00      	nop
 80093b0:	00f42400 	.word	0x00f42400

080093b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01a      	beq.n	80094ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b2:	d10a      	bne.n	80094ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	605a      	str	r2, [r3, #4]
  }
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009508:	f7fc feb8 	bl	800627c <HAL_GetTick>
 800950c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0308 	and.w	r3, r3, #8
 8009518:	2b08      	cmp	r3, #8
 800951a:	d10e      	bne.n	800953a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800951c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f82d 	bl	800958a <UART_WaitOnFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e023      	b.n	8009582 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b04      	cmp	r3, #4
 8009546:	d10e      	bne.n	8009566 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f817 	bl	800958a <UART_WaitOnFlagUntilTimeout>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e00d      	b.n	8009582 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b09c      	sub	sp, #112	; 0x70
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	603b      	str	r3, [r7, #0]
 8009596:	4613      	mov	r3, r2
 8009598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959a:	e0a5      	b.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800959c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a2:	f000 80a1 	beq.w	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a6:	f7fc fe69 	bl	800627c <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <UART_WaitOnFlagUntilTimeout+0x32>
 80095b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d13e      	bne.n	800963a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095d0:	667b      	str	r3, [r7, #100]	; 0x64
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e6      	bne.n	80095bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	663b      	str	r3, [r7, #96]	; 0x60
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800960e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009610:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800961c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e5      	bne.n	80095ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2220      	movs	r2, #32
 8009626:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e067      	b.n	800970a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0304 	and.w	r3, r3, #4
 8009644:	2b00      	cmp	r3, #0
 8009646:	d04f      	beq.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009656:	d147      	bne.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009660:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
 8009682:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009688:	e841 2300 	strex	r3, r2, [r1]
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1e6      	bne.n	8009662 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3308      	adds	r3, #8
 800969a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	613b      	str	r3, [r7, #16]
   return(result);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f023 0301 	bic.w	r3, r3, #1
 80096aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3308      	adds	r3, #8
 80096b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096b4:	623a      	str	r2, [r7, #32]
 80096b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b8:	69f9      	ldr	r1, [r7, #28]
 80096ba:	6a3a      	ldr	r2, [r7, #32]
 80096bc:	e841 2300 	strex	r3, r2, [r1]
 80096c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e5      	bne.n	8009694 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2220      	movs	r2, #32
 80096cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2220      	movs	r2, #32
 80096d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e010      	b.n	800970a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69da      	ldr	r2, [r3, #28]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	4013      	ands	r3, r2
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	bf0c      	ite	eq
 80096f8:	2301      	moveq	r3, #1
 80096fa:	2300      	movne	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	429a      	cmp	r2, r3
 8009704:	f43f af4a 	beq.w	800959c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3770      	adds	r7, #112	; 0x70
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <__errno>:
 8009714:	4b01      	ldr	r3, [pc, #4]	; (800971c <__errno+0x8>)
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	20000164 	.word	0x20000164

08009720 <__libc_init_array>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	4d0d      	ldr	r5, [pc, #52]	; (8009758 <__libc_init_array+0x38>)
 8009724:	4c0d      	ldr	r4, [pc, #52]	; (800975c <__libc_init_array+0x3c>)
 8009726:	1b64      	subs	r4, r4, r5
 8009728:	10a4      	asrs	r4, r4, #2
 800972a:	2600      	movs	r6, #0
 800972c:	42a6      	cmp	r6, r4
 800972e:	d109      	bne.n	8009744 <__libc_init_array+0x24>
 8009730:	4d0b      	ldr	r5, [pc, #44]	; (8009760 <__libc_init_array+0x40>)
 8009732:	4c0c      	ldr	r4, [pc, #48]	; (8009764 <__libc_init_array+0x44>)
 8009734:	f000 fc4e 	bl	8009fd4 <_init>
 8009738:	1b64      	subs	r4, r4, r5
 800973a:	10a4      	asrs	r4, r4, #2
 800973c:	2600      	movs	r6, #0
 800973e:	42a6      	cmp	r6, r4
 8009740:	d105      	bne.n	800974e <__libc_init_array+0x2e>
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	f855 3b04 	ldr.w	r3, [r5], #4
 8009748:	4798      	blx	r3
 800974a:	3601      	adds	r6, #1
 800974c:	e7ee      	b.n	800972c <__libc_init_array+0xc>
 800974e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009752:	4798      	blx	r3
 8009754:	3601      	adds	r6, #1
 8009756:	e7f2      	b.n	800973e <__libc_init_array+0x1e>
 8009758:	0800a0fc 	.word	0x0800a0fc
 800975c:	0800a0fc 	.word	0x0800a0fc
 8009760:	0800a0fc 	.word	0x0800a0fc
 8009764:	0800a100 	.word	0x0800a100

08009768 <memset>:
 8009768:	4402      	add	r2, r0
 800976a:	4603      	mov	r3, r0
 800976c:	4293      	cmp	r3, r2
 800976e:	d100      	bne.n	8009772 <memset+0xa>
 8009770:	4770      	bx	lr
 8009772:	f803 1b01 	strb.w	r1, [r3], #1
 8009776:	e7f9      	b.n	800976c <memset+0x4>

08009778 <siprintf>:
 8009778:	b40e      	push	{r1, r2, r3}
 800977a:	b500      	push	{lr}
 800977c:	b09c      	sub	sp, #112	; 0x70
 800977e:	ab1d      	add	r3, sp, #116	; 0x74
 8009780:	9002      	str	r0, [sp, #8]
 8009782:	9006      	str	r0, [sp, #24]
 8009784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009788:	4809      	ldr	r0, [pc, #36]	; (80097b0 <siprintf+0x38>)
 800978a:	9107      	str	r1, [sp, #28]
 800978c:	9104      	str	r1, [sp, #16]
 800978e:	4909      	ldr	r1, [pc, #36]	; (80097b4 <siprintf+0x3c>)
 8009790:	f853 2b04 	ldr.w	r2, [r3], #4
 8009794:	9105      	str	r1, [sp, #20]
 8009796:	6800      	ldr	r0, [r0, #0]
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	a902      	add	r1, sp, #8
 800979c:	f000 f868 	bl	8009870 <_svfiprintf_r>
 80097a0:	9b02      	ldr	r3, [sp, #8]
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]
 80097a6:	b01c      	add	sp, #112	; 0x70
 80097a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097ac:	b003      	add	sp, #12
 80097ae:	4770      	bx	lr
 80097b0:	20000164 	.word	0x20000164
 80097b4:	ffff0208 	.word	0xffff0208

080097b8 <__ssputs_r>:
 80097b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097bc:	688e      	ldr	r6, [r1, #8]
 80097be:	429e      	cmp	r6, r3
 80097c0:	4682      	mov	sl, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	4690      	mov	r8, r2
 80097c6:	461f      	mov	r7, r3
 80097c8:	d838      	bhi.n	800983c <__ssputs_r+0x84>
 80097ca:	898a      	ldrh	r2, [r1, #12]
 80097cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097d0:	d032      	beq.n	8009838 <__ssputs_r+0x80>
 80097d2:	6825      	ldr	r5, [r4, #0]
 80097d4:	6909      	ldr	r1, [r1, #16]
 80097d6:	eba5 0901 	sub.w	r9, r5, r1
 80097da:	6965      	ldr	r5, [r4, #20]
 80097dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097e4:	3301      	adds	r3, #1
 80097e6:	444b      	add	r3, r9
 80097e8:	106d      	asrs	r5, r5, #1
 80097ea:	429d      	cmp	r5, r3
 80097ec:	bf38      	it	cc
 80097ee:	461d      	movcc	r5, r3
 80097f0:	0553      	lsls	r3, r2, #21
 80097f2:	d531      	bpl.n	8009858 <__ssputs_r+0xa0>
 80097f4:	4629      	mov	r1, r5
 80097f6:	f000 fb47 	bl	8009e88 <_malloc_r>
 80097fa:	4606      	mov	r6, r0
 80097fc:	b950      	cbnz	r0, 8009814 <__ssputs_r+0x5c>
 80097fe:	230c      	movs	r3, #12
 8009800:	f8ca 3000 	str.w	r3, [sl]
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	6921      	ldr	r1, [r4, #16]
 8009816:	464a      	mov	r2, r9
 8009818:	f000 fabe 	bl	8009d98 <memcpy>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	6126      	str	r6, [r4, #16]
 800982a:	6165      	str	r5, [r4, #20]
 800982c:	444e      	add	r6, r9
 800982e:	eba5 0509 	sub.w	r5, r5, r9
 8009832:	6026      	str	r6, [r4, #0]
 8009834:	60a5      	str	r5, [r4, #8]
 8009836:	463e      	mov	r6, r7
 8009838:	42be      	cmp	r6, r7
 800983a:	d900      	bls.n	800983e <__ssputs_r+0x86>
 800983c:	463e      	mov	r6, r7
 800983e:	4632      	mov	r2, r6
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	4641      	mov	r1, r8
 8009844:	f000 fab6 	bl	8009db4 <memmove>
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	6822      	ldr	r2, [r4, #0]
 800984c:	1b9b      	subs	r3, r3, r6
 800984e:	4432      	add	r2, r6
 8009850:	60a3      	str	r3, [r4, #8]
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	2000      	movs	r0, #0
 8009856:	e7db      	b.n	8009810 <__ssputs_r+0x58>
 8009858:	462a      	mov	r2, r5
 800985a:	f000 fb6f 	bl	8009f3c <_realloc_r>
 800985e:	4606      	mov	r6, r0
 8009860:	2800      	cmp	r0, #0
 8009862:	d1e1      	bne.n	8009828 <__ssputs_r+0x70>
 8009864:	6921      	ldr	r1, [r4, #16]
 8009866:	4650      	mov	r0, sl
 8009868:	f000 fabe 	bl	8009de8 <_free_r>
 800986c:	e7c7      	b.n	80097fe <__ssputs_r+0x46>
	...

08009870 <_svfiprintf_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	4698      	mov	r8, r3
 8009876:	898b      	ldrh	r3, [r1, #12]
 8009878:	061b      	lsls	r3, r3, #24
 800987a:	b09d      	sub	sp, #116	; 0x74
 800987c:	4607      	mov	r7, r0
 800987e:	460d      	mov	r5, r1
 8009880:	4614      	mov	r4, r2
 8009882:	d50e      	bpl.n	80098a2 <_svfiprintf_r+0x32>
 8009884:	690b      	ldr	r3, [r1, #16]
 8009886:	b963      	cbnz	r3, 80098a2 <_svfiprintf_r+0x32>
 8009888:	2140      	movs	r1, #64	; 0x40
 800988a:	f000 fafd 	bl	8009e88 <_malloc_r>
 800988e:	6028      	str	r0, [r5, #0]
 8009890:	6128      	str	r0, [r5, #16]
 8009892:	b920      	cbnz	r0, 800989e <_svfiprintf_r+0x2e>
 8009894:	230c      	movs	r3, #12
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e0d1      	b.n	8009a42 <_svfiprintf_r+0x1d2>
 800989e:	2340      	movs	r3, #64	; 0x40
 80098a0:	616b      	str	r3, [r5, #20]
 80098a2:	2300      	movs	r3, #0
 80098a4:	9309      	str	r3, [sp, #36]	; 0x24
 80098a6:	2320      	movs	r3, #32
 80098a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b0:	2330      	movs	r3, #48	; 0x30
 80098b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a5c <_svfiprintf_r+0x1ec>
 80098b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098ba:	f04f 0901 	mov.w	r9, #1
 80098be:	4623      	mov	r3, r4
 80098c0:	469a      	mov	sl, r3
 80098c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c6:	b10a      	cbz	r2, 80098cc <_svfiprintf_r+0x5c>
 80098c8:	2a25      	cmp	r2, #37	; 0x25
 80098ca:	d1f9      	bne.n	80098c0 <_svfiprintf_r+0x50>
 80098cc:	ebba 0b04 	subs.w	fp, sl, r4
 80098d0:	d00b      	beq.n	80098ea <_svfiprintf_r+0x7a>
 80098d2:	465b      	mov	r3, fp
 80098d4:	4622      	mov	r2, r4
 80098d6:	4629      	mov	r1, r5
 80098d8:	4638      	mov	r0, r7
 80098da:	f7ff ff6d 	bl	80097b8 <__ssputs_r>
 80098de:	3001      	adds	r0, #1
 80098e0:	f000 80aa 	beq.w	8009a38 <_svfiprintf_r+0x1c8>
 80098e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098e6:	445a      	add	r2, fp
 80098e8:	9209      	str	r2, [sp, #36]	; 0x24
 80098ea:	f89a 3000 	ldrb.w	r3, [sl]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 80a2 	beq.w	8009a38 <_svfiprintf_r+0x1c8>
 80098f4:	2300      	movs	r3, #0
 80098f6:	f04f 32ff 	mov.w	r2, #4294967295
 80098fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098fe:	f10a 0a01 	add.w	sl, sl, #1
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	9307      	str	r3, [sp, #28]
 8009906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800990a:	931a      	str	r3, [sp, #104]	; 0x68
 800990c:	4654      	mov	r4, sl
 800990e:	2205      	movs	r2, #5
 8009910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009914:	4851      	ldr	r0, [pc, #324]	; (8009a5c <_svfiprintf_r+0x1ec>)
 8009916:	f7f6 fc63 	bl	80001e0 <memchr>
 800991a:	9a04      	ldr	r2, [sp, #16]
 800991c:	b9d8      	cbnz	r0, 8009956 <_svfiprintf_r+0xe6>
 800991e:	06d0      	lsls	r0, r2, #27
 8009920:	bf44      	itt	mi
 8009922:	2320      	movmi	r3, #32
 8009924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009928:	0711      	lsls	r1, r2, #28
 800992a:	bf44      	itt	mi
 800992c:	232b      	movmi	r3, #43	; 0x2b
 800992e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009932:	f89a 3000 	ldrb.w	r3, [sl]
 8009936:	2b2a      	cmp	r3, #42	; 0x2a
 8009938:	d015      	beq.n	8009966 <_svfiprintf_r+0xf6>
 800993a:	9a07      	ldr	r2, [sp, #28]
 800993c:	4654      	mov	r4, sl
 800993e:	2000      	movs	r0, #0
 8009940:	f04f 0c0a 	mov.w	ip, #10
 8009944:	4621      	mov	r1, r4
 8009946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800994a:	3b30      	subs	r3, #48	; 0x30
 800994c:	2b09      	cmp	r3, #9
 800994e:	d94e      	bls.n	80099ee <_svfiprintf_r+0x17e>
 8009950:	b1b0      	cbz	r0, 8009980 <_svfiprintf_r+0x110>
 8009952:	9207      	str	r2, [sp, #28]
 8009954:	e014      	b.n	8009980 <_svfiprintf_r+0x110>
 8009956:	eba0 0308 	sub.w	r3, r0, r8
 800995a:	fa09 f303 	lsl.w	r3, r9, r3
 800995e:	4313      	orrs	r3, r2
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	46a2      	mov	sl, r4
 8009964:	e7d2      	b.n	800990c <_svfiprintf_r+0x9c>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	1d19      	adds	r1, r3, #4
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	9103      	str	r1, [sp, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	bfbb      	ittet	lt
 8009972:	425b      	neglt	r3, r3
 8009974:	f042 0202 	orrlt.w	r2, r2, #2
 8009978:	9307      	strge	r3, [sp, #28]
 800997a:	9307      	strlt	r3, [sp, #28]
 800997c:	bfb8      	it	lt
 800997e:	9204      	strlt	r2, [sp, #16]
 8009980:	7823      	ldrb	r3, [r4, #0]
 8009982:	2b2e      	cmp	r3, #46	; 0x2e
 8009984:	d10c      	bne.n	80099a0 <_svfiprintf_r+0x130>
 8009986:	7863      	ldrb	r3, [r4, #1]
 8009988:	2b2a      	cmp	r3, #42	; 0x2a
 800998a:	d135      	bne.n	80099f8 <_svfiprintf_r+0x188>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	1d1a      	adds	r2, r3, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	9203      	str	r2, [sp, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb8      	it	lt
 8009998:	f04f 33ff 	movlt.w	r3, #4294967295
 800999c:	3402      	adds	r4, #2
 800999e:	9305      	str	r3, [sp, #20]
 80099a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a6c <_svfiprintf_r+0x1fc>
 80099a4:	7821      	ldrb	r1, [r4, #0]
 80099a6:	2203      	movs	r2, #3
 80099a8:	4650      	mov	r0, sl
 80099aa:	f7f6 fc19 	bl	80001e0 <memchr>
 80099ae:	b140      	cbz	r0, 80099c2 <_svfiprintf_r+0x152>
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	eba0 000a 	sub.w	r0, r0, sl
 80099b6:	fa03 f000 	lsl.w	r0, r3, r0
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	4303      	orrs	r3, r0
 80099be:	3401      	adds	r4, #1
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c6:	4826      	ldr	r0, [pc, #152]	; (8009a60 <_svfiprintf_r+0x1f0>)
 80099c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099cc:	2206      	movs	r2, #6
 80099ce:	f7f6 fc07 	bl	80001e0 <memchr>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d038      	beq.n	8009a48 <_svfiprintf_r+0x1d8>
 80099d6:	4b23      	ldr	r3, [pc, #140]	; (8009a64 <_svfiprintf_r+0x1f4>)
 80099d8:	bb1b      	cbnz	r3, 8009a22 <_svfiprintf_r+0x1b2>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	3307      	adds	r3, #7
 80099de:	f023 0307 	bic.w	r3, r3, #7
 80099e2:	3308      	adds	r3, #8
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e8:	4433      	add	r3, r6
 80099ea:	9309      	str	r3, [sp, #36]	; 0x24
 80099ec:	e767      	b.n	80098be <_svfiprintf_r+0x4e>
 80099ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f2:	460c      	mov	r4, r1
 80099f4:	2001      	movs	r0, #1
 80099f6:	e7a5      	b.n	8009944 <_svfiprintf_r+0xd4>
 80099f8:	2300      	movs	r3, #0
 80099fa:	3401      	adds	r4, #1
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	4619      	mov	r1, r3
 8009a00:	f04f 0c0a 	mov.w	ip, #10
 8009a04:	4620      	mov	r0, r4
 8009a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0a:	3a30      	subs	r2, #48	; 0x30
 8009a0c:	2a09      	cmp	r2, #9
 8009a0e:	d903      	bls.n	8009a18 <_svfiprintf_r+0x1a8>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0c5      	beq.n	80099a0 <_svfiprintf_r+0x130>
 8009a14:	9105      	str	r1, [sp, #20]
 8009a16:	e7c3      	b.n	80099a0 <_svfiprintf_r+0x130>
 8009a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e7f0      	b.n	8009a04 <_svfiprintf_r+0x194>
 8009a22:	ab03      	add	r3, sp, #12
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	462a      	mov	r2, r5
 8009a28:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <_svfiprintf_r+0x1f8>)
 8009a2a:	a904      	add	r1, sp, #16
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f3af 8000 	nop.w
 8009a32:	1c42      	adds	r2, r0, #1
 8009a34:	4606      	mov	r6, r0
 8009a36:	d1d6      	bne.n	80099e6 <_svfiprintf_r+0x176>
 8009a38:	89ab      	ldrh	r3, [r5, #12]
 8009a3a:	065b      	lsls	r3, r3, #25
 8009a3c:	f53f af2c 	bmi.w	8009898 <_svfiprintf_r+0x28>
 8009a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a42:	b01d      	add	sp, #116	; 0x74
 8009a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a48:	ab03      	add	r3, sp, #12
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <_svfiprintf_r+0x1f8>)
 8009a50:	a904      	add	r1, sp, #16
 8009a52:	4638      	mov	r0, r7
 8009a54:	f000 f87a 	bl	8009b4c <_printf_i>
 8009a58:	e7eb      	b.n	8009a32 <_svfiprintf_r+0x1c2>
 8009a5a:	bf00      	nop
 8009a5c:	0800a0c0 	.word	0x0800a0c0
 8009a60:	0800a0ca 	.word	0x0800a0ca
 8009a64:	00000000 	.word	0x00000000
 8009a68:	080097b9 	.word	0x080097b9
 8009a6c:	0800a0c6 	.word	0x0800a0c6

08009a70 <_printf_common>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	4616      	mov	r6, r2
 8009a76:	4699      	mov	r9, r3
 8009a78:	688a      	ldr	r2, [r1, #8]
 8009a7a:	690b      	ldr	r3, [r1, #16]
 8009a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a80:	4293      	cmp	r3, r2
 8009a82:	bfb8      	it	lt
 8009a84:	4613      	movlt	r3, r2
 8009a86:	6033      	str	r3, [r6, #0]
 8009a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	b10a      	cbz	r2, 8009a96 <_printf_common+0x26>
 8009a92:	3301      	adds	r3, #1
 8009a94:	6033      	str	r3, [r6, #0]
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	0699      	lsls	r1, r3, #26
 8009a9a:	bf42      	ittt	mi
 8009a9c:	6833      	ldrmi	r3, [r6, #0]
 8009a9e:	3302      	addmi	r3, #2
 8009aa0:	6033      	strmi	r3, [r6, #0]
 8009aa2:	6825      	ldr	r5, [r4, #0]
 8009aa4:	f015 0506 	ands.w	r5, r5, #6
 8009aa8:	d106      	bne.n	8009ab8 <_printf_common+0x48>
 8009aaa:	f104 0a19 	add.w	sl, r4, #25
 8009aae:	68e3      	ldr	r3, [r4, #12]
 8009ab0:	6832      	ldr	r2, [r6, #0]
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	42ab      	cmp	r3, r5
 8009ab6:	dc26      	bgt.n	8009b06 <_printf_common+0x96>
 8009ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009abc:	1e13      	subs	r3, r2, #0
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	bf18      	it	ne
 8009ac2:	2301      	movne	r3, #1
 8009ac4:	0692      	lsls	r2, r2, #26
 8009ac6:	d42b      	bmi.n	8009b20 <_printf_common+0xb0>
 8009ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009acc:	4649      	mov	r1, r9
 8009ace:	4638      	mov	r0, r7
 8009ad0:	47c0      	blx	r8
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d01e      	beq.n	8009b14 <_printf_common+0xa4>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	68e5      	ldr	r5, [r4, #12]
 8009ada:	6832      	ldr	r2, [r6, #0]
 8009adc:	f003 0306 	and.w	r3, r3, #6
 8009ae0:	2b04      	cmp	r3, #4
 8009ae2:	bf08      	it	eq
 8009ae4:	1aad      	subeq	r5, r5, r2
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	6922      	ldr	r2, [r4, #16]
 8009aea:	bf0c      	ite	eq
 8009aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af0:	2500      	movne	r5, #0
 8009af2:	4293      	cmp	r3, r2
 8009af4:	bfc4      	itt	gt
 8009af6:	1a9b      	subgt	r3, r3, r2
 8009af8:	18ed      	addgt	r5, r5, r3
 8009afa:	2600      	movs	r6, #0
 8009afc:	341a      	adds	r4, #26
 8009afe:	42b5      	cmp	r5, r6
 8009b00:	d11a      	bne.n	8009b38 <_printf_common+0xc8>
 8009b02:	2000      	movs	r0, #0
 8009b04:	e008      	b.n	8009b18 <_printf_common+0xa8>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	47c0      	blx	r8
 8009b10:	3001      	adds	r0, #1
 8009b12:	d103      	bne.n	8009b1c <_printf_common+0xac>
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	e7c6      	b.n	8009aae <_printf_common+0x3e>
 8009b20:	18e1      	adds	r1, r4, r3
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	2030      	movs	r0, #48	; 0x30
 8009b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2a:	4422      	add	r2, r4
 8009b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b34:	3302      	adds	r3, #2
 8009b36:	e7c7      	b.n	8009ac8 <_printf_common+0x58>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	4638      	mov	r0, r7
 8009b40:	47c0      	blx	r8
 8009b42:	3001      	adds	r0, #1
 8009b44:	d0e6      	beq.n	8009b14 <_printf_common+0xa4>
 8009b46:	3601      	adds	r6, #1
 8009b48:	e7d9      	b.n	8009afe <_printf_common+0x8e>
	...

08009b4c <_printf_i>:
 8009b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b50:	460c      	mov	r4, r1
 8009b52:	4691      	mov	r9, r2
 8009b54:	7e27      	ldrb	r7, [r4, #24]
 8009b56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b58:	2f78      	cmp	r7, #120	; 0x78
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	469a      	mov	sl, r3
 8009b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b62:	d807      	bhi.n	8009b74 <_printf_i+0x28>
 8009b64:	2f62      	cmp	r7, #98	; 0x62
 8009b66:	d80a      	bhi.n	8009b7e <_printf_i+0x32>
 8009b68:	2f00      	cmp	r7, #0
 8009b6a:	f000 80d8 	beq.w	8009d1e <_printf_i+0x1d2>
 8009b6e:	2f58      	cmp	r7, #88	; 0x58
 8009b70:	f000 80a3 	beq.w	8009cba <_printf_i+0x16e>
 8009b74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b7c:	e03a      	b.n	8009bf4 <_printf_i+0xa8>
 8009b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b82:	2b15      	cmp	r3, #21
 8009b84:	d8f6      	bhi.n	8009b74 <_printf_i+0x28>
 8009b86:	a001      	add	r0, pc, #4	; (adr r0, 8009b8c <_printf_i+0x40>)
 8009b88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b8c:	08009be5 	.word	0x08009be5
 8009b90:	08009bf9 	.word	0x08009bf9
 8009b94:	08009b75 	.word	0x08009b75
 8009b98:	08009b75 	.word	0x08009b75
 8009b9c:	08009b75 	.word	0x08009b75
 8009ba0:	08009b75 	.word	0x08009b75
 8009ba4:	08009bf9 	.word	0x08009bf9
 8009ba8:	08009b75 	.word	0x08009b75
 8009bac:	08009b75 	.word	0x08009b75
 8009bb0:	08009b75 	.word	0x08009b75
 8009bb4:	08009b75 	.word	0x08009b75
 8009bb8:	08009d05 	.word	0x08009d05
 8009bbc:	08009c29 	.word	0x08009c29
 8009bc0:	08009ce7 	.word	0x08009ce7
 8009bc4:	08009b75 	.word	0x08009b75
 8009bc8:	08009b75 	.word	0x08009b75
 8009bcc:	08009d27 	.word	0x08009d27
 8009bd0:	08009b75 	.word	0x08009b75
 8009bd4:	08009c29 	.word	0x08009c29
 8009bd8:	08009b75 	.word	0x08009b75
 8009bdc:	08009b75 	.word	0x08009b75
 8009be0:	08009cef 	.word	0x08009cef
 8009be4:	680b      	ldr	r3, [r1, #0]
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	600a      	str	r2, [r1, #0]
 8009bec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e0a3      	b.n	8009d40 <_printf_i+0x1f4>
 8009bf8:	6825      	ldr	r5, [r4, #0]
 8009bfa:	6808      	ldr	r0, [r1, #0]
 8009bfc:	062e      	lsls	r6, r5, #24
 8009bfe:	f100 0304 	add.w	r3, r0, #4
 8009c02:	d50a      	bpl.n	8009c1a <_printf_i+0xce>
 8009c04:	6805      	ldr	r5, [r0, #0]
 8009c06:	600b      	str	r3, [r1, #0]
 8009c08:	2d00      	cmp	r5, #0
 8009c0a:	da03      	bge.n	8009c14 <_printf_i+0xc8>
 8009c0c:	232d      	movs	r3, #45	; 0x2d
 8009c0e:	426d      	negs	r5, r5
 8009c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c14:	485e      	ldr	r0, [pc, #376]	; (8009d90 <_printf_i+0x244>)
 8009c16:	230a      	movs	r3, #10
 8009c18:	e019      	b.n	8009c4e <_printf_i+0x102>
 8009c1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c1e:	6805      	ldr	r5, [r0, #0]
 8009c20:	600b      	str	r3, [r1, #0]
 8009c22:	bf18      	it	ne
 8009c24:	b22d      	sxthne	r5, r5
 8009c26:	e7ef      	b.n	8009c08 <_printf_i+0xbc>
 8009c28:	680b      	ldr	r3, [r1, #0]
 8009c2a:	6825      	ldr	r5, [r4, #0]
 8009c2c:	1d18      	adds	r0, r3, #4
 8009c2e:	6008      	str	r0, [r1, #0]
 8009c30:	0628      	lsls	r0, r5, #24
 8009c32:	d501      	bpl.n	8009c38 <_printf_i+0xec>
 8009c34:	681d      	ldr	r5, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <_printf_i+0xf2>
 8009c38:	0669      	lsls	r1, r5, #25
 8009c3a:	d5fb      	bpl.n	8009c34 <_printf_i+0xe8>
 8009c3c:	881d      	ldrh	r5, [r3, #0]
 8009c3e:	4854      	ldr	r0, [pc, #336]	; (8009d90 <_printf_i+0x244>)
 8009c40:	2f6f      	cmp	r7, #111	; 0x6f
 8009c42:	bf0c      	ite	eq
 8009c44:	2308      	moveq	r3, #8
 8009c46:	230a      	movne	r3, #10
 8009c48:	2100      	movs	r1, #0
 8009c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c4e:	6866      	ldr	r6, [r4, #4]
 8009c50:	60a6      	str	r6, [r4, #8]
 8009c52:	2e00      	cmp	r6, #0
 8009c54:	bfa2      	ittt	ge
 8009c56:	6821      	ldrge	r1, [r4, #0]
 8009c58:	f021 0104 	bicge.w	r1, r1, #4
 8009c5c:	6021      	strge	r1, [r4, #0]
 8009c5e:	b90d      	cbnz	r5, 8009c64 <_printf_i+0x118>
 8009c60:	2e00      	cmp	r6, #0
 8009c62:	d04d      	beq.n	8009d00 <_printf_i+0x1b4>
 8009c64:	4616      	mov	r6, r2
 8009c66:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c6a:	fb03 5711 	mls	r7, r3, r1, r5
 8009c6e:	5dc7      	ldrb	r7, [r0, r7]
 8009c70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c74:	462f      	mov	r7, r5
 8009c76:	42bb      	cmp	r3, r7
 8009c78:	460d      	mov	r5, r1
 8009c7a:	d9f4      	bls.n	8009c66 <_printf_i+0x11a>
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d10b      	bne.n	8009c98 <_printf_i+0x14c>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	07df      	lsls	r7, r3, #31
 8009c84:	d508      	bpl.n	8009c98 <_printf_i+0x14c>
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	6861      	ldr	r1, [r4, #4]
 8009c8a:	4299      	cmp	r1, r3
 8009c8c:	bfde      	ittt	le
 8009c8e:	2330      	movle	r3, #48	; 0x30
 8009c90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c98:	1b92      	subs	r2, r2, r6
 8009c9a:	6122      	str	r2, [r4, #16]
 8009c9c:	f8cd a000 	str.w	sl, [sp]
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	aa03      	add	r2, sp, #12
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f7ff fee2 	bl	8009a70 <_printf_common>
 8009cac:	3001      	adds	r0, #1
 8009cae:	d14c      	bne.n	8009d4a <_printf_i+0x1fe>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	b004      	add	sp, #16
 8009cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cba:	4835      	ldr	r0, [pc, #212]	; (8009d90 <_printf_i+0x244>)
 8009cbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	680e      	ldr	r6, [r1, #0]
 8009cc4:	061f      	lsls	r7, r3, #24
 8009cc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cca:	600e      	str	r6, [r1, #0]
 8009ccc:	d514      	bpl.n	8009cf8 <_printf_i+0x1ac>
 8009cce:	07d9      	lsls	r1, r3, #31
 8009cd0:	bf44      	itt	mi
 8009cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8009cd6:	6023      	strmi	r3, [r4, #0]
 8009cd8:	b91d      	cbnz	r5, 8009ce2 <_printf_i+0x196>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	f023 0320 	bic.w	r3, r3, #32
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	2310      	movs	r3, #16
 8009ce4:	e7b0      	b.n	8009c48 <_printf_i+0xfc>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	f043 0320 	orr.w	r3, r3, #32
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	2378      	movs	r3, #120	; 0x78
 8009cf0:	4828      	ldr	r0, [pc, #160]	; (8009d94 <_printf_i+0x248>)
 8009cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cf6:	e7e3      	b.n	8009cc0 <_printf_i+0x174>
 8009cf8:	065e      	lsls	r6, r3, #25
 8009cfa:	bf48      	it	mi
 8009cfc:	b2ad      	uxthmi	r5, r5
 8009cfe:	e7e6      	b.n	8009cce <_printf_i+0x182>
 8009d00:	4616      	mov	r6, r2
 8009d02:	e7bb      	b.n	8009c7c <_printf_i+0x130>
 8009d04:	680b      	ldr	r3, [r1, #0]
 8009d06:	6826      	ldr	r6, [r4, #0]
 8009d08:	6960      	ldr	r0, [r4, #20]
 8009d0a:	1d1d      	adds	r5, r3, #4
 8009d0c:	600d      	str	r5, [r1, #0]
 8009d0e:	0635      	lsls	r5, r6, #24
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	d501      	bpl.n	8009d18 <_printf_i+0x1cc>
 8009d14:	6018      	str	r0, [r3, #0]
 8009d16:	e002      	b.n	8009d1e <_printf_i+0x1d2>
 8009d18:	0671      	lsls	r1, r6, #25
 8009d1a:	d5fb      	bpl.n	8009d14 <_printf_i+0x1c8>
 8009d1c:	8018      	strh	r0, [r3, #0]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	4616      	mov	r6, r2
 8009d24:	e7ba      	b.n	8009c9c <_printf_i+0x150>
 8009d26:	680b      	ldr	r3, [r1, #0]
 8009d28:	1d1a      	adds	r2, r3, #4
 8009d2a:	600a      	str	r2, [r1, #0]
 8009d2c:	681e      	ldr	r6, [r3, #0]
 8009d2e:	6862      	ldr	r2, [r4, #4]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7f6 fa54 	bl	80001e0 <memchr>
 8009d38:	b108      	cbz	r0, 8009d3e <_printf_i+0x1f2>
 8009d3a:	1b80      	subs	r0, r0, r6
 8009d3c:	6060      	str	r0, [r4, #4]
 8009d3e:	6863      	ldr	r3, [r4, #4]
 8009d40:	6123      	str	r3, [r4, #16]
 8009d42:	2300      	movs	r3, #0
 8009d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d48:	e7a8      	b.n	8009c9c <_printf_i+0x150>
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	4632      	mov	r2, r6
 8009d4e:	4649      	mov	r1, r9
 8009d50:	4640      	mov	r0, r8
 8009d52:	47d0      	blx	sl
 8009d54:	3001      	adds	r0, #1
 8009d56:	d0ab      	beq.n	8009cb0 <_printf_i+0x164>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	079b      	lsls	r3, r3, #30
 8009d5c:	d413      	bmi.n	8009d86 <_printf_i+0x23a>
 8009d5e:	68e0      	ldr	r0, [r4, #12]
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	4298      	cmp	r0, r3
 8009d64:	bfb8      	it	lt
 8009d66:	4618      	movlt	r0, r3
 8009d68:	e7a4      	b.n	8009cb4 <_printf_i+0x168>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4632      	mov	r2, r6
 8009d6e:	4649      	mov	r1, r9
 8009d70:	4640      	mov	r0, r8
 8009d72:	47d0      	blx	sl
 8009d74:	3001      	adds	r0, #1
 8009d76:	d09b      	beq.n	8009cb0 <_printf_i+0x164>
 8009d78:	3501      	adds	r5, #1
 8009d7a:	68e3      	ldr	r3, [r4, #12]
 8009d7c:	9903      	ldr	r1, [sp, #12]
 8009d7e:	1a5b      	subs	r3, r3, r1
 8009d80:	42ab      	cmp	r3, r5
 8009d82:	dcf2      	bgt.n	8009d6a <_printf_i+0x21e>
 8009d84:	e7eb      	b.n	8009d5e <_printf_i+0x212>
 8009d86:	2500      	movs	r5, #0
 8009d88:	f104 0619 	add.w	r6, r4, #25
 8009d8c:	e7f5      	b.n	8009d7a <_printf_i+0x22e>
 8009d8e:	bf00      	nop
 8009d90:	0800a0d1 	.word	0x0800a0d1
 8009d94:	0800a0e2 	.word	0x0800a0e2

08009d98 <memcpy>:
 8009d98:	440a      	add	r2, r1
 8009d9a:	4291      	cmp	r1, r2
 8009d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009da0:	d100      	bne.n	8009da4 <memcpy+0xc>
 8009da2:	4770      	bx	lr
 8009da4:	b510      	push	{r4, lr}
 8009da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dae:	4291      	cmp	r1, r2
 8009db0:	d1f9      	bne.n	8009da6 <memcpy+0xe>
 8009db2:	bd10      	pop	{r4, pc}

08009db4 <memmove>:
 8009db4:	4288      	cmp	r0, r1
 8009db6:	b510      	push	{r4, lr}
 8009db8:	eb01 0402 	add.w	r4, r1, r2
 8009dbc:	d902      	bls.n	8009dc4 <memmove+0x10>
 8009dbe:	4284      	cmp	r4, r0
 8009dc0:	4623      	mov	r3, r4
 8009dc2:	d807      	bhi.n	8009dd4 <memmove+0x20>
 8009dc4:	1e43      	subs	r3, r0, #1
 8009dc6:	42a1      	cmp	r1, r4
 8009dc8:	d008      	beq.n	8009ddc <memmove+0x28>
 8009dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dd2:	e7f8      	b.n	8009dc6 <memmove+0x12>
 8009dd4:	4402      	add	r2, r0
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	428a      	cmp	r2, r1
 8009dda:	d100      	bne.n	8009dde <memmove+0x2a>
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009de6:	e7f7      	b.n	8009dd8 <memmove+0x24>

08009de8 <_free_r>:
 8009de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dea:	2900      	cmp	r1, #0
 8009dec:	d048      	beq.n	8009e80 <_free_r+0x98>
 8009dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df2:	9001      	str	r0, [sp, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dfa:	bfb8      	it	lt
 8009dfc:	18e4      	addlt	r4, r4, r3
 8009dfe:	f000 f8d3 	bl	8009fa8 <__malloc_lock>
 8009e02:	4a20      	ldr	r2, [pc, #128]	; (8009e84 <_free_r+0x9c>)
 8009e04:	9801      	ldr	r0, [sp, #4]
 8009e06:	6813      	ldr	r3, [r2, #0]
 8009e08:	4615      	mov	r5, r2
 8009e0a:	b933      	cbnz	r3, 8009e1a <_free_r+0x32>
 8009e0c:	6063      	str	r3, [r4, #4]
 8009e0e:	6014      	str	r4, [r2, #0]
 8009e10:	b003      	add	sp, #12
 8009e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e16:	f000 b8cd 	b.w	8009fb4 <__malloc_unlock>
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	d90b      	bls.n	8009e36 <_free_r+0x4e>
 8009e1e:	6821      	ldr	r1, [r4, #0]
 8009e20:	1862      	adds	r2, r4, r1
 8009e22:	4293      	cmp	r3, r2
 8009e24:	bf04      	itt	eq
 8009e26:	681a      	ldreq	r2, [r3, #0]
 8009e28:	685b      	ldreq	r3, [r3, #4]
 8009e2a:	6063      	str	r3, [r4, #4]
 8009e2c:	bf04      	itt	eq
 8009e2e:	1852      	addeq	r2, r2, r1
 8009e30:	6022      	streq	r2, [r4, #0]
 8009e32:	602c      	str	r4, [r5, #0]
 8009e34:	e7ec      	b.n	8009e10 <_free_r+0x28>
 8009e36:	461a      	mov	r2, r3
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	b10b      	cbz	r3, 8009e40 <_free_r+0x58>
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	d9fa      	bls.n	8009e36 <_free_r+0x4e>
 8009e40:	6811      	ldr	r1, [r2, #0]
 8009e42:	1855      	adds	r5, r2, r1
 8009e44:	42a5      	cmp	r5, r4
 8009e46:	d10b      	bne.n	8009e60 <_free_r+0x78>
 8009e48:	6824      	ldr	r4, [r4, #0]
 8009e4a:	4421      	add	r1, r4
 8009e4c:	1854      	adds	r4, r2, r1
 8009e4e:	42a3      	cmp	r3, r4
 8009e50:	6011      	str	r1, [r2, #0]
 8009e52:	d1dd      	bne.n	8009e10 <_free_r+0x28>
 8009e54:	681c      	ldr	r4, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	6053      	str	r3, [r2, #4]
 8009e5a:	4421      	add	r1, r4
 8009e5c:	6011      	str	r1, [r2, #0]
 8009e5e:	e7d7      	b.n	8009e10 <_free_r+0x28>
 8009e60:	d902      	bls.n	8009e68 <_free_r+0x80>
 8009e62:	230c      	movs	r3, #12
 8009e64:	6003      	str	r3, [r0, #0]
 8009e66:	e7d3      	b.n	8009e10 <_free_r+0x28>
 8009e68:	6825      	ldr	r5, [r4, #0]
 8009e6a:	1961      	adds	r1, r4, r5
 8009e6c:	428b      	cmp	r3, r1
 8009e6e:	bf04      	itt	eq
 8009e70:	6819      	ldreq	r1, [r3, #0]
 8009e72:	685b      	ldreq	r3, [r3, #4]
 8009e74:	6063      	str	r3, [r4, #4]
 8009e76:	bf04      	itt	eq
 8009e78:	1949      	addeq	r1, r1, r5
 8009e7a:	6021      	streq	r1, [r4, #0]
 8009e7c:	6054      	str	r4, [r2, #4]
 8009e7e:	e7c7      	b.n	8009e10 <_free_r+0x28>
 8009e80:	b003      	add	sp, #12
 8009e82:	bd30      	pop	{r4, r5, pc}
 8009e84:	20000330 	.word	0x20000330

08009e88 <_malloc_r>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	1ccd      	adds	r5, r1, #3
 8009e8c:	f025 0503 	bic.w	r5, r5, #3
 8009e90:	3508      	adds	r5, #8
 8009e92:	2d0c      	cmp	r5, #12
 8009e94:	bf38      	it	cc
 8009e96:	250c      	movcc	r5, #12
 8009e98:	2d00      	cmp	r5, #0
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	db01      	blt.n	8009ea2 <_malloc_r+0x1a>
 8009e9e:	42a9      	cmp	r1, r5
 8009ea0:	d903      	bls.n	8009eaa <_malloc_r+0x22>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	6033      	str	r3, [r6, #0]
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eaa:	f000 f87d 	bl	8009fa8 <__malloc_lock>
 8009eae:	4921      	ldr	r1, [pc, #132]	; (8009f34 <_malloc_r+0xac>)
 8009eb0:	680a      	ldr	r2, [r1, #0]
 8009eb2:	4614      	mov	r4, r2
 8009eb4:	b99c      	cbnz	r4, 8009ede <_malloc_r+0x56>
 8009eb6:	4f20      	ldr	r7, [pc, #128]	; (8009f38 <_malloc_r+0xb0>)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	b923      	cbnz	r3, 8009ec6 <_malloc_r+0x3e>
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f000 f862 	bl	8009f88 <_sbrk_r>
 8009ec4:	6038      	str	r0, [r7, #0]
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f000 f85d 	bl	8009f88 <_sbrk_r>
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	d123      	bne.n	8009f1a <_malloc_r+0x92>
 8009ed2:	230c      	movs	r3, #12
 8009ed4:	6033      	str	r3, [r6, #0]
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f000 f86c 	bl	8009fb4 <__malloc_unlock>
 8009edc:	e7e3      	b.n	8009ea6 <_malloc_r+0x1e>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	1b5b      	subs	r3, r3, r5
 8009ee2:	d417      	bmi.n	8009f14 <_malloc_r+0x8c>
 8009ee4:	2b0b      	cmp	r3, #11
 8009ee6:	d903      	bls.n	8009ef0 <_malloc_r+0x68>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	441c      	add	r4, r3
 8009eec:	6025      	str	r5, [r4, #0]
 8009eee:	e004      	b.n	8009efa <_malloc_r+0x72>
 8009ef0:	6863      	ldr	r3, [r4, #4]
 8009ef2:	42a2      	cmp	r2, r4
 8009ef4:	bf0c      	ite	eq
 8009ef6:	600b      	streq	r3, [r1, #0]
 8009ef8:	6053      	strne	r3, [r2, #4]
 8009efa:	4630      	mov	r0, r6
 8009efc:	f000 f85a 	bl	8009fb4 <__malloc_unlock>
 8009f00:	f104 000b 	add.w	r0, r4, #11
 8009f04:	1d23      	adds	r3, r4, #4
 8009f06:	f020 0007 	bic.w	r0, r0, #7
 8009f0a:	1ac2      	subs	r2, r0, r3
 8009f0c:	d0cc      	beq.n	8009ea8 <_malloc_r+0x20>
 8009f0e:	1a1b      	subs	r3, r3, r0
 8009f10:	50a3      	str	r3, [r4, r2]
 8009f12:	e7c9      	b.n	8009ea8 <_malloc_r+0x20>
 8009f14:	4622      	mov	r2, r4
 8009f16:	6864      	ldr	r4, [r4, #4]
 8009f18:	e7cc      	b.n	8009eb4 <_malloc_r+0x2c>
 8009f1a:	1cc4      	adds	r4, r0, #3
 8009f1c:	f024 0403 	bic.w	r4, r4, #3
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	d0e3      	beq.n	8009eec <_malloc_r+0x64>
 8009f24:	1a21      	subs	r1, r4, r0
 8009f26:	4630      	mov	r0, r6
 8009f28:	f000 f82e 	bl	8009f88 <_sbrk_r>
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d1dd      	bne.n	8009eec <_malloc_r+0x64>
 8009f30:	e7cf      	b.n	8009ed2 <_malloc_r+0x4a>
 8009f32:	bf00      	nop
 8009f34:	20000330 	.word	0x20000330
 8009f38:	20000334 	.word	0x20000334

08009f3c <_realloc_r>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	4607      	mov	r7, r0
 8009f40:	4614      	mov	r4, r2
 8009f42:	460e      	mov	r6, r1
 8009f44:	b921      	cbnz	r1, 8009f50 <_realloc_r+0x14>
 8009f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	f7ff bf9c 	b.w	8009e88 <_malloc_r>
 8009f50:	b922      	cbnz	r2, 8009f5c <_realloc_r+0x20>
 8009f52:	f7ff ff49 	bl	8009de8 <_free_r>
 8009f56:	4625      	mov	r5, r4
 8009f58:	4628      	mov	r0, r5
 8009f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f5c:	f000 f830 	bl	8009fc0 <_malloc_usable_size_r>
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d20f      	bcs.n	8009f84 <_realloc_r+0x48>
 8009f64:	4621      	mov	r1, r4
 8009f66:	4638      	mov	r0, r7
 8009f68:	f7ff ff8e 	bl	8009e88 <_malloc_r>
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d0f2      	beq.n	8009f58 <_realloc_r+0x1c>
 8009f72:	4631      	mov	r1, r6
 8009f74:	4622      	mov	r2, r4
 8009f76:	f7ff ff0f 	bl	8009d98 <memcpy>
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f7ff ff33 	bl	8009de8 <_free_r>
 8009f82:	e7e9      	b.n	8009f58 <_realloc_r+0x1c>
 8009f84:	4635      	mov	r5, r6
 8009f86:	e7e7      	b.n	8009f58 <_realloc_r+0x1c>

08009f88 <_sbrk_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d06      	ldr	r5, [pc, #24]	; (8009fa4 <_sbrk_r+0x1c>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	602b      	str	r3, [r5, #0]
 8009f94:	f7f6 ff8e 	bl	8000eb4 <_sbrk>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_sbrk_r+0x1a>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_sbrk_r+0x1a>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	200004cc 	.word	0x200004cc

08009fa8 <__malloc_lock>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__malloc_lock+0x8>)
 8009faa:	f000 b811 	b.w	8009fd0 <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	200004d4 	.word	0x200004d4

08009fb4 <__malloc_unlock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_unlock+0x8>)
 8009fb6:	f000 b80c 	b.w	8009fd2 <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	200004d4 	.word	0x200004d4

08009fc0 <_malloc_usable_size_r>:
 8009fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc4:	1f18      	subs	r0, r3, #4
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bfbc      	itt	lt
 8009fca:	580b      	ldrlt	r3, [r1, r0]
 8009fcc:	18c0      	addlt	r0, r0, r3
 8009fce:	4770      	bx	lr

08009fd0 <__retarget_lock_acquire_recursive>:
 8009fd0:	4770      	bx	lr

08009fd2 <__retarget_lock_release_recursive>:
 8009fd2:	4770      	bx	lr

08009fd4 <_init>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr

08009fe0 <_fini>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	bf00      	nop
 8009fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe6:	bc08      	pop	{r3}
 8009fe8:	469e      	mov	lr, r3
 8009fea:	4770      	bx	lr
